{"version":3,"file":"ocharts.js","mappings":"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","sources":["webpack://charts/./src/Animations.ts","webpack://charts/./src/Helper.ts","webpack://charts/./src/types/TooltipValue.ts","webpack://charts/./src/helpers/Errors.ts","webpack://charts/./src/Chart.ts","webpack://charts/./src/types/Color.ts","webpack://charts/./src/static/constants/Animations.ts","webpack://charts/./src/types/Sector.ts","webpack://charts/./src/static/TextResources.ts","webpack://charts/./src/helpers/Canvas.ts","webpack://charts/./src/Tooltip.ts","webpack://charts/./src/static/ThemeOptions.ts","webpack://charts/./src/types/DrawPoint.ts","webpack://charts/./src/types/data/PlotData.ts","webpack://charts/./src/static/constants/Styles.ts","webpack://charts/./src/Dropdown.ts","webpack://charts/./src/Theme.ts","webpack://charts/./src/render/CircularRenderer.ts","webpack://charts/./src/types/base/Renderer.ts","webpack://charts/./src/types/data/TreeData.ts","webpack://charts/./src/types/data/CircularData.ts","webpack://charts/./src/types/base/Value.ts","webpack://charts/./src/render/PlotRenderer.ts","webpack://charts/./src/static/constants/Dates.ts","webpack://charts/./src/helpers/TextStyles.ts","webpack://charts/./src/types/base/Renderable.ts","webpack://charts/./src/render/TreeRenderer.ts","webpack://charts/./src/Decomposition.ts","webpack://charts/./src/static/constants/Index.ts","webpack://charts/./src/render/GaugeRenderer.ts","webpack://charts/./src/Export.ts","webpack://charts/./src/helpers/Formatter.ts","webpack://charts/./src/Button.ts","webpack://charts/./src/static/Enums.ts","webpack://charts/./src/Modal.ts","webpack://charts/./src/types/PlotSeries.ts","webpack://charts/./src/Legend.ts","webpack://charts/./src/static/constants/Values.ts","webpack://charts/webpack/bootstrap","webpack://charts/./src/Prototypes.ts","webpack://charts/./src/OCharts.ts"],"sourcesContent":["import { AnimationItem } from 'types/AnimationItem'\nimport { AnimationType } from 'static/Enums'\nimport * as Constants from 'static/constants/Index'\n\nexport class Animations {\n    #queue: Map<string, AnimationItem>\n\n    static transitionCurve: Map<number, number> = new Map()\n\n    constructor() {\n        this.#queue = new Map()\n    }\n\n    handle(id: string, type: AnimationType, value: AnimationItem) {\n        const key = this.#getKey(id, type)\n        if (!this.#queue.has(key))\n            this.#queue.set(key, value)\n\n        this.#process(key)\n    }\n\n    contains(id: string, type: AnimationType): boolean {\n        return this.#queue.has(this.#getKey(id, type))\n    }\n\n    reload(id: string, type: AnimationType) {\n        if (this.contains(id, type)) {\n            let item = <AnimationItem>this.#queue.get(this.#getKey(id, type))\n\n            item.timer = new Date()\n        }\n    }\n\n    clear() {\n        this.#queue.forEach((_value, key) => !this.#is(key, AnimationType.Init) && this.#queue.delete(key))\n    }\n\n    reverse(id: string, type: AnimationType) {\n        if (this.contains(id, type)) {\n            let item = <AnimationItem>this.#queue.get(this.#getKey(id, type)),\n                stamp = new Date(),\n                passed = stamp.getTime() - (item.timer ?? stamp).getTime()\n\n            let reversedPassed = passed > item.duration ? 1 : item.duration - passed\n\n            item.timer = new Date(new Date().getTime() - reversedPassed)\n            item.backward = !item.backward\n        }\n    }\n\n    isBackward(id: string, type: AnimationType) {\n        return (this.#queue.get(this.#getKey(id, type)) as AnimationItem)?.backward ?? false\n    }\n\n    isEnd(id: string, type: AnimationType) {\n        let item = <AnimationItem>this.#queue.get(this.#getKey(id, type)),\n            stamp = new Date(),\n            passed = stamp.getTime() - (item.timer ?? stamp).getTime()\n\n        return passed >= item.duration\n    }\n\n    end(id: string, type: AnimationType) {\n        let item = <AnimationItem>this.#queue.get(this.#getKey(id, type))\n\n        if (item)\n            item.timer = Constants.Dates.minDate\n    }\n\n    #process(key: string) {\n        const item = <AnimationItem>this.#queue.get(key),\n            stamp = new Date(),\n            passed = stamp.getTime() - (item.timer ?? stamp).getTime(),\n            transition = Animations.getTransition(passed > item.duration ? 1 : passed / item.duration),\n            before = item.before ? item.before() : true\n\n        if (!item.timer && before)\n            item.timer = stamp\n\n        if (before)\n            item.body(item.backward ? 1 - transition : transition)\n\n        if (transition == 1 && (!before || item.continuous))\n            this.#queue.delete(key)\n    }\n\n    #getKey(id: string, type: number) {\n        return id + '_' + type\n    }\n\n    #is(key: string, type: number) {\n        return key.endsWith('_' + type)\n    }\n\n    static initializeTransitions() {\n        const valuesCount = 22820,\n            offset = .23,\n            p0 = { x: 0, y: 0 },\n            p1 = { x: 1 - offset, y: offset },\n            p2 = { x: offset, y: 1 - offset },\n            p3 = { x: 1, y: 1 }\n\n        for (let i = 0; i < valuesCount; i++) {\n            const t = (i + 1) / valuesCount\n\n            let x = Math.pow(1 - t, 3) * p0.x\n                    + 3 * Math.pow(1 - t, 2) * p1.x * t\n                    + 3 * (1 - t) * Math.pow(t, 2) * p2.x\n                    + Math.pow(t, 3) * p3.x,\n                y = Math.pow(1 - t, 3) * p0.y\n                    + 3 * Math.pow(1 - t, 2) * p1.y * t\n                    + 3 * (1 - t) * Math.pow(t, 2) * p2.y\n                    + Math.pow(t, 3) * p3.y\n\n            Animations.transitionCurve.set(+x.toFixed(4), y)\n        }\n\n        Animations.transitionCurve.set(0, 0)\n    }\n\n    static getTransition(value: number): number {\n        return Animations.transitionCurve.get(+value.toFixed(4)) ?? 0\n    }\n}","import { Color } from 'types/Color'\nimport { Theme } from 'Theme'\n\nexport function adjustColor(color: string, amount: number) {\n    return '#' + color.replace(/^#/, '').replace(/../g, color => ('0' + Math.min(255, Math.max(0, parseInt(color, 16) + amount)).toString(16)).slice(-2))\n}\n\nexport function grayScale(color: string) {\n    return '#' + Array(4).join(Math.round([.3, .59, .11].reduce((a, v, i) => a + v * parseInt(color[2 * i + 1] + color[2 * i + 2], 16), 0) / 3).toString(16).padStart(2, '0'))\n}\n\nexport function randomColor() {\n    let letters = '0123456789ABCDEF',\n        color = '#'\n    for (let i = 0; i < 6; i++)\n        color += letters[Math.floor(Math.random() * 16)]\n\n    return color\n}\n\nexport function stringWidth(str: any | undefined, font?: number) {\n    if (!str)\n        return 0\n\n    const widths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.559375, 0.2765625, 0.3546875, 0.5546875, 0.5546875, 0.8890625, 0.665625, 0.190625, 0.3328125, 0.3328125, 0.3890625, 0.5828125, 0.2765625, 0.3328125, 0.2765625, 0.3015625, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.2765625, 0.2765625, 0.584375, 0.5828125, 0.584375, 0.5546875, 1.0140625, 0.665625, 0.665625, 0.721875, 0.721875, 0.665625, 0.609375, 0.7765625, 0.721875, 0.2765625, 0.5, 0.665625, 0.5546875, 0.8328125, 0.721875, 0.7765625, 0.665625, 0.7765625, 0.721875, 0.665625, 0.609375, 0.721875, 0.665625, 0.94375, 0.665625, 0.665625, 0.609375, 0.2765625, 0.3546875, 0.2765625, 0.4765625, 0.5546875, 0.3328125, 0.5546875, 0.5546875, 0.5, 0.5546875, 0.5546875, 0.2765625, 0.5546875, 0.5546875, 0.221875, 0.240625, 0.5, 0.221875, 0.8328125, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.3328125, 0.5, 0.2765625, 0.5546875, 0.5, 0.721875, 0.5, 0.5, 0.5, 0.3546875, 0.259375, 0.353125, 0.5890625],\n        avg = 0.5279276315789471\n\n    return Array.from(String(str)).reduce((acc, cur) => acc + (widths[cur.charCodeAt(0)] ?? avg), 0) * (font || 14)\n}\n\nexport function guid() {\n    const S4 = () => (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1)\n    return (S4() + S4() + '-' + S4() + '-4' + S4().slice(0, 3) + '-' + S4() + '-' + S4() + S4() + S4()).toLowerCase()\n}\n\nexport function isColorVisible(background: string, foreground: string) {\n    const backgroundAsRgb = hexToRgb(background),\n        foregroundAsRgb = hexToRgb(foreground),\n        value = .77\n\n    return (backgroundAsRgb.r + backgroundAsRgb.g + backgroundAsRgb.b) / (foregroundAsRgb.r + foregroundAsRgb.g + foregroundAsRgb.b) < value\n}\n\nexport function hexToRgb(hex: string): Color {\n    if (hex.length > 4) {\n        const value = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n        if (value)\n            return {\n                r: parseInt(value[1], 16),\n                g: parseInt(value[2], 16),\n                b: parseInt(value[3], 16)\n            }\n    } else {\n        const value = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i.exec(hex)\n        if (value)\n            return {\n                r: parseInt(value[1] + value[1], 16),\n                g: parseInt(value[2] + value[2], 16),\n                b: parseInt(value[3] + value[3], 16)\n            }\n    }\n\n    return new Color()\n}\n\nexport function isISOString(str: string) {\n    return /\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+/.test(str)\n}\n\nexport function applyAlpha(color: string, opacity: number) {\n    function hexToRgb(hex: string) {\n        let result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n        return result\n               ? {\n                   r: parseInt(result[1], 16),\n                   g: parseInt(result[2], 16),\n                   b: parseInt(result[3], 16)\n               } as Color\n               : {\n                   r: 0,\n                   g: 0,\n                   b: 0\n               } as Color\n    }\n\n    function componentToHex(c: number) {\n        let hex = c.toString(16)\n        return hex.length == 1 ? '0' + hex : hex\n    }\n\n    function rgbToHex(r: number, g: number, b: number) {\n        return '#' + componentToHex(r) + componentToHex(g) + componentToHex(b)\n    }\n\n    const rgb = hexToRgb(color),\n        bg = hexToRgb(Theme.canvasBackground)\n\n    opacity /= 255\n\n    const alpha = 1 - opacity\n\n    return rgbToHex(\n        Math.round((opacity * (rgb.r / 255) + (alpha * (bg.r / 255))) * 255),\n        Math.round((opacity * (rgb.g / 255) + (alpha * (bg.g / 255))) * 255),\n        Math.round((opacity * (rgb.b / 255) + (alpha * (bg.b / 255))) * 255)\n    )\n}","export class TooltipValue {\n    text: string | undefined\n\n    color: string | undefined\n\n    constructor(text?: string, color?: string) {\n        this.text = text\n        this.color = color\n    }\n}","import { ErrorType } from 'static/Enums'\n\nexport abstract class Errors {\n    static throw(error: ErrorType): never {\n        throw new Error(error)\n    }\n\n    static throwIsUndefined(object: any, error: ErrorType) {\n        if (object == undefined)\n            Errors.throw(error)\n    }\n}","import { ChartSettings } from 'types/ChartSettings'\nimport { Renderer } from 'types/base/Renderer'\nimport { Data } from 'types/interfaces/Data'\nimport { Legend } from 'Legend'\nimport { Value } from 'types/base/Value'\nimport { PlotRenderer } from 'render/PlotRenderer'\nimport { GaugeRenderer } from 'render/GaugeRenderer'\nimport { TreeRenderer } from 'render/TreeRenderer'\nimport { Animations } from 'Animations'\nimport { Theme } from 'Theme'\nimport { Styles } from 'static/constants/Styles'\nimport { ChartType, Events } from 'static/Enums'\nimport { CircularRenderer } from 'render/CircularRenderer'\n\nexport class Chart {\n    node: HTMLElement\n\n    settings: ChartSettings\n\n    #renderer: Renderer<Data>\n\n    #legend: Legend | undefined\n\n    #observer: ResizeObserver\n\n    #currentType: ChartType\n\n    constructor(context: HTMLElement, settings: ChartSettings) {\n        this.node = context\n\n        this.applySettings(settings)\n\n        this.#applyStyles()\n\n        document.addEventListener(Events.VisibilityChanged, () => this.#renderer.resetMouse())\n        window.addEventListener(Events.Blur, () => this.#renderer.resetMouse())\n\n        window.addEventListener(Events.Click, event => {\n            if (event.target != this.#renderer.canvas)\n                this.#renderer.closeDropdowns()\n        })\n    }\n\n    render() {\n        this.#renderer.render()\n        this.#legend?.render()\n\n        this.#initializeObserver()\n\n        this.#refresh()\n    }\n\n    destroy() {\n        this.#renderer.destroy()\n        this.#legend?.destroy()\n\n        this.#observer.disconnect()\n    }\n\n    highlight(value?: Value) {\n        this.#renderer.highlight(value)\n    }\n\n    reset() {\n        Theme.reset()\n\n        this.#initialize(this.settings)\n    }\n\n    applySettings(settings: ChartSettings) {\n        this.settings = settings\n\n        this.reset()\n\n        const isNeedRestartRender = this.settings.type != this.#currentType\n\n        this.#prepareSettings()\n\n        if (this.settings.enableLegend && this.#legend != undefined)\n            this.#legend.applySettings(settings)\n\n        if (this.settings.enableLegend && this.#legend == undefined) {\n            this.#legend = new Legend(this)\n\n            this.#legend.render()\n        }\n\n        if (!this.settings.enableLegend && this.#legend != undefined) {\n            this.#legend.destroy()\n\n            this.#legend = undefined\n        }\n\n        if (isNeedRestartRender)\n            this.#renderer.render()\n\n        this.#initializeObserver()\n    }\n\n    #prepareSettings() {\n        this.settings.enableTooltip = !this.settings.disableInteractions && this.settings.enableTooltip\n\n        if (this.#renderer == undefined || this.settings.type != this.#currentType) {\n            this.#renderer?.destroy()\n\n            switch (this.settings.type) {\n                case ChartType.Plot:\n                    this.#renderer = new PlotRenderer(this)\n                    this.#currentType = ChartType.Plot\n                    break\n\n                case ChartType.Circular:\n                    this.#renderer = new CircularRenderer(this)\n                    this.#currentType = ChartType.Circular\n                    break\n\n                case ChartType.Gauge:\n                    this.#renderer = new GaugeRenderer(this)\n                    this.#currentType = ChartType.Gauge\n                    break\n\n                case ChartType.TreeMap:\n                    this.#renderer = new TreeRenderer(this)\n                    this.#currentType = ChartType.TreeMap\n                    break\n            }\n        } else {\n            this.#renderer.applySettings(this.settings)\n        }\n\n        this.#renderer.prepareSettings()\n\n        if (!this.settings.disableInteractions) {\n            this.#renderer.initDropdown()\n            this.#renderer.initAnimations()\n        }\n\n        this.#renderer.resize()\n    }\n\n    #refresh() {\n        this.#renderer.refresh()\n        this.#legend?.refresh()\n    }\n\n    #resize() {\n        this.#renderer.resize()\n        this.#legend?.resize()\n    }\n\n    #initialize(settings: ChartSettings) {\n        Theme.initialize(\n            () => this.#resize(),\n            settings.isDarkThemeFunction\n        )\n        Animations.initializeTransitions()\n    }\n\n    #applyStyles() {\n        this.node.style.display = Styles.Display.Flex\n        this.node.style.flexDirection = Styles.FlexDirection.Column\n        this.node.style.alignItems = Styles.AlignItems.Center\n        this.node.style.justifyContent = Styles.JustifyContent.Center\n        this.node.style.height = '100%'\n    }\n\n    #initializeObserver() {\n        if (this.#observer != undefined)\n            return\n\n        this.#observer = new ResizeObserver(() => {\n            if (this.#renderer.canvas)\n                this.#resize()\n            else\n                this.destroy()\n        })\n        this.#observer.observe(this.node)\n    }\n}","export class Color {\n    r: number\n\n    g: number\n\n    b: number\n}","export class Animations {\n    static circular = 335\n\n    static legend = 500\n\n    static tree = 250\n\n    static tooltip = 120\n\n    static button = 200\n}","import { Value } from 'types/base/Value'\nimport { Point } from 'types/Point'\nimport { DrawPoint } from 'types/DrawPoint'\nimport { AnimationType } from '../static/Enums'\nimport { LineStyles } from './LineStyles'\n\nexport class Sector extends Value {\n    canRenderLabel: boolean | undefined\n\n    isMouseInside: boolean\n\n    current: number\n\n    transition: number\n\n    innerRadius: number\n\n    /**\n     * Angle in radians\n     */\n    direction: number\n\n    lineStyles: LineStyles | undefined\n\n    translate: Point\n\n    state: AnimationType\n\n    points: DrawPoint[]\n\n    labelPoints: DrawPoint[]\n\n    constructor(obj: object) {\n        super()\n\n        Object.assign(this, obj)\n\n        this.baseColor = this.color\n        this.canRenderLabel = false\n        this.isMouseInside = false\n    }\n\n    toggle(transition: number) {\n        super.toggle(transition)\n\n        if (this.disabled)\n            this.current = this.value * (1 - transition)\n        else\n            this.current = this.value * transition\n    }\n\n    checkCondition(): boolean {\n        super.checkCondition()\n\n        return (this.current == 0 && !this.disabled) || this.value != 0\n    }\n\n    reset() {\n        super.reset()\n\n        this.current = this.value\n    }\n}","export class TextResources {\n    static exportPNG = 'Save as image...'\n\n    static decomposeToTable = 'Show as table...'\n\n    static reset = 'Reset'\n\n    static exportCSV = 'Save as table...'\n\n    static menu = 'Menu'\n\n    static allDataIsHidden = 'All data is hidden'\n\n    static other = 'Other'\n\n    static thousandShort = 'K'\n\n    static millionShort = 'M'\n\n    static billionShort = 'B'\n\n    static show = 'Show...'\n\n    static noLabel = 'No Label'\n\n    static treeMapIsEmpty = 'Tree Map is empty'\n\n    static dataAsTable = 'Data as table'\n}","import { Errors } from 'helpers/Errors'\nimport { ErrorType } from 'static/Enums'\nimport { Theme } from 'Theme'\n\nexport abstract class Canvas {\n    static getContext(canvas: HTMLCanvasElement): CanvasRenderingContext2D {\n        return canvas.getContext('2d', { willReadFrequently: true })\n               ?? Errors.throw(ErrorType.NullContext)\n    }\n\n    static isPixelBusy(pixel: number) {\n        return pixel != undefined && pixel - Theme.canvasBackgroundInt != 0\n    }\n}","import { Value } from 'types/base/Value'\nimport { Theme } from 'Theme'\nimport { TextStyles } from 'helpers/TextStyles'\nimport * as Helper from 'Helper'\nimport { ChartSettings } from 'types/ChartSettings'\nimport { TooltipValue } from 'types/TooltipValue'\nimport { Data } from 'types/interfaces/Data'\nimport { Canvas } from 'helpers/Canvas'\nimport * as Constants from 'static/constants/Index'\nimport { Styles } from 'static/constants/Styles'\nimport { HTMLTooltipElement } from 'types/extends/HTMLTooltipElement'\nimport { Attribute, Tag } from 'static/Enums'\n\nexport class Tooltip {\n    canvas: HTMLCanvasElement\n\n    data: Data\n\n    readonly #enabled: boolean\n\n    readonly #isCustom: boolean\n\n    #canvasPosition: DOMRect\n\n    #template: HTMLTemplateElement\n\n    #inProgress: boolean\n\n    #toHide: boolean\n\n    #timer: Date | undefined\n\n    #lines: TooltipValue[]\n\n    constructor(canvas: HTMLCanvasElement, settings: ChartSettings) {\n        this.canvas = canvas\n        this.data = settings.data\n        this.#enabled = settings.enableTooltip\n        this.#isCustom = !!settings.templateId\n\n        if (this.#isCustom)\n            this.#template = <HTMLTemplateElement>document.getElementById(settings.templateId)\n\n        this.refresh()\n    }\n\n    render(condition: boolean, event: MouseEvent, lines: TooltipValue[], value?: Value) {\n        this.#hideAll()\n\n        if (!this.#enabled || !event)\n            return\n\n        if (condition || this.#inProgress || this.#toHide) {\n            if (condition)\n                this.#lines = lines\n\n            if (!this.#timer)\n                this.#timer = new Date()\n\n            if (!this.#toHide)\n                this.#inProgress = true\n            else if (this.#inProgress)\n                this.#timer = new Date()\n\n            if (this.#isCustom)\n                this.#renderCustom(event, value)\n            else\n                this.#renderRegular(event)\n\n            const opacityValue = this.#getOpacityValue()\n\n            if (this.#toHide && opacityValue >= 1) {\n                this.#inProgress = false\n                this.#toHide = false\n            }\n\n            if (this.#toHide && opacityValue <= 0) {\n                this.#inProgress = false\n                this.#toHide = false\n                this.#timer = undefined\n            }\n\n            if (!condition && this.#timer != undefined)\n                this.#toHide = true\n        } else {\n            this.#timer = undefined\n        }\n    }\n\n    #renderRegular(event: MouseEvent) {\n        const ctx = Canvas.getContext(this.canvas)\n\n        const textWidth = Math.max(...this.#lines.map(line => Helper.stringWidth(line.text ?? '') + (line.color ? 8 : 0)))\n\n        const padding = 6,\n            borderRadius = 6\n\n        let x = event.clientX - this.#canvasPosition.x + 10,\n            y = event.clientY - this.#canvasPosition.y + scrollY + 10\n\n        if (x + textWidth + 25 > this.#canvasPosition.width)\n            x = this.#canvasPosition.width - (textWidth + 25)\n\n        if (y + 15 + this.#lines.length * 18 > this.#canvasPosition.height)\n            y = this.#canvasPosition.height - 15 - this.#lines.length * 18\n\n        ctx.beginPath()\n        ctx.roundRect(x, y, textWidth + 24, 16 + 16 * this.#lines.length, borderRadius)\n        let opacity = Math.round(this.#getOpacityValue() * 255).toString(16),\n            baseOpacity = Math.round(this.#getOpacityValue() * 207).toString(16)\n        if (opacity.length == 1)\n            opacity = '0' + opacity\n        if (baseOpacity.length == 1)\n            baseOpacity = '0' + baseOpacity\n\n        ctx.strokeStyle = Theme.dropdownBorder + baseOpacity\n        ctx.lineWidth = 1\n        ctx.fillStyle = Theme.background + baseOpacity\n        ctx.stroke()\n        ctx.fill()\n\n        for (let line of this.#lines) {\n            let offset = 0\n\n            if (line.color) {\n                offset = 12\n\n                ctx.beginPath()\n                ctx.fillStyle = line.color + opacity\n                ctx.arc(x + 16, y + 17, 5, 0, Math.PI * 2)\n                ctx.fill()\n            }\n\n            TextStyles.tooltip(ctx)\n            ctx.fillStyle = Theme.text + opacity\n            ctx.fillText(line.text ?? '', x + offset + padding * 2, y + 21)\n\n            y += 16\n        }\n    }\n\n    #renderCustom(event: MouseEvent, value?: Value) {\n        if (value == undefined)\n            return\n\n        const id = this.#template.id + value.id\n\n        let tooltip = <HTMLTooltipElement>document.getElementById(id)\n\n        const updateVisibility = () => {\n            this.#hideAll()\n\n            tooltip.style.visibility = Styles.Visibility.Visible\n        }\n\n        if (!tooltip) {\n            const regex = /\\${[^}]*}/gm\n\n            let content = <HTMLElement>this.#template.cloneNode(true)\n\n            tooltip = document.createElement(Tag.Div) as HTMLTooltipElement\n\n            tooltip.innerHTML = content.innerHTML\n\n            tooltip.id = id\n            tooltip.style.position = Styles.Position.Absolute\n            tooltip.style.pointerEvents = Styles.PointerEvents.None\n            tooltip.style.visibility = Styles.Visibility.Visible\n\n            tooltip.setAttribute(Attribute.Name, this.#template.id)\n\n            const matches = [...tooltip.innerHTML.matchAll(regex)]\n\n            let html = tooltip.innerHTML\n\n            for (const match of matches) {\n                const property = match[0].replace('${', '')\n                                         .replace('}', '')\n                                         .replaceAll(' ', '')\n\n                html = html.replaceAll(match[0], value.data[property])\n            }\n\n            tooltip.innerHTML = html\n\n            document.body.appendChild(tooltip)\n\n            tooltip.position = tooltip.getBoundingClientRect()\n\n            updateVisibility()\n        }\n\n        if (tooltip.style.visibility == Styles.Visibility.Hidden)\n            updateVisibility()\n\n        if (tooltip.position.height == 0)\n            tooltip.position = tooltip.getBoundingClientRect()\n\n        const offset = 10\n\n        let opacity = '1'\n\n        let x = event.clientX,\n            y = event.clientY + scrollY\n\n        if (x + tooltip.position.width - this.#canvasPosition.x > this.#canvasPosition.width - offset) {\n            x = this.#canvasPosition.width - tooltip.position.width + this.#canvasPosition.x - offset\n            opacity = '.67'\n        }\n\n        if (y + tooltip.position.height - this.#canvasPosition.y > this.#canvasPosition.height - offset) {\n            y = this.#canvasPosition.height - tooltip.position.height + this.#canvasPosition.y - offset\n            opacity = '.67'\n        }\n\n        if (x == 0 && y == 0)\n            opacity = '0'\n\n        tooltip.style.left = x + offset + 'px'\n        tooltip.style.top = y + offset + 'px'\n        tooltip.style.opacity = opacity\n    }\n\n    refresh() {\n        this.#canvasPosition = this.canvas.getBoundingClientRect()\n        this.#canvasPosition.x += scrollX\n        this.#canvasPosition.y += scrollY\n    }\n\n    #hideAll() {\n        if (!this.#isCustom)\n            return\n\n        const tooltips = <NodeListOf<HTMLElement>>document.querySelectorAll(`[name=\"${ this.#template.id }\"]`)\n\n        for (let node of tooltips)\n            node.style.visibility = Styles.Visibility.Hidden\n    }\n\n    #getOpacityValue(): number {\n        if (!this.#timer)\n            return 0\n\n        let opacityValue = this.#toHide\n                           ? 1 - (new Date().getTime() - this.#timer.getTime()) / Constants.Animations.tooltip\n                           : (new Date().getTime() - this.#timer.getTime()) / Constants.Animations.tooltip\n        if (opacityValue > 1)\n            opacityValue = 1\n        if (opacityValue < 0)\n            opacityValue = 0\n\n        return opacityValue\n    }\n}","export class ThemeOptions {\n    static readonly colors = ['#000000', '#ffffff']\n\n    static readonly backgrounds = ['#f7f7f7', '#222222']\n\n    static readonly lines = ['#000000', '#eeeeee']\n\n    static readonly lineAxes = ['#e0e0e0', '#212121']\n\n    static readonly lineActives = ['#898989', '#898989']\n\n    static readonly dropdownBorders = ['#bcbcbc', '#7e7e7e']\n\n    static readonly canvasBackgrounds = ['#ffffff', '#222222']\n}","import { DrawPointType } from 'static/Enums'\n\nexport class DrawPoint {\n    /**\n     * Method invocation arguments, where even indexed is x-axis points and odd is y-axis points\n     */\n    args: any[]\n\n    type: DrawPointType\n\n    readonly base: any[]\n\n    constructor(type: DrawPointType, ...args: any[]) {\n        this.args = args\n        this.type = type\n        this.base = JSON.parse(JSON.stringify(args))\n    }\n}","import { TableValue } from 'types/TableValue'\nimport { PlotSeries } from 'types/PlotSeries'\nimport { TableHeaderValue } from 'types/TableHeaderValue'\nimport { TableData } from 'types/TableData'\nimport { Data } from 'types/interfaces/Data'\nimport { Formatter } from 'helpers/Formatter'\nimport { PlotAxisType } from 'static/Enums'\n\nexport class PlotData implements Data {\n    shortLabels: boolean\n\n    simple: boolean\n\n    yMax: number\n\n    xTitle: string\n\n    yTitle: string\n\n    xType: PlotAxisType\n\n    values: PlotSeries[]\n\n    static getRows(data: PlotData): TableData {\n        let headers: TableHeaderValue[] = []\n\n        let values: TableValue[] = []\n\n        for (const series of data.values) {\n            let seriesValues = new Map<string, any>()\n\n            for (const value of series.values) {\n                seriesValues.set(value.x.toString(), value.y)\n                headers.push({\n                    value: value.x.toString(),\n                    display: data.xType == PlotAxisType.Date\n                             ? Formatter.date(new Date(value.x))\n                             : value.x.toString()\n                })\n            }\n\n            values.push({\n                name: series.label,\n                values: seriesValues\n            })\n        }\n\n        const unique = new Set(),\n            uniqueHeaders = headers.filter(v => !unique.has(v.display) && unique.add(v.display))\n\n        if (data.xType == PlotAxisType.Date)\n            uniqueHeaders.sort((a, b) => new Date(a.value).getTime() - new Date(b.value).getTime())\n\n        return {\n            headers: uniqueHeaders,\n            values: values\n        }\n    }\n}","export namespace Styles {\n    export class Cursor {\n        static Default = 'default'\n\n        static Pointer = 'pointer'\n    }\n\n    export class Display {\n        static Flex = 'flex'\n    }\n\n    export class FlexDirection {\n        static Column = 'column'\n\n        static ColumnReverse = 'column-reverse'\n\n        static Row = 'row'\n\n        static RowReverse = 'row-reverse'\n    }\n\n    export class AlignItems {\n        static Center = 'center'\n    }\n\n    export class Visibility {\n        static Visible = 'visible'\n\n        static Hidden = 'hidden'\n    }\n\n    export class Position {\n        static Absolute = 'absolute'\n    }\n\n    export class PointerEvents {\n        static None = 'none'\n    }\n\n    export class JustifyContent {\n        static Center = 'center'\n    }\n\n    export class ImageRendering {\n        static Pixelated = 'pixelated'\n    }\n}","import { Theme } from 'Theme'\nimport { DropdownOptions } from 'types/DropdownOptions'\nimport { Animations } from 'Animations'\nimport * as Helper from 'Helper'\nimport { TextStyles } from 'helpers/TextStyles'\nimport { Canvas } from 'helpers/Canvas'\nimport { AnimationType } from 'static/Enums'\nimport * as Constants from 'static/constants/Index'\nimport { Styles } from 'static/constants/Styles'\n\nexport class Dropdown {\n    isActive: boolean = false\n\n    #isInit: boolean\n\n    #options: DropdownOptions\n\n    #canvasPosition: DOMRect\n\n    animations: Animations\n\n    #position: DOMRect\n\n    readonly #isOnlyMenu: boolean\n\n    readonly #canvas: HTMLCanvasElement\n\n    constructor(canvas: HTMLCanvasElement, options: DropdownOptions) {\n        this.#canvas = canvas\n        this.#options = options\n\n        if (this.#options.icon)\n            this.#options.text = this.#options.icon\n\n        this.#isOnlyMenu = this.#options.text == undefined\n\n        this.animations = new Animations()\n    }\n\n    render(moveEvent: MouseEvent, clickEvent: MouseEvent | undefined) {\n        if (!this.#isInit)\n            this.#initAnimations()\n\n        if (this.#isOnlyMenu)\n            this.isActive = true\n\n        const ctx = Canvas.getContext(this.#canvas)\n\n        let x = this.#position.x,\n            y = this.#position.y,\n            width = this.#position.width,\n            height = this.#position.height\n\n        ctx.beginPath()\n\n        if (!this.#isOnlyMenu) {\n            const translate = (transition: number, event: AnimationType) => {\n                this.animations.reload('animation-dropdown', event)\n\n                ctx.fillStyle = Helper.adjustColor(Theme.canvasBackground, -Math.round(25 * transition))\n            }\n\n            if (this.#isOnButton(moveEvent, x, y, width, height)) {\n                this.#canvas.style.cursor = Styles.Cursor.Pointer\n\n                if (clickEvent && moveEvent.x == clickEvent.x && moveEvent.y == clickEvent.y) {\n                    this.isActive = !this.isActive\n                    clickEvent = undefined\n                }\n\n                if (!this.isActive)\n                    this.animations.handle('animation-dropdown',\n                        AnimationType.MouseOver,\n                        {\n                            duration: 300,\n                            body: transition => {\n                                translate(transition, AnimationType.MouseLeave)\n                            }\n                        })\n                else\n                    ctx.fillStyle = Helper.adjustColor(Theme.canvasBackground, -25)\n            } else {\n                this.#canvas.style.cursor = Styles.Cursor.Default\n\n                if (!this.isActive)\n                    this.animations.handle('animation-dropdown',\n                        AnimationType.MouseLeave,\n                        {\n                            timer: Constants.Dates.minDate,\n                            duration: 300,\n                            backward: true,\n                            body: transition => {\n                                translate(transition, AnimationType.MouseOver)\n                            }\n                        })\n                else\n                    ctx.fillStyle = Helper.adjustColor(Theme.canvasBackground, -25)\n            }\n\n            ctx.roundRect(x, y, width, height, 4)\n            ctx.fill()\n\n            TextStyles.regular(ctx)\n\n            if (this.#options.icon)\n                ctx.font = '20px sans-serif'\n\n            const iconOffset = this.#options.icon\n                               ? navigator.platform != 'Win32'\n                                 ? 1\n                                 : -1\n                               : 0\n\n            ctx.fillText(\n                this.#options.text ?? '',\n                x + width / 2,\n                y + height / 2 - iconOffset\n            )\n        }\n\n        if (this.isActive) {\n            const padding = 6,\n                borderRadius = 6\n\n            y += height\n\n            const items = this.#options.items.filter(value => value.text),\n                dividers = this.#options.items.filter(value => !value.text)\n\n            let maxWidth = Math.max(...items.map(value => Helper.stringWidth(value.text)))\n                           + padding * 4\n\n            if (x + maxWidth > this.#canvas.width - 4)\n                x -= x + maxWidth - this.#canvas.width + 4\n\n            const dropdownOpacity = 'bb',\n                itemOpacityDec = 127,\n                itemBackground = Theme.dropdownItemHoverColor,\n                borderColor = Theme.dropdownBorder\n\n            ctx.beginPath()\n\n            const rect = {\n                x: x,\n                y: y,\n                width: maxWidth,\n                height: items.length * 26\n                        + dividers.length * 4\n                        + (items.length == 1 ? padding : 0)\n                        + (items.length == 2 && dividers.length == 1 ? padding : 0)\n            }\n\n            ctx.roundRect(rect.x, rect.y, rect.width, rect.height, borderRadius)\n            ctx.fillStyle = Theme.background + dropdownOpacity\n            ctx.setLineDash([])\n            ctx.lineWidth = 1\n            ctx.strokeStyle = borderColor + dropdownOpacity\n            ctx.fill()\n            ctx.stroke()\n\n            ctx.beginPath()\n\n            y += 6\n\n            for (const item of this.#options.items) {\n                ctx.beginPath()\n\n                if (item.isDivider == true) {\n                    y += 2\n\n                    ctx.moveTo(x + padding, y)\n                    ctx.lineTo(x + maxWidth - padding, y)\n\n                    ctx.lineWidth = .5\n                    ctx.stroke()\n\n                    y += 4\n\n                    continue\n                }\n\n                ctx.fillStyle = 'transparent'\n\n                const animationKey = 'animation-dropdown' + item.text\n\n                const translate = (transition: number, event: AnimationType, isReturn?: boolean) => {\n                    this.animations.reload(animationKey, event)\n\n                    if (isReturn && transition == 1)\n                        return\n\n                    let opacity = Math.round(itemOpacityDec * transition).toString(16)\n                    if (opacity.length == 1)\n                        opacity = '0' + opacity\n\n                    ctx.fillStyle = itemBackground + opacity\n                }\n\n                if (this.#isOnButton(moveEvent, x, y, maxWidth, 20)) {\n                    this.animations.handle(animationKey,\n                        AnimationType.MouseOver,\n                        {\n                            duration: 300,\n                            body: transition => {\n                                translate(transition, AnimationType.MouseLeave)\n                            }\n                        })\n\n                    this.#canvas.style.cursor = Styles.Cursor.Pointer\n\n                    if (clickEvent) {\n                        item.action()\n\n                        clickEvent = undefined\n                        this.isActive = false\n                    }\n                } else {\n                    this.animations.handle(animationKey,\n                        AnimationType.MouseLeave,\n                        {\n                            timer: Constants.Dates.minDate,\n                            duration: 300,\n                            backward: true,\n                            body: transition => {\n                                translate(transition, AnimationType.MouseOver, true)\n                            }\n                        })\n                }\n\n                ctx.roundRect(x + padding, y, maxWidth - padding * 2, 20, borderRadius)\n                ctx.fill()\n\n                TextStyles.regular(ctx)\n                ctx.fillStyle = Theme.text\n                ctx.textAlign = 'left'\n                ctx.textBaseline = 'hanging'\n                ctx.fillText(item.text, x + padding * 2, y + 5)\n\n                y += 22\n            }\n        }\n\n        ctx.lineWidth = 1\n\n        if (!this.#isOnlyMenu && clickEvent != undefined && this.isActive) {\n            this.isActive = false\n            clickEvent = undefined\n        }\n\n        this.#isInit = true\n\n        if (this.#isOnlyMenu && clickEvent && moveEvent.x == clickEvent.x && moveEvent.y == clickEvent.y) {\n            this.isActive = !this.isActive\n            clickEvent = undefined\n        }\n\n        return clickEvent\n    }\n\n    #initAnimations() {\n        this.#canvasPosition = this.#canvas.getBoundingClientRect()\n\n        this.#canvasPosition.x += scrollX\n        this.#canvasPosition.y += scrollY\n    }\n\n    #isOnButton(event: MouseEvent, x: number, y: number, w: number, h: number): boolean {\n        if (!event)\n            return false\n\n        let trueX = event.clientX - this.#canvasPosition.x + scrollX,\n            trueY = event.clientY - this.#canvasPosition.y + scrollY\n\n        return trueX >= x && trueX <= x + w\n               && trueY >= y && trueY <= y + h\n    }\n\n    refresh() {\n        this.#isInit = false\n    }\n\n    resize() {\n        this.#initAnimations()\n        this.#calculatePosition()\n    }\n\n    close() {\n        this.isActive = false\n    }\n\n    #calculatePosition() {\n        const width = this.#isOnlyMenu ? 0 : Helper.stringWidth(this.#options.text ?? '') + 12,\n            height = this.#isOnlyMenu ? 0 : 20\n\n        this.#position = {\n            x: this.#options.x + width > this.#canvas.width\n               ? this.#canvas.width - width\n               : this.#options.x < 0\n                 ? this.#canvas.width + this.#options.x - width\n                 : this.#options.x,\n            y: this.#options.y + height > this.#canvas.height\n               ? this.#canvas.height - height\n               : this.#options.y < 0\n                 ? this.#canvas.height + this.#options.y - height\n                 : this.#options.y,\n            width: width,\n            height: height\n        } as DOMRect\n    }\n}","import * as Helper from 'Helper'\nimport { ThemeOptions } from 'static/ThemeOptions'\nimport { Events } from 'static/Enums'\n\nexport class Theme {\n    static currentTheme = 0\n\n    static text: string\n\n    static background: string\n\n    static line: string\n\n    static lineAxis: string\n\n    static lineActive: string\n\n    static dropdownItemHoverColor: string\n\n    static dropdownBorder: string\n\n    static canvasBackground: string\n\n    static canvasBackgroundInt: number\n\n    static function: Function | undefined\n\n    static initialize(callback: Function, isDark?: Function) {\n        if (!Theme.function && isDark)\n            Theme.function = isDark\n\n        if (window.matchMedia\n            && window.matchMedia('(prefers-color-scheme: dark)').matches\n            && (!Theme.function || Theme.function()))\n            Theme.setTheme(1)\n        else\n            Theme.setTheme(0)\n\n        window.matchMedia('(prefers-color-scheme: dark)')\n              .addEventListener(Events.Change, event => {\n                  Theme.setTheme(event.matches && (!Theme.function || Theme.function()) ? 1 : 0)\n                  callback()\n              })\n    }\n\n    static setTheme(index: number) {\n        Theme.currentTheme = index\n\n        Theme.text = ThemeOptions.colors[index]\n        Theme.background = ThemeOptions.backgrounds[index]\n        Theme.line = ThemeOptions.lines[index]\n        Theme.lineAxis = ThemeOptions.lineAxes[index]\n        Theme.lineActive = ThemeOptions.lineActives[index]\n        Theme.dropdownItemHoverColor = Helper.adjustColor(Theme.background, index == 0 ? -50 : 50)\n        Theme.dropdownBorder = ThemeOptions.dropdownBorders[index]\n        Theme.canvasBackground = ThemeOptions.canvasBackgrounds[index]\n        Theme.canvasBackgroundInt = Number(`0xff${ Theme.canvasBackground.slice(1) }`)\n    }\n\n    static reset() {\n        this.function = undefined\n    }\n}","import { Renderer } from 'types/base/Renderer'\nimport { CircularData } from 'types/data/CircularData'\nimport { Sector } from 'types/Sector'\nimport { CircularAngle } from 'types/CircularAngle'\nimport { Point } from 'types/Point'\nimport { DropdownItem } from 'types/DropdownItem'\nimport * as Helper from 'Helper'\nimport { Dropdown } from 'Dropdown'\nimport { Theme } from 'Theme'\nimport { TextStyles } from 'helpers/TextStyles'\nimport { Chart } from 'Chart'\nimport { TooltipValue } from 'types/TooltipValue'\nimport { Decomposition } from 'Decomposition'\nimport { Export } from 'Export'\nimport { TextResources } from 'static/TextResources'\nimport { Modal } from 'Modal'\nimport { Canvas } from 'helpers/Canvas'\nimport { Formatter } from 'helpers/Formatter'\nimport { AnimationType, DrawPointType, Events, Icon, PlotAxisType } from 'static/Enums'\nimport * as Constants from 'static/constants/Index'\nimport { Styles } from 'static/constants/Styles'\nimport { DrawPoint } from 'types/DrawPoint'\n\nexport class CircularRenderer extends Renderer<CircularData> {\n    #canRenderInnerTitle: boolean\n\n    #isDonut: boolean\n\n    #radius: number\n\n    #hoverCount: number\n\n    #currentHover: string | undefined\n\n    #pinned: string[]\n\n    #center: Point\n\n    #startPoint: Point\n\n    #angles: CircularAngle[]\n\n    #other: Sector[]\n\n    #innerTitleStyle: Function\n\n    private readonly startAngle: number\n\n    private isMousePositionChanged: boolean\n\n    private prevPoint: Point\n\n    constructor(chart: Chart) {\n        super(chart)\n\n        this.startAngle = Math.PI / 4\n        this.isMousePositionChanged = false\n        this.prevPoint = {\n            x: 0,\n            y: 0\n        }\n\n        this.onMouseMoveEvent = new MouseEvent(Events.MouseMove)\n    }\n\n    private calculateAngles() {\n        const valuesSum = this.data.values.reduce((acc, v) => acc + v.current, 0)\n\n        let anglesSum = this.startAngle\n        this.#angles = this.data.values.flatMap(sector => {\n                               const angle = sector.current / valuesSum * 2 * Math.PI\n\n                               return {\n                                   id: sector.id,\n                                   value: angle,\n                                   sum: (anglesSum += angle) - angle\n                               }\n                           })\n                           .reverse()\n    }\n\n    private getAngle(sector: Sector) {\n        return this.#angles.find(o => o.id == sector.id)?.value ?? 0\n    }\n\n    private getAccumulator(sector: Sector) {\n        return this.#angles.find(o => o.id == sector.id)?.sum ?? this.startAngle\n    }\n\n    private calculatePoint(sector: Sector): Sector {\n        let accumulator = this.getAccumulator(sector)\n\n        const getPoint = (radius: number, angle: number, center: Point): Point => {\n            return {\n                x: center.x + radius * Math.cos(accumulator + angle),\n                y: center.y + radius * Math.sin(accumulator + angle)\n            }\n        }\n\n        this.#startPoint = getPoint(this.#radius, 0, this.#center)\n\n        const angle = this.getAngle(sector)\n\n        sector.direction = accumulator + angle / 2\n\n        let point2 = getPoint(this.#radius, angle, this.#center)\n\n        let points: DrawPoint[] = []\n\n        if (angle > 0) {\n            if (sector.current > 0) {\n                let labelStartPoint = getPoint(this.#radius + 10, angle / 2, this.#center),\n                    labelMidPoint = getPoint(this.#radius + 20, angle / 2, this.#center)\n\n                const dir = labelStartPoint.x > this.#center.x ? 1 : -1\n\n                let endPoint = {\n                    x: labelMidPoint.x + 10 * dir,\n                    y: labelMidPoint.y\n                }\n\n                sector.labelPoints = [\n                    new DrawPoint(DrawPointType.Move, labelStartPoint.x, labelStartPoint.y),\n                    new DrawPoint(DrawPointType.QuadraticCurve, labelMidPoint.x, labelMidPoint.y, endPoint.x, endPoint.y)\n                ]\n            }\n\n            if (!this.#isDonut)\n                points.push(new DrawPoint(DrawPointType.Move, this.#center.x, this.#center.y))\n\n            points.push(new DrawPoint(DrawPointType.Line, this.#startPoint.x, this.#startPoint.y))\n\n            let localAccumulator = 0,\n                localAngle = angle\n\n            while (localAngle > 0) {\n                let currentAngle = localAngle - Math.PI / 6 > 0\n                                   ? Math.PI / 6\n                                   : localAngle\n\n                point2 = getPoint(this.#radius, localAccumulator + currentAngle, this.#center)\n\n                const tangentIntersectionAngle = Math.PI - currentAngle,\n                    lengthToTangentIntersection = this.#radius / Math.sin(tangentIntersectionAngle / 2),\n                    tangentIntersectionPoint = getPoint(lengthToTangentIntersection, localAccumulator + currentAngle / 2, this.#center)\n\n                points.push(new DrawPoint(DrawPointType.QuadraticCurve, tangentIntersectionPoint.x, tangentIntersectionPoint.y, point2.x, point2.y))\n\n                localAccumulator += currentAngle\n\n                localAngle -= Math.PI / 6\n            }\n\n            if (this.#isDonut || sector.innerRadius != 0) {\n                const innerRadius = this.#radius * (sector.innerRadius / 100)\n\n                const innerPoint2 = {\n                    x: point2.x - (((this.#radius - innerRadius) * (point2.x - this.#center.x)) / this.#radius),\n                    y: point2.y - (((this.#radius - innerRadius) * (point2.y - this.#center.y)) / this.#radius)\n                }\n\n                points.push(new DrawPoint(DrawPointType.Line, innerPoint2.x, innerPoint2.y))\n\n                localAngle = 0\n                localAccumulator = angle\n\n                while (localAngle < angle) {\n                    let currentAngle = localAngle + Math.PI / 6 < angle\n                                       ? Math.PI / 6\n                                       : angle - localAngle\n\n                    point2 = getPoint(innerRadius, localAccumulator - currentAngle, this.#center)\n\n                    const tangentIntersectionAngle = Math.PI - currentAngle,\n                        lengthToTangentIntersection = innerRadius / Math.sin(tangentIntersectionAngle / 2),\n                        tangentIntersectionPoint = getPoint(lengthToTangentIntersection, localAccumulator - currentAngle / 2, this.#center)\n\n                    points.push(new DrawPoint(DrawPointType.QuadraticCurve, tangentIntersectionPoint.x, tangentIntersectionPoint.y, point2.x, point2.y))\n\n                    localAccumulator -= currentAngle\n\n                    localAngle += Math.PI / 6\n                }\n\n                point2 = getPoint(this.#radius, angle, this.#center)\n            }\n\n            accumulator += angle\n        }\n\n        this.#startPoint = point2\n\n        sector.points = points\n\n        return sector\n    }\n\n    private scale(sector: Sector, value: number, transition: number) {\n        const centerOfSector = {\n            x: this.#center.x + this.#radius / 2 * Math.cos(sector.direction),\n            y: this.#center.y + this.#radius / 2 * Math.sin(sector.direction)\n        }\n\n        for (let p of sector.points) {\n            for (let i = 0; i < p.args.length; i += 2) {\n                const x = p.base[i],\n                    y = p.base[i + 1],\n                    length = Math.sqrt(Math.pow(x - centerOfSector.x, 2) + Math.pow(y - centerOfSector.y, 2)),\n                    computed = length * value + length * (1 - value) * transition,\n                    ratio = computed / length\n\n                p.args[i] = ratio * x + (1 - ratio) * centerOfSector.x\n                p.args[i + 1] = ratio * y + (1 - ratio) * centerOfSector.y\n            }\n        }\n\n        for (let p of sector.labelPoints) {\n            for (let i = 0; i < p.args.length; i += 2) {\n                const x = p.base[i],\n                    y = p.base[i + 1],\n                    length = Math.sqrt(Math.pow(x - centerOfSector.x, 2) + Math.pow(y - centerOfSector.y, 2)),\n                    computed = length * value + length * (1 - value) * transition,\n                    ratio = computed / length\n\n                p.args[i] = ratio * x + (1 - ratio) * centerOfSector.x\n                p.args[i + 1] = ratio * y + (1 - ratio) * centerOfSector.y\n            }\n        }\n    }\n\n    private focus(sector: Sector, value: number, transition: number) {\n        sector.color = Helper.applyAlpha(sector.baseColor, 255 - 255 * value * transition)\n        sector.textColor = Helper.applyAlpha(Theme.text, 255 - 255 * value * transition)\n    }\n\n    private translate(sector: Sector, value: number, transition: number) {\n        const offset = {\n            x: (this.#center.x + this.#radius * Math.cos(sector.direction) - this.#center.x) * value,\n            y: (this.#center.y + this.#radius * Math.sin(sector.direction) - this.#center.y) * value\n        }\n\n        sector.translate = {\n            x: offset.x * transition,\n            y: offset.y * transition\n        }\n\n        for (let p of sector.points) {\n            for (let i = 0; i < p.args.length; i += 2) {\n                p.args[i] = p.base[i] + offset.x * transition\n                p.args[i + 1] = p.base[i + 1] + offset.y * transition\n            }\n        }\n\n        for (let p of sector.labelPoints) {\n            for (let i = 0; i < p.args.length; i += 2) {\n                p.args[i] = p.base[i] + offset.x * transition\n                p.args[i + 1] = p.base[i + 1] + offset.y * transition\n            }\n        }\n    }\n\n    private outline(sector: Sector, value: number, transition: number) {\n        sector.lineStyles = transition == 0\n                       ? {\n                lineWidth: 1,\n                lineJoin: 'miter',\n                lineCap: 'butt'\n            }\n                       : {\n                lineWidth: this.getAngle(sector) > Math.PI / 6\n                           ? value * transition\n                           : 1,\n                lineJoin: 'round',\n                lineCap: 'round'\n            }\n    }\n\n    private canRenderLabel(sector: Sector, ctx: CanvasRenderingContext2D) {\n        if (sector.current == 0)\n            return sector.canRenderLabel = false\n\n        if (sector.state == AnimationType.None && sector.canRenderLabel)\n            return sector.canRenderLabel\n\n        const dir = sector.labelPoints[0].args[0] < sector.labelPoints[1].args[0] ? 1 : -1\n\n        let isBusy = false\n\n        const endPoint = {\n            x: sector.labelPoints[1].args[0],\n            y: sector.labelPoints[1].args[1]\n        }\n\n        const textWidth = Helper.stringWidth(sector.label),\n            imageDataX = dir == 1 ? endPoint.x + 12 : endPoint.x - textWidth - 12 + (sector.translate ? sector.translate.x : 0),\n            imageDataY = endPoint.y - 12 + (sector.translate ? sector.translate.y : 0),\n            imageData = new Uint32Array(ctx.getImageData(imageDataX, imageDataY, textWidth, 28).data.buffer)\n\n        if (imageDataX < 0 || imageDataX + textWidth > this.canvas.width\n            || endPoint.y - 12 < 0 || endPoint.y + 12 > this.canvas.height)\n            isBusy = true\n\n        if (!isBusy)\n            for (let i = 0; i < imageData.length; i++)\n                if (Canvas.isPixelBusy(imageData[i])) {\n                    isBusy = true\n                    break\n                }\n\n        return sector.canRenderLabel = !isBusy\n    }\n\n    private drawLabel(sector: Sector, ctx: CanvasRenderingContext2D) {\n        if (!this.canRenderLabel(sector, ctx))\n            return\n\n        ctx.beginPath()\n\n        ctx.moveTo(\n            sector.labelPoints[0].args[0],\n            sector.labelPoints[0].args[1]\n        )\n\n        ctx.quadraticCurveTo(\n            sector.labelPoints[1].args[0],\n            sector.labelPoints[1].args[1],\n            sector.labelPoints[1].args[2],\n            sector.labelPoints[1].args[3]\n        )\n\n        ctx.strokeStyle = sector.textColor\n\n        if (sector.current != 0 && sector.current != sector.value)\n            ctx.strokeStyle = Helper.applyAlpha(sector.textColor, Math.round(255 * (sector.current / sector.value)))\n\n        ctx.lineWidth = 1\n        ctx.lineJoin = 'miter'\n        ctx.lineCap = 'butt'\n\n        ctx.stroke()\n\n        ctx.fillStyle = sector.textColor\n\n        if (sector.current != 0 && sector.current != sector.value)\n            ctx.fillStyle = Helper.applyAlpha(sector.textColor, Math.round(255 * (sector.current / sector.value)))\n\n        const dir = sector.labelPoints[0].args[0] < sector.labelPoints[1].args[0] ? 1 : -1\n\n        TextStyles.circularLabel(ctx, dir == 1)\n        ctx.fillText(\n            sector.label,\n            sector.labelPoints[1].args[0] + 16 * dir,\n            sector.labelPoints[1].args[1] + 4\n        )\n    }\n\n    private drawSector(sector: Sector, ctx: CanvasRenderingContext2D) {\n        ctx.beginPath()\n\n        if (sector.lineStyles) {\n            ctx.lineWidth = sector.lineStyles.lineWidth\n            ctx.lineJoin = sector.lineStyles.lineJoin\n            ctx.lineCap = sector.lineStyles.lineCap\n        }\n\n        for (const point of sector.points) {\n            switch (point.type) {\n                case DrawPointType.Move:\n                    ctx.moveTo(point.args[0], point.args[1])\n\n                    break\n\n                case DrawPointType.Line:\n                    ctx.lineTo(point.args[0], point.args[1])\n\n                    break\n\n                case DrawPointType.QuadraticCurve:\n                    ctx.quadraticCurveTo(point.args[0], point.args[1], point.args[2], point.args[3])\n\n                    break\n            }\n        }\n\n        ctx.fillStyle = sector.color\n        ctx.strokeStyle = sector.color\n\n        ctx.closePath()\n\n        ctx.fill()\n        ctx.stroke()\n    }\n\n    private animate(sector: Sector) {\n        this.animations.handle(\n            sector.id,\n            AnimationType.Init,\n            {\n                duration: Constants.Animations.circular + (this.data.values.indexOf(sector) + 1) / this.data.values.length * Constants.Animations.circular,\n                continuous: true,\n                before: () => sector.state == AnimationType.Init,\n                body: transition => {\n                    this.scale(sector, .7, transition)\n                    this.focus(sector, 1, 1 - transition)\n\n                    if (transition == 1)\n                        sector.state = AnimationType.None\n                }\n            }\n        )\n\n        this.animations.handle(\n            sector.id,\n            AnimationType.Click,\n            {\n                duration: 0,\n                before: () => sector.state == AnimationType.Click,\n                body: _transition => {\n                    this.translate(sector, .1, 1)\n                    this.outline(sector, 8, 1)\n                }\n            }\n        )\n\n        this.animations.handle(\n            sector.id,\n            AnimationType.MouseOver,\n            {\n                duration: Constants.Animations.circular,\n                before: () => sector.state.isAnyEquals(AnimationType.MouseOver, AnimationType.MouseLeave),\n                body: transition => {\n                    if (sector.color != sector.baseColor)\n                        this.focus(sector, .5, transition)\n                    this.translate(sector, .1, transition)\n                    this.outline(sector, 8, transition)\n\n                    if (sector.state == AnimationType.MouseLeave\n                        && this.data.values.filter(s => s.state == AnimationType.MouseOver).length > 0)\n                        this.animations.end(sector.id, AnimationType.AnotherItemOver)\n                }\n            }\n        )\n\n        this.animations.handle(\n            sector.id,\n            AnimationType.AnotherItemOver,\n            {\n                duration: Constants.Animations.circular,\n                before: () => sector.state.isAnyEquals(AnimationType.AnotherItemOver, AnimationType.AnotherItemLeave),\n                body: transition => {\n                    this.focus(sector, .5, transition)\n                }\n            }\n        )\n    }\n\n    private handle(sector: Sector) {\n        if (sector.disabled)\n            return\n\n        const isInsideSector = this.isInsideSector(this.onMouseMoveEvent, sector, this.#center),\n            isInsideSectorClick = this.onClickEvent ? this.isInsideSector(this.onClickEvent, sector, this.#center) : false\n\n        if (this.onMouseMoveEvent && isInsideSector) {\n            this.#currentHover = sector.id\n            this.#hoverCount++\n        }\n\n        if (this.data.values.filter(s => !s.disabled).length == 1)\n            return\n\n        if (isInsideSectorClick) {\n            sector.state = AnimationType.Click\n\n            if (this.#pinned.includes(sector.id))\n                this.#pinned = this.#pinned.filter(id => id != sector.id)\n            else\n                this.#pinned.push(sector.id)\n\n            this.onClickEvent = undefined\n\n            return\n        } else if (this.#pinned.includes(sector.id)) {\n            return\n        }\n\n        if (isInsideSector) {\n            sector.state = AnimationType.MouseOver\n\n            if (this.animations.isBackward(sector.id, AnimationType.MouseOver))\n                this.animations.reverse(sector.id, AnimationType.MouseOver)\n\n            return\n        }\n\n        if (sector.state == AnimationType.MouseOver\n            && !isInsideSector) {\n            sector.state = AnimationType.MouseLeave\n\n            if (!this.animations.isBackward(sector.id, AnimationType.MouseOver))\n                this.animations.reverse(sector.id, AnimationType.MouseOver)\n\n            return\n        }\n\n        if (sector.state == AnimationType.MouseLeave\n            && this.animations.isEnd(sector.id, AnimationType.MouseOver)) {\n            sector.state = AnimationType.None\n\n            return\n        }\n\n        if (sector.state == AnimationType.MouseLeave)\n            return\n\n        if (this.data.values.filter(s => s.state == AnimationType.MouseOver).length > 0) {\n            sector.state = AnimationType.AnotherItemOver\n\n            if (this.animations.isBackward(sector.id, AnimationType.AnotherItemOver))\n                this.animations.reverse(sector.id, AnimationType.AnotherItemOver)\n\n            return\n        }\n\n        if (this.data.values.filter(s => s.state == AnimationType.MouseLeave).length > 0) {\n            sector.state = AnimationType.AnotherItemLeave\n\n            if (!this.animations.isBackward(sector.id, AnimationType.AnotherItemOver))\n                this.animations.reverse(sector.id, AnimationType.AnotherItemOver)\n\n            return\n        }\n\n        if (sector.state == AnimationType.AnotherItemLeave\n            && this.animations.isEnd(sector.id, AnimationType.AnotherItemOver)) {\n            sector.state = AnimationType.None\n\n            return\n        }\n    }\n\n    render() {\n        super.render()\n\n        const isAnyCollapsing = this.data.values.filter(s => s.value != s.current && s.current != 0)\n                                    .length > 0\n\n        this.isMousePositionChanged = this.prevPoint.x != this.onMouseMoveEvent.clientX\n                                      || this.prevPoint.y != this.onMouseMoveEvent.clientY\n\n        this.prevPoint = {\n            x: this.onMouseMoveEvent.clientX,\n            y: this.onMouseMoveEvent.clientY\n        }\n\n        if (isAnyCollapsing) {\n            this.calculateAngles()\n            for (let sector of this.data.values)\n                sector = this.calculatePoint(sector)\n        }\n\n        if (this.data.values.filter(s => !s.disabled).length == 0) {\n            this.empty()\n\n            return\n        }\n\n        this.#hoverCount = 0\n\n        const ctx = Canvas.getContext(this.canvas)\n\n        for (const sector of this.data.values) {\n            this.animate(sector)\n\n            this.drawSector(sector, ctx)\n            this.drawLabel(sector, ctx)\n\n            if (sector.state != AnimationType.Init)\n                this.handle(sector)\n        }\n\n        super.renderDropdown()\n\n        const currentHover = this.data.values.find(v => v.id == this.#currentHover),\n            isAnyHover = this.#hoverCount > 0\n\n        if (isAnyHover || this.contextMenu)\n            this.renderContextMenu(currentHover?.data ?? {})\n        else\n            this.onContextMenuEvent = undefined\n\n        this.tooltip.render(isAnyHover && !this.dropdown?.isActive,\n            this.onMouseMoveEvent,\n            [\n                new TooltipValue(`${ currentHover?.label }: ${ Formatter.format(currentHover?.current, PlotAxisType.Number, this.settings.valuePostfix) }`)\n            ],\n            currentHover)\n\n        this.innerTitle()\n\n        this.canvas.style.cursor = this.#hoverCount > 0\n                                   ? Styles.Cursor.Pointer\n                                   : Styles.Cursor.Default\n\n        if (!this.isDestroy)\n            requestAnimationFrame(this.render.bind(this))\n    }\n\n    private isInsideSector(event: MouseEvent, sector: Sector, center: Point): boolean {\n        if (!this.isMousePositionChanged)\n            return sector.isMouseInside\n\n        const isAngle = (point: Point) => {\n            let a = Math.atan2(point.y - center.y, point.x - center.x)\n            if (a < 0)\n                a += Math.PI * 2\n            if (a < this.startAngle)\n                a = Math.PI * 2 - Math.abs(this.startAngle - a) + this.startAngle\n\n            let index = this.#angles.findIndex(o => o.id == sector.id),\n                sumBefore = this.#angles[index].sum\n\n            return !(this.dropdown?.isActive ?? false)\n                   && sumBefore <= a\n                   && sumBefore + this.#angles[index].value - a >= 0\n        }\n\n        const isWithinRadius = (v: Point) => {\n            return v.x * v.x + v.y * v.y <= this.#radius * this.#radius\n                   && (!this.#isDonut || v.x * v.x + v.y * v.y\n                       >= this.#radius * (sector.innerRadius / 100) * this.#radius * (sector.innerRadius / 100))\n        }\n\n        const point = this.getMousePosition(event),\n            inner = {\n                x: point.x - center.x,\n                y: point.y - center.y\n            },\n            outer = {\n                x: point.x - center.x - sector.translate?.x,\n                y: point.y - center.y - sector.translate?.y\n            }\n\n        return sector.isMouseInside = isAngle(point) && (isWithinRadius(inner) || isWithinRadius(outer))\n    }\n\n    private empty() {\n        const ctx = Canvas.getContext(this.canvas)\n\n        ctx.beginPath()\n\n        ctx.arc(this.#center.x, this.#center.y, this.#radius, 0, 2 * Math.PI)\n        ctx.strokeStyle = Theme.text\n        ctx.stroke()\n\n        TextStyles.regular(ctx)\n        ctx.fillText(TextResources.allDataIsHidden, this.#center.x, this.#center.y)\n\n        requestAnimationFrame(this.render.bind(this))\n    }\n\n    private innerTitle() {\n        if (this.#canRenderInnerTitle) {\n            const ctx = Canvas.getContext(this.canvas)\n\n            this.#innerTitleStyle(ctx)\n            ctx.fillText(this.data.innerTitle, this.#center.x, this.#center.y)\n        }\n    }\n\n    private calculateSizes() {\n        const titleOffset = this.settings.title\n                            ? Constants.Values.titleOffset\n                            : 0\n\n        const shortSide = this.canvas.width > this.canvas.height - titleOffset * 2\n                          ? this.canvas.height - titleOffset * 2\n                          : this.canvas.width\n\n        this.#center = {\n            x: this.canvas.width / 2,\n            y: titleOffset + this.canvas.height / 2\n        }\n\n        let longestLabel = 0\n\n        for (const value of this.data.values) {\n            const width = Helper.stringWidth(value.label)\n\n            if (width > longestLabel)\n                longestLabel = width\n        }\n\n        this.#radius = shortSide / 2 - (longestLabel + 50)\n\n        if (this.#radius < shortSide / 2 - 50)\n            this.#radius = shortSide / 2 - 50\n\n        if (this.data.innerTitle != undefined && this.data.innerTitle != '') {\n            this.#innerTitleStyle = TextStyles.large\n            this.#canRenderInnerTitle = Helper.stringWidth(this.data.innerTitle, 16)\n                                        < (this.data.innerRadius / 100) * this.#radius * 2\n\n            if (!this.#canRenderInnerTitle) {\n                this.#innerTitleStyle = TextStyles.regular\n                this.#canRenderInnerTitle = Helper.stringWidth(this.data.innerTitle, 14)\n                                            < (this.data.innerRadius / 100) * this.#radius * 2\n            }\n\n            if (!this.#canRenderInnerTitle)\n                console.warn(`Inner title is declared, but can't be rendered`)\n        }\n    }\n\n    refresh() {\n        super.refresh()\n\n        this.dropdown?.refresh()\n    }\n\n    resize() {\n        super.resize()\n\n        this.initAnimations()\n        this.calculateSizes()\n        this.dropdown?.resize()\n\n        for (let sector of this.data.values)\n            sector = this.calculatePoint(sector)\n    }\n\n    prepareSettings() {\n        super.prepareSettings()\n\n        this.calculateSizes()\n\n        this.data.values = this.data.values.map(v => new Sector(v))\n\n        if (this.settings.enableOther) {\n            if (!this.settings.contextMenu)\n                this.settings.contextMenu = [] as DropdownItem[]\n            else\n                this.settings.contextMenu.push({\n                    isDivider: true\n                } as DropdownItem)\n\n            this.settings.contextMenu.push({\n                text: TextResources.show,\n                condition: data => data?._other,\n                action: () => {\n                    new Modal(Decomposition.toChart<Sector>(this.settings, this.#other),\n                        {\n                            width: window.innerWidth * .8,\n                            height: window.innerHeight * .8\n                        } as DOMRect,\n                        TextResources.other)\n                        .open()\n                }\n            })\n        }\n\n        this.#pinned = []\n\n        this.#isDonut = (this.data.innerRadius ?? 0) != 0\n\n        for (let item of this.data.values) {\n            item.disabled = !item.value\n            item.value ??= 0\n            item.current = item.value\n            item.innerRadius ??= this.data.innerRadius ?? 0\n\n            if (item.value < 0)\n                console.warn(`\"${ item.label }\" has negative value (${ item.value }) and will not be render`)\n        }\n\n        this.data.values = this.data.values.filter(v => v.value >= 0)\n\n        if (this.settings.enableOther && this.data.values.length > 20) {\n            this.#other = this.data.values.splice(20)\n\n            const sum = this.#other.reduce((acc, v) => acc + v.current, 0)\n\n            this.data.values = this.data.values.slice(0, 20)\n\n            this.data.values.push(new Sector({\n                value: sum,\n                current: sum,\n                label: TextResources.other,\n                id: Helper.guid(),\n                color: this.#other[this.#other.length - 1].color,\n                innerRadius: this.data.innerRadius,\n                data: {\n                    _other: true\n                }\n            }))\n        }\n\n        this.calculateAngles()\n\n        for (let sector of this.data.values) {\n            sector = this.calculatePoint(sector)\n\n            sector.textColor = Theme.text\n            sector.state = this.settings.disableInitAnimation\n                           ? AnimationType.None\n                           : AnimationType.Init\n        }\n    }\n\n    initDropdown() {\n        super.initDropdown()\n\n        this.dropdown = new Dropdown(this.canvas,\n            {\n                x: -10,\n                y: 10,\n                icon: Icon.ThreeLines,\n                items: [\n                    {\n                        text: TextResources.exportPNG,\n                        action: () => {\n                            Export.asPng(this.canvas, this.settings.title)\n                        }\n                    },\n                    {\n                        text: TextResources.exportCSV,\n                        action: () => {\n                            Export.asCsv(Decomposition.toTable(CircularData.getRows(this.data)), this.settings.title)\n                        }\n                    },\n                    {\n                        isDivider: true\n                    } as DropdownItem,\n                    {\n                        text: TextResources.decomposeToTable,\n                        action: () => {\n                            new Modal(Decomposition.toTable(CircularData.getRows(this.data)),\n                                undefined,\n                                this.settings.title ?? TextResources.dataAsTable)\n                                .open()\n                        }\n                    }\n                ]\n            })\n    }\n}","import { Data } from 'types/interfaces/Data'\nimport { Renderable } from 'types/base/Renderable'\nimport * as Helper from 'Helper'\nimport { Value } from 'types/base/Value'\nimport { Legend } from 'Legend'\nimport { Dropdown } from 'Dropdown'\nimport { DropdownItem } from 'types/DropdownItem'\nimport { Point } from 'types/Point'\nimport { TextResources } from 'static/TextResources'\nimport { Chart } from 'Chart'\nimport { Canvas } from 'helpers/Canvas'\nimport { TextStyles } from 'helpers/TextStyles'\nimport { LegendPlace, RenderState } from 'static/Enums'\nimport * as Constants from 'static/constants/Index'\nimport { ChartSettings } from '../ChartSettings'\n\nexport class Renderer<T extends Data> extends Renderable {\n    dropdown: Dropdown | undefined\n\n    data: T\n\n    protected isDestroy: boolean = false\n\n    protected highlightItems: string[]\n\n    constructor(chart: Chart) {\n        super(chart)\n\n        this.highlightItems = []\n\n        this.state = this.settings.disableInitAnimation ? RenderState.Idle : RenderState.Init\n    }\n\n    render() {\n        super.render()\n\n        this.renderTitle()\n    }\n\n    destroy() {\n        this.isDestroy = true\n\n        this.canvas.remove()\n    }\n\n    renderDropdown() {\n        this.onClickEvent = this.dropdown?.render(this.onMouseMoveEvent, this.onClickEvent)\n    }\n\n    resize() {\n        this.#calculateSizes()\n        this.tooltip.refresh()\n        this.dropdown?.resize()\n    }\n\n    prepareSettings() {\n        this.data = <T>this.settings.data\n\n        const domRect = this.node.parentElement!.getBoundingClientRect()\n\n        this.settings.minWidth = isNaN(+this.settings.width)\n                                 ? 0\n                                 : +this.settings.width\n        this.settings.minHeight = isNaN(+this.settings.height)\n                                  ? 0\n                                  : +this.settings.height\n\n        this.settings.width = this.settings.minWidth != 0 && domRect.width < this.settings.minWidth\n                              ? this.settings.minWidth\n                              : domRect.width\n\n        this.settings.height = this.settings.minHeight != 0 && domRect.height < this.settings.minHeight\n                               ? this.settings.minHeight\n                               : domRect.height\n\n        this.canvas.width = this.settings.width\n        this.canvas.height = this.settings.height\n\n        for (let item of this.settings.data.values) {\n            item.id = Helper.guid()\n            item.label ??= TextResources.noLabel\n        }\n\n        this.calculateColors()\n\n        for (let item of this.settings.contextMenu ?? [])\n            if (item.id != undefined)\n                item.action = data => this.node.dispatchEvent(new CustomEvent(item.id ?? '', { detail: data }))\n    }\n\n    calculateColors(force: boolean = false) {\n        const baseColor = this.settings.baseColor ?? Helper.randomColor()\n        let adjustStep = Math.round(100 / this.settings.data.values.length),\n            adjustAmount = -50\n\n        if (adjustStep <= 1)\n            adjustStep = 1\n\n        for (let item of this.settings.data.values)\n            if (item.color == undefined || force)\n                item.color = Helper.adjustColor(baseColor, adjustAmount += adjustStep)\n    }\n\n    initDropdown() {\n    }\n\n    renderContextMenu(data: any) {\n        if (this.dropdown?.isActive) {\n            this.onContextMenuEvent = undefined\n\n            return false\n        }\n\n        if (this.onContextMenuEvent != undefined && this.settings.contextMenu?.length != 0) {\n            if (this.contextMenu == undefined && this.settings.contextMenu != undefined) {\n                let clone: DropdownItem[] = []\n\n                for (const item of this.settings.contextMenu)\n                    if (!item.condition || item.condition(data))\n                        clone.push({\n                            id: item.id,\n                            text: item.text,\n                            isDivider: item.isDivider,\n                            action: () => {\n                                item.action(data)\n\n                                this.onContextMenuEvent = undefined\n                                this.contextMenu = undefined\n                            }\n                        })\n\n                this.contextMenu = new Dropdown(this.canvas, {\n                    x: this.onContextMenuEvent.x - this.canvasPosition.x,\n                    y: this.onContextMenuEvent.y - this.canvasPosition.y,\n                    items: clone,\n                    data: data\n                })\n\n                this.contextMenu.resize()\n\n                this.onClickEvent = undefined\n            }\n\n            const isClick = this.onClickEvent != undefined\n\n            this.onClickEvent = this.contextMenu?.render(this.onMouseMoveEvent, this.onClickEvent)\n\n            if (this.onClickEvent == undefined && isClick) {\n                this.contextMenu = undefined\n                this.onContextMenuEvent = undefined\n\n                return true\n            }\n        }\n\n        return false\n    }\n\n    highlight(value?: Value) {\n        if (value)\n            this.highlightItems = [value.id]\n        else\n            this.highlightItems = []\n    }\n\n    closeDropdowns() {\n        this.dropdown?.close()\n        this.onContextMenuEvent = undefined\n    }\n\n    protected renderTitle() {\n        const ctx = Canvas.getContext(this.canvas)\n\n        if (this.settings.title) {\n            TextStyles.title(ctx)\n            ctx.fillText(this.settings.title, this.canvas.width / 2, Constants.Values.titleOffset)\n        }\n    }\n\n    #calculateSizes() {\n        let domRect = this.node.getBoundingClientRect()\n\n        this.settings.width = this.settings.minWidth && domRect.width < this.settings.minWidth\n                              ? this.settings.minWidth\n                              : domRect.width\n        this.settings.height = this.settings.minHeight && domRect.height < this.settings.minHeight\n                               ? this.settings.minHeight\n                               : domRect.height\n\n        this.canvas.width = this.settings.width\n        this.canvas.height = this.settings.height\n\n        if (this.settings.enableLegend) {\n            if (this.settings.legendPlace == undefined\n                || this.settings.legendPlace == LegendPlace.Top\n                || this.settings.legendPlace == LegendPlace.Bottom)\n                this.canvas.height -= Legend.getLegendHeight(this.settings.data.values, this.canvas.width)\n\n            if (this.settings.legendPlace == LegendPlace.Left\n                || this.settings.legendPlace == LegendPlace.Right)\n                this.canvas.width -= 500\n        }\n    }\n\n    protected getMousePosition(event: MouseEvent): Point {\n        return {\n            x: event.clientX - this.canvasPosition.x + scrollX,\n            y: event.clientY - this.canvasPosition.y + scrollY\n        }\n    }\n\n    applySettings(settings: ChartSettings) {\n        this.settings = settings\n    }\n}","import { Value } from 'types/base/Value'\nimport { TableValue } from 'types/TableValue'\nimport { TableData } from 'types/TableData'\nimport { Data } from 'types/interfaces/Data'\n\nexport class TreeData implements Data {\n    values: Value[]\n\n    padding: number\n\n    static getRows(data: TreeData): TableData {\n        const key = 'Value'\n\n        let values: TableValue[] = []\n\n        for (const value of data.values)\n            values.push({\n                name: value.label,\n                values: new Map([[key, value.value]])\n            })\n\n        return {\n            headers: [\n                {\n                    value: key,\n                    display: key\n                }\n            ],\n            values: values\n        }\n    }\n}","import { TableValue } from 'types/TableValue'\nimport { Sector } from 'types/Sector'\nimport { TableData } from 'types/TableData'\nimport { Data } from 'types/interfaces/Data'\n\nexport class CircularData implements Data {\n    values: Sector[]\n\n    innerRadius: number\n\n    innerTitle: string\n\n    static getRows(data: CircularData): TableData {\n        const key = 'Value'\n\n        let values: TableValue[] = []\n\n        for (const value of data.values)\n            values.push({\n                name: value.label,\n                values: new Map([[key, value.value]])\n            })\n\n        return {\n            headers: [\n                {\n                    value: key,\n                    display: key\n                }\n            ],\n            values: values\n        }\n    }\n}","export class Value {\n    id: string\n\n    baseColor: string\n\n    color: string\n\n    textColor: string\n\n    label: string\n\n    disabled: boolean\n\n    hideInLegend: boolean\n\n    data: { [key: string]: string }\n\n    value: number\n\n    toggle(transition: number) {\n        if (transition == 0)\n            this.disabled = !this.disabled\n    }\n\n    checkCondition(): boolean {\n        return false\n    }\n\n    reset() {\n        this.disabled = false\n    }\n}","import { PlotData } from 'types/data/PlotData'\nimport { Renderer } from 'types/base/Renderer'\nimport * as Helper from 'Helper'\nimport { DropdownItem } from 'types/DropdownItem'\nimport { PlotAxis } from 'types/PlotAxis'\nimport { Paddings } from 'types/Paddings'\nimport { Dropdown } from 'Dropdown'\nimport { HoverItem } from 'types/HoverItem'\nimport { PlotSeries } from 'types/PlotSeries'\nimport { Tooltip } from 'Tooltip'\nimport { Theme } from 'Theme'\nimport { Chart } from 'Chart'\nimport { TextStyles } from 'helpers/TextStyles'\nimport { TooltipValue } from 'types/TooltipValue'\nimport { Export } from 'Export'\nimport { Decomposition } from 'Decomposition'\nimport { Modal } from 'Modal'\nimport { TextResources } from 'static/TextResources'\nimport { Formatter } from 'helpers/Formatter'\nimport { Canvas } from 'helpers/Canvas'\nimport { AnimationType, Icon, LineType, PlotAxisType, PlotType, RenderState } from 'static/Enums'\nimport * as Constants from 'static/constants/Index'\n\nexport class PlotRenderer extends Renderer<PlotData> {\n    #x: PlotAxis\n\n    #y: PlotAxis\n\n    #paddings: Paddings\n\n    #tooltipX: number\n\n    #tooltipY: number\n\n    #labelsX: Map<number, string>\n\n    #labelsY: Map<number, string>\n\n    #allValuesX: any[]\n\n    #allValuesY: any[]\n\n    #base: ImageBitmap | undefined\n\n    #backLines: ImageData | undefined\n\n    #yAxisStep: number\n\n    #plot: DOMRect\n\n    #hoverX: HoverItem | undefined\n\n    constructor(chart: Chart) {\n        super(chart)\n    }\n\n    render() {\n        super.render()\n\n        let tooltipLines = [\n            new TooltipValue(this.#labelsX.get(Math.round(this.#tooltipX))\n                             ?? this.#labelsY.get(Math.round(this.#tooltipY)))\n        ]\n\n        const ctx = Canvas.getContext(this.canvas)\n\n        TextStyles.regular(ctx)\n        ctx.lineJoin = 'round'\n\n        const axisLineHoverColor = Theme.lineActive\n\n        this.#renderBackLines()\n        this.#renderBase(true)\n\n        let x = 0,\n            y = 0,\n            yValue = 0,\n            yHeight = 0,\n            columnWidth = 0\n\n        const seriesToRender = this.data.values.filter(s => !s.disabled)\n\n        let columnsIndex = 0,\n            columnsCount = seriesToRender.filter(s => s.type == PlotType.Column).length\n\n        let barsIndex = 0,\n            barsCount = seriesToRender.filter(s => s.type == PlotType.Bar).length\n\n        let stackingAccumulator = []\n        for (let i = 0; i < this.#allValuesY.length; i++)\n            stackingAccumulator.push(0)\n\n        for (const series of seriesToRender) {\n            ctx.beginPath()\n\n            ctx.strokeStyle = series.color\n            ctx.fillStyle = series.color\n            ctx.lineWidth = series.width\n            ctx.lineCap = 'round'\n\n            const anyHighlight = this.highlightItems.length != 0\n\n            if (!this.animations.contains(series.id, AnimationType.Init)) {\n                const changeColor = (transition: number, event: AnimationType) => {\n                    this.animations.reload(series.id, event)\n\n                    if (transition == 0)\n                        return\n\n                    let opacity = Math.round(255 - 127 * transition).toString(16)\n                    if (opacity.length < 2)\n                        opacity = 0 + opacity\n\n                    ctx.fillStyle = series.color + opacity\n                    ctx.strokeStyle = series.color + opacity\n                }\n\n                if (anyHighlight && !this.highlightItems.includes(series.id)) {\n                    this.animations.handle(\n                        series.id,\n                        AnimationType.AnotherItemOver,\n                        {\n                            duration: Constants.Animations.circular,\n                            body: transition => {\n                                changeColor(transition, AnimationType.AnotherItemLeave)\n                            }\n                        }\n                    )\n                } else if (!anyHighlight) {\n                    this.animations.handle(\n                        series.id,\n                        AnimationType.AnotherItemLeave,\n                        {\n                            timer: Constants.Dates.minDate,\n                            duration: Constants.Animations.circular,\n                            backward: true,\n                            body: transition => {\n                                changeColor(transition, AnimationType.AnotherItemOver)\n                            }\n                        }\n                    )\n                }\n            }\n\n            switch (series.lineType) {\n                case LineType.Dash:\n                    ctx.setLineDash([series.width * 3, series.width * 2])\n\n                    break\n\n                case LineType.Dotted:\n                    ctx.setLineDash([series.width, series.width])\n\n                    break\n\n                case LineType.Solid:\n                default:\n                    break\n            }\n\n            for (const value of series.values) {\n                let index = series.values.indexOf(value),\n                    xIndex = this.#allValuesX.indexOf(this.data.xType == PlotAxisType.Date ? value.x?.toString() : value.x),\n                    yIndex = this.#allValuesY.indexOf(value.y)\n\n                const getTooltipValue = () => {\n                    return {\n                        x: Formatter.format(value.x, this.data.xType),\n                        y: Formatter.format(value.y, this.data.xType, this.settings.valuePostfix)\n                    }\n                }\n\n                x = this.#paddings.left\n                if (series.type != PlotType.Bar)\n                    x += xIndex * this.#x.step\n                if (series.type == PlotType.Line)\n                    x -= this.#x.step / 2 - this.#x.step\n\n                switch (series.type) {\n                    case PlotType.Line:\n                        y = this.#paddings.top + this.#plot.height - <number>value.y / this.#y.unit * this.#y.step\n                            - Math.abs(this.#y.min / this.#y.unit * this.#y.step)\n\n                        const pointDuration = 1500 / series.values.length * 1.2\n\n                        if (this.state == RenderState.Init || this.animations.contains(value.id, AnimationType.Init)) {\n                            this.animations.handle(value.id,\n                                AnimationType.Init,\n                                {\n                                    timer: new Date(Date.now()).addMilliseconds(pointDuration * (index - 1)),\n                                    duration: pointDuration,\n                                    continuous: true,\n                                    body: transition => {\n                                        if (index == 0)\n                                            return\n\n                                        x = this.#paddings.left + xIndex * this.#x.step - this.#x.step / 2\n                                        y = this.#paddings.top + this.#plot.height - <number>value.y / this.#y.unit * this.#y.step\n                                            - Math.abs(this.#y.min / this.#y.unit * this.#y.step)\n\n                                        const next = series.values[index - 1]\n\n                                        let prevValue = {\n                                            x: this.#paddings.left + xIndex * this.#x.step - this.#x.step / 2,\n                                            y: this.#paddings.top + this.#plot.height - <number>next.y / this.#y.unit * this.#y.step\n                                               - Math.abs(this.#y.min / this.#y.unit * this.#y.step)\n                                        }\n\n                                        const endPointX = prevValue.x + (this.#x.step + (x - prevValue.x)) * transition,\n                                            endPointY = prevValue.y + (y - prevValue.y) * transition\n\n                                        if (prevValue.x != endPointX && prevValue.y != endPointY) {\n                                            ctx.moveTo(prevValue.x, prevValue.y)\n                                            ctx.lineTo(endPointX, endPointY)\n                                        }\n                                    }\n                                })\n                        } else {\n                            ctx.lineTo(x, y)\n\n                            if (this.#isOnX(x)) {\n                                const mouse = this.getMousePosition(this.onMouseMoveEvent)\n\n                                if (Math.abs(mouse.y - y) < 5) {\n                                    this.#hoverX = {\n                                        x: x,\n                                        y: y,\n                                        index: index,\n                                        data: value.data,\n                                        series: series\n                                    }\n\n                                    tooltipLines.push(new TooltipValue(`${ series.label }: ${ getTooltipValue().y }`, series.color))\n                                    this.#tooltipX = x - this.#x.step / 2\n                                }\n                            }\n                        }\n\n                        break\n\n                    case PlotType.AttentionLine:\n                        yValue = this.canvas.height - this.#paddings.bottom - <number>value.y / this.#y.unit * this.#y.step\n\n                        ctx.moveTo(this.#paddings.left, yValue)\n\n                        if (this.state == RenderState.Init || this.animations.contains(value.id, AnimationType.Init))\n                            this.animations.handle(value.id,\n                                AnimationType.Init,\n                                {\n                                    duration: 1500,\n                                    continuous: true,\n                                    body: transition => {\n                                        ctx.lineTo(this.#paddings.left + (this.canvas.width - this.#paddings.left - this.#paddings.right) * transition,\n                                            this.canvas.height - this.#paddings.bottom - <number>value.y / this.#y.unit * this.#y.step)\n                                    }\n                                })\n                        else\n                            ctx.lineTo(this.canvas.width - this.#paddings.right, yValue)\n\n                        break\n\n                    case PlotType.Column:\n                        yValue = <number>value.y > this.data.yMax ? this.data.yMax : <number>value.y\n\n                        y = this.#plot.height * yValue / this.#y.max\n                        if (y < this.#y.minStep)\n                            y = this.#y.minStep\n\n                        columnWidth = this.#x.step * (series.width ? series.width / 100 : .5) / columnsCount\n\n                        ctx.beginPath()\n\n                        if (this.state == RenderState.Init || this.animations.contains(value.id + columnsIndex, AnimationType.Init)) {\n                            this.animations.handle(value.id + columnsIndex,\n                                AnimationType.Init,\n                                {\n                                    duration: 800,\n                                    continuous: true,\n                                    body: transition => {\n                                        yValue = <number>value.y > this.data.yMax ? this.data.yMax : <number>value.y\n\n                                        x = this.#paddings.left + xIndex * this.#x.step\n                                        y = this.#plot.height * yValue / this.#y.max * transition\n\n                                        if (y < this.#y.minStep)\n                                            y = this.#y.minStep * transition\n\n                                        columnsIndex = this.data.values.filter(s => s.type == PlotType.Column)\n                                                           .indexOf(series)\n\n                                        ctx.roundRect(x + columnsIndex * columnWidth + (this.#x.step - columnsCount * columnWidth) / 2,\n                                            this.canvas.height - this.#paddings.bottom - y,\n                                            columnWidth,\n                                            y,\n                                            [6, 6, 0, 0])\n                                        ctx.fill()\n                                    }\n                                })\n                        } else {\n                            if (this.#isInArea(x + columnsIndex * columnWidth + (this.#x.step - columnsCount * columnWidth) / 2,\n                                    this.canvas.height - this.#paddings.bottom - y,\n                                    columnWidth,\n                                    y)\n                                && (this.contextMenu?.isActive == undefined\n                                    || this.contextMenu?.isActive == false)) {\n                                this.#hoverX = {\n                                    x: x,\n                                    y: y,\n                                    index: index,\n                                    data: value.data,\n                                    series: series\n                                }\n\n                                tooltipLines.push(new TooltipValue(`${ series.label }: ${ getTooltipValue().y }`, series.color))\n                                this.#tooltipX = x\n                            }\n\n                            ctx.roundRect(x + columnsIndex * columnWidth + (this.#x.step - columnsCount * columnWidth) / 2,\n                                this.canvas.height - this.#paddings.bottom - y,\n                                columnWidth,\n                                y,\n                                [6, 6, 0, 0])\n                            ctx.fill()\n                        }\n\n                        break\n\n                    case PlotType.Bar:\n                        y = this.#paddings.top + yIndex * this.#y.step + this.#y.step / 2\n                            + (100 - series.width) * this.#y.step / 100 / 2\n\n                        const seriesHeight = (series.width * this.#y.step / 100) / barsCount\n\n                        if (this.state == RenderState.Init || this.animations.contains(value.id + barsIndex, AnimationType.Init)) {\n                            this.animations.handle(value.id + barsIndex,\n                                AnimationType.Init,\n                                {\n                                    duration: 800,\n                                    continuous: true,\n                                    body: transition => {\n                                        y = this.#paddings.top + yIndex * this.#y.step + this.#y.step / 2\n                                            + (100 - series.width) * this.#y.step / 100 / 2\n\n                                        barsIndex = this.data.values.filter(s => s.type == PlotType.Bar)\n                                                        .indexOf(series)\n\n                                        ctx.fillRect(x,\n                                            y - this.#y.step / 2 + barsIndex * seriesHeight,\n                                            <number>value.x / this.#x.unit * this.#x.step * transition,\n                                            seriesHeight)\n                                    }\n                                })\n                        } else {\n                            if (!anyHighlight) {\n                                if (this.#isInArea(x,\n                                    y - this.#y.step / 2 + barsIndex * seriesHeight,\n                                    <number>value.x / this.#x.unit * this.#x.step,\n                                    seriesHeight)) {\n                                    this.#hoverX = {\n                                        x: x,\n                                        y: y,\n                                        index: index,\n                                        data: value.data,\n                                        series: series\n                                    }\n\n                                    ctx.fillStyle += '88'\n\n                                    tooltipLines.push(new TooltipValue(`${ series.label }: ${ getTooltipValue().x }`, series.color))\n                                    this.#tooltipY = y - this.#y.step / 2\n                                } else {\n                                    ctx.fillStyle = series.color\n                                }\n                            }\n\n                            ctx.fillRect(x,\n                                y - this.#y.step / 2 + barsIndex * seriesHeight,\n                                <number>value.x / this.#x.unit * this.#x.step,\n                                seriesHeight)\n                        }\n\n                        break\n\n                    case PlotType.StackingColumn:\n                        y = this.canvas.height - this.#paddings.bottom - <number>value.y / this.#y.unit * this.#y.step\n\n                        columnWidth = this.#x.step * (series.width ? series.width / 100 : .5)\n\n                        if (this.state == RenderState.Init || this.animations.contains(value.id + index, AnimationType.Init)) {\n                            this.animations.handle(value.id + index,\n                                AnimationType.Init,\n                                {\n                                    duration: 800,\n                                    continuous: true,\n                                    body: transition => {\n                                        columnsIndex = this.data.values.filter(s => s.type == PlotType.StackingColumn\n                                                                                    && s.values.filter(v => this.data.xType == PlotAxisType.Date\n                                                                                                            ? (v.x as Date).getTime() == (value.x as Date).getTime()\n                                                                                                            : v.x == value.x)\n                                                                                        .length > 0)\n                                                           .indexOf(series)\n\n                                        x = this.#paddings.left + xIndex * this.#x.step\n                                        y = this.canvas.height - this.#paddings.bottom - <number>value.y / this.#y.unit * this.#y.step\n\n                                        if (columnsIndex == 0)\n                                            stackingAccumulator[xIndex] = 0\n\n                                        let offset = stackingAccumulator[xIndex] != undefined\n                                                     ? stackingAccumulator[xIndex]\n                                                     : 0\n\n                                        yValue = this.canvas.height - this.#paddings.bottom + offset\n                                        yHeight = (y - this.canvas.height + this.#paddings.bottom) * transition\n\n                                        if (yValue > this.#paddings.top) {\n                                            if (yValue + yHeight < this.#paddings.top)\n                                                yHeight -= yValue + yHeight - this.#paddings.top\n\n                                            ctx.fillRect(x + (this.#x.step - columnWidth) / 2,\n                                                yValue,\n                                                columnWidth,\n                                                yHeight)\n                                        }\n\n                                        stackingAccumulator[xIndex] += (y - this.canvas.height + this.#paddings.bottom) * transition\n                                    }\n                                })\n                        } else {\n                            if (columnsIndex == 0)\n                                stackingAccumulator[xIndex] = 0\n\n                            let offset = stackingAccumulator[xIndex] != undefined\n                                         ? stackingAccumulator[xIndex]\n                                         : 0\n\n                            yValue = this.canvas.height - this.#paddings.bottom + offset\n                            yHeight = y - this.canvas.height + this.#paddings.bottom\n\n                            if (yValue > this.#paddings.top) {\n                                if (yValue + yHeight < this.#paddings.top)\n                                    yHeight -= yValue + yHeight - this.#paddings.top\n\n                                if (this.#isInArea(x + (this.#x.step - columnWidth) / 2,\n                                    yValue + yHeight,\n                                    columnWidth,\n                                    Math.abs(yHeight))) {\n                                    this.#hoverX = {\n                                        x: x,\n                                        y: y,\n                                        index: xIndex,\n                                        data: value.data,\n                                        series: series\n                                    }\n\n                                    tooltipLines.push(new TooltipValue(`${ series.label }: ${ getTooltipValue().y }`, series.color))\n                                    this.#tooltipX = x\n                                }\n\n                                ctx.fillRect(x + (this.#x.step - columnWidth) / 2,\n                                    yValue,\n                                    columnWidth,\n                                    yHeight)\n                            }\n\n                            stackingAccumulator[xIndex] += (y - this.canvas.height + this.#paddings.bottom)\n                        }\n\n                        break\n                }\n            }\n\n            ctx.setLineDash([])\n\n            switch (series.type) {\n                case PlotType.Line:\n                    ctx.stroke()\n\n                    if (this.#hoverX && this.#hoverX.series == series) {\n                        ctx.beginPath()\n                        ctx.lineWidth = 1\n                        ctx.strokeStyle = axisLineHoverColor\n                        ctx.moveTo(this.#paddings.left, this.#hoverX.y)\n                        ctx.lineTo(this.canvas.width - this.#paddings.right, this.#hoverX.y)\n                        ctx.stroke()\n\n                        let radius = Math.round(series.width * 1.1)\n                        if (radius < 5)\n                            radius = 5\n\n                        ctx.beginPath()\n                        ctx.arc(this.#hoverX.x, this.#hoverX.y, radius, 0, 2 * Math.PI)\n                        ctx.fill()\n                        ctx.lineWidth = Math.ceil(radius / 2)\n                        ctx.strokeStyle = Helper.adjustColor(series.color, 50)\n                        ctx.stroke()\n                    }\n\n                    break\n\n                case PlotType.AttentionLine:\n                    ctx.stroke()\n\n                    TextStyles.regular(ctx)\n                    ctx.fillText(series.label,\n                        this.#paddings.left + (this.canvas.width - this.#paddings.left - this.#paddings.right) / 2,\n                        this.canvas.height - this.#paddings.bottom - <number>series.values[0].y / this.#y.unit * this.#y.step + 16)\n\n                    break\n\n                case PlotType.Column:\n                case PlotType.StackingColumn:\n                    if (this.#hoverX)\n                        this.highlight(this.#hoverX.series)\n\n                    columnsIndex++\n\n                    break\n\n                case PlotType.Bar:\n                    if (this.#hoverX) {\n                        ctx.lineWidth = 1\n                        ctx.strokeStyle = axisLineHoverColor\n                        ctx.moveTo(this.#paddings.left,\n                            this.#tooltipY + this.#y.step / 2)\n                        ctx.lineTo(this.canvas.width - this.#paddings.right,\n                            this.#tooltipY + this.#y.step / 2)\n                        ctx.stroke()\n                    }\n\n                    barsIndex++\n\n                    break\n            }\n        }\n\n        this.#renderBase()\n\n        this.renderTitle()\n\n        this.tooltip.render(tooltipLines.length > 1 && !this.dropdown?.isActive,\n            this.onMouseMoveEvent,\n            tooltipLines,\n            this.#hoverX\n            ? this.#hoverX.series!.values[this.#hoverX.index]\n            : undefined)\n\n        if (!this.isDestroy)\n            requestAnimationFrame(this.render.bind(this))\n\n        this.state = RenderState.Idle\n\n        super.renderDropdown()\n\n        if (this.onContextMenuEvent && !this.#hoverX)\n            this.onContextMenuEvent = undefined\n\n        if (this.#hoverX == undefined)\n            this.highlight()\n\n        if (this.#hoverX\n            && (this.renderContextMenu(this.#hoverX.data)\n                || !this.onContextMenuEvent))\n            this.#hoverX = undefined\n    }\n\n    refresh() {\n        super.refresh()\n    }\n\n    resize() {\n        super.resize()\n\n        this.#base = undefined\n\n        this.#calculateSizes()\n    }\n\n    #isOnX(x: number): boolean {\n        if (!this.onMouseMoveEvent)\n            return false\n\n        const mouse = this.getMousePosition(this.onMouseMoveEvent)\n\n        return !(this.dropdown?.isActive ?? false)\n               && x - this.#x.step / 2 <= mouse.x && mouse.x < x + this.#x.step / 2\n               && this.#paddings.top <= mouse.y && mouse.y <= this.canvas.height - this.#paddings.bottom\n               && this.#paddings.left < mouse.x\n    }\n\n    #isInArea(x: number, y: number, w: number, h: number): boolean {\n        if (!this.onMouseMoveEvent)\n            return false\n\n        const mouse = this.getMousePosition(this.onMouseMoveEvent)\n\n        return !(this.dropdown?.isActive ?? false)\n               && mouse.x >= x && mouse.x <= x + w\n               && mouse.y >= y && mouse.y <= y + h\n    }\n\n    #renderBase(skip: boolean = false) {\n        if (this.#base && skip)\n            return\n\n        if (this.data.simple)\n            return\n\n        const ctx = Canvas.getContext(this.canvas)\n\n        if (skip)\n            ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\n\n        if (this.#base) {\n            ctx.drawImage(this.#base, 0, 0)\n            return\n        }\n\n        if (!skip)\n            return\n\n        const axisLabelOffset = 12\n\n        ctx.fillStyle = Theme.canvasBackground\n\n        ctx.fillRect(0, 0, this.#paddings.left, this.canvas.height)\n        ctx.fillRect(0, 0, this.canvas.width, this.#paddings.top)\n        ctx.fillRect(this.canvas.width - this.#paddings.right, 0, this.canvas.width, this.canvas.height)\n        ctx.fillRect(0, this.canvas.height - this.#paddings.bottom, this.canvas.width, this.canvas.height)\n\n        const isContainsBar = this.data.values.filter(s => s.type == PlotType.Bar).length > 0\n\n        ctx.setLineDash([])\n\n        if (this.data.xTitle || this.data.yTitle) {\n            ctx.textAlign = 'center'\n            ctx.textBaseline = 'bottom'\n            ctx.fillStyle = Theme.text\n\n            if (this.data.xTitle)\n                ctx.fillText(this.data.xTitle,\n                    this.#paddings.left + (this.canvas.width - this.#paddings.left - this.#paddings.right) / 2,\n                    this.canvas.height - 4)\n\n            if (this.data.yTitle) {\n                ctx.rotate(-Math.PI / 2)\n\n                ctx.textBaseline = 'top'\n\n                ctx.fillText(this.data.yTitle,\n                    -(this.#paddings.top + (this.canvas.height - this.#paddings.top - this.#paddings.bottom) / 2),\n                    8)\n\n                ctx.resetTransform()\n            }\n        }\n\n        ctx.textAlign = 'center'\n        ctx.textBaseline = 'top'\n\n        const step = this.#x.step,\n            xYPos = this.canvas.height - this.#paddings.bottom\n\n        let xCounter = 0,\n            acc = this.#paddings.left + step / 2\n\n        for (let i = 0; i < this.#allValuesX.length + 1; i++)\n            this.#labelsX.trySet(\n                Math.round(this.#paddings.left + i * this.#x.step),\n                Formatter.format(this.#allValuesX[i], this.data.xType)\n            )\n\n        const maxLabelWidth = Math.max(\n            ...[...this.#labelsX.values()].map(label => Math.ceil(Helper.stringWidth(label)))\n        ) + 10\n        const maxCount = Math.floor(\n            (this.canvas.width - this.#paddings.left - this.#paddings.right) / maxLabelWidth\n        )\n        const renderStep = Math.ceil(1 / (maxCount / this.#allValuesX.length))\n\n        while (acc < this.canvas.width - this.#paddings.right) {\n            if (xCounter % renderStep == 0) {\n                ctx.fillStyle = Theme.text + 'b7'\n\n                ctx.fillText(\n                    (this.#labelsX.get(Math.round(acc - this.#x.step / 2)) ?? '')\n                        + (!isContainsBar ? '' : this.settings.valuePostfix),\n                    acc,\n                    xYPos + axisLabelOffset / 2\n                )\n            }\n\n            acc += step\n            xCounter++\n        }\n\n        ctx.textAlign = 'right'\n        ctx.textBaseline = 'middle'\n\n        const yCount = this.#y.count > 10 ? 10 : this.#y.count\n\n        let yCounter = isContainsBar ? 1 : 0,\n            yStep = this.#allValuesY.length / yCount\n\n        for (let i = isContainsBar ? 1 : 0; i < this.#allValuesY.length + 1; i++) {\n            const labelY = this.canvas.height - yCounter * yStep * this.#y.step - this.#paddings.bottom,\n                labelYAsKey = Math.round(this.canvas.height - i * this.#y.step - this.#paddings.bottom)\n\n            if (!this.#labelsY.get(labelYAsKey))\n                this.#labelsY.set(labelYAsKey,\n                    Formatter.format(\n                        this.#y.min + (i + (isContainsBar ? -1 : 0)) * (this.#y.max - this.#y.min) / this.#y.count,\n                        PlotAxisType.Number,\n                        this.settings.valuePostfix\n                    ))\n\n            if (i >= yCounter * yStep) {\n                const label = {\n                    x: this.#paddings.left,\n                    y: labelY,\n                    label: this.#yAxisStep >= 1\n                           ? Math.round((this.#y.min + (yCounter * yStep + (isContainsBar ? -1 : 0)) * (this.#y.max - this.#y.min) / this.#y.count) / this.#yAxisStep) * this.#yAxisStep\n                           : Math.round(this.#y.min + (yCounter * yStep + (isContainsBar ? -1 : 0)) * (this.#y.max - this.#y.min) / this.#y.count / this.#yAxisStep) * this.#yAxisStep\n                }\n\n                if (label.label == -0)\n                    label.label = 0\n\n                let postfix = ''\n\n                if (this.data.shortLabels) {\n                    const countOfTens = Math.floor(label.label.toString().length / 4)\n\n                    if (countOfTens > 0) {\n                        label.label /= Math.pow(1000, countOfTens)\n\n                        postfix = [\n                            TextResources.thousandShort,\n                            TextResources.millionShort,\n                            TextResources.billionShort\n                        ][countOfTens - 1]\n                    }\n                }\n\n                ctx.fillText(\n                    Formatter.number(label.label)\n                        + postfix\n                        + (isContainsBar ? '' : this.settings.valuePostfix ?? ''),\n                    label.x - axisLabelOffset,\n                    label.y + (isContainsBar ? this.#y.step / 2 : 0)\n                )\n\n                yCounter++\n            }\n        }\n\n        ctx.beginPath()\n\n        ctx.strokeStyle = Theme.line\n        ctx.lineWidth = 1\n\n        const offset = .5,\n            isBar = this.data.values.filter(v => v.type == PlotType.Bar).length > 0\n\n        ctx.moveTo(this.#paddings.left - (isBar ? offset : 0),\n            this.canvas.height - this.#paddings.bottom + (isBar ? -offset : offset))\n\n        if (isBar)\n            ctx.lineTo(this.#paddings.left - offset, this.#paddings.top)\n        else\n            ctx.lineTo(this.canvas.width - this.#paddings.right, this.canvas.height - this.#paddings.bottom + offset)\n\n        ctx.stroke()\n\n        if (this.canvas.width > 0 && this.canvas.height > 0)\n            createImageBitmap(ctx.getImageData(0, 0, this.canvas.width, this.canvas.height))\n                .then(res => this.#base = res)\n    }\n\n    #renderBackLines() {\n        if (this.data.simple)\n            return\n\n        const ctx = Canvas.getContext(this.canvas)\n\n        if (this.#backLines) {\n            ctx.putImageData(this.#backLines, 0, 0)\n            return\n        }\n\n        ctx.fillStyle = Theme.canvasBackground\n        ctx.fillRect(0, 0, this.canvas.width, this.canvas.height)\n\n        const axisLineColor = Theme.lineAxis\n\n        const isContainsBar = this.data.values.filter(s => s.type == PlotType.Bar).length > 0\n\n        if (isContainsBar) {\n            const step = this.#x.step,\n                xYPos = this.canvas.height - this.#paddings.bottom\n\n            let xCounter = 0,\n                acc = this.#paddings.left + step / 2\n\n            for (let i = 0; i < this.#allValuesX.length + 1; i++)\n                this.#labelsX.trySet(\n                    Math.round(this.#paddings.left + i * this.#x.step),\n                    Formatter.format(this.#allValuesX[i - 1], this.data.xType)\n                )\n\n            const maxLabelWidth = Math.max(\n                ...[...this.#labelsX.values()].map(label => Math.ceil(Helper.stringWidth(label)))\n            ) + 10\n            const maxCount = Math.floor(\n                (this.canvas.width - this.#paddings.left - this.#paddings.right) / maxLabelWidth\n            )\n            const renderStep = Math.ceil(1 / (maxCount / this.#allValuesX.length))\n\n            while (acc < this.canvas.width - this.#paddings.right) {\n                if (xCounter % renderStep == 0) {\n                    ctx.beginPath()\n\n                    ctx.moveTo(acc, xYPos)\n                    ctx.lineTo(acc, this.#paddings.top)\n\n                    ctx.lineWidth = 1\n                    ctx.strokeStyle = axisLineColor\n                    ctx.setLineDash([6, 6])\n                    ctx.stroke()\n                }\n\n                acc += step\n                xCounter++\n            }\n        }\n\n        ctx.textAlign = 'right'\n        ctx.textBaseline = 'middle'\n\n        const yCount = this.#y.count > 10 ? 10 : this.#y.count\n\n        let yCounter = isContainsBar ? 1 : 0,\n            yStep = this.#allValuesY.length / yCount\n\n        for (let i = isContainsBar ? 1 : 0; i < this.#allValuesY.length + 1; i++) {\n            const labelY = this.canvas.height - yCounter * yStep * this.#y.step - this.#paddings.bottom\n\n            if (i >= yCounter * yStep) {\n                const label = {\n                    x: this.#paddings.left,\n                    y: labelY\n                }\n\n                if (this.data.values.filter(s => s.type.isAnyEquals(PlotType.Column, PlotType.StackingColumn, PlotType.Line)).length > 0) {\n                    ctx.beginPath()\n\n                    ctx.moveTo(label.x, label.y)\n                    ctx.lineTo(this.canvas.width - this.#paddings.right, label.y)\n\n                    ctx.lineWidth = 1\n                    ctx.strokeStyle = axisLineColor\n                    ctx.setLineDash([6, 6])\n                    ctx.stroke()\n                }\n\n                yCounter++\n            }\n        }\n\n        if (this.canvas.width > 0 && this.canvas.height > 0)\n            this.#backLines = ctx.getImageData(0, 0, this.canvas.width, this.canvas.height)\n    }\n\n    #calculateSizes() {\n        let xValues = this.data.values.flatMap(s => s.values.map(p => p.x)),\n            yValues = this.data.values.flatMap(s => s.values.map(p => p.y))\n\n        const isDate = this.data.xType == PlotAxisType.Date\n\n        if (isDate) {\n            let tempDate = new Date(Math.min(...(<number[]>xValues)))\n\n            while (tempDate.getTime() < Math.max(...(<number[]>xValues))) {\n                if (!xValues.includes(tempDate.getTime()))\n                    xValues.push(new Date(tempDate.getTime()))\n\n                tempDate = tempDate.addDays(1)\n            }\n\n            xValues.sort((a, b) => a < b ? -1 : 1)\n        }\n\n        yValues.sort((a, b) => b > a ? -1 : 1)\n\n        this.#allValuesX = [...new Set(xValues.filter(x => x != undefined).map(x => isDate ? x.toString() : x))]\n        this.#allValuesY = [...new Set(yValues.filter(y => y != undefined))]\n\n        this.#x = {\n            min: Math.min(...(<number[]>xValues)),\n            max: Math.max(...(<number[]>xValues)),\n            unit: (Math.abs(Math.min(...(<number[]>xValues))) + Math.abs(Math.max(...(<number[]>xValues)))) / (this.#allValuesX.length - 1),\n            step: (this.canvas.width - this.#paddings.left - this.#paddings.right) / this.#allValuesX.length,\n            minStep: 0,\n            count: this.#allValuesX.length\n        }\n\n        let yMin = Math.min(...(<number[]>yValues))\n        if (yMin > 0)\n            yMin = 0\n\n        this.#y = {\n            min: yMin,\n            max: this.data.yMax ?? Math.max(...(<number[]>yValues)),\n            unit: (Math.abs(yMin) + Math.abs(this.data.yMax ?? Math.max(...(<number[]>yValues)))) / (this.#allValuesY.length - 1),\n            step: (this.canvas.height - this.#paddings.top - this.#paddings.bottom) / this.#allValuesY.length,\n            minStep: 0,\n            count: this.#allValuesY.length\n        }\n\n        let stackingColumns = this.data.values.filter(s => s.type == PlotType.StackingColumn)\n\n        let max\n\n        if (stackingColumns.length > 0) {\n            let values = stackingColumns.map(s => s.values.flatMap(v => +v.y))\n\n            max = this.#y.max\n\n            for (let i = 0; i < values[0].length; i++) {\n                let sum = 0\n\n                for (const v of values)\n                    sum += v[i]\n\n                if (sum > max)\n                    max = sum\n            }\n\n            this.#y.max = max > this.data.yMax ? this.data.yMax : max\n            this.#y.unit = (Math.abs(this.#y.min) + Math.abs(this.#y.max)) / (this.#allValuesY.length - 1)\n        }\n\n        const yMaxWidth = Helper.stringWidth(Formatter.number(this.#y.max))\n        if (yMaxWidth > this.#paddings.left - 40 && !this.data.simple) {\n            this.#paddings.left += yMaxWidth - this.#paddings.left + 40\n            this.#x.step = (this.canvas.width - this.#paddings.left - this.#paddings.right) / this.#allValuesX.length\n        }\n\n        this.#yAxisStep = Math.abs(this.#y.min) + Math.abs(this.#y.max)\n\n        if (.5 <= this.#yAxisStep && this.#yAxisStep < 1)\n            this.#yAxisStep = .05\n        else if (1 <= this.#yAxisStep && this.#yAxisStep < 10)\n            this.#yAxisStep = .1\n        else if (10 <= this.#yAxisStep && this.#yAxisStep < 100)\n            this.#yAxisStep = 2\n        else if (100 <= this.#yAxisStep && this.#yAxisStep < 1000)\n            this.#yAxisStep = 20\n        else if (1000 <= this.#yAxisStep && this.#yAxisStep < 10000)\n            this.#yAxisStep = 50\n        else if (10000 <= this.#yAxisStep && this.#yAxisStep < 100000)\n            this.#yAxisStep = 1000\n        else if (100000 <= this.#yAxisStep && this.#yAxisStep < 1000000)\n            this.#yAxisStep = 10000\n        else if (1000000 <= this.#yAxisStep && this.#yAxisStep < 10000000)\n            this.#yAxisStep = 50000\n        else\n            this.#yAxisStep = 1\n\n        if (this.#yAxisStep != 1) {\n            max = yValues.length > 10\n                  ? (this.#y.max / 10 + this.#yAxisStep - (this.#y.max / 10) % this.#yAxisStep) * 10\n                  : Math.ceil(this.#y.max / this.#yAxisStep) * this.#yAxisStep\n\n            this.#y.max = max > this.data.yMax ? this.data.yMax : max\n            this.#y.unit = (Math.abs(this.#y.min) + Math.abs(this.#y.max)) / this.#allValuesY.length\n        }\n\n        this.#plot = {\n            width: this.canvas.width - this.#paddings.left - this.#paddings.right,\n            height: this.canvas.height - this.#paddings.top - this.#paddings.bottom\n        } as DOMRect\n\n        this.#x.minStep = this.#plot.width * 0.002\n        this.#y.minStep = this.#plot.height * 0.002\n    }\n\n    prepareSettings() {\n        super.prepareSettings()\n\n        this.#base = undefined\n        this.#backLines = undefined\n\n        this.data.values = this.data.values.map(v => new PlotSeries(v))\n\n        if (this.data.values.filter(v => v.type == PlotType.Bar).length > 0) {\n            for (let series of this.data.values) {\n                for (let item of series.values) {\n                    const x = item.x\n                    item['x'] = item.y\n                    item['y'] = x\n                }\n\n                series.values.sort((a, b) => b.x > a.x ? 1 : -1)\n            }\n        }\n\n        for (let item of this.data.values) {\n            item.disabled = !item.values\n            item.type ??= PlotType.Line\n\n            for (let it of item.values) {\n                it.id = Helper.guid()\n\n                if (this.data.xType == PlotAxisType.Date) {\n                    if (Helper.isISOString(it.x as string))\n                        it.x = new Date(it.x)\n                    else\n                        console.warn(`${ it.x } is not a date in ISO format.`)\n                }\n            }\n        }\n\n        this.#paddings = {\n            top: 30,\n            right: 40,\n            bottom: 50,\n            left: 80\n        }\n\n        if (this.data.simple)\n            this.#paddings = {\n                top: 10,\n                right: 10,\n                bottom: 10,\n                left: 10\n            }\n\n        if (this.settings.title)\n            this.#paddings.top += Constants.Values.titleOffset\n\n        this.tooltip = new Tooltip(this.canvas, this.settings)\n\n        this.#labelsX = new Map()\n        this.#labelsY = new Map()\n    }\n\n    initDropdown() {\n        super.initDropdown()\n\n        if (!this.data.simple)\n            this.dropdown = new Dropdown(this.canvas,\n                {\n                    x: -10,\n                    y: 10,\n                    icon: Icon.ThreeLines,\n                    items: [\n                        {\n                            text: TextResources.exportPNG,\n                            action: () => {\n                                Export.asPng(this.canvas, this.settings.title)\n                            }\n                        },\n                        {\n                            text: TextResources.exportCSV,\n                            action: () => {\n                                Export.asCsv(Decomposition.toTable(PlotData.getRows(this.data)), this.settings.title)\n                            }\n                        },\n                        {\n                            isDivider: true\n                        } as DropdownItem,\n                        {\n                            text: TextResources.decomposeToTable,\n                            action: () => {\n                                new Modal(Decomposition.toTable(PlotData.getRows(this.data)),\n                                    undefined,\n                                    this.settings.title ?? TextResources.dataAsTable)\n                                    .open()\n                            }\n                        }\n                    ]\n                })\n        else\n            this.dropdown = undefined\n    }\n}","export class Dates {\n    static minDate = new Date(2000, 1, 1)\n}","import { Theme } from 'Theme'\n\nexport abstract class TextStyles {\n    static title(context: CanvasRenderingContext2D) {\n        context.fillStyle = Theme.text\n        context.textAlign = 'center'\n        context.textBaseline = 'middle'\n        context.font = '20px sans-serif'\n    }\n\n    static regular(context: CanvasRenderingContext2D) {\n        context.fillStyle = Theme.text\n        context.textAlign = 'center'\n        context.textBaseline = 'middle'\n        context.font = '14px sans-serif'\n    }\n\n    static large(context: CanvasRenderingContext2D) {\n        context.fillStyle = Theme.text\n        context.textAlign = 'center'\n        context.textBaseline = 'middle'\n        context.font = '16px sans-serif'\n    }\n\n    static tooltip(context: CanvasRenderingContext2D) {\n        context.font = '14px sans-serif'\n        context.textAlign = 'start'\n        context.textBaseline = 'alphabetic'\n    }\n\n    static circularLabel(context: CanvasRenderingContext2D, isRight: boolean) {\n        context.textAlign = isRight ? 'start' : 'end'\n        context.textBaseline = 'alphabetic'\n        context.font = '14px sans-serif'\n    }\n}","import { ChartSettings } from 'types/ChartSettings'\nimport { Animations } from 'Animations'\nimport { Tooltip } from 'Tooltip'\nimport { Dropdown } from 'Dropdown'\nimport { Chart } from 'Chart'\nimport { Canvas } from 'helpers/Canvas'\nimport { Events, RenderState, Tag } from 'static/Enums'\nimport { Styles } from 'static/constants/Styles'\nimport { Theme } from 'Theme'\n\nexport class Renderable {\n    node: HTMLElement\n\n    canvas: HTMLCanvasElement\n\n    settings: ChartSettings\n\n    animations: Animations\n\n    tooltip: Tooltip\n\n    protected state: RenderState = RenderState.Init\n\n    protected canvasPosition: DOMRect\n\n    protected onMouseMoveEvent: MouseEvent\n\n    protected onClickEvent: MouseEvent | undefined\n\n    protected onContextMenuEvent: MouseEvent | undefined\n\n    protected contextMenu: Dropdown | undefined\n\n    constructor(chart: Chart) {\n        this.node = chart.node\n        this.settings = chart.settings\n        this.animations = new Animations()\n\n        this.canvas = document.createElement(Tag.Canvas)\n\n        this.canvas.style.imageRendering = Styles.ImageRendering.Pixelated\n\n        this.node.append(this.canvas)\n\n        this.initAnimations()\n    }\n\n    render() {\n        const ctx = Canvas.getContext(this.canvas)\n\n        ctx.fillStyle = Theme.canvasBackground\n        ctx.fillRect(0, 0, this.canvas.width, this.canvas.height)\n    }\n\n    refresh() {\n        this.tooltip.refresh()\n        this.state = this.settings.disableInitAnimation ? RenderState.Idle : RenderState.Init\n    }\n\n    resetMouse() {\n        this.onMouseMoveEvent = new MouseEvent(Events.MouseMove)\n        this.onClickEvent = new MouseEvent(Events.Click)\n        this.onContextMenuEvent = undefined\n    }\n\n    initAnimations() {\n        this.tooltip = new Tooltip(this.canvas, this.settings)\n\n        this.canvasPosition = this.canvas.getBoundingClientRect()\n\n        this.canvasPosition.x += scrollX\n        this.canvasPosition.y += scrollY\n\n        if (this.state == RenderState.Init && !this.settings.disableInteractions) {\n            this.canvas.onmousemove = event => this.onMouseMoveEvent = event\n            this.canvas.onclick = event => this.onClickEvent = event\n            this.canvas.oncontextmenu = event => {\n                event.preventDefault()\n                this.contextMenu = undefined\n                if (this.onContextMenuEvent)\n                    this.onContextMenuEvent = undefined\n                else\n                    this.onContextMenuEvent = event\n            }\n            this.canvas.onmouseleave = () => this.onMouseMoveEvent = new MouseEvent(Events.MouseMove)\n        }\n    }\n\n    destroy() {\n        this.canvas.remove()\n    }\n}","import { TreeData } from 'types/data/TreeData'\nimport { Renderer } from 'types/base/Renderer'\nimport { Sector } from 'types/Sector'\nimport * as Helper from 'Helper'\nimport { DropdownItem } from 'types/DropdownItem'\nimport { Dropdown } from 'Dropdown'\nimport { Chart } from 'Chart'\nimport { TextStyles } from 'helpers/TextStyles'\nimport { TooltipValue } from 'types/TooltipValue'\nimport { Export } from 'Export'\nimport { Decomposition } from 'Decomposition'\nimport { Modal } from 'Modal'\nimport { TextResources } from 'static/TextResources'\nimport { Canvas } from 'helpers/Canvas'\nimport { TreeCell } from 'types/TreeCell'\nimport { Formatter } from 'helpers/Formatter'\nimport { AnimationType, Icon, PlotAxisType, RenderState } from 'static/Enums'\nimport * as Constants from 'static/constants/Index'\n\nexport class TreeRenderer extends Renderer<TreeData> {\n    constructor(chart: Chart) {\n        super(chart)\n\n        this.settings.enableLegend = false\n    }\n\n    render() {\n        super.render()\n\n        if (this.data.values.filter(v => v.value > 0).length == 0) {\n            this.#drawEmpty()\n            requestAnimationFrame(this.render.bind(this))\n            return\n        }\n\n        const titleOffset = this.settings.title ? Constants.Values.titleOffset : 0\n\n        const maxWidth = this.canvas.width - this.data.padding * 2,\n            maxHeight = this.canvas.height - this.data.padding * 2 - titleOffset\n\n        let sum = this.data.values.reduce((acc, cur) => acc + cur.value, 0),\n            totalSquare = maxWidth * maxHeight\n\n        let x = this.data.padding,\n            y = this.data.padding + titleOffset\n\n        let minX = this.data.padding,\n            minY = this.data.padding + titleOffset\n\n        let tooltipCell: TreeCell | undefined = undefined\n        let contextMenuData = undefined\n\n        const ctx = Canvas.getContext(this.canvas)\n\n        let isVertical = true\n        for (let i = 0; i < this.data.values.length; i++) {\n            const item = this.data.values[i]\n\n            const remainWidth = maxWidth - (x - this.data.padding),\n                remainHeight = maxHeight - (y - this.data.padding - titleOffset)\n\n            let cells: TreeCell[] = [\n                {\n                    color: item.color,\n                    label: item.label,\n                    s: item.value / sum * totalSquare,\n                    value: item.value,\n                    id: item.id,\n                    x: x,\n                    y: y\n                } as TreeCell\n            ]\n\n            if (i + 1 <= this.data.values.length - 1) {\n                const next = this.data.values[i + 1]\n\n                cells.push({\n                    color: next.color,\n                    label: next.label,\n                    s: next.value / sum * totalSquare,\n                    value: next.value,\n                    id: next.id,\n                    x: x,\n                    y: y\n                } as TreeCell)\n\n                i++\n            }\n\n            const isSingle = cells.length == 1,\n                isLast = i == this.data.values.length - 1\n\n            if (isVertical) {\n                for (let j = 1; j <= remainWidth + i * i; j++) {\n                    const w = remainWidth - j,\n                        h1 = cells[0].s / w,\n                        h2 = isSingle ? 0 : cells[1].s / w\n\n                    if (h1 + h2 >= remainHeight) {\n                        cells[0].w = Math.floor(w)\n                        cells[0].h = Math.floor(h1)\n\n                        if (!isSingle) {\n                            cells[1].w = Math.floor(w)\n                            cells[1].h = remainHeight - cells[0].h\n\n                            cells[1].y += cells[0].h\n                        }\n\n                        break\n                    }\n                }\n            } else {\n                for (let j = 1; j <= remainHeight + i * i; j++) {\n                    const h = remainHeight - j,\n                        w1 = cells[0].s / h,\n                        w2 = isSingle ? 0 : cells[1].s / h\n\n                    if (w1 + w2 >= remainWidth) {\n                        cells[0].h = Math.floor(h)\n                        cells[0].w = Math.floor(w1)\n\n                        if (!isSingle) {\n                            cells[1].h = Math.floor(h)\n                            cells[1].w = remainWidth - cells[0].w\n\n                            cells[1].x += cells[0].w\n                        }\n\n                        break\n                    }\n                }\n            }\n\n            for (const cell of cells) {\n                if (isLast) {\n                    if (isVertical) {\n                        cell.w = remainWidth\n                        if (isSingle)\n                            cell.h = remainHeight\n                    } else {\n                        cell.h = remainHeight\n                        if (isSingle)\n                            cell.w = remainWidth\n                    }\n                }\n\n                ctx.beginPath()\n\n                ctx.fillStyle = cell.color\n\n                const cellInit = this.state != RenderState.Init\n                                 && !this.animations.contains(cell.id, AnimationType.Init)\n\n                const cellIndex = i + cells.indexOf(cell) + (isLast && isSingle ? 1 : 0),\n                    duration = 260\n\n                const getPrev = () => {\n                    let acc = 0\n                    for (let i = 0; i < cellIndex; i++)\n                        acc += duration - duration * (i / this.data.values.length) / Math.E\n\n                    return acc\n                }\n\n                const initAnimationDuration = duration - duration * cellIndex / (this.data.values.length + 1)\n\n                if (!cellInit) {\n                    this.animations.handle(cell.id,\n                        AnimationType.Init,\n                        {\n                            duration: getPrev(),\n                            continuous: true,\n                            body: transition => {\n                                if (transition * getPrev() - getPrev() + initAnimationDuration < 0)\n                                    return ctx.fillStyle += '00'\n\n                                transition = (transition * getPrev() - getPrev() + initAnimationDuration) / initAnimationDuration\n\n                                const center = {\n                                    x: cell.x + cell.w / 2,\n                                    y: cell.y + cell.h / 2\n                                }\n\n                                const minSize = .7,\n                                    rest = 1 - minSize\n\n                                ctx.translate(center.x - center.x * (minSize + transition * rest),\n                                    center.y - center.y * (minSize + transition * rest))\n                                ctx.scale((minSize + transition * rest), (minSize + transition * rest))\n\n                                let opacity = Math.round(255 * transition).toString(16)\n\n                                if (opacity.length < 2)\n                                    opacity = 0 + opacity\n\n                                ctx.fillStyle = cell.color + opacity\n                            }\n                        })\n                } else {\n                    const translate = (transition: number, event: AnimationType) => {\n                        const center = {\n                            x: cell.x + cell.w / 2,\n                            y: cell.y + cell.h / 2\n                        }\n\n                        const margin = 12,\n                            minSize = cell.w > cell.h\n                                      ? 1 - margin / cell.w\n                                      : 1 - margin / cell.h,\n                            rest = 1 - minSize\n\n                        ctx.translate(center.x - center.x * (minSize + transition * rest),\n                            center.y - center.y * (minSize + transition * rest))\n                        ctx.scale(minSize + transition * rest, minSize + transition * rest)\n\n                        this.animations.reload(cell.id, event)\n                    }\n\n                    if (this.#isInCell(cell)\n                        && !tooltipCell) {\n                        tooltipCell = cell\n                        contextMenuData = cell.data\n\n                        this.animations.handle(cell.id,\n                            AnimationType.MouseOver,\n                            {\n                                duration: Constants.Animations.tree,\n                                backward: true,\n                                body: transition => {\n                                    translate(transition, AnimationType.MouseLeave)\n                                }\n                            })\n                    } else {\n                        this.animations.handle(cell.id,\n                            AnimationType.MouseLeave,\n                            {\n                                timer: Constants.Dates.minDate,\n                                duration: Constants.Animations.tree,\n                                body: transition => {\n                                    translate(transition, AnimationType.MouseOver)\n                                }\n                            })\n                    }\n                }\n\n                const gap = 4\n\n                ctx.roundRect(x + gap, y + gap, cell.w - gap, cell.h - gap, gap * 2)\n                ctx.fill()\n\n                if (cell.label\n                    && Helper.stringWidth(cell.label) < cell.w - gap\n                    && cell.h - gap > 16\n                    && !this.animations.contains(cell.id, AnimationType.Init)) {\n                    ctx.beginPath()\n                    TextStyles.large(ctx)\n                    ctx.fillStyle = !Helper.isColorVisible(cell.color, '#ffffff')\n                                    ? '#000000'\n                                    : '#ffffff'\n                    ctx.fillText(cell.label,\n                        x + 2 + cell.w / 2,\n                        y + 2 + cell.h / 2)\n                }\n\n                ctx.resetTransform()\n\n                if (isVertical)\n                    y += cell.h\n                else\n                    x += cell.w\n\n                totalSquare -= cell.w * cell.h\n                sum -= cell.value\n            }\n\n            if (isVertical) {\n                x += cells[0].w\n                y = minY\n            } else {\n                y += cells[0].h\n                x = minX\n            }\n\n            minX = x\n            minY = y\n\n            isVertical = !isVertical\n        }\n\n        this.tooltip.render(!!tooltipCell && !this.dropdown?.isActive,\n            this.onMouseMoveEvent,\n            [\n                new TooltipValue(`${ tooltipCell?.label }: ${ Formatter.format(tooltipCell?.value, PlotAxisType.Number, this.settings.valuePostfix) }`)\n            ],\n            this.data.values.find(v => v.id == tooltipCell?.id))\n\n        if (!this.isDestroy)\n            requestAnimationFrame(this.render.bind(this))\n\n        this.state = RenderState.Idle\n\n        super.renderDropdown()\n\n        if (tooltipCell || this.contextMenu)\n            this.renderContextMenu(contextMenuData)\n        else\n            this.onContextMenuEvent = undefined\n    }\n\n    #isInCell(cell: TreeCell) {\n        if (!this.onMouseMoveEvent || !cell)\n            return false\n\n        const mouse = this.getMousePosition(this.onMouseMoveEvent)\n\n        return !(this.dropdown?.isActive ?? false)\n               && cell.x <= mouse.x && mouse.x <= cell.x + cell.w\n               && cell.y <= mouse.y && mouse.y <= cell.y + cell.h\n    }\n\n    #drawEmpty() {\n        const ctx = Canvas.getContext(this.canvas)\n\n        TextStyles.regular(ctx)\n        ctx.fillText(TextResources.treeMapIsEmpty,\n            this.canvas.width / 2,\n            this.canvas.height / 2)\n    }\n\n    refresh() {\n        super.refresh()\n    }\n\n    resize() {\n        super.resize()\n\n        this.initAnimations()\n        this.animations.clear()\n    }\n\n    prepareSettings() {\n        super.prepareSettings()\n\n        this.data.values = this.data.values.map(v => new Sector(v))\n\n        this.data.values = this.data.values.filter(v => v.value > 0)\n\n        this.data.values.sort((a, b) => (b.value ?? 0) - (a.value ?? 0))\n\n        this.calculateColors(true)\n\n        for (let item of this.data.values) {\n            item.disabled = !item.value\n            item.value ??= 0\n        }\n    }\n\n    initDropdown() {\n        super.initDropdown()\n\n        this.dropdown = new Dropdown(this.canvas,\n            {\n                x: -10,\n                y: 10,\n                icon: Icon.ThreeLines,\n                items: [\n                    {\n                        text: TextResources.exportCSV,\n                        action: () => {\n                            Export.asCsv(Decomposition.toTable(TreeData.getRows(this.data)), this.settings.title)\n                        }\n                    },\n                    {\n                        isDivider: true\n                    } as DropdownItem,\n                    {\n                        text: TextResources.decomposeToTable,\n                        action: () => {\n                            new Modal(Decomposition.toTable(TreeData.getRows(this.data)),\n                                undefined,\n                                this.settings.title ?? TextResources.dataAsTable)\n                                .open()\n                        }\n                    }\n                ]\n            })\n    }\n}","import { TableData } from 'types/TableData'\nimport * as Helper from 'Helper'\nimport { Value } from 'types/base/Value'\nimport { ChartSettings } from 'types/ChartSettings'\nimport { Formatter } from 'helpers/Formatter'\nimport { Styles } from 'static/constants/Styles'\nimport { Tag } from 'static/Enums'\n\nexport class Decomposition {\n    static toTable(values: TableData) {\n        let table = document.createElement(Tag.Div)\n\n        table.classList.add('o-table')\n\n        let totals = new Map<string, number>()\n        let rows = '',\n            headers = '',\n            index = 0\n\n        let valuesMap = new Map<string, Map<string, any>>()\n\n        for (const tableValue of values.values) {\n            let allColumns = new Map<string, any>()\n\n            for (const header of values.headers)\n                allColumns.set(header.value, 0)\n\n            for (const [key, value] of tableValue.values)\n                allColumns.set(key, value)\n\n            let indexSpaces = ''\n            for (let i = 0; i < index; i++)\n                indexSpaces += ' '\n\n            valuesMap.set(tableValue.name + indexSpaces, allColumns)\n\n            index++\n        }\n\n        for (const tableHeader of values.headers)\n            headers += `\n                <div>\n                    ${ tableHeader.display }\n                </div>\n            `\n\n        for (const [key, value] of valuesMap) {\n            let columns = ''\n\n            for (const [vKey, vValue] of value) {\n                columns += `\n                    <div>\n                        ${ vValue == undefined ? '' : Formatter.number(vValue) }\n                    </div>\n                `\n\n                if (totals.has(vKey)) {\n                    let totalValue = +(totals.get(vKey) ?? 0)\n                    totals.set(vKey, totalValue + +vValue)\n                } else {\n                    totals.set(vKey, vValue)\n                }\n            }\n\n            rows += `\n                <div class=\"o-table-row\">\n                    <div>\n                        ${ key.trim() }\n                    </div>\n                    \n                    ${ columns } \n                </div>\n            `\n        }\n\n        let totalColumns = ''\n\n        for (const [, value] of totals)\n            totalColumns += `\n                <div>\n                    ${ value == undefined ? '' : Formatter.number(value) }\n                </div>\n            `\n\n        table.innerHTML = `\n            <div class=\"o-table-header\">\n                <div></div>\n\n                ${ headers }\n            </div>\n        \n            <div class=\"o-table-body\">\n                ${ rows }\n            </div>\n            \n            <div class=\"o-table-footer\">\n                <div></div>\n\n                ${ totalColumns }\n            </div>\n        `\n\n        return table\n    }\n\n    static toChart<T extends Value>(settings: ChartSettings, values: T[]) {\n        let container = document.createElement(Tag.Div),\n            div = document.createElement(Tag.Div),\n            script = document.createElement(Tag.Script),\n            id = Helper.guid()\n\n        container.style.display = Styles.Display.Flex\n        container.style.height = '100%'\n\n        div.id = id\n        div.style.flexGrow = '1'\n\n        let cloneSettings = JSON.parse(JSON.stringify(settings)) as ChartSettings\n\n        if (cloneSettings.title)\n            cloneSettings.title = cloneSettings.title + ' (Other)'\n        cloneSettings.data.values = values\n        cloneSettings.minWidth = undefined\n        cloneSettings.minHeight = undefined\n\n        script.innerHTML = `\n            new OCharts.chart(document.getElementById('${ id }'), ${ JSON.stringify(cloneSettings) })\n                .render()\n        `\n\n        container.append(div, script)\n\n        return container\n    }\n}","export { Animations } from './Animations'\nexport { Dates } from './Dates'\nexport { Values } from './Values'","import { Renderer } from 'types/base/Renderer'\nimport { GaugeData } from 'types/data/GaugeData'\nimport * as Helper from 'Helper'\nimport { Sector } from 'types/Sector'\nimport { Dropdown } from 'Dropdown'\nimport { Point } from 'types/Point'\nimport { Chart } from 'Chart'\nimport { Theme } from 'Theme'\nimport { TextStyles } from 'helpers/TextStyles'\nimport { TooltipValue } from 'types/TooltipValue'\nimport { Export } from 'Export'\nimport { Formatter } from 'helpers/Formatter'\nimport { Canvas } from 'helpers/Canvas'\nimport { TextResources } from 'static/TextResources'\nimport { AnimationType, Icon, PlotAxisType, RenderState } from 'static/Enums'\n\nexport class GaugeRenderer extends Renderer<GaugeData> {\n    #radius: number\n\n    #center: Point\n\n    constructor(chart: Chart) {\n        super(chart)\n\n        this.settings.enableLegend = false\n    }\n\n    render() {\n        super.render()\n\n        this.#draw()\n\n        const value = this.data.values[0]\n        this.tooltip.render(this.#isInsideSector(this.onMouseMoveEvent, value) && !this.dropdown?.isActive,\n            this.onMouseMoveEvent,\n            [\n                new TooltipValue(`${ value?.label }: ${ Formatter.format(value?.current, PlotAxisType.Number, this.settings.valuePostfix) }`)\n            ],\n            value)\n\n        if (!this.isDestroy)\n            requestAnimationFrame(this.render.bind(this))\n\n        this.state = RenderState.Idle\n\n        super.renderDropdown()\n    }\n\n    #draw() {\n        const ctx = Canvas.getContext(this.canvas)\n\n        const value = this.data.values[0] ?? { id: Helper.guid() }\n\n        if (this.state == RenderState.Init || this.animations.contains(value.id, AnimationType.Init))\n            this.animations.handle(value.id,\n                AnimationType.Init,\n                {\n                    duration: 450,\n                    continuous: true,\n                    body: transition => {\n                        value.current = value.value * transition\n                    }\n                })\n\n        ctx.beginPath()\n\n        ctx.strokeStyle = value.color\n        ctx.lineCap = 'round'\n        ctx.lineWidth = 40\n\n        const piece = value.current / this.data.max,\n            angle = (isNaN(piece) ? 1 : piece) * Math.PI\n\n        if (value.value) {\n            ctx.arc(this.#center.x, this.#center.y, this.#radius, Math.PI, angle - Math.PI)\n            ctx.stroke()\n        }\n\n        ctx.beginPath()\n\n        ctx.lineWidth = 1\n        ctx.lineCap = 'square'\n\n        let localAccumulator = 0,\n            localAngle = Math.PI\n\n        while (localAngle >= 0) {\n            let currentAngle = localAngle - Math.PI / 10 > 0\n                               ? Math.PI / 10\n                               : localAngle\n\n            const getPoint = (offset: number) => {\n                return {\n                    x: this.#center.x + (this.#radius + offset) * Math.cos(Math.PI + localAccumulator),\n                    y: this.#center.y + (this.#radius + offset) * Math.sin(Math.PI + localAccumulator)\n                }\n            }\n\n            let point1 = getPoint(50),\n                point2 = getPoint(90),\n                point3 = getPoint(115)\n\n            const opacity = Math.PI - localAngle > angle ? '66' : 'ff'\n\n            ctx.moveTo(point1.x, point1.y)\n            ctx.lineTo(point2.x, point2.y)\n            ctx.strokeStyle = Theme.text + opacity\n            ctx.stroke()\n\n            TextStyles.regular(ctx)\n            ctx.fillStyle = Theme.text + opacity\n            ctx.fillText(Formatter.number(this.data.max - localAngle / Math.PI * this.data.max), point3.x, point3.y)\n\n            localAccumulator += currentAngle\n\n            localAngle -= Math.PI / 10\n        }\n    }\n\n    #isInsideSector(event: MouseEvent, value: Sector): boolean {\n        if (!event)\n            return false\n\n        const isAngle = (point: Point) => {\n            let a = Math.atan2(point.y - this.#center.y, point.x - this.#center.x)\n            if (a < 0)\n                a += Math.PI * 2\n\n            const piece = value.current / this.data.max,\n                angle = (isNaN(piece) ? 1 : piece) * Math.PI\n\n            return a > Math.PI && Math.PI + angle >= a\n        }\n\n        const isWithinRadius = (v: Point) => {\n            const outerRadius = this.#radius + 20,\n                innerRadius = this.#radius - 20\n\n            return v.x * v.x + v.y * v.y <= outerRadius * outerRadius\n                   && v.x * v.x + v.y * v.y >= innerRadius * innerRadius\n        }\n\n        const point = this.getMousePosition(event),\n            inner = {\n                x: point.x - this.#center.x,\n                y: point.y - this.#center.y\n            }\n\n        return !(this.dropdown?.isActive ?? false)\n               && isAngle(point)\n               && isWithinRadius(inner)\n    }\n\n    #calculateSizes() {\n        const longSide = this.canvas.width < this.canvas.height\n                         ? this.canvas.height - 250\n                         : this.canvas.width\n\n        this.#radius = longSide / 3\n\n        this.#center = {\n            x: this.canvas.width / 2,\n            y: this.canvas.height - this.#radius / 5\n        }\n    }\n\n    refresh() {\n        super.refresh()\n    }\n\n    resize() {\n        super.resize()\n\n        this.initAnimations()\n        this.#calculateSizes()\n    }\n\n    prepareSettings() {\n        super.prepareSettings()\n\n        for (let item of this.data.values) {\n            item.disabled = !item.value\n            item.value ??= 0\n        }\n\n        if (this.data.values.length > 0 && this.data.values[0].value > this.data.max)\n            this.data.values[0].value = this.data.max\n    }\n\n    initDropdown() {\n        super.initDropdown()\n\n        this.dropdown = new Dropdown(this.canvas,\n            {\n                x: -10,\n                y: 10,\n                icon: Icon.ThreeLines,\n                items: [\n                    {\n                        text: TextResources.exportPNG,\n                        action: () => {\n                            Export.asPng(this.canvas, this.settings.title)\n                        }\n                    }\n                ]\n            })\n    }\n}","import { Theme } from 'Theme'\nimport * as Helper from 'Helper'\nimport { Canvas } from 'helpers/Canvas'\nimport { Icon, Tag } from 'static/Enums'\n\nexport class Export {\n    static asPng(canvas: HTMLCanvasElement, title: string) {\n        requestAnimationFrame(() => {\n            const ctx = Canvas.getContext(canvas)\n\n            let width = Helper.stringWidth(Icon.ThreeLines) + 20,\n                height = 64\n\n            ctx.fillStyle = Theme.canvasBackground\n            ctx.fillRect(canvas.width - width, 0, width, height)\n\n            let leftEmpty = 0,\n                rightEmpty = 0\n\n            const imageData = new Uint32Array(ctx.getImageData(0, 0, canvas.width, canvas.height).data.buffer)\n\n            let isBusy = false\n\n            for (let i = 0; i < canvas.width; i++) {\n                for (let j = 0; j < canvas.height; j++) {\n                    if (Canvas.isPixelBusy(imageData[i + j * canvas.width])) {\n                        isBusy = true\n                        break\n                    }\n                }\n\n                if (isBusy)\n                    break\n\n                leftEmpty++\n            }\n\n            isBusy = false\n\n            for (let i = canvas.width; i >= 0; i--) {\n                for (let j = 0; j < canvas.height; j++) {\n                    if (Canvas.isPixelBusy(imageData[i + j * canvas.width])) {\n                        isBusy = true\n                        break\n                    }\n                }\n\n                if (isBusy)\n                    break\n\n                rightEmpty++\n            }\n\n            if (leftEmpty > 4)\n                leftEmpty -= 4\n            if (rightEmpty > 4)\n                rightEmpty -= 4\n\n            if (leftEmpty > rightEmpty)\n                leftEmpty = rightEmpty\n            if (rightEmpty > leftEmpty)\n                rightEmpty = leftEmpty\n\n            let destinationCanvas = document.createElement(Tag.Canvas)\n            destinationCanvas.width = canvas.width - leftEmpty - rightEmpty\n            destinationCanvas.height = canvas.height\n\n            const destCtx = Canvas.getContext(destinationCanvas)\n\n            destCtx.fillStyle = Theme.background\n            destCtx.fillRect(0, 0, canvas.width, canvas.height)\n\n            destCtx.drawImage(canvas, -leftEmpty, 0)\n\n            Export.saveAs((title ?? 'chart') + '.png',\n                destinationCanvas.toDataURL('image/png'))\n        })\n    }\n\n    static asCsv(table: HTMLElement, title: string) {\n        let rows = table.querySelectorAll('tr'),\n            csv = []\n\n        for (let i = 0; i < rows.length; i++) {\n            let row = [],\n                cols = rows[i].querySelectorAll('td, th')\n\n            for (let j = 0; j < cols.length; j++) {\n                let data = cols[j].innerHTML\n                                  .replace(/(\\r\\n|\\n|\\r)/gm, '')\n                                  .replace(/(\\s\\s)/gm, ' ')\n\n                data = data.replace(/\"/g, '\"\"')\n                row.push('\"' + data + '\"')\n            }\n\n            csv.push(row.join(','))\n        }\n\n        Export.saveAs((title ?? 'table') + '.csv',\n            csv.join('\\n'),\n            'data:text/csv;charset=utf-8,' + encodeURIComponent(csv.join('\\n')),\n            true)\n    }\n\n    static saveAs(name: string, dataURL: string, href?: string | undefined, isText?: boolean) {\n        if (window.showSaveFilePicker != undefined) {\n            const accept = isText\n                           ? { 'text/csv': '.csv' } as FilePickerAcceptType\n                           : { 'image/*': '.png' } as FilePickerAcceptType\n\n            const options = {\n                suggestedName: name,\n                types: [\n                    {\n                        accept: accept\n                    }\n                ],\n                excludeAcceptAllOption: true\n            } as SaveFilePickerOptions\n\n            function toBlob(dataURI: string) {\n                const byteString = atob(dataURI.split(',')[1]),\n                    mimeString = dataURI.split(',')[0]\n                        .split(':')[1]\n                        .split(';')[0],\n                    buffer = new ArrayBuffer(byteString.length),\n                    imageArray = new Uint8Array(buffer)\n\n                for (let i = 0; i < byteString.length; i++)\n                    imageArray[i] = byteString.charCodeAt(i)\n\n                return new Blob([buffer], { type: mimeString })\n            }\n\n            window.showSaveFilePicker(options)\n                  .then(fileHandle => {\n                      fileHandle.createWritable()\n                                .then(writableStream => {\n                                    writableStream.write(isText ? dataURL : toBlob(dataURL))\n                                                  .then(() => writableStream.close())\n                                })\n                  })\n        } else {\n            let download = document.createElement(Tag.A)\n            download.href = href ?? dataURL\n            download.download = name\n            download.click()\n        }\n    }\n}","import { PlotAxisType } from 'static/Enums'\n\nexport abstract class Formatter {\n    static number = (value: number | undefined) =>\n        value?.toLocaleString(undefined, {\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2\n        }) ?? ''\n\n    static date = (value: Date | undefined) =>\n        value?.toLocaleDateString() ?? ''\n\n    static text = (value: string | undefined) =>\n        value ?? ''\n\n    static format(value: any | undefined, type: PlotAxisType, postfix?: string | undefined) {\n        let result = ''\n\n        switch (type) {\n            case PlotAxisType.Number:\n                result = Formatter.number(value)\n                break\n\n            case PlotAxisType.Date:\n                result = Formatter.date(new Date(value))\n                break\n\n            case PlotAxisType.Text:\n                result = Formatter.text(value)\n                break\n        }\n\n        return result + (postfix ?? '')\n    }\n\n}","import { TextStyles } from 'helpers/TextStyles'\nimport { Theme } from 'Theme'\nimport { Animations } from 'Animations'\nimport * as Helper from 'Helper'\nimport { ButtonOptions } from 'types/ButtonOptions'\nimport { Canvas } from 'helpers/Canvas'\nimport { AnimationType } from 'static/Enums'\nimport * as Constants from 'static/constants/Index'\nimport { Styles } from 'static/constants/Styles'\n\nexport class Button {\n    #canvas: HTMLCanvasElement\n\n    #options: ButtonOptions\n\n    #canvasPosition: DOMRect\n\n    animations: Animations\n\n    #isInit: boolean\n\n    #position: DOMRect\n\n    constructor(canvas: HTMLCanvasElement, options: ButtonOptions) {\n        this.#canvas = canvas\n        this.#options = options\n\n        this.animations = new Animations()\n\n        this.#initAnimations()\n    }\n\n    render(moveEvent: MouseEvent, clickEvent: MouseEvent | undefined) {\n        if (!this.#isInit)\n            this.#initAnimations()\n\n        const ctx = Canvas.getContext(this.#canvas)\n\n        ctx.beginPath()\n\n        const translate = (transition: number, event: AnimationType) => {\n            this.animations.reload('animation-button', event)\n\n            ctx.fillStyle = Helper.adjustColor(Theme.canvasBackground, -Math.round(transition * 25))\n        }\n\n        if (this.#isOnButton(moveEvent)) {\n            this.#canvas.style.cursor = Styles.Cursor.Pointer\n\n            if (clickEvent && this.#isOnButton(clickEvent)) {\n                this.#options.action()\n                clickEvent = undefined\n            }\n\n            this.animations.handle('animation-button',\n                AnimationType.MouseOver,\n                {\n                    duration: 300,\n                    body: transition => {\n                        translate(transition, AnimationType.MouseLeave)\n                    }\n                })\n        } else {\n            this.animations.handle('animation-button',\n                AnimationType.MouseLeave,\n                {\n                    timer: Constants.Dates.minDate,\n                    duration: 300,\n                    backward: true,\n                    body: transition => {\n                        translate(transition, AnimationType.MouseOver)\n                    }\n                })\n        }\n\n        ctx.roundRect(this.#position.x, this.#position.y, this.#position.width, this.#position.height, 4)\n        ctx.fill()\n\n        TextStyles.regular(ctx)\n        ctx.fillText(this.#options.text,\n            this.#position.x + this.#position.width / 2,\n            this.#position.y + this.#position.height / 2)\n\n        this.#isInit = true\n\n        return clickEvent\n    }\n\n    resize() {\n        this.#initAnimations()\n    }\n\n    #initAnimations() {\n        this.#canvasPosition = this.#canvas.getBoundingClientRect()\n\n        this.#canvasPosition.x += scrollX\n        this.#canvasPosition.y += scrollY\n\n        const width = Helper.stringWidth(this.#options.text) + 12,\n            height = 20\n\n        this.#position = <DOMRect>{\n            x: this.#options.x + width > this.#canvas.width\n               ? this.#canvas.width - width\n               : this.#options.x < 0\n                 ? this.#canvas.width + this.#options.x - width\n                 : this.#options.x,\n            y: this.#options.y + height > this.#canvas.height\n               ? this.#canvas.height - height\n               : this.#options.y < 0\n                 ? this.#canvas.height + this.#options.y - height\n                 : this.#options.y,\n            width: width,\n            height: height\n        }\n    }\n\n    #isOnButton(event: MouseEvent): boolean {\n        if (!event)\n            return false\n\n        let trueX = event.clientX - this.#canvasPosition.x + scrollX,\n            trueY = event.clientY - this.#canvasPosition.y + scrollY\n\n        return trueX >= this.#position.x && trueX <= this.#position.x + this.#position.width\n               && trueY >= this.#position.y && trueY <= this.#position.y + this.#position.height\n    }\n}","export enum AnimationType {\n    None,\n\n    MouseOver,\n\n    MouseLeave,\n\n    Init,\n\n    Click,\n\n    AnotherItemOver,\n\n    AnotherItemLeave\n}\n\nexport enum Attribute {\n    Name = 'name'\n}\n\nexport enum ChartType {\n    Plot,\n\n    Circular,\n\n    Gauge,\n\n    TreeMap\n}\n\nexport enum ErrorType {\n    NullContext = 'Can\\'t find context',\n\n    ElementNotExist = 'Element does not exist'\n}\n\nexport enum Events {\n    VisibilityChanged = 'visibilitychange',\n\n    Blur = 'blur',\n\n    MouseMove = 'mousemove',\n\n    Click = 'click',\n\n    Change = 'change',\n\n    ContextMenu = 'contextmenu'\n}\n\nexport enum LegendPlace {\n    Bottom,\n\n    Left,\n\n    Top,\n\n    Right\n}\n\nexport enum LineType {\n    Solid,\n\n    Dash,\n\n    Dotted\n}\n\nexport enum PlotAxisType {\n    Number,\n\n    Date,\n\n    Text\n}\n\nexport enum PlotType {\n    Line,\n\n    AttentionLine,\n\n    Column,\n\n    Bar,\n\n    StackingColumn\n}\n\nexport enum Tag {\n    Canvas = 'canvas',\n\n    A = 'a',\n\n    Div = 'div',\n\n    Dialog = 'dialog',\n\n    Table = 'table',\n\n    Script = 'script',\n\n    Button = 'button',\n\n    Span = 'span'\n}\n\nexport enum RenderState {\n    Idle,\n\n    Init\n}\n\nexport enum Icon {\n    ThreeLines = '☰',\n\n    Close = '×'\n}\n\nexport enum DrawPointType {\n    Move,\n\n    Line,\n\n    QuadraticCurve\n}","import { Errors } from 'helpers/Errors'\nimport { ErrorType, Icon, Tag } from 'static/Enums'\n\nexport class Modal {\n    modal: HTMLDialogElement | undefined\n\n    #content: HTMLDivElement | undefined\n\n    constructor(content?: HTMLElement, size?: DOMRect, title?: string) {\n        this.modal = document.createElement(Tag.Dialog)\n\n        this.modal.classList.add(ModalClasses.modal)\n\n        if (size) {\n            this.modal.style.width = `${ size.width }px`\n            this.modal.style.height = `${ size.height }px`\n        }\n\n        this.modal.oncancel = () => this.close()\n\n        document.body.appendChild(this.modal)\n\n        this.#setHeader(title)\n\n        this.#setContent(content)\n    }\n\n    open() {\n        Errors.throwIsUndefined(this.modal, ErrorType.ElementNotExist)\n\n        this.modal!.showModal()\n    }\n\n    close() {\n        Errors.throwIsUndefined(this.modal, ErrorType.ElementNotExist)\n\n        this.modal!.close()\n\n        this.modal!.remove()\n\n        this.modal = undefined\n    }\n\n    #setHeader(title: string | undefined) {\n        Errors.throwIsUndefined(this.modal, ErrorType.ElementNotExist)\n\n        let titleSpan = document.createElement(Tag.Span)\n\n        titleSpan.classList.add(ModalClasses.title)\n        titleSpan.innerHTML = title ?? ''\n\n        let closeButton = document.createElement(Tag.Button)\n\n        closeButton.classList.add(ModalClasses.close)\n        closeButton.innerHTML = Icon.Close\n\n        let header = document.createElement(Tag.Div)\n\n        header.classList.add(ModalClasses.header)\n\n        header.appendChild(titleSpan)\n        header.appendChild(closeButton)\n\n        this.modal!.appendChild(header)\n\n        closeButton.onclick = () => this.close()\n    }\n\n    #setContent(content: HTMLElement | undefined) {\n        if (this.#content == undefined) {\n            this.#content = document.createElement(Tag.Div)\n\n            this.#content.classList.add(ModalClasses.content)\n\n            this.modal?.appendChild(this.#content)\n        }\n\n        if (content != undefined)\n            this.#content.appendChild(content)\n    }\n}\n\nclass ModalClasses {\n    static modal = 'o-modal'\n\n    static title = 'o-modal-title'\n\n    static close = 'o-modal-close'\n\n    static header = 'o-modal-header'\n\n    static content = 'o-modal-content'\n}","import { Value } from 'types/base/Value'\nimport { PlotPoint } from 'types/PlotPoint'\nimport { LineType, PlotType } from 'static/Enums'\n\nexport class PlotSeries extends Value {\n    values: PlotPoint[]\n\n    type: PlotType\n\n    width: number\n\n    lineType: LineType = LineType.Solid\n\n    constructor(obj: object) {\n        super()\n\n        Object.assign(this, obj)\n    }\n\n    toggle(transition: number) {\n        super.toggle(transition)\n    }\n\n    checkCondition(): boolean {\n        super.checkCondition()\n\n        return true\n    }\n\n    reset() {\n        super.reset()\n    }\n}","import { Value } from 'types/base/Value'\nimport { Renderable } from 'types/base/Renderable'\nimport * as Helper from 'Helper'\nimport { Sector } from 'types/Sector'\nimport { Point } from 'types/Point'\nimport { Theme } from 'Theme'\nimport { Chart } from 'Chart'\nimport { TextStyles } from 'helpers/TextStyles'\nimport { Canvas } from 'helpers/Canvas'\nimport { Button } from 'Button'\nimport { TextResources } from 'static/TextResources'\nimport * as Constants from 'static/constants/Index'\nimport { Styles } from 'static/constants/Styles'\nimport { AnimationType, Events, LegendPlace, RenderState } from 'static/Enums'\nimport { ChartSettings } from './types/ChartSettings'\n\nexport class Legend extends Renderable {\n    #button: Button\n\n    #offset: Point\n\n    #chart: Chart\n\n    #hoverCount: number\n\n    isDestroy: boolean = false\n\n    constructor(chart: Chart) {\n        super(chart)\n\n        this.#chart = chart\n\n        this.prepareSettings()\n    }\n\n    render() {\n        super.render()\n\n        const ctx = Canvas.getContext(this.canvas)\n\n        let nextPoint = { x: 20, y: 21 }\n\n        this.canvas.style.cursor = Styles.Cursor.Default\n\n        TextStyles.regular(ctx)\n        ctx.textAlign = 'start'\n        ctx.textBaseline = 'alphabetic'\n\n        ctx.translate(this.#offset.x, this.#offset.y)\n\n        this.#hoverCount = 0\n\n        for (const value of this.settings.data.values.filter(v => !v.hideInLegend))\n            nextPoint = this.#draw(value, nextPoint.x, nextPoint.y)\n\n        ctx.translate(-this.#offset.x, -this.#offset.y)\n\n        if (!this.isDestroy)\n            requestAnimationFrame(this.render.bind(this))\n\n        this.onClickEvent = this.#button?.render(this.onMouseMoveEvent, this.onClickEvent)\n\n        this.state = RenderState.Idle\n    }\n\n    #draw(value: Value, x: number, y: number): Point {\n        const ctx = Canvas.getContext(this.canvas)\n\n        const textWidth = Helper.stringWidth(value.label),\n            circleRadius = 6\n\n        if (x + 48 + textWidth >= this.canvas.width - 40 - this.#offset.x) {\n            x = 20\n            y += 26\n        }\n\n        let rectX = x - circleRadius - circleRadius,\n            rectY = y - circleRadius / 2 - circleRadius,\n            rectW = circleRadius + circleRadius + textWidth + 18,\n            rectH = 20\n\n        const isHover = (event: MouseEvent | undefined) => {\n            if (!event)\n                return false\n\n            const px = event.clientX - this.canvasPosition.x + scrollX - this.#offset.x,\n                py = event.clientY - this.canvasPosition.y + scrollY - this.#offset.y\n\n            return px >= rectX && px <= rectX + rectW\n                   && py >= rectY && py <= rectY + rectH\n        }\n\n        const translate = (transition: number, event: AnimationType) => {\n            this.animations.reload(value.id, event)\n\n            ctx.beginPath()\n\n            ctx.roundRect(rectX, rectY, rectW, rectH, circleRadius)\n\n            ctx.fillStyle = Helper.adjustColor(Theme.canvasBackground, Math.round(-25 * transition))\n            ctx.fill()\n        }\n\n        this.animations.handle(value.id,\n            AnimationType.Click,\n            {\n                duration: Constants.Animations.legend,\n                continuous: true,\n                before: () => {\n                    return this.onClickEvent != undefined\n                           && (isHover(this.onClickEvent)\n                               || (value instanceof Sector\n                                   && value.current !== 0\n                                   && value.value !== value.current))\n                           && value.checkCondition()\n                },\n                body: transition => {\n                    value.toggle(transition)\n\n                    if (transition == 1)\n                        this.onClickEvent = new PointerEvent(Events.Click)\n                }\n            })\n\n        if (isHover(this.onMouseMoveEvent)) {\n            this.animations.handle(value.id,\n                AnimationType.MouseOver,\n                {\n                    duration: Constants.Animations.button,\n                    body: transition => {\n                        translate(transition, AnimationType.MouseLeave)\n                    }\n                })\n\n            if (!value.disabled) {\n                this.#hoverCount++\n\n                this.#chart.highlight(value)\n            }\n\n            this.canvas.style.cursor = Styles.Cursor.Pointer\n        } else {\n            this.animations.handle(value.id,\n                AnimationType.MouseLeave,\n                {\n                    timer: Constants.Dates.minDate,\n                    duration: Constants.Animations.button,\n                    backward: true,\n                    body: transition => {\n                        translate(transition, AnimationType.MouseOver)\n                    }\n                })\n        }\n\n        ctx.beginPath()\n\n        ctx.arc(x - 1, y + 1, 3, 0, 2 * Math.PI)\n        ctx.fillStyle = value.disabled ? Helper.grayScale(value.color) : value.color\n        ctx.fill()\n\n        ctx.fillStyle = Theme.text\n        if (value.disabled)\n            ctx.fillStyle += '7f'\n\n        ctx.fillText(value.label, x + circleRadius * 1.5 + 1, y + 6)\n\n        x += 20\n\n        if (value.disabled) {\n            ctx.moveTo(x - 10, y + 2)\n            ctx.lineTo(x + textWidth - 10, y + 2)\n            ctx.strokeStyle = Theme.text + '7f'\n            ctx.stroke()\n        }\n\n        x += textWidth + 22\n\n        return {\n            x: x,\n            y: y\n        }\n    }\n\n    destroy() {\n        this.isDestroy = true\n\n        this.canvas.remove()\n    }\n\n    refresh() {\n        this.state = RenderState.Init\n    }\n\n    resize() {\n        this.calculateSizes()\n        this.#button?.resize()\n        this.initAnimations()\n    }\n\n    calculateSizes() {\n        switch (this.settings.legendPlace) {\n            case LegendPlace.Bottom:\n            default:\n                this.canvas.width = this.settings.width\n                this.canvas.height = Legend.getLegendHeight(this.settings.data.values, this.canvas.width)\n\n                this.node.style.flexDirection = Styles.FlexDirection.Column\n\n                break\n\n            case LegendPlace.Top:\n                this.canvas.width = this.settings.width\n                this.canvas.height = Legend.getLegendHeight(this.settings.data.values, this.canvas.width)\n\n                this.node.style.flexDirection = Styles.FlexDirection.ColumnReverse\n\n                break\n\n            case LegendPlace.Left:\n                this.canvas.width = 500\n                this.canvas.height = this.settings.height\n\n                this.node.style.flexDirection = Styles.FlexDirection.Row\n\n                break\n\n            case LegendPlace.Right:\n                this.canvas.width = 500\n                this.canvas.height = this.settings.height\n\n                this.node.style.flexDirection = Styles.FlexDirection.RowReverse\n\n                break\n        }\n\n        this.#offset = {\n            x: Legend.getOffsetToCenter(this.settings.data.values, this.canvas.width),\n            y: (this.canvas.height - Legend.getLegendHeight(this.settings.data.values, this.canvas.width)) / 2\n        }\n    }\n\n    applySettings(settings: ChartSettings) {\n        this.settings = settings\n\n        this.prepareSettings()\n    }\n\n    prepareSettings() {\n        this.resize()\n\n        if (!this.settings.disableInteractions)\n            this.#button = new Button(this.canvas,\n                {\n                    x: -10,\n                    y: 12,\n                    text: TextResources.reset,\n                    action: () => {\n                        for (let value of this.settings.data.values)\n                            value.reset()\n                    }\n                })\n    }\n\n    static getOffsetToCenter(values: Value[], width: number): number {\n        let maxWidth = 20\n\n        for (const value of values.filter(v => !v.hideInLegend)) {\n            const labelWidth = Helper.stringWidth(value.label)\n\n            if (maxWidth + labelWidth + 47 >= width - 100)\n                break\n\n            maxWidth += labelWidth + 47\n        }\n\n        return width / 2 - maxWidth / 2\n    }\n\n    static getLegendHeight(values: Value[], width: number): number {\n        let count = 1,\n            acc = 20,\n            offset = Legend.getOffsetToCenter(values, width)\n\n        for (const value of values.filter(v => !v.hideInLegend)) {\n            const labelWidth = Helper.stringWidth(value.label)\n\n            if (acc + labelWidth + 48 >= width - 32 - offset) {\n                acc = 20\n                count++\n            }\n\n            acc += labelWidth + 48\n        }\n\n        return 24 + count * 20 + (count - 1) * 6\n    }\n}","export class Values {\n    static readonly titleOffset = 30\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","Number.prototype.isAnyEquals = function (...values) {\n    return values.includes(<number>this)\n}\n\nDate.prototype.addDays = function (days: number) {\n    let result = new Date(this)\n    result.setDate(result.getDate() + days)\n    return result\n}\n\nDate.prototype.addMilliseconds = function (milliseconds: number) {\n    let result = new Date(this)\n    result.setMilliseconds(result.getMilliseconds() + milliseconds)\n    return result\n}\n\nMap.prototype.trySet = function (key: any, value: any) {\n    if (!this.has(key))\n        this.set(key, value)\n}","import { Chart } from 'Chart'\nimport { ChartSettings } from 'types/ChartSettings'\n\nfunction OCharts() {\n}\n\nOCharts.chart = function(context: HTMLElement, settings: ChartSettings) {\n    return new Chart(context, settings)\n}\n\n// @ts-ignore\nwindow.OCharts = OCharts"],"names":["Animations","constructor","this","Map","handle","id","type","value","key","has","set","contains","reload","get","timer","Date","clear","forEach","_value","AnimationType","Init","delete","reverse","item","stamp","passed","getTime","reversedPassed","duration","backward","isBackward","isEnd","end","Constants","Dates","minDate","initializeTransitions","i","t","x","Math","pow","y","transitionCurve","toFixed","getTransition","transition","before","body","continuous","endsWith","color","amount","replace","min","max","parseInt","toString","slice","Array","join","round","reduce","a","v","padStart","floor","random","str","font","widths","from","String","acc","cur","charCodeAt","S4","substring","toLowerCase","background","foreground","backgroundAsRgb","hexToRgb","foregroundAsRgb","r","g","b","test","opacity","hex","result","exec","componentToHex","c","length","rgb","bg","Theme","canvasBackground","alpha","Color","text","Errors","error","Error","throwIsUndefined","object","undefined","throw","context","settings","node","applySettings","document","addEventListener","Events","VisibilityChanged","resetMouse","window","Blur","Click","event","target","canvas","closeDropdowns","render","destroy","disconnect","highlight","reset","isNeedRestartRender","enableLegend","Legend","enableTooltip","disableInteractions","ChartType","Plot","PlotRenderer","Circular","CircularRenderer","Gauge","GaugeRenderer","TreeMap","TreeRenderer","prepareSettings","initDropdown","initAnimations","resize","refresh","initialize","isDarkThemeFunction","style","display","Styles","Display","Flex","flexDirection","FlexDirection","Column","alignItems","AlignItems","Center","justifyContent","JustifyContent","height","ResizeObserver","observe","circular","legend","tree","tooltip","button","Sector","Value","obj","super","Object","assign","baseColor","canRenderLabel","isMouseInside","toggle","disabled","current","checkCondition","TextResources","exportPNG","decomposeToTable","exportCSV","menu","allDataIsHidden","other","thousandShort","millionShort","billionShort","show","noLabel","treeMapIsEmpty","dataAsTable","getContext","willReadFrequently","ErrorType","NullContext","isPixelBusy","pixel","canvasBackgroundInt","data","templateId","getElementById","condition","lines","opacityValue","getBoundingClientRect","scrollX","scrollY","ctx","Canvas","textWidth","map","line","Helper","stringWidth","clientX","clientY","width","beginPath","roundRect","baseOpacity","strokeStyle","dropdownBorder","lineWidth","fillStyle","stroke","fill","offset","arc","PI","TextStyles","fillText","padding","updateVisibility","visibility","Visibility","Visible","regex","content","cloneNode","createElement","Tag","Div","innerHTML","position","Position","Absolute","pointerEvents","PointerEvents","None","setAttribute","Attribute","Name","matches","matchAll","html","match","property","replaceAll","appendChild","Hidden","left","top","tooltips","querySelectorAll","ThemeOptions","colors","backgrounds","lineAxes","lineActives","dropdownBorders","canvasBackgrounds","args","base","JSON","parse","stringify","getRows","headers","values","series","seriesValues","push","xType","PlotAxisType","Formatter","date","name","label","unique","Set","uniqueHeaders","filter","add","sort","Cursor","Default","Pointer","ColumnReverse","Row","RowReverse","ImageRendering","Pixelated","options","isActive","icon","animations","moveEvent","clickEvent","translate","adjustColor","cursor","MouseOver","MouseLeave","regular","iconOffset","navigator","platform","borderRadius","items","dividers","maxWidth","dropdownOpacity","itemOpacityDec","itemBackground","dropdownItemHoverColor","borderColor","rect","setLineDash","isDivider","moveTo","lineTo","animationKey","isReturn","action","textAlign","textBaseline","close","w","h","trueX","trueY","callback","isDark","function","matchMedia","setTheme","Change","index","currentTheme","lineAxis","lineActive","Number","Renderer","chart","startAngle","isMousePositionChanged","prevPoint","onMouseMoveEvent","MouseEvent","MouseMove","calculateAngles","valuesSum","anglesSum","flatMap","sector","angle","sum","getAngle","find","o","getAccumulator","calculatePoint","accumulator","getPoint","radius","center","cos","sin","direction","point2","points","labelStartPoint","labelMidPoint","dir","endPoint","labelPoints","DrawPoint","DrawPointType","Move","QuadraticCurve","Line","localAccumulator","localAngle","currentAngle","tangentIntersectionAngle","tangentIntersectionPoint","innerRadius","innerPoint2","scale","centerOfSector","p","sqrt","ratio","focus","applyAlpha","textColor","outline","lineStyles","lineJoin","lineCap","state","isBusy","imageDataX","imageDataY","imageData","Uint32Array","getImageData","buffer","drawLabel","quadraticCurveTo","circularLabel","drawSector","point","closePath","animate","indexOf","_transition","isAnyEquals","s","AnotherItemOver","AnotherItemLeave","isInsideSector","isInsideSectorClick","onClickEvent","includes","isAnyCollapsing","empty","renderDropdown","currentHover","isAnyHover","contextMenu","renderContextMenu","onContextMenuEvent","dropdown","TooltipValue","format","valuePostfix","innerTitle","isDestroy","requestAnimationFrame","bind","isWithinRadius","getMousePosition","inner","outer","atan2","abs","findIndex","sumBefore","isAngle","calculateSizes","titleOffset","title","Values","shortSide","longestLabel","large","console","warn","enableOther","_other","Modal","Decomposition","toChart","innerWidth","innerHeight","open","splice","guid","disableInitAnimation","Dropdown","Icon","ThreeLines","Export","asPng","asCsv","toTable","CircularData","Renderable","highlightItems","RenderState","Idle","renderTitle","remove","domRect","parentElement","minWidth","isNaN","minHeight","calculateColors","dispatchEvent","CustomEvent","detail","force","randomColor","adjustStep","adjustAmount","clone","canvasPosition","isClick","legendPlace","LegendPlace","Top","Bottom","getLegendHeight","Left","Right","tooltipLines","axisLineHoverColor","yValue","yHeight","columnWidth","seriesToRender","columnsIndex","columnsCount","PlotType","barsIndex","barsCount","Bar","stackingAccumulator","anyHighlight","changeColor","lineType","LineType","Dash","Dotted","Solid","xIndex","yIndex","getTooltipValue","step","unit","pointDuration","now","addMilliseconds","next","prevValue","endPointX","endPointY","mouse","AttentionLine","bottom","right","yMax","minStep","seriesHeight","fillRect","StackingColumn","ceil","PlotSeries","it","isISOString","simple","Tooltip","PlotData","skip","clearRect","drawImage","isContainsBar","xTitle","yTitle","rotate","resetTransform","xYPos","xCounter","trySet","maxLabelWidth","maxCount","renderStep","axisLabelOffset","yCount","count","yCounter","yStep","labelY","labelYAsKey","postfix","shortLabels","countOfTens","number","isBar","createImageBitmap","then","res","putImageData","axisLineColor","xValues","yValues","isDate","tempDate","addDays","yMin","stackingColumns","yMaxWidth","isRight","imageRendering","append","onmousemove","onclick","oncontextmenu","preventDefault","onmouseleave","maxHeight","tooltipCell","contextMenuData","totalSquare","minX","minY","isVertical","remainWidth","remainHeight","cells","isSingle","isLast","j","h1","w1","cell","cellInit","cellIndex","getPrev","E","initAnimationDuration","minSize","rest","gap","isColorVisible","TreeData","table","classList","totals","rows","valuesMap","tableValue","allColumns","header","indexSpaces","tableHeader","columns","vKey","vValue","totalValue","trim","totalColumns","container","div","script","Script","flexGrow","cloneSettings","piece","point1","point3","outerRadius","longSide","leftEmpty","rightEmpty","destinationCanvas","destCtx","saveAs","toDataURL","csv","row","cols","encodeURIComponent","dataURL","href","isText","showSaveFilePicker","suggestedName","types","accept","excludeAcceptAllOption","toBlob","dataURI","byteString","atob","split","mimeString","ArrayBuffer","imageArray","Uint8Array","Blob","fileHandle","createWritable","writableStream","write","download","A","click","Text","toLocaleString","minimumFractionDigits","maximumFractionDigits","toLocaleDateString","size","modal","Dialog","ModalClasses","oncancel","ElementNotExist","showModal","titleSpan","Span","closeButton","Button","Close","nextPoint","hideInLegend","getOffsetToCenter","labelWidth","rectX","rectY","circleRadius","rectW","isHover","px","py","PointerEvent","grayScale","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","prototype","days","setDate","getDate","milliseconds","setMilliseconds","getMilliseconds","OCharts","Chart"],"sourceRoot":""}