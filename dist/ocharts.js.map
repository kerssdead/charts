{"version":3,"file":"ocharts.js","mappings":"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","sources":["webpack://charts/./src/Animations.ts","webpack://charts/./src/Helper.ts","webpack://charts/./src/types/TooltipValue.ts","webpack://charts/./src/helpers/Errors.ts","webpack://charts/./src/Chart.ts","webpack://charts/./src/types/Color.ts","webpack://charts/./src/static/constants/Animations.ts","webpack://charts/./src/types/Sector.ts","webpack://charts/./src/static/TextResources.ts","webpack://charts/./src/helpers/Canvas.ts","webpack://charts/./src/Tooltip.ts","webpack://charts/./src/static/ThemeOptions.ts","webpack://charts/./src/types/data/PlotData.ts","webpack://charts/./src/static/constants/Styles.ts","webpack://charts/./src/Dropdown.ts","webpack://charts/./src/Theme.ts","webpack://charts/./src/render/CircularRenderer.ts","webpack://charts/./src/types/base/Renderer.ts","webpack://charts/./src/types/data/TreeData.ts","webpack://charts/./src/types/data/CircularData.ts","webpack://charts/./src/types/base/Value.ts","webpack://charts/./src/render/PlotRenderer.ts","webpack://charts/./src/static/constants/Dates.ts","webpack://charts/./src/helpers/TextStyles.ts","webpack://charts/./src/types/base/Renderable.ts","webpack://charts/./src/render/TreeRenderer.ts","webpack://charts/./src/Decomposition.ts","webpack://charts/./src/static/constants/Index.ts","webpack://charts/./src/render/GaugeRenderer.ts","webpack://charts/./src/Export.ts","webpack://charts/./src/helpers/Formatter.ts","webpack://charts/./src/Button.ts","webpack://charts/./src/static/Enums.ts","webpack://charts/./src/Modal.ts","webpack://charts/./src/types/PlotSeries.ts","webpack://charts/./src/Legend.ts","webpack://charts/./src/static/constants/Values.ts","webpack://charts/webpack/bootstrap","webpack://charts/./src/Prototypes.ts","webpack://charts/./src/OCharts.ts"],"sourcesContent":["import { AnimationItem } from 'types/AnimationItem'\r\nimport { AnimationType } from 'static/Enums'\r\n\r\nexport class Animations {\r\n    #queue: Map<string, AnimationItem>\r\n\r\n    static transitionCurve: Map<number, number> = new Map()\r\n\r\n    constructor() {\r\n        this.#queue = new Map()\r\n    }\r\n\r\n    add(id: string, type: AnimationType, value: AnimationItem) {\r\n        const key = this.#getKey(id, type)\r\n        if (!this.#queue.has(key))\r\n            this.#queue.set(key, value)\r\n\r\n        this.#process(key)\r\n    }\r\n\r\n    contains(id: string, type: AnimationType): boolean {\r\n        return this.#queue.has(this.#getKey(id, type))\r\n    }\r\n\r\n    reload(id: string, type: AnimationType) {\r\n        if (this.contains(id, type)) {\r\n            let item = <AnimationItem>this.#queue.get(this.#getKey(id, type))\r\n\r\n            item.timer = new Date()\r\n        }\r\n    }\r\n\r\n    clear() {\r\n        this.#queue.forEach((_value, key) => !this.#is(key, AnimationType.Init) && this.#queue.delete(key))\r\n    }\r\n\r\n    #process(key: string) {\r\n        const item = <AnimationItem>this.#queue.get(key),\r\n            stamp = new Date(),\r\n            passed = stamp.getTime() - (item.timer ?? stamp).getTime(),\r\n            transition = Animations.getTransition(passed > item.duration ? 1 : passed / item.duration),\r\n            before = item.before ? item.before() : true\r\n\r\n        if (!item.timer && before)\r\n            item.timer = stamp\r\n\r\n        if (before)\r\n            item.body(item.backward ? 1 - transition : transition)\r\n\r\n        if (transition == 1 && (!before || item.continuous))\r\n            this.#queue.delete(key)\r\n    }\r\n\r\n    #getKey(id: string, type: number) {\r\n        return id + '_' + type\r\n    }\r\n\r\n    #is(key: string, type: number) {\r\n        return key.endsWith('_' + type)\r\n    }\r\n\r\n    static initializeTransitions() {\r\n        const valuesCount = 30000,\r\n            offset = .23,\r\n            p0 = { x: 0, y: 0 },\r\n            p1 = { x: 1 - offset, y: offset },\r\n            p2 = { x: offset, y: 1 - offset },\r\n            p3 = { x: 1, y: 1 }\r\n\r\n        for (let i = 0; i < valuesCount; i++) {\r\n            const t = (i + 1) / valuesCount\r\n\r\n            let x = Math.pow(1 - t, 3) * p0.x\r\n                    + 3 * Math.pow(1 - t, 2) * p1.x * t\r\n                    + 3 * (1 - t) * Math.pow(t, 2) * p2.x\r\n                    + Math.pow(t, 3) * p3.x,\r\n                y = Math.pow(1 - t, 3) * p0.y\r\n                    + 3 * Math.pow(1 - t, 2) * p1.y * t\r\n                    + 3 * (1 - t) * Math.pow(t, 2) * p2.y\r\n                    + Math.pow(t, 3) * p3.y\r\n\r\n            Animations.transitionCurve.set(+x.toFixed(4), y)\r\n        }\r\n\r\n        Animations.transitionCurve.set(0, 0)\r\n    }\r\n\r\n    static getTransition(value: number): number {\r\n        return Animations.transitionCurve.get(+value.toFixed(4)) ?? 0\r\n    }\r\n}","import { Color } from 'types/Color'\r\nimport { Theme } from 'Theme'\r\n\r\nexport function adjustColor(color: string, amount: number) {\r\n    return '#' + color.replace(/^#/, '').replace(/../g, color => ('0' + Math.min(255, Math.max(0, parseInt(color, 16) + amount)).toString(16)).slice(-2))\r\n}\r\n\r\nexport function grayScale(color: string) {\r\n    return '#' + Array(4).join(Math.round([.3, .59, .11].reduce((a, v, i) => a + v * parseInt(color[2 * i + 1] + color[2 * i + 2], 16), 0) / 3).toString(16).padStart(2, '0'))\r\n}\r\n\r\nexport function randomColor() {\r\n    let letters = '0123456789ABCDEF',\r\n        color = '#'\r\n    for (let i = 0; i < 6; i++)\r\n        color += letters[Math.floor(Math.random() * 16)]\r\n\r\n    return color\r\n}\r\n\r\nexport function stringWidth(str: any | undefined, font?: number) {\r\n    if (!str)\r\n        return 0\r\n\r\n    const widths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.559375, 0.2765625, 0.3546875, 0.5546875, 0.5546875, 0.8890625, 0.665625, 0.190625, 0.3328125, 0.3328125, 0.3890625, 0.5828125, 0.2765625, 0.3328125, 0.2765625, 0.3015625, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.2765625, 0.2765625, 0.584375, 0.5828125, 0.584375, 0.5546875, 1.0140625, 0.665625, 0.665625, 0.721875, 0.721875, 0.665625, 0.609375, 0.7765625, 0.721875, 0.2765625, 0.5, 0.665625, 0.5546875, 0.8328125, 0.721875, 0.7765625, 0.665625, 0.7765625, 0.721875, 0.665625, 0.609375, 0.721875, 0.665625, 0.94375, 0.665625, 0.665625, 0.609375, 0.2765625, 0.3546875, 0.2765625, 0.4765625, 0.5546875, 0.3328125, 0.5546875, 0.5546875, 0.5, 0.5546875, 0.5546875, 0.2765625, 0.5546875, 0.5546875, 0.221875, 0.240625, 0.5, 0.221875, 0.8328125, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.3328125, 0.5, 0.2765625, 0.5546875, 0.5, 0.721875, 0.5, 0.5, 0.5, 0.3546875, 0.259375, 0.353125, 0.5890625],\r\n        avg = 0.5279276315789471\r\n\r\n    return Array.from(String(str)).reduce((acc, cur) => acc + (widths[cur.charCodeAt(0)] ?? avg), 0) * (font || 14)\r\n}\r\n\r\nexport function guid() {\r\n    const S4 = () => (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1)\r\n    return (S4() + S4() + '-' + S4() + '-4' + S4().slice(0, 3) + '-' + S4() + '-' + S4() + S4() + S4()).toLowerCase()\r\n}\r\n\r\nexport function isColorVisible(background: string, foreground: string) {\r\n    const backgroundAsRgb = hexToRgb(background),\r\n        foregroundAsRgb = hexToRgb(foreground),\r\n        value = .77\r\n\r\n    return (backgroundAsRgb.r + backgroundAsRgb.g + backgroundAsRgb.b) / (foregroundAsRgb.r + foregroundAsRgb.g + foregroundAsRgb.b) < value\r\n}\r\n\r\nexport function hexToRgb(hex: string): Color {\r\n    if (hex.length > 4) {\r\n        const value = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\r\n        if (value)\r\n            return {\r\n                r: parseInt(value[1], 16),\r\n                g: parseInt(value[2], 16),\r\n                b: parseInt(value[3], 16)\r\n            }\r\n    } else {\r\n        const value = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i.exec(hex)\r\n        if (value)\r\n            return {\r\n                r: parseInt(value[1] + value[1], 16),\r\n                g: parseInt(value[2] + value[2], 16),\r\n                b: parseInt(value[3] + value[3], 16)\r\n            }\r\n    }\r\n\r\n    return new Color()\r\n}\r\n\r\nexport function isISOString(str: string) {\r\n    return /\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+/.test(str)\r\n}\r\n\r\nexport function applyAlpha(color: string, opacity: number) {\r\n    function hexToRgb(hex: string) {\r\n        let result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\r\n        return result\r\n               ? {\r\n                   r: parseInt(result[1], 16),\r\n                   g: parseInt(result[2], 16),\r\n                   b: parseInt(result[3], 16)\r\n               } as Color\r\n               : {\r\n                   r: 0,\r\n                   g: 0,\r\n                   b: 0\r\n               } as Color\r\n    }\r\n\r\n    function componentToHex(c: number) {\r\n        let hex = c.toString(16)\r\n        return hex.length == 1 ? '0' + hex : hex\r\n    }\r\n\r\n    function rgbToHex(r: number, g: number, b: number) {\r\n        return '#' + componentToHex(r) + componentToHex(g) + componentToHex(b)\r\n    }\r\n\r\n    const rgb = hexToRgb(color),\r\n        bg = hexToRgb(Theme.canvasBackground)\r\n\r\n    opacity /= 255\r\n\r\n    const alpha = 1 - opacity\r\n\r\n    return rgbToHex(\r\n        Math.round((opacity * (rgb.r / 255) + (alpha * (bg.r / 255))) * 255),\r\n        Math.round((opacity * (rgb.g / 255) + (alpha * (bg.g / 255))) * 255),\r\n        Math.round((opacity * (rgb.b / 255) + (alpha * (bg.b / 255))) * 255)\r\n    )\r\n}","export class TooltipValue {\r\n    text: string | undefined\r\n\r\n    color: string | undefined\r\n\r\n    constructor(text?: string, color?: string) {\r\n        this.text = text\r\n        this.color = color\r\n    }\r\n}","import { ErrorType } from 'static/Enums'\r\n\r\nexport abstract class Errors {\r\n    static throw(error: ErrorType): never {\r\n        throw new Error(error)\r\n    }\r\n\r\n    static throwIsUndefined(object: any, error: ErrorType) {\r\n        if (object == undefined)\r\n            Errors.throw(error)\r\n    }\r\n}","import { ChartSettings } from 'types/ChartSettings'\r\nimport { Renderer } from 'types/base/Renderer'\r\nimport { Data } from 'types/interfaces/Data'\r\nimport { Legend } from 'Legend'\r\nimport { Value } from 'types/base/Value'\r\nimport { PlotRenderer } from 'render/PlotRenderer'\r\nimport { CircularRenderer } from 'render/CircularRenderer'\r\nimport { GaugeRenderer } from 'render/GaugeRenderer'\r\nimport { TreeRenderer } from 'render/TreeRenderer'\r\nimport { Animations } from 'Animations'\r\nimport { Theme } from 'Theme'\r\nimport { Styles } from 'static/constants/Styles'\r\nimport { ChartType, Events } from 'static/Enums'\r\n\r\nexport class Chart {\r\n    node: HTMLElement\r\n\r\n    settings: ChartSettings\r\n\r\n    #renderer: Renderer<Data>\r\n\r\n    #legend: Legend | undefined\r\n\r\n    #observer: ResizeObserver\r\n\r\n    #currentType: ChartType\r\n\r\n    constructor(context: HTMLElement, settings: ChartSettings) {\r\n        this.node = context\r\n\r\n        this.applySettings(settings)\r\n\r\n        this.#applyStyles()\r\n\r\n        document.addEventListener(Events.VisibilityChanged, () => this.#renderer.resetMouse())\r\n        window.addEventListener(Events.Blur, () => this.#renderer.resetMouse())\r\n\r\n        window.addEventListener(Events.Click, event => {\r\n            if (event.target != this.#renderer.canvas)\r\n                this.#renderer.closeDropdowns()\r\n        })\r\n    }\r\n\r\n    render() {\r\n        this.#renderer.render()\r\n        this.#legend?.render()\r\n\r\n        this.#observer = new ResizeObserver(() => {\r\n            if (this.#renderer.canvas)\r\n                this.#resize()\r\n            else\r\n                this.destroy()\r\n        })\r\n        this.#observer.observe(this.node)\r\n\r\n        this.#refresh()\r\n    }\r\n\r\n    destroy() {\r\n        this.#renderer.destroy()\r\n        this.#legend?.destroy()\r\n\r\n        this.#observer.disconnect()\r\n    }\r\n\r\n    highlight(value?: Value) {\r\n        this.#renderer.highlight(value)\r\n    }\r\n\r\n    reset() {\r\n        Theme.reset()\r\n\r\n        this.#initialize(this.settings)\r\n    }\r\n\r\n    applySettings(settings: ChartSettings) {\r\n        this.settings = settings\r\n\r\n        this.reset()\r\n\r\n        const isNeedRestartRender = this.settings.type != this.#currentType\r\n\r\n        this.#prepareSettings()\r\n\r\n        if (this.settings.enableLegend && this.#legend != undefined)\r\n            this.#legend.applySettings(settings)\r\n\r\n        if (this.settings.enableLegend && this.#legend == undefined) {\r\n            this.#legend = new Legend(this)\r\n\r\n            this.#legend.render()\r\n        }\r\n\r\n        if (!this.settings.enableLegend && this.#legend != undefined) {\r\n            this.#legend.destroy()\r\n\r\n            this.#legend = undefined\r\n        }\r\n\r\n        if (isNeedRestartRender)\r\n            this.#renderer.render()\r\n    }\r\n\r\n    #prepareSettings() {\r\n        this.settings.enableTooltip = !this.settings.disableInteractions && this.settings.enableTooltip\r\n\r\n        if (this.#renderer == undefined || this.settings.type != this.#currentType) {\r\n            this.#renderer?.destroy()\r\n\r\n            switch (this.settings.type) {\r\n                case ChartType.Plot:\r\n                    this.#renderer = new PlotRenderer(this)\r\n                    this.#currentType = ChartType.Plot\r\n                    break\r\n\r\n                case ChartType.Circular:\r\n                    this.#renderer = new CircularRenderer(this)\r\n                    this.#currentType = ChartType.Circular\r\n                    break\r\n\r\n                case ChartType.Gauge:\r\n                    this.#renderer = new GaugeRenderer(this)\r\n                    this.#currentType = ChartType.Gauge\r\n                    break\r\n\r\n                case ChartType.TreeMap:\r\n                    this.#renderer = new TreeRenderer(this)\r\n                    this.#currentType = ChartType.TreeMap\r\n                    break\r\n            }\r\n        } else {\r\n            this.#renderer.applySettings(this.settings)\r\n        }\r\n\r\n        this.#renderer.prepareSettings()\r\n\r\n        if (!this.settings.disableInteractions) {\r\n            this.#renderer.initDropdown()\r\n            this.#renderer.initAnimations()\r\n        }\r\n\r\n        this.#renderer.resize()\r\n    }\r\n\r\n    #refresh() {\r\n        this.#renderer.refresh()\r\n        this.#legend?.refresh()\r\n    }\r\n\r\n    #resize() {\r\n        this.#renderer.resize()\r\n        this.#legend?.resize()\r\n    }\r\n\r\n    #initialize(settings: ChartSettings) {\r\n        Theme.initialize(\r\n            () => this.#resize(),\r\n            settings.isDarkThemeFunction\r\n        )\r\n        Animations.initializeTransitions()\r\n    }\r\n\r\n    #applyStyles() {\r\n        this.node.style.display = Styles.Display.Flex\r\n        this.node.style.flexDirection = Styles.FlexDirection.Column\r\n        this.node.style.alignItems = Styles.AlignItems.Center\r\n        this.node.style.justifyContent = Styles.JustifyContent.Center\r\n        this.node.style.height = '100%'\r\n    }\r\n}","export class Color {\r\n    r: number\r\n\r\n    g: number\r\n\r\n    b: number\r\n}","export class Animations {\r\n    static circular = 335\r\n\r\n    static legend = 500\r\n\r\n    static tree = 250\r\n\r\n    static tooltip = 120\r\n\r\n    static button = 200\r\n}","import { Value } from 'types/base/Value'\r\nimport { Point } from 'types/Point'\r\n\r\nexport class Sector extends Value {\r\n    current: number\r\n\r\n    transition: number\r\n\r\n    translate: Point\r\n\r\n    innerRadius: number\r\n\r\n    constructor(obj: object) {\r\n        super()\r\n\r\n        Object.assign(this, obj)\r\n    }\r\n\r\n    toggle(transition: number) {\r\n        super.toggle(transition)\r\n\r\n        if (this.disabled)\r\n            this.current = this.value * (1 - transition)\r\n        else\r\n            this.current = this.value * transition\r\n    }\r\n\r\n    checkCondition(): boolean {\r\n        super.checkCondition()\r\n\r\n        return (this.current == 0 && !this.disabled) || this.value != 0\r\n    }\r\n\r\n    reset() {\r\n        super.reset()\r\n\r\n        this.current = this.value\r\n    }\r\n}","export class TextResources {\r\n    static exportPNG = 'Save as image...'\r\n\r\n    static decomposeToTable = 'Show as table...'\r\n\r\n    static reset = 'Reset'\r\n\r\n    static exportCSV = 'Save as table...'\r\n\r\n    static menu = 'Menu'\r\n\r\n    static allDataIsHidden = 'All data is hidden'\r\n\r\n    static other = 'Other'\r\n\r\n    static thousandShort = 'K'\r\n\r\n    static millionShort = 'M'\r\n\r\n    static billionShort = 'B'\r\n\r\n    static show = 'Show...'\r\n\r\n    static noLabel = 'No Label'\r\n\r\n    static treeMapIsEmpty = 'Tree Map is empty'\r\n}","import { Errors } from 'helpers/Errors'\r\nimport { ErrorType } from 'static/Enums'\r\nimport { Theme } from 'Theme'\r\n\r\nexport abstract class Canvas {\r\n    static getContext(canvas: HTMLCanvasElement): CanvasRenderingContext2D {\r\n        return canvas.getContext('2d', { willReadFrequently: true })\r\n               ?? Errors.throw(ErrorType.NullContext)\r\n    }\r\n\r\n    static isPixelBusy(pixel: number) {\r\n        return pixel != undefined && pixel - Theme.canvasBackgroundInt != 0\r\n    }\r\n}","import { Value } from 'types/base/Value'\r\nimport { Theme } from 'Theme'\r\nimport { TextStyles } from 'helpers/TextStyles'\r\nimport * as Helper from 'Helper'\r\nimport { ChartSettings } from 'types/ChartSettings'\r\nimport { TooltipValue } from 'types/TooltipValue'\r\nimport { Data } from 'types/interfaces/Data'\r\nimport { Canvas } from 'helpers/Canvas'\r\nimport * as Constants from 'static/constants/Index'\r\nimport { Styles } from 'static/constants/Styles'\r\nimport { HTMLTooltipElement } from 'types/extends/HTMLTooltipElement'\r\nimport { Attribute, Tag } from 'static/Enums'\r\n\r\nexport class Tooltip {\r\n    canvas: HTMLCanvasElement\r\n\r\n    data: Data\r\n\r\n    readonly #enabled: boolean\r\n\r\n    readonly #isCustom: boolean\r\n\r\n    #canvasPosition: DOMRect\r\n\r\n    #template: HTMLTemplateElement\r\n\r\n    #inProgress: boolean\r\n\r\n    #toHide: boolean\r\n\r\n    #timer: Date | undefined\r\n\r\n    #lines: TooltipValue[]\r\n\r\n    constructor(canvas: HTMLCanvasElement, settings: ChartSettings) {\r\n        this.canvas = canvas\r\n        this.data = settings.data\r\n        this.#enabled = settings.enableTooltip\r\n        this.#isCustom = !!settings.templateId\r\n\r\n        if (this.#isCustom)\r\n            this.#template = <HTMLTemplateElement>document.getElementById(settings.templateId)\r\n\r\n        this.refresh()\r\n    }\r\n\r\n    render(condition: boolean, event: MouseEvent, lines: TooltipValue[], value?: Value) {\r\n        this.#hideAll()\r\n\r\n        if (!this.#enabled || !event)\r\n            return\r\n\r\n        if (condition || this.#inProgress || this.#toHide) {\r\n            if (condition)\r\n                this.#lines = lines\r\n\r\n            if (!this.#timer)\r\n                this.#timer = new Date()\r\n\r\n            if (!this.#toHide)\r\n                this.#inProgress = true\r\n            else if (this.#inProgress)\r\n                this.#timer = new Date()\r\n\r\n            if (this.#isCustom)\r\n                this.#renderCustom(event, value)\r\n            else\r\n                this.#renderRegular(event)\r\n\r\n            const opacityValue = this.#getOpacityValue()\r\n\r\n            if (this.#toHide && opacityValue >= 1) {\r\n                this.#inProgress = false\r\n                this.#toHide = false\r\n            }\r\n\r\n            if (this.#toHide && opacityValue <= 0) {\r\n                this.#inProgress = false\r\n                this.#toHide = false\r\n                this.#timer = undefined\r\n            }\r\n\r\n            if (!condition && this.#timer != undefined)\r\n                this.#toHide = true\r\n        } else {\r\n            this.#timer = undefined\r\n        }\r\n    }\r\n\r\n    #renderRegular(event: MouseEvent) {\r\n        const ctx = Canvas.getContext(this.canvas)\r\n\r\n        const textWidth = Math.max(...this.#lines.map(line => Helper.stringWidth(line.text ?? '') + (line.color ? 8 : 0)))\r\n\r\n        const padding = 6,\r\n            borderRadius = 6\r\n\r\n        let x = event.clientX - this.#canvasPosition.x + 10,\r\n            y = event.clientY - this.#canvasPosition.y + scrollY + 10\r\n\r\n        if (x + textWidth + 25 > this.#canvasPosition.width)\r\n            x = this.#canvasPosition.width - (textWidth + 25)\r\n\r\n        if (y + 15 + this.#lines.length * 18 > this.#canvasPosition.height)\r\n            y = this.#canvasPosition.height - 15 - this.#lines.length * 18\r\n\r\n        ctx.beginPath()\r\n        ctx.roundRect(x, y, textWidth + 24, 16 + 16 * this.#lines.length, borderRadius)\r\n        let opacity = Math.round(this.#getOpacityValue() * 255).toString(16),\r\n            baseOpacity = Math.round(this.#getOpacityValue() * 207).toString(16)\r\n        if (opacity.length == 1)\r\n            opacity = '0' + opacity\r\n        if (baseOpacity.length == 1)\r\n            baseOpacity = '0' + baseOpacity\r\n\r\n        ctx.strokeStyle = Theme.dropdownBorder + baseOpacity\r\n        ctx.lineWidth = 1\r\n        ctx.fillStyle = Theme.background + baseOpacity\r\n        ctx.stroke()\r\n        ctx.fill()\r\n\r\n        for (let line of this.#lines) {\r\n            let offset = 0\r\n\r\n            if (line.color) {\r\n                offset = 12\r\n\r\n                ctx.beginPath()\r\n                ctx.fillStyle = line.color + opacity\r\n                ctx.arc(x + 16, y + 17, 5, 0, Math.PI * 2)\r\n                ctx.fill()\r\n            }\r\n\r\n            TextStyles.tooltip(ctx)\r\n            ctx.fillStyle = Theme.text + opacity\r\n            ctx.fillText(line.text ?? '', x + offset + padding * 2, y + 21)\r\n\r\n            y += 16\r\n        }\r\n    }\r\n\r\n    #renderCustom(event: MouseEvent, value?: Value) {\r\n        if (value == undefined)\r\n            return\r\n\r\n        const id = this.#template.id + value.id\r\n\r\n        let tooltip = <HTMLTooltipElement>document.getElementById(id)\r\n\r\n        const updateVisibility = () => {\r\n            this.#hideAll()\r\n\r\n            tooltip.style.visibility = Styles.Visibility.Visible\r\n        }\r\n\r\n        if (!tooltip) {\r\n            const regex = /\\${[^}]*}/gm\r\n\r\n            let content = <HTMLElement>this.#template.cloneNode(true)\r\n\r\n            tooltip = document.createElement(Tag.Div) as HTMLTooltipElement\r\n\r\n            tooltip.innerHTML = content.innerHTML\r\n\r\n            tooltip.id = id\r\n            tooltip.style.position = Styles.Position.Absolute\r\n            tooltip.style.pointerEvents = Styles.PointerEvents.None\r\n            tooltip.style.visibility = Styles.Visibility.Visible\r\n\r\n            tooltip.setAttribute(Attribute.Name, this.#template.id)\r\n\r\n            const matches = [...tooltip.innerHTML.matchAll(regex)]\r\n\r\n            let html = tooltip.innerHTML\r\n\r\n            for (const match of matches) {\r\n                const property = match[0].replace('${', '')\r\n                                         .replace('}', '')\r\n                                         .replaceAll(' ', '')\r\n\r\n                html = html.replaceAll(match[0], value.data[property])\r\n            }\r\n\r\n            tooltip.innerHTML = html\r\n\r\n            document.body.appendChild(tooltip)\r\n\r\n            tooltip.position = tooltip.getBoundingClientRect()\r\n\r\n            updateVisibility()\r\n        }\r\n\r\n        if (tooltip.style.visibility == Styles.Visibility.Hidden)\r\n            updateVisibility()\r\n\r\n        if (tooltip.position.height == 0)\r\n            tooltip.position = tooltip.getBoundingClientRect()\r\n\r\n        const offset = 10\r\n\r\n        let opacity = '1'\r\n\r\n        let x = event.clientX,\r\n            y = event.clientY + scrollY\r\n\r\n        if (x + tooltip.position.width - this.#canvasPosition.x > this.#canvasPosition.width - offset) {\r\n            x = this.#canvasPosition.width - tooltip.position.width + this.#canvasPosition.x - offset\r\n            opacity = '.67'\r\n        }\r\n\r\n        if (y + tooltip.position.height - this.#canvasPosition.y > this.#canvasPosition.height - offset) {\r\n            y = this.#canvasPosition.height - tooltip.position.height + this.#canvasPosition.y - offset\r\n            opacity = '.67'\r\n        }\r\n\r\n        if (x == 0 && y == 0)\r\n            opacity = '0'\r\n\r\n        tooltip.style.left = x + offset + 'px'\r\n        tooltip.style.top = y + offset + 'px'\r\n        tooltip.style.opacity = opacity\r\n    }\r\n\r\n    refresh() {\r\n        this.#canvasPosition = this.canvas.getBoundingClientRect()\r\n        this.#canvasPosition.x += scrollX\r\n        this.#canvasPosition.y += scrollY\r\n    }\r\n\r\n    #hideAll() {\r\n        if (!this.#isCustom)\r\n            return\r\n\r\n        const tooltips = <NodeListOf<HTMLElement>>document.querySelectorAll(`[name=\"${ this.#template.id }\"]`)\r\n\r\n        for (let node of tooltips)\r\n            node.style.visibility = Styles.Visibility.Hidden\r\n    }\r\n\r\n    #getOpacityValue(): number {\r\n        if (!this.#timer)\r\n            return 0\r\n\r\n        let opacityValue = this.#toHide\r\n                           ? 1 - (new Date().getTime() - this.#timer.getTime()) / Constants.Animations.tooltip\r\n                           : (new Date().getTime() - this.#timer.getTime()) / Constants.Animations.tooltip\r\n        if (opacityValue > 1)\r\n            opacityValue = 1\r\n        if (opacityValue < 0)\r\n            opacityValue = 0\r\n\r\n        return opacityValue\r\n    }\r\n}","export class ThemeOptions {\r\n    static readonly colors = ['#000000', '#ffffff']\r\n\r\n    static readonly backgrounds = ['#f7f7f7', '#222222']\r\n\r\n    static readonly lines = ['#000000', '#eeeeee']\r\n\r\n    static readonly lineAxes = ['#e0e0e0', '#212121']\r\n\r\n    static readonly lineActives = ['#898989', '#898989']\r\n\r\n    static readonly dropdownBorders = ['#bcbcbc', '#7e7e7e']\r\n\r\n    static readonly canvasBackgrounds = ['#ffffff', '#222222']\r\n}","import { TableValue } from 'types/TableValue'\r\nimport { PlotSeries } from 'types/PlotSeries'\r\nimport { TableHeaderValue } from 'types/TableHeaderValue'\r\nimport { TableData } from 'types/TableData'\r\nimport { Data } from 'types/interfaces/Data'\r\nimport { Formatter } from 'helpers/Formatter'\r\nimport { PlotAxisType } from 'static/Enums'\r\n\r\nexport class PlotData implements Data {\r\n    shortLabels: boolean\r\n\r\n    simple: boolean\r\n\r\n    yMax: number\r\n\r\n    xTitle: string\r\n\r\n    yTitle: string\r\n\r\n    xType: PlotAxisType\r\n\r\n    values: PlotSeries[]\r\n\r\n    static getRows(data: PlotData): TableData {\r\n        let headers: TableHeaderValue[] = []\r\n\r\n        let values: TableValue[] = []\r\n\r\n        for (const series of data.values) {\r\n            let seriesValues = new Map<string, any>()\r\n\r\n            for (const value of series.values) {\r\n                seriesValues.set(value.x.toString(), value.y)\r\n                headers.push({\r\n                    value: value.x.toString(),\r\n                    display: data.xType == PlotAxisType.Date\r\n                             ? Formatter.date(new Date(value.x))\r\n                             : value.x.toString()\r\n                })\r\n            }\r\n\r\n            values.push({\r\n                name: series.label,\r\n                values: seriesValues\r\n            })\r\n        }\r\n\r\n        const unique = new Set(),\r\n            uniqueHeaders = headers.filter(v => !unique.has(v.display) && unique.add(v.display))\r\n\r\n        if (data.xType == PlotAxisType.Date)\r\n            uniqueHeaders.sort((a, b) => new Date(a.value).getTime() - new Date(b.value).getTime())\r\n\r\n        return {\r\n            headers: uniqueHeaders,\r\n            values: values\r\n        }\r\n    }\r\n}","export namespace Styles {\r\n    export class Cursor {\r\n        static Default = 'default'\r\n\r\n        static Pointer = 'pointer'\r\n    }\r\n\r\n    export class Display {\r\n        static Flex = 'flex'\r\n    }\r\n\r\n    export class FlexDirection {\r\n        static Column = 'column'\r\n\r\n        static ColumnReverse = 'column-reverse'\r\n\r\n        static Row = 'row'\r\n\r\n        static RowReverse = 'row-reverse'\r\n    }\r\n\r\n    export class AlignItems {\r\n        static Center = 'center'\r\n    }\r\n\r\n    export class Visibility {\r\n        static Visible = 'visible'\r\n\r\n        static Hidden = 'hidden'\r\n    }\r\n\r\n    export class Position {\r\n        static Absolute = 'absolute'\r\n    }\r\n\r\n    export class PointerEvents {\r\n        static None = 'none'\r\n    }\r\n\r\n    export class JustifyContent {\r\n        static Center = 'center'\r\n    }\r\n\r\n    export class ImageRendering {\r\n        static Pixelated = 'pixelated'\r\n    }\r\n}","import { Theme } from 'Theme'\r\nimport { DropdownOptions } from 'types/DropdownOptions'\r\nimport { Animations } from 'Animations'\r\nimport * as Helper from 'Helper'\r\nimport { TextStyles } from 'helpers/TextStyles'\r\nimport { Canvas } from 'helpers/Canvas'\r\nimport { AnimationType } from 'static/Enums'\r\nimport * as Constants from 'static/constants/Index'\r\nimport { Styles } from 'static/constants/Styles'\r\n\r\nexport class Dropdown {\r\n    isActive: boolean = false\r\n\r\n    #isInit: boolean\r\n\r\n    #options: DropdownOptions\r\n\r\n    #canvasPosition: DOMRect\r\n\r\n    animations: Animations\r\n\r\n    #position: DOMRect\r\n\r\n    readonly #isOnlyMenu: boolean\r\n\r\n    readonly #canvas: HTMLCanvasElement\r\n\r\n    constructor(canvas: HTMLCanvasElement, options: DropdownOptions) {\r\n        this.#canvas = canvas\r\n        this.#options = options\r\n\r\n        if (this.#options.icon)\r\n            this.#options.text = this.#options.icon\r\n\r\n        this.#isOnlyMenu = this.#options.text == undefined\r\n\r\n        this.animations = new Animations()\r\n    }\r\n\r\n    render(moveEvent: MouseEvent, clickEvent: MouseEvent | undefined) {\r\n        if (!this.#isInit)\r\n            this.#initAnimations()\r\n\r\n        if (this.#isOnlyMenu)\r\n            this.isActive = true\r\n\r\n        const ctx = Canvas.getContext(this.#canvas)\r\n\r\n        let x = this.#position.x,\r\n            y = this.#position.y,\r\n            width = this.#position.width,\r\n            height = this.#position.height\r\n\r\n        ctx.beginPath()\r\n\r\n        if (!this.#isOnlyMenu) {\r\n            const translate = (transition: number, event: AnimationType) => {\r\n                this.animations.reload('animation-dropdown', event)\r\n\r\n                ctx.fillStyle = Helper.adjustColor(Theme.canvasBackground, -Math.round(25 * transition))\r\n            }\r\n\r\n            if (this.#isOnButton(moveEvent, x, y, width, height)) {\r\n                this.#canvas.style.cursor = Styles.Cursor.Pointer\r\n\r\n                if (clickEvent && moveEvent.x == clickEvent.x && moveEvent.y == clickEvent.y) {\r\n                    this.isActive = !this.isActive\r\n                    clickEvent = undefined\r\n                }\r\n\r\n                if (!this.isActive)\r\n                    this.animations.add('animation-dropdown',\r\n                        AnimationType.MouseOver,\r\n                        {\r\n                            duration: 300,\r\n                            body: transition => {\r\n                                translate(transition, AnimationType.MouseLeave)\r\n                            }\r\n                        })\r\n                else\r\n                    ctx.fillStyle = Helper.adjustColor(Theme.canvasBackground, -25)\r\n            } else {\r\n                this.#canvas.style.cursor = Styles.Cursor.Default\r\n\r\n                if (!this.isActive)\r\n                    this.animations.add('animation-dropdown',\r\n                        AnimationType.MouseLeave,\r\n                        {\r\n                            timer: Constants.Dates.minDate,\r\n                            duration: 300,\r\n                            backward: true,\r\n                            body: transition => {\r\n                                translate(transition, AnimationType.MouseOver)\r\n                            }\r\n                        })\r\n                else\r\n                    ctx.fillStyle = Helper.adjustColor(Theme.canvasBackground, -25)\r\n            }\r\n\r\n            ctx.roundRect(x, y, width, height, 4)\r\n            ctx.fill()\r\n\r\n            TextStyles.regular(ctx)\r\n\r\n            if (this.#options.icon)\r\n                ctx.font = '20px sans-serif'\r\n\r\n            const iconOffset = this.#options.icon\r\n                               ? navigator.platform != 'Win32'\r\n                                 ? 1\r\n                                 : -1\r\n                               : 0\r\n\r\n            ctx.fillText(\r\n                this.#options.text ?? '',\r\n                x + width / 2,\r\n                y + height / 2 - iconOffset\r\n            )\r\n        }\r\n\r\n        if (this.isActive) {\r\n            const padding = 6,\r\n                borderRadius = 6\r\n\r\n            y += height\r\n\r\n            const items = this.#options.items.filter(value => value.text),\r\n                dividers = this.#options.items.filter(value => !value.text)\r\n\r\n            let maxWidth = Math.max(...items.map(value => Helper.stringWidth(value.text)))\r\n                           + padding * 4\r\n\r\n            if (x + maxWidth > this.#canvas.width - 4)\r\n                x -= x + maxWidth - this.#canvas.width + 4\r\n\r\n            const dropdownOpacity = 'bb',\r\n                itemOpacityDec = 127,\r\n                itemBackground = Theme.dropdownItemHoverColor,\r\n                borderColor = Theme.dropdownBorder\r\n\r\n            ctx.beginPath()\r\n\r\n            const rect = {\r\n                x: x,\r\n                y: y,\r\n                width: maxWidth,\r\n                height: items.length * 26\r\n                        + dividers.length * 4\r\n                        + (items.length == 1 ? padding : 0)\r\n                        + (items.length == 2 && dividers.length == 1 ? padding : 0)\r\n            }\r\n\r\n            ctx.roundRect(rect.x, rect.y, rect.width, rect.height, borderRadius)\r\n            ctx.fillStyle = Theme.background + dropdownOpacity\r\n            ctx.setLineDash([])\r\n            ctx.lineWidth = 1\r\n            ctx.strokeStyle = borderColor + dropdownOpacity\r\n            ctx.fill()\r\n            ctx.stroke()\r\n\r\n            ctx.beginPath()\r\n\r\n            y += 6\r\n\r\n            for (const item of this.#options.items) {\r\n                ctx.beginPath()\r\n\r\n                if (item.isDivider == true) {\r\n                    y += 2\r\n\r\n                    ctx.moveTo(x + padding, y)\r\n                    ctx.lineTo(x + maxWidth - padding, y)\r\n\r\n                    ctx.lineWidth = .5\r\n                    ctx.stroke()\r\n\r\n                    y += 4\r\n\r\n                    continue\r\n                }\r\n\r\n                ctx.fillStyle = 'transparent'\r\n\r\n                const animationKey = 'animation-dropdown' + item.text\r\n\r\n                const translate = (transition: number, event: AnimationType, isReturn?: boolean) => {\r\n                    this.animations.reload(animationKey, event)\r\n\r\n                    if (isReturn && transition == 1)\r\n                        return\r\n\r\n                    let opacity = Math.round(itemOpacityDec * transition).toString(16)\r\n                    if (opacity.length == 1)\r\n                        opacity = '0' + opacity\r\n\r\n                    ctx.fillStyle = itemBackground + opacity\r\n                }\r\n\r\n                if (this.#isOnButton(moveEvent, x, y, maxWidth, 20)) {\r\n                    this.animations.add(animationKey,\r\n                        AnimationType.MouseOver,\r\n                        {\r\n                            duration: 300,\r\n                            body: transition => {\r\n                                translate(transition, AnimationType.MouseLeave)\r\n                            }\r\n                        })\r\n\r\n                    this.#canvas.style.cursor = Styles.Cursor.Pointer\r\n\r\n                    if (clickEvent) {\r\n                        item.action()\r\n\r\n                        clickEvent = undefined\r\n                        this.isActive = false\r\n                    }\r\n                } else {\r\n                    this.animations.add(animationKey,\r\n                        AnimationType.MouseLeave,\r\n                        {\r\n                            timer: Constants.Dates.minDate,\r\n                            duration: 300,\r\n                            backward: true,\r\n                            body: transition => {\r\n                                translate(transition, AnimationType.MouseOver, true)\r\n                            }\r\n                        })\r\n                }\r\n\r\n                ctx.roundRect(x + padding, y, maxWidth - padding * 2, 20, borderRadius)\r\n                ctx.fill()\r\n\r\n                TextStyles.regular(ctx)\r\n                ctx.fillStyle = Theme.text\r\n                ctx.textAlign = 'left'\r\n                ctx.textBaseline = 'hanging'\r\n                ctx.fillText(item.text, x + padding * 2, y + 5)\r\n\r\n                y += 22\r\n            }\r\n        }\r\n\r\n        ctx.lineWidth = 1\r\n\r\n        if (!this.#isOnlyMenu && clickEvent != undefined && this.isActive) {\r\n            this.isActive = false\r\n            clickEvent = undefined\r\n        }\r\n\r\n        this.#isInit = true\r\n\r\n        if (this.#isOnlyMenu && clickEvent && moveEvent.x == clickEvent.x && moveEvent.y == clickEvent.y) {\r\n            this.isActive = !this.isActive\r\n            clickEvent = undefined\r\n        }\r\n\r\n        return clickEvent\r\n    }\r\n\r\n    #initAnimations() {\r\n        this.#canvasPosition = this.#canvas.getBoundingClientRect()\r\n\r\n        this.#canvasPosition.x += scrollX\r\n        this.#canvasPosition.y += scrollY\r\n    }\r\n\r\n    #isOnButton(event: MouseEvent, x: number, y: number, w: number, h: number): boolean {\r\n        if (!event)\r\n            return false\r\n\r\n        let trueX = event.clientX - this.#canvasPosition.x + scrollX,\r\n            trueY = event.clientY - this.#canvasPosition.y + scrollY\r\n\r\n        return trueX >= x && trueX <= x + w\r\n               && trueY >= y && trueY <= y + h\r\n    }\r\n\r\n    refresh() {\r\n        this.#isInit = false\r\n    }\r\n\r\n    resize() {\r\n        this.#initAnimations()\r\n        this.#calculatePosition()\r\n    }\r\n\r\n    close() {\r\n        this.isActive = false\r\n    }\r\n\r\n    #calculatePosition() {\r\n        const width = this.#isOnlyMenu ? 0 : Helper.stringWidth(this.#options.text ?? '') + 12,\r\n            height = this.#isOnlyMenu ? 0 : 20\r\n\r\n        this.#position = {\r\n            x: this.#options.x + width > this.#canvas.width\r\n               ? this.#canvas.width - width\r\n               : this.#options.x < 0\r\n                 ? this.#canvas.width + this.#options.x - width\r\n                 : this.#options.x,\r\n            y: this.#options.y + height > this.#canvas.height\r\n               ? this.#canvas.height - height\r\n               : this.#options.y < 0\r\n                 ? this.#canvas.height + this.#options.y - height\r\n                 : this.#options.y,\r\n            width: width,\r\n            height: height\r\n        } as DOMRect\r\n    }\r\n}","import * as Helper from 'Helper'\r\nimport { ThemeOptions } from 'static/ThemeOptions'\r\nimport { Events } from 'static/Enums'\r\n\r\nexport class Theme {\r\n    static currentTheme = 0\r\n\r\n    static text: string\r\n\r\n    static background: string\r\n\r\n    static line: string\r\n\r\n    static lineAxis: string\r\n\r\n    static lineActive: string\r\n\r\n    static dropdownItemHoverColor: string\r\n\r\n    static dropdownBorder: string\r\n\r\n    static canvasBackground: string\r\n\r\n    static canvasBackgroundInt: number\r\n\r\n    static function: Function | undefined\r\n\r\n    static initialize(callback: Function, isDark?: Function) {\r\n        if (!Theme.function && isDark)\r\n            Theme.function = isDark\r\n\r\n        if (window.matchMedia\r\n            && window.matchMedia('(prefers-color-scheme: dark)').matches\r\n            && (!Theme.function || Theme.function()))\r\n            Theme.setTheme(1)\r\n        else\r\n            Theme.setTheme(0)\r\n\r\n        window.matchMedia('(prefers-color-scheme: dark)')\r\n              .addEventListener(Events.Change, event => {\r\n                  Theme.setTheme(event.matches && (!Theme.function || Theme.function()) ? 1 : 0)\r\n                  callback()\r\n              })\r\n    }\r\n\r\n    static setTheme(index: number) {\r\n        Theme.currentTheme = index\r\n\r\n        Theme.text = ThemeOptions.colors[index]\r\n        Theme.background = ThemeOptions.backgrounds[index]\r\n        Theme.line = ThemeOptions.lines[index]\r\n        Theme.lineAxis = ThemeOptions.lineAxes[index]\r\n        Theme.lineActive = ThemeOptions.lineActives[index]\r\n        Theme.dropdownItemHoverColor = Helper.adjustColor(Theme.background, index == 0 ? -50 : 50)\r\n        Theme.dropdownBorder = ThemeOptions.dropdownBorders[index]\r\n        Theme.canvasBackground = ThemeOptions.canvasBackgrounds[index]\r\n        Theme.canvasBackgroundInt = Number(`0xff${ Theme.canvasBackground.slice(1) }`)\r\n    }\r\n\r\n    static reset() {\r\n        this.function = undefined\r\n    }\r\n}","import { Renderer } from 'types/base/Renderer'\r\nimport { CircularData } from 'types/data/CircularData'\r\nimport { Sector } from 'types/Sector'\r\nimport { CircularAngle } from 'types/CircularAngle'\r\nimport { Point } from 'types/Point'\r\nimport { DropdownItem } from 'types/DropdownItem'\r\nimport * as Helper from 'Helper'\r\nimport { Dropdown } from 'Dropdown'\r\nimport { Theme } from 'Theme'\r\nimport { TextStyles } from 'helpers/TextStyles'\r\nimport { Chart } from 'Chart'\r\nimport { TooltipValue } from 'types/TooltipValue'\r\nimport { Decomposition } from 'Decomposition'\r\nimport { Export } from 'Export'\r\nimport { TextResources } from 'static/TextResources'\r\nimport { Modal } from 'Modal'\r\nimport { Canvas } from 'helpers/Canvas'\r\nimport { Formatter } from 'helpers/Formatter'\r\nimport { AnimationType, Events, Icon, PlotAxisType, RenderState } from 'static/Enums'\r\nimport * as Constants from 'static/constants/Index'\r\nimport { Styles } from 'static/constants/Styles'\r\n\r\nexport class CircularRenderer extends Renderer<CircularData> {\r\n    #canRenderInnerTitle: boolean\r\n\r\n    #isDonut: boolean\r\n\r\n    #radius: number\r\n\r\n    #sum: number\r\n\r\n    #accumulator: number\r\n\r\n    #animationOffset: number\r\n\r\n    #hoverCount: number\r\n\r\n    #currentHover: string | undefined\r\n\r\n    #pinned: string[]\r\n\r\n    #center: Point\r\n\r\n    #startPoint: Point\r\n\r\n    #angles: CircularAngle[]\r\n\r\n    #other: Sector[]\r\n\r\n    #innerTitleStyle: Function\r\n\r\n    readonly #startAngle: number\r\n\r\n    constructor(chart: Chart) {\r\n        super(chart)\r\n\r\n        this.#startAngle = Math.PI / 4\r\n\r\n        this.onMouseMoveEvent = new MouseEvent(Events.MouseMove)\r\n    }\r\n\r\n    render() {\r\n        super.render()\r\n\r\n        this.#accumulator = this.#startAngle\r\n        this.#hoverCount = 0\r\n\r\n        if (this.data.values.filter(v => !v.disabled).length == 0)\r\n            this.#drawEmpty()\r\n        else\r\n            this.#draw()\r\n\r\n        if (this.#hoverCount == 0)\r\n            this.#currentHover = undefined\r\n\r\n        this.state = RenderState.Idle\r\n\r\n        super.renderDropdown()\r\n\r\n        if (this.#currentHover || this.contextMenu)\r\n            this.renderContextMenu(this.data.values.find(v => v.id == this.#currentHover)?.data ?? {})\r\n        else\r\n            this.onContextMenuEvent = undefined\r\n\r\n        if (this.#currentHover)\r\n            this.canvas.style.cursor = Styles.Cursor.Pointer\r\n        else\r\n            this.highlight()\r\n    }\r\n\r\n    #draw() {\r\n        if (this.onMouseMoveEvent || this.state == RenderState.Init) {\r\n            this.#sum = this.data.values.reduce((acc, v) => acc + v.current, 0)\r\n\r\n            let anglesSum = this.#startAngle\r\n            this.#angles = this.data.values.flatMap(sector => {\r\n                                   const angle = sector.current / this.#sum * 2 * Math.PI\r\n\r\n                                   return {\r\n                                       id: sector.id,\r\n                                       value: angle,\r\n                                       sum: (anglesSum += angle) - angle\r\n                                   }\r\n                               })\r\n                               .reverse()\r\n\r\n            this.#startPoint = this.#getPoint(this.#radius, 0)\r\n\r\n            for (const value of this.data.values)\r\n                this.#drawSector(value)\r\n\r\n            const value = this.data.values.find(v => v.id == this.#currentHover)\r\n            this.tooltip.render(!!value && !this.dropdown?.isActive,\r\n                this.onMouseMoveEvent,\r\n                [\r\n                    new TooltipValue(`${ value?.label }: ${ Formatter.format(value?.current, PlotAxisType.Number, this.settings.valuePostfix) }`)\r\n                ],\r\n                value)\r\n\r\n            this.#drawInnerTitle()\r\n        }\r\n\r\n        if (!this.isDestroy)\r\n            requestAnimationFrame(this.render.bind(this))\r\n    }\r\n\r\n    #drawSector(value: Sector) {\r\n        const ctx = Canvas.getContext(this.canvas)\r\n\r\n        ctx.fillStyle = value.color\r\n        ctx.strokeStyle = value.color\r\n\r\n        const piece = value.current / this.#sum,\r\n            angle = (isNaN(piece) ? 1 : piece) * 2 * Math.PI\r\n\r\n        const isSingle = this.data.values.filter(s => !s.disabled).length == 1\r\n\r\n        if ((!!this.onClickEvent || this.#pinned.includes(value.id))\r\n            && !this.animations.contains(value.id, AnimationType.Init)\r\n            && !isSingle) {\r\n            this.animations.add(value.id,\r\n                AnimationType.Click,\r\n                {\r\n                    duration: Constants.Animations.circular,\r\n                    before: () => {\r\n                        if (!!this.onClickEvent) {\r\n                            if (this.#isInsideSector(this.onClickEvent, value)) {\r\n                                if (this.#pinned.includes(value.id))\r\n                                    this.#pinned = this.#pinned.filter(id => id != value.id)\r\n                                else\r\n                                    this.#pinned.push(value.id)\r\n\r\n                                this.onClickEvent = new PointerEvent(Events.Click)\r\n                            }\r\n                        }\r\n\r\n                        return true\r\n                    },\r\n                    body: () => {\r\n                        if (!this.#pinned.includes(value.id))\r\n                            return\r\n\r\n                        const piece = value.current / this.#sum,\r\n                            angle = (isNaN(piece) ? 1 : piece) * 2 * Math.PI,\r\n                            direction = this.#accumulator + angle / 2\r\n\r\n                        const transition = {\r\n                            x: this.#animationOffset * Math.cos(direction),\r\n                            y: this.#animationOffset * Math.sin(direction)\r\n                        }\r\n\r\n                        ctx.translate(transition.x, transition.y)\r\n\r\n                        if (angle > Math.PI / 6)\r\n                            ctx.lineWidth = 8\r\n                        ctx.lineJoin = 'round'\r\n                        ctx.lineCap = 'round'\r\n\r\n                        ctx.fillStyle = value.color\r\n                    }\r\n                })\r\n        }\r\n\r\n        if (this.onMouseMoveEvent && this.#isInsideSector(this.onMouseMoveEvent, value)) {\r\n            this.#currentHover = value.id\r\n            this.#hoverCount++\r\n        }\r\n\r\n        if (this.state == RenderState.Init || this.animations.contains(value.id, AnimationType.Init)) {\r\n            this.animations.add(value.id,\r\n                AnimationType.Init,\r\n                {\r\n                    duration: Constants.Animations.circular + (this.data.values.indexOf(value) + 1) / this.data.values.length * Constants.Animations.circular,\r\n                    continuous: true,\r\n                    body: transition => {\r\n                        const centerOfSector = {\r\n                            x: this.#center.x + this.#radius / 2 * Math.cos(this.#accumulator + angle / 2),\r\n                            y: this.#center.y + this.#radius / 2 * Math.sin(this.#accumulator + angle / 2)\r\n                        }\r\n\r\n                        const minSize = .7,\r\n                            rest = 1 - minSize\r\n\r\n                        ctx.translate(centerOfSector.x - centerOfSector.x * (minSize + transition * rest),\r\n                            centerOfSector.y - centerOfSector.y * (minSize + transition * rest))\r\n                        ctx.scale((minSize + transition * rest), (minSize + transition * rest))\r\n\r\n                        let opacity = Math.round(255 * transition).toString(16)\r\n\r\n                        if (opacity.length < 2)\r\n                            opacity = 0 + opacity\r\n\r\n                        ctx.fillStyle = value.color + opacity\r\n                        ctx.strokeStyle = Helper.applyAlpha(value.color, 255 * transition)\r\n                    }\r\n                })\r\n        } else if (this.onMouseMoveEvent\r\n                   && !this.animations.contains(value.id, AnimationType.Init)\r\n                   && !this.#pinned.includes(value.id)\r\n                   && !isSingle) {\r\n            const translate = (transition: number, event: AnimationType, swap: boolean) => {\r\n                this.animations.reload(value.id, event)\r\n\r\n                ctx.lineWidth = 1\r\n                ctx.lineJoin = 'miter'\r\n                ctx.lineCap = 'butt'\r\n\r\n                if (transition == 0)\r\n                    return\r\n\r\n                if (swap)\r\n                    transition = value.transition\r\n\r\n                const piece = value.current / this.#sum,\r\n                    angle = (isNaN(piece) ? 1 : piece) * 2 * Math.PI,\r\n                    direction = this.#accumulator + angle / 2,\r\n                    translate = {\r\n                        x: this.#animationOffset * Math.cos(direction) * transition,\r\n                        y: this.#animationOffset * Math.sin(direction) * transition\r\n                    }\r\n\r\n                ctx.translate(translate.x, translate.y)\r\n\r\n                if (angle > Math.PI / 6)\r\n                    ctx.lineWidth = transition * 8\r\n                ctx.lineJoin = 'round'\r\n                ctx.lineCap = 'round'\r\n\r\n                value.translate = translate\r\n                value.transition = transition\r\n            }\r\n\r\n            if (!this.#isInsideSector(this.onMouseMoveEvent, value)\r\n                || !this.animations.contains(value.id, AnimationType.MouseLeave))\r\n                this.animations.add(value.id,\r\n                    AnimationType.MouseLeave,\r\n                    {\r\n                        timer: Constants.Dates.minDate,\r\n                        duration: Constants.Animations.circular,\r\n                        backward: true,\r\n                        body: transition => {\r\n                            translate(transition,\r\n                                AnimationType.MouseOver,\r\n                                value.transition < transition)\r\n                        }\r\n                    })\r\n            else\r\n                this.animations.add(value.id,\r\n                    AnimationType.MouseOver,\r\n                    {\r\n                        duration: Constants.Animations.circular,\r\n                        body: transition => {\r\n                            translate(transition,\r\n                                AnimationType.MouseLeave,\r\n                                value.transition > transition)\r\n                        }\r\n                    })\r\n        }\r\n\r\n        let point2 = this.#getPoint(this.#radius, angle)\r\n\r\n        if (angle > 0) {\r\n            ctx.save()\r\n\r\n            if (value.current > 0) {\r\n                let labelStartPoint = this.#getPoint(this.#radius + 10, angle / 2),\r\n                    labelMidPoint = this.#getPoint(this.#radius + 20, angle / 2)\r\n\r\n                const dir = labelStartPoint.x > this.#center.x ? 1 : -1\r\n\r\n                let endPoint = {\r\n                    x: labelMidPoint.x + 10 * dir,\r\n                    y: labelMidPoint.y\r\n                }\r\n\r\n                let isBusy = false\r\n\r\n                const textWidth = Helper.stringWidth(value.label),\r\n                    imageDataX = dir == 1 ? endPoint.x + 12 : endPoint.x - textWidth - 12 + (value.translate ? value.translate.x : 0),\r\n                    imageDataY = endPoint.y - 12 + (value.translate ? value.translate.y : 0),\r\n                    imageData = new Uint32Array(ctx.getImageData(imageDataX, imageDataY, textWidth + 12, 28).data.buffer)\r\n\r\n                if (imageDataX < 0 || imageDataX + textWidth > this.canvas.width\r\n                    || endPoint.y - 12 < 0 || endPoint.y + 12 > this.canvas.height)\r\n                    isBusy = true\r\n\r\n                if (!isBusy)\r\n                    for (let i = 0; i < imageData.length; i++)\r\n                        if (Canvas.isPixelBusy(imageData[i])) {\r\n                            isBusy = true\r\n                            break\r\n                        }\r\n\r\n                if (!isBusy) {\r\n                    ctx.beginPath()\r\n                    ctx.moveTo(labelStartPoint.x, labelStartPoint.y)\r\n\r\n                    ctx.quadraticCurveTo(labelMidPoint.x, labelMidPoint.y, endPoint.x, endPoint.y)\r\n\r\n                    let opacity = Math.round(255 * (value.current / value.value)).toString(16)\r\n\r\n                    if (opacity.length < 2)\r\n                        opacity = 0 + opacity\r\n\r\n                    ctx.strokeStyle = Theme.text + opacity\r\n                    ctx.lineCap = 'butt'\r\n                    ctx.lineJoin = 'miter'\r\n                    ctx.lineWidth = 1\r\n                    ctx.stroke()\r\n\r\n                    ctx.fillStyle = Theme.text + opacity\r\n                    TextStyles.circularLabel(ctx, dir == 1)\r\n                    ctx.fillText(value.label, endPoint.x + 8 * dir, endPoint.y + 4)\r\n                }\r\n            }\r\n\r\n            ctx.restore()\r\n\r\n            ctx.beginPath()\r\n\r\n            if (!this.#isDonut)\r\n                ctx.moveTo(this.#center.x, this.#center.y)\r\n\r\n            ctx.lineTo(this.#startPoint.x, this.#startPoint.y)\r\n\r\n            let localAccumulator = 0,\r\n                localAngle = angle\r\n\r\n            while (localAngle > 0) {\r\n                let currentAngle = localAngle - Math.PI / 6 > 0\r\n                                   ? Math.PI / 6\r\n                                   : localAngle\r\n\r\n                point2 = this.#getPoint(this.#radius, localAccumulator + currentAngle)\r\n\r\n                const tangentIntersectionAngle = Math.PI - currentAngle,\r\n                    lengthToTangentIntersection = this.#radius / Math.sin(tangentIntersectionAngle / 2),\r\n                    tangentIntersectionPoint = this.#getPoint(lengthToTangentIntersection, localAccumulator + currentAngle / 2)\r\n\r\n                ctx.quadraticCurveTo(tangentIntersectionPoint.x, tangentIntersectionPoint.y, point2.x, point2.y)\r\n\r\n                localAccumulator += currentAngle\r\n\r\n                localAngle -= Math.PI / 6\r\n            }\r\n\r\n            if (this.#isDonut || value.innerRadius != 0) {\r\n                const innerRadius = this.#radius * (value.innerRadius / 100)\r\n\r\n                const innerPoint2 = {\r\n                    x: point2.x - (((this.#radius - innerRadius) * (point2.x - this.#center.x)) / this.#radius),\r\n                    y: point2.y - (((this.#radius - innerRadius) * (point2.y - this.#center.y)) / this.#radius)\r\n                }\r\n\r\n                ctx.lineTo(innerPoint2.x, innerPoint2.y)\r\n\r\n                localAngle = 0\r\n                localAccumulator = angle\r\n\r\n                while (localAngle < angle) {\r\n                    let currentAngle = localAngle + Math.PI / 6 < angle\r\n                                       ? Math.PI / 6\r\n                                       : angle - localAngle\r\n\r\n                    point2 = this.#getPoint(innerRadius, localAccumulator - currentAngle)\r\n\r\n                    const tangentIntersectionAngle = Math.PI - currentAngle,\r\n                        lengthToTangentIntersection = innerRadius / Math.sin(tangentIntersectionAngle / 2),\r\n                        tangentIntersectionPoint = this.#getPoint(lengthToTangentIntersection, localAccumulator - currentAngle / 2)\r\n\r\n                    ctx.quadraticCurveTo(tangentIntersectionPoint.x, tangentIntersectionPoint.y, point2.x, point2.y)\r\n\r\n                    localAccumulator -= currentAngle\r\n\r\n                    localAngle += Math.PI / 6\r\n                }\r\n\r\n                point2 = this.#getPoint(this.#radius, angle)\r\n            }\r\n\r\n            if (!this.animations.contains(value.id, AnimationType.Init)) {\r\n                const changeColor = (transition: number, event: AnimationType) => {\r\n                    this.animations.reload(value.id, event)\r\n\r\n                    if (transition == 0)\r\n                        return\r\n\r\n                    let opacity = Math.round(255 - 127 * transition).toString(16)\r\n                    if (opacity.length < 2)\r\n                        opacity = 0 + opacity\r\n\r\n                    ctx.fillStyle = value.color + opacity\r\n                    ctx.strokeStyle = Helper.applyAlpha(value.color, 255 - 127 * transition)\r\n                }\r\n\r\n                const anyHighlight = this.highlightItems.length != 0\r\n\r\n                if ((this.#currentHover && this.#currentHover != value.id)\r\n                    || (anyHighlight && !this.highlightItems.includes(value.id))) {\r\n                    this.animations.add(\r\n                        value.id,\r\n                        AnimationType.AnotherItemOver,\r\n                        {\r\n                            duration: Constants.Animations.circular,\r\n                            body: transition => {\r\n                                changeColor(transition, AnimationType.AnotherItemLeave)\r\n                            }\r\n                        }\r\n                    )\r\n                } else if (this.#currentHover == undefined || !anyHighlight) {\r\n                    this.animations.add(\r\n                        value.id,\r\n                        AnimationType.AnotherItemLeave,\r\n                        {\r\n                            timer: Constants.Dates.minDate,\r\n                            duration: Constants.Animations.circular,\r\n                            backward: true,\r\n                            body: transition => {\r\n                                changeColor(transition, AnimationType.AnotherItemOver)\r\n                            }\r\n                        }\r\n                    )\r\n                }\r\n            }\r\n\r\n            ctx.closePath()\r\n\r\n            ctx.fill()\r\n            ctx.stroke()\r\n\r\n            this.#accumulator += angle\r\n        }\r\n\r\n        ctx.resetTransform()\r\n\r\n        this.#startPoint = point2\r\n    }\r\n\r\n    #getPoint(radius: number, angle: number): Point {\r\n        return {\r\n            x: this.#center.x + radius * Math.cos(this.#accumulator + angle),\r\n            y: this.#center.y + radius * Math.sin(this.#accumulator + angle)\r\n        }\r\n    }\r\n\r\n    #isInsideSector(event: MouseEvent, value: Sector): boolean {\r\n        const isAngle = (point: Point) => {\r\n            let a = Math.atan2(point.y - this.#center.y, point.x - this.#center.x)\r\n            if (a < 0)\r\n                a += Math.PI * 2\r\n            if (a < this.#startAngle)\r\n                a = Math.PI * 2 - Math.abs(this.#startAngle - a) + this.#startAngle\r\n\r\n            let index = this.#angles.findIndex(o => o.id == value.id),\r\n                sumBefore = this.#angles[index].sum\r\n\r\n            return !(this.dropdown?.isActive ?? false)\r\n                   && sumBefore <= a\r\n                   && sumBefore + this.#angles[index].value - a >= 0\r\n        }\r\n\r\n        const isWithinRadius = (v: Point) => {\r\n            return v.x * v.x + v.y * v.y <= this.#radius * this.#radius\r\n                   && (!this.#isDonut || v.x * v.x + v.y * v.y\r\n                       >= this.#radius * (value.innerRadius / 100) * this.#radius * (value.innerRadius / 100))\r\n        }\r\n\r\n        const point = this.getMousePosition(event),\r\n            inner = {\r\n                x: point.x - this.#center.x,\r\n                y: point.y - this.#center.y\r\n            },\r\n            outer = {\r\n                x: point.x - this.#center.x - value.translate?.x,\r\n                y: point.y - this.#center.y - value.translate?.y\r\n            }\r\n\r\n        return isAngle(point) && (isWithinRadius(inner) || isWithinRadius(outer))\r\n    }\r\n\r\n    #drawEmpty() {\r\n        const ctx = Canvas.getContext(this.canvas)\r\n\r\n        ctx.beginPath()\r\n\r\n        ctx.arc(this.#center.x, this.#center.y, this.#radius, 0, 2 * Math.PI)\r\n        ctx.strokeStyle = Theme.text\r\n        ctx.stroke()\r\n\r\n        TextStyles.regular(ctx)\r\n        ctx.fillText(TextResources.allDataIsHidden, this.#center.x, this.#center.y)\r\n\r\n        requestAnimationFrame(this.render.bind(this))\r\n    }\r\n\r\n    #drawInnerTitle() {\r\n        if (this.#canRenderInnerTitle) {\r\n            const ctx = Canvas.getContext(this.canvas)\r\n\r\n            this.#innerTitleStyle(ctx)\r\n            ctx.fillText(this.data.innerTitle, this.#center.x, this.#center.y)\r\n        }\r\n    }\r\n\r\n    #calculateSizes() {\r\n        const titleOffset = this.settings.title\r\n                            ? Constants.Values.titleOffset\r\n                            : 0\r\n\r\n        const shortSide = this.canvas.width > this.canvas.height - titleOffset * 2\r\n                          ? this.canvas.height - titleOffset * 2\r\n                          : this.canvas.width\r\n\r\n        this.#center = {\r\n            x: this.canvas.width / 2,\r\n            y: titleOffset + this.canvas.height / 2\r\n        }\r\n\r\n        let longestLabel = 0\r\n\r\n        for (const value of this.data.values) {\r\n            const width = Helper.stringWidth(value.label)\r\n\r\n            if (width > longestLabel)\r\n                longestLabel = width\r\n        }\r\n\r\n        this.#radius = shortSide / 2 - (longestLabel + 50)\r\n\r\n        if (this.#radius < shortSide / 2 - 50)\r\n            this.#radius = shortSide / 2 - 50\r\n\r\n        if (this.data.innerTitle != undefined && this.data.innerTitle != '') {\r\n            this.#innerTitleStyle = TextStyles.large\r\n            this.#canRenderInnerTitle = Helper.stringWidth(this.data.innerTitle, 16)\r\n                                        < (this.data.innerRadius / 100) * this.#radius * 2\r\n\r\n            if (!this.#canRenderInnerTitle) {\r\n                this.#innerTitleStyle = TextStyles.regular\r\n                this.#canRenderInnerTitle = Helper.stringWidth(this.data.innerTitle, 14)\r\n                                            < (this.data.innerRadius / 100) * this.#radius * 2\r\n            }\r\n\r\n            if (!this.#canRenderInnerTitle)\r\n                console.warn(`Inner title is declared, but can't be rendered`)\r\n        }\r\n\r\n        this.#animationOffset = this.#radius * .1\r\n    }\r\n\r\n    refresh() {\r\n        super.refresh()\r\n\r\n        this.dropdown?.refresh()\r\n    }\r\n\r\n    resize() {\r\n        super.resize()\r\n\r\n        this.initAnimations()\r\n        this.#calculateSizes()\r\n        this.dropdown?.resize()\r\n    }\r\n\r\n    prepareSettings() {\r\n        super.prepareSettings()\r\n\r\n        this.data.values = this.data.values.map(v => new Sector(v))\r\n\r\n        if (this.settings.enableOther) {\r\n            if (!this.settings.contextMenu)\r\n                this.settings.contextMenu = [] as DropdownItem[]\r\n            else\r\n                this.settings.contextMenu.push({\r\n                    isDivider: true\r\n                } as DropdownItem)\r\n\r\n            this.settings.contextMenu.push({\r\n                text: TextResources.show,\r\n                condition: data => data?._other,\r\n                action: () => {\r\n                    new Modal(Decomposition.toChart<Sector>(this.settings, this.#other),\r\n                        {\r\n                            width: window.innerWidth * .8,\r\n                            height: window.innerHeight * .8\r\n                        } as DOMRect)\r\n                        .open()\r\n                }\r\n            })\r\n        }\r\n\r\n        this.#pinned = []\r\n\r\n        this.#isDonut = (this.data.innerRadius ?? 0) != 0\r\n\r\n        for (let item of this.data.values) {\r\n            item.disabled = !item.value\r\n            item.value ??= 0\r\n            item.current = item.value\r\n            item.innerRadius ??= this.data.innerRadius ?? 0\r\n\r\n            if (item.value < 0)\r\n                console.warn(`\"${ item.label }\" has negative value (${ item.value }) and will not be render`)\r\n        }\r\n\r\n        this.data.values = this.data.values.filter(v => v.value >= 0)\r\n\r\n        if (this.settings.enableOther && this.data.values.length > 20) {\r\n            this.#other = this.data.values.splice(20)\r\n\r\n            const sum = this.#other.reduce((acc, v) => acc + v.current, 0)\r\n\r\n            this.data.values = this.data.values.slice(0, 20)\r\n\r\n            this.data.values.push(new Sector({\r\n                value: sum,\r\n                current: sum,\r\n                label: TextResources.other,\r\n                id: Helper.guid(),\r\n                color: this.#other[this.#other.length - 1].color,\r\n                innerRadius: this.data.innerRadius,\r\n                data: {\r\n                    _other: true\r\n                }\r\n            }))\r\n        }\r\n    }\r\n\r\n    initDropdown() {\r\n        super.initDropdown()\r\n\r\n        this.dropdown = new Dropdown(this.canvas,\r\n            {\r\n                x: -10,\r\n                y: 10,\r\n                icon: Icon.ThreeLines,\r\n                items: [\r\n                    {\r\n                        text: TextResources.exportPNG,\r\n                        action: () => {\r\n                            Export.asPng(this.canvas, this.settings.title)\r\n                        }\r\n                    },\r\n                    {\r\n                        text: TextResources.exportCSV,\r\n                        action: () => {\r\n                            Export.asCsv(Decomposition.toTable(CircularData.getRows(this.data)), this.settings.title)\r\n                        }\r\n                    },\r\n                    {\r\n                        isDivider: true\r\n                    } as DropdownItem,\r\n                    {\r\n                        text: TextResources.decomposeToTable,\r\n                        action: () => {\r\n                            new Modal(Decomposition.toTable(CircularData.getRows(this.data))).open()\r\n                        }\r\n                    }\r\n                ]\r\n            })\r\n    }\r\n}","import { Data } from 'types/interfaces/Data'\r\nimport { Renderable } from 'types/base/Renderable'\r\nimport * as Helper from 'Helper'\r\nimport { Value } from 'types/base/Value'\r\nimport { Legend } from 'Legend'\r\nimport { Dropdown } from 'Dropdown'\r\nimport { DropdownItem } from 'types/DropdownItem'\r\nimport { Point } from 'types/Point'\r\nimport { TextResources } from 'static/TextResources'\r\nimport { Chart } from 'Chart'\r\nimport { Canvas } from 'helpers/Canvas'\r\nimport { TextStyles } from 'helpers/TextStyles'\r\nimport { LegendPlace, RenderState } from 'static/Enums'\r\nimport * as Constants from 'static/constants/Index'\r\nimport { ChartSettings } from '../ChartSettings'\r\n\r\nexport class Renderer<T extends Data> extends Renderable {\r\n    dropdown: Dropdown | undefined\r\n\r\n    data: T\r\n\r\n    protected isDestroy: boolean = false\r\n\r\n    protected highlightItems: string[]\r\n\r\n    constructor(chart: Chart) {\r\n        super(chart)\r\n\r\n        this.highlightItems = []\r\n\r\n        this.state = this.settings.disableInitAnimation ? RenderState.Idle : RenderState.Init\r\n    }\r\n\r\n    render() {\r\n        super.render()\r\n\r\n        this.renderTitle()\r\n    }\r\n\r\n    destroy() {\r\n        this.isDestroy = true\r\n\r\n        this.canvas.remove()\r\n    }\r\n\r\n    renderDropdown() {\r\n        this.onClickEvent = this.dropdown?.render(this.onMouseMoveEvent, this.onClickEvent)\r\n    }\r\n\r\n    resize() {\r\n        this.#calculateSizes()\r\n        this.tooltip.refresh()\r\n        this.dropdown?.resize()\r\n    }\r\n\r\n    prepareSettings() {\r\n        this.data = <T>this.settings.data\r\n\r\n        const domRect = this.node.parentElement!.getBoundingClientRect()\r\n\r\n        this.settings.minWidth = isNaN(+this.settings.width)\r\n                                 ? 0\r\n                                 : +this.settings.width\r\n        this.settings.minHeight = isNaN(+this.settings.height)\r\n                                  ? 0\r\n                                  : +this.settings.height\r\n\r\n        this.settings.width = this.settings.minWidth != 0 && domRect.width < this.settings.minWidth\r\n                              ? this.settings.minWidth\r\n                              : domRect.width\r\n\r\n        this.settings.height = this.settings.minHeight != 0 && domRect.height < this.settings.minHeight\r\n                               ? this.settings.minHeight\r\n                               : domRect.height\r\n\r\n        this.canvas.width = this.settings.width\r\n        this.canvas.height = this.settings.height\r\n\r\n        for (let item of this.settings.data.values) {\r\n            item.id = Helper.guid()\r\n            item.label ??= TextResources.noLabel\r\n        }\r\n\r\n        this.calculateColors()\r\n\r\n        for (let item of this.settings.contextMenu ?? [])\r\n            if (item.id != undefined)\r\n                item.action = data => this.node.dispatchEvent(new CustomEvent(item.id ?? '', { detail: data }))\r\n    }\r\n\r\n    calculateColors(force: boolean = false) {\r\n        const baseColor = this.settings.baseColor ?? Helper.randomColor()\r\n        let adjustStep = Math.round(100 / this.settings.data.values.length),\r\n            adjustAmount = -50\r\n\r\n        if (adjustStep <= 1)\r\n            adjustStep = 1\r\n\r\n        for (let item of this.settings.data.values)\r\n            if (item.color == undefined || force)\r\n                item.color = Helper.adjustColor(baseColor, adjustAmount += adjustStep)\r\n    }\r\n\r\n    initDropdown() {\r\n    }\r\n\r\n    renderContextMenu(data: any) {\r\n        if (this.dropdown?.isActive) {\r\n            this.onContextMenuEvent = undefined\r\n\r\n            return false\r\n        }\r\n\r\n        if (this.onContextMenuEvent != undefined && this.settings.contextMenu?.length != 0) {\r\n            if (this.contextMenu == undefined && this.settings.contextMenu != undefined) {\r\n                let clone: DropdownItem[] = []\r\n\r\n                for (const item of this.settings.contextMenu)\r\n                    if (!item.condition || item.condition(data))\r\n                        clone.push({\r\n                            id: item.id,\r\n                            text: item.text,\r\n                            isDivider: item.isDivider,\r\n                            action: () => {\r\n                                item.action(data)\r\n\r\n                                this.onContextMenuEvent = undefined\r\n                                this.contextMenu = undefined\r\n                            }\r\n                        })\r\n\r\n                this.contextMenu = new Dropdown(this.canvas, {\r\n                    x: this.onContextMenuEvent.x - this.canvasPosition.x,\r\n                    y: this.onContextMenuEvent.y - this.canvasPosition.y,\r\n                    items: clone,\r\n                    data: data\r\n                })\r\n\r\n                this.contextMenu.resize()\r\n\r\n                this.onClickEvent = undefined\r\n            }\r\n\r\n            const isClick = this.onClickEvent != undefined\r\n\r\n            this.onClickEvent = this.contextMenu?.render(this.onMouseMoveEvent, this.onClickEvent)\r\n\r\n            if (this.onClickEvent == undefined && isClick) {\r\n                this.contextMenu = undefined\r\n                this.onContextMenuEvent = undefined\r\n\r\n                return true\r\n            }\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    highlight(value?: Value) {\r\n        if (value)\r\n            this.highlightItems = [value.id]\r\n        else\r\n            this.highlightItems = []\r\n    }\r\n\r\n    closeDropdowns() {\r\n        this.dropdown?.close()\r\n        this.onContextMenuEvent = undefined\r\n    }\r\n\r\n    protected renderTitle() {\r\n        const ctx = Canvas.getContext(this.canvas)\r\n\r\n        if (this.settings.title) {\r\n            TextStyles.title(ctx)\r\n            ctx.fillText(this.settings.title, this.canvas.width / 2, Constants.Values.titleOffset)\r\n        }\r\n    }\r\n\r\n    #calculateSizes() {\r\n        let domRect = this.node.getBoundingClientRect()\r\n\r\n        this.settings.width = this.settings.minWidth && domRect.width < this.settings.minWidth\r\n                              ? this.settings.minWidth\r\n                              : domRect.width\r\n        this.settings.height = this.settings.minHeight && domRect.height < this.settings.minHeight\r\n                               ? this.settings.minHeight\r\n                               : domRect.height\r\n\r\n        this.canvas.width = this.settings.width\r\n        this.canvas.height = this.settings.height\r\n\r\n        if (this.settings.enableLegend) {\r\n            if (this.settings.legendPlace == undefined\r\n                || this.settings.legendPlace == LegendPlace.Top\r\n                || this.settings.legendPlace == LegendPlace.Bottom)\r\n                this.canvas.height -= Legend.getLegendHeight(this.settings.data.values, this.canvas.width)\r\n\r\n            if (this.settings.legendPlace == LegendPlace.Left\r\n                || this.settings.legendPlace == LegendPlace.Right)\r\n                this.canvas.width -= 500\r\n        }\r\n    }\r\n\r\n    protected getMousePosition(event: MouseEvent): Point {\r\n        return {\r\n            x: event.clientX - this.canvasPosition.x + scrollX,\r\n            y: event.clientY - this.canvasPosition.y + scrollY\r\n        }\r\n    }\r\n\r\n    applySettings(settings: ChartSettings) {\r\n        this.settings = settings\r\n    }\r\n}","import { Value } from 'types/base/Value'\r\nimport { TableValue } from 'types/TableValue'\r\nimport { TableData } from 'types/TableData'\r\nimport { Data } from 'types/interfaces/Data'\r\n\r\nexport class TreeData implements Data {\r\n    values: Value[]\r\n\r\n    padding: number\r\n\r\n    static getRows(data: TreeData): TableData {\r\n        const key = 'Value'\r\n\r\n        let values: TableValue[] = []\r\n\r\n        for (const value of data.values)\r\n            values.push({\r\n                name: value.label,\r\n                values: new Map([[key, value.value]])\r\n            })\r\n\r\n        return {\r\n            headers: [\r\n                {\r\n                    value: key,\r\n                    display: key\r\n                }\r\n            ],\r\n            values: values\r\n        }\r\n    }\r\n}","import { TableValue } from 'types/TableValue'\r\nimport { Sector } from 'types/Sector'\r\nimport { TableData } from 'types/TableData'\r\nimport { Data } from 'types/interfaces/Data'\r\n\r\nexport class CircularData implements Data {\r\n    values: Sector[]\r\n\r\n    innerRadius: number\r\n\r\n    innerTitle: string\r\n\r\n    static getRows(data: CircularData): TableData {\r\n        const key = 'Value'\r\n\r\n        let values: TableValue[] = []\r\n\r\n        for (const value of data.values)\r\n            values.push({\r\n                name: value.label,\r\n                values: new Map([[key, value.value]])\r\n            })\r\n\r\n        return {\r\n            headers: [\r\n                {\r\n                    value: key,\r\n                    display: key\r\n                }\r\n            ],\r\n            values: values\r\n        }\r\n    }\r\n}","export class Value {\r\n    id: string\r\n\r\n    color: string\r\n\r\n    label: string\r\n\r\n    disabled: boolean\r\n\r\n    hideInLegend: boolean\r\n\r\n    data: { [key: string]: string }\r\n\r\n    value: number\r\n\r\n    toggle(transition: number) {\r\n        if (transition == 0)\r\n            this.disabled = !this.disabled\r\n    }\r\n\r\n    checkCondition(): boolean {\r\n        return false\r\n    }\r\n\r\n    reset() {\r\n        this.disabled = false\r\n    }\r\n}","import { PlotData } from 'types/data/PlotData'\r\nimport { Renderer } from 'types/base/Renderer'\r\nimport * as Helper from 'Helper'\r\nimport { DropdownItem } from 'types/DropdownItem'\r\nimport { PlotAxis } from 'types/PlotAxis'\r\nimport { Paddings } from 'types/Paddings'\r\nimport { Dropdown } from 'Dropdown'\r\nimport { HoverItem } from 'types/HoverItem'\r\nimport { PlotSeries } from 'types/PlotSeries'\r\nimport { Tooltip } from 'Tooltip'\r\nimport { Theme } from 'Theme'\r\nimport { Chart } from 'Chart'\r\nimport { TextStyles } from 'helpers/TextStyles'\r\nimport { TooltipValue } from 'types/TooltipValue'\r\nimport { Export } from 'Export'\r\nimport { Decomposition } from 'Decomposition'\r\nimport { Modal } from 'Modal'\r\nimport { TextResources } from 'static/TextResources'\r\nimport { Formatter } from 'helpers/Formatter'\r\nimport { Canvas } from 'helpers/Canvas'\r\nimport { AnimationType, Icon, LineType, PlotAxisType, PlotType, RenderState } from 'static/Enums'\r\nimport * as Constants from 'static/constants/Index'\r\n\r\nexport class PlotRenderer extends Renderer<PlotData> {\r\n    #x: PlotAxis\r\n\r\n    #y: PlotAxis\r\n\r\n    #paddings: Paddings\r\n\r\n    #tooltipX: number\r\n\r\n    #tooltipY: number\r\n\r\n    #labelsX: Map<number, string>\r\n\r\n    #labelsY: Map<number, string>\r\n\r\n    #allValuesX: any[]\r\n\r\n    #allValuesY: any[]\r\n\r\n    #base: ImageBitmap | undefined\r\n\r\n    #backLines: ImageData | undefined\r\n\r\n    #yAxisStep: number\r\n\r\n    #plot: DOMRect\r\n\r\n    #hoverX: HoverItem | undefined\r\n\r\n    constructor(chart: Chart) {\r\n        super(chart)\r\n    }\r\n\r\n    render() {\r\n        super.render()\r\n\r\n        let tooltipLines = [\r\n            new TooltipValue(this.#labelsX.get(Math.round(this.#tooltipX))\r\n                             ?? this.#labelsY.get(Math.round(this.#tooltipY)))\r\n        ]\r\n\r\n        const ctx = Canvas.getContext(this.canvas)\r\n\r\n        TextStyles.regular(ctx)\r\n        ctx.lineJoin = 'round'\r\n\r\n        const axisLineHoverColor = Theme.lineActive\r\n\r\n        this.#renderBackLines()\r\n        this.#renderBase(true)\r\n\r\n        let x = 0,\r\n            y = 0,\r\n            yValue = 0,\r\n            yHeight = 0,\r\n            columnWidth = 0\r\n\r\n        const seriesToRender = this.data.values.filter(s => !s.disabled)\r\n\r\n        let columnsIndex = 0,\r\n            columnsCount = seriesToRender.filter(s => s.type == PlotType.Column).length\r\n\r\n        let barsIndex = 0,\r\n            barsCount = seriesToRender.filter(s => s.type == PlotType.Bar).length\r\n\r\n        let stackingAccumulator = []\r\n        for (let i = 0; i < this.#allValuesY.length; i++)\r\n            stackingAccumulator.push(0)\r\n\r\n        for (const series of seriesToRender) {\r\n            ctx.beginPath()\r\n\r\n            ctx.strokeStyle = series.color\r\n            ctx.fillStyle = series.color\r\n            ctx.lineWidth = series.width\r\n            ctx.lineCap = 'round'\r\n\r\n            const anyHighlight = this.highlightItems.length != 0\r\n\r\n            if (!this.animations.contains(series.id, AnimationType.Init)) {\r\n                const changeColor = (transition: number, event: AnimationType) => {\r\n                    this.animations.reload(series.id, event)\r\n\r\n                    if (transition == 0)\r\n                        return\r\n\r\n                    let opacity = Math.round(255 - 127 * transition).toString(16)\r\n                    if (opacity.length < 2)\r\n                        opacity = 0 + opacity\r\n\r\n                    ctx.fillStyle = series.color + opacity\r\n                    ctx.strokeStyle = series.color + opacity\r\n                }\r\n\r\n                if (anyHighlight && !this.highlightItems.includes(series.id)) {\r\n                    this.animations.add(\r\n                        series.id,\r\n                        AnimationType.AnotherItemOver,\r\n                        {\r\n                            duration: Constants.Animations.circular,\r\n                            body: transition => {\r\n                                changeColor(transition, AnimationType.AnotherItemLeave)\r\n                            }\r\n                        }\r\n                    )\r\n                } else if (!anyHighlight) {\r\n                    this.animations.add(\r\n                        series.id,\r\n                        AnimationType.AnotherItemLeave,\r\n                        {\r\n                            timer: Constants.Dates.minDate,\r\n                            duration: Constants.Animations.circular,\r\n                            backward: true,\r\n                            body: transition => {\r\n                                changeColor(transition, AnimationType.AnotherItemOver)\r\n                            }\r\n                        }\r\n                    )\r\n                }\r\n            }\r\n\r\n            switch (series.lineType) {\r\n                case LineType.Dash:\r\n                    ctx.setLineDash([series.width * 3, series.width * 2])\r\n\r\n                    break\r\n\r\n                case LineType.Dotted:\r\n                    ctx.setLineDash([series.width, series.width])\r\n\r\n                    break\r\n\r\n                case LineType.Solid:\r\n                default:\r\n                    break\r\n            }\r\n\r\n            for (const value of series.values) {\r\n                let index = series.values.indexOf(value),\r\n                    xIndex = this.#allValuesX.indexOf(this.data.xType == PlotAxisType.Date ? value.x?.toString() : value.x),\r\n                    yIndex = this.#allValuesY.indexOf(value.y)\r\n\r\n                const getTooltipValue = () => {\r\n                    return {\r\n                        x: Formatter.format(value.x, this.data.xType),\r\n                        y: Formatter.format(value.y, this.data.xType, this.settings.valuePostfix)\r\n                    }\r\n                }\r\n\r\n                x = this.#paddings.left\r\n                if (series.type != PlotType.Bar)\r\n                    x += xIndex * this.#x.step\r\n                if (series.type == PlotType.Line)\r\n                    x -= this.#x.step / 2 - this.#x.step\r\n\r\n                switch (series.type) {\r\n                    case PlotType.Line:\r\n                        y = this.#paddings.top + this.#plot.height - <number>value.y / this.#y.unit * this.#y.step\r\n                            - Math.abs(this.#y.min / this.#y.unit * this.#y.step)\r\n\r\n                        const pointDuration = 1500 / series.values.length * 1.2\r\n\r\n                        if (this.state == RenderState.Init || this.animations.contains(value.id, AnimationType.Init)) {\r\n                            this.animations.add(value.id,\r\n                                AnimationType.Init,\r\n                                {\r\n                                    timer: new Date(Date.now()).addMilliseconds(pointDuration * (index - 1)),\r\n                                    duration: pointDuration,\r\n                                    continuous: true,\r\n                                    body: transition => {\r\n                                        if (index == 0)\r\n                                            return\r\n\r\n                                        x = this.#paddings.left + xIndex * this.#x.step - this.#x.step / 2\r\n                                        y = this.#paddings.top + this.#plot.height - <number>value.y / this.#y.unit * this.#y.step\r\n                                            - Math.abs(this.#y.min / this.#y.unit * this.#y.step)\r\n\r\n                                        const next = series.values[index - 1]\r\n\r\n                                        let prevValue = {\r\n                                            x: this.#paddings.left + xIndex * this.#x.step - this.#x.step / 2,\r\n                                            y: this.#paddings.top + this.#plot.height - <number>next.y / this.#y.unit * this.#y.step\r\n                                               - Math.abs(this.#y.min / this.#y.unit * this.#y.step)\r\n                                        }\r\n\r\n                                        const endPointX = prevValue.x + (this.#x.step + (x - prevValue.x)) * transition,\r\n                                            endPointY = prevValue.y + (y - prevValue.y) * transition\r\n\r\n                                        if (prevValue.x != endPointX && prevValue.y != endPointY) {\r\n                                            ctx.moveTo(prevValue.x, prevValue.y)\r\n                                            ctx.lineTo(endPointX, endPointY)\r\n                                        }\r\n                                    }\r\n                                })\r\n                        } else {\r\n                            ctx.lineTo(x, y)\r\n\r\n                            if (this.#isOnX(x)) {\r\n                                const mouse = this.getMousePosition(this.onMouseMoveEvent)\r\n\r\n                                if (Math.abs(mouse.y - y) < 5) {\r\n                                    this.#hoverX = {\r\n                                        x: x,\r\n                                        y: y,\r\n                                        index: index,\r\n                                        data: value.data,\r\n                                        series: series\r\n                                    }\r\n\r\n                                    tooltipLines.push(new TooltipValue(`${ series.label }: ${ getTooltipValue().y }`, series.color))\r\n                                    this.#tooltipX = x - this.#x.step / 2\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        break\r\n\r\n                    case PlotType.AttentionLine:\r\n                        yValue = this.canvas.height - this.#paddings.bottom - <number>value.y / this.#y.unit * this.#y.step\r\n\r\n                        ctx.moveTo(this.#paddings.left, yValue)\r\n\r\n                        if (this.state == RenderState.Init || this.animations.contains(value.id, AnimationType.Init))\r\n                            this.animations.add(value.id,\r\n                                AnimationType.Init,\r\n                                {\r\n                                    duration: 1500,\r\n                                    continuous: true,\r\n                                    body: transition => {\r\n                                        ctx.lineTo(this.#paddings.left + (this.canvas.width - this.#paddings.left - this.#paddings.right) * transition,\r\n                                            this.canvas.height - this.#paddings.bottom - <number>value.y / this.#y.unit * this.#y.step)\r\n                                    }\r\n                                })\r\n                        else\r\n                            ctx.lineTo(this.canvas.width - this.#paddings.right, yValue)\r\n\r\n                        break\r\n\r\n                    case PlotType.Column:\r\n                        yValue = <number>value.y > this.data.yMax ? this.data.yMax : <number>value.y\r\n\r\n                        y = this.#plot.height * yValue / this.#y.max\r\n                        if (y < this.#y.minStep)\r\n                            y = this.#y.minStep\r\n\r\n                        columnWidth = this.#x.step * (series.width ? series.width / 100 : .5) / columnsCount\r\n\r\n                        ctx.beginPath()\r\n\r\n                        if (this.state == RenderState.Init || this.animations.contains(value.id + columnsIndex, AnimationType.Init)) {\r\n                            this.animations.add(value.id + columnsIndex,\r\n                                AnimationType.Init,\r\n                                {\r\n                                    duration: 800,\r\n                                    continuous: true,\r\n                                    body: transition => {\r\n                                        yValue = <number>value.y > this.data.yMax ? this.data.yMax : <number>value.y\r\n\r\n                                        x = this.#paddings.left + xIndex * this.#x.step\r\n                                        y = this.#plot.height * yValue / this.#y.max * transition\r\n\r\n                                        if (y < this.#y.minStep)\r\n                                            y = this.#y.minStep * transition\r\n\r\n                                        columnsIndex = this.data.values.filter(s => s.type == PlotType.Column)\r\n                                                           .indexOf(series)\r\n\r\n                                        ctx.roundRect(x + columnsIndex * columnWidth + (this.#x.step - columnsCount * columnWidth) / 2,\r\n                                            this.canvas.height - this.#paddings.bottom - y,\r\n                                            columnWidth,\r\n                                            y,\r\n                                            [6, 6, 0, 0])\r\n                                        ctx.fill()\r\n                                    }\r\n                                })\r\n                        } else {\r\n                            if (this.#isInArea(x + columnsIndex * columnWidth + (this.#x.step - columnsCount * columnWidth) / 2,\r\n                                    this.canvas.height - this.#paddings.bottom - y,\r\n                                    columnWidth,\r\n                                    y)\r\n                                && (this.contextMenu?.isActive == undefined\r\n                                    || this.contextMenu?.isActive == false)) {\r\n                                this.#hoverX = {\r\n                                    x: x,\r\n                                    y: y,\r\n                                    index: index,\r\n                                    data: value.data,\r\n                                    series: series\r\n                                }\r\n\r\n                                tooltipLines.push(new TooltipValue(`${ series.label }: ${ getTooltipValue().y }`, series.color))\r\n                                this.#tooltipX = x\r\n                            }\r\n\r\n                            ctx.roundRect(x + columnsIndex * columnWidth + (this.#x.step - columnsCount * columnWidth) / 2,\r\n                                this.canvas.height - this.#paddings.bottom - y,\r\n                                columnWidth,\r\n                                y,\r\n                                [6, 6, 0, 0])\r\n                            ctx.fill()\r\n                        }\r\n\r\n                        break\r\n\r\n                    case PlotType.Bar:\r\n                        y = this.#paddings.top + yIndex * this.#y.step + this.#y.step / 2\r\n                            + (100 - series.width) * this.#y.step / 100 / 2\r\n\r\n                        const seriesHeight = (series.width * this.#y.step / 100) / barsCount\r\n\r\n                        if (this.state == RenderState.Init || this.animations.contains(value.id + barsIndex, AnimationType.Init)) {\r\n                            this.animations.add(value.id + barsIndex,\r\n                                AnimationType.Init,\r\n                                {\r\n                                    duration: 800,\r\n                                    continuous: true,\r\n                                    body: transition => {\r\n                                        y = this.#paddings.top + yIndex * this.#y.step + this.#y.step / 2\r\n                                            + (100 - series.width) * this.#y.step / 100 / 2\r\n\r\n                                        barsIndex = this.data.values.filter(s => s.type == PlotType.Bar)\r\n                                                        .indexOf(series)\r\n\r\n                                        ctx.fillRect(x,\r\n                                            y - this.#y.step / 2 + barsIndex * seriesHeight,\r\n                                            <number>value.x / this.#x.unit * this.#x.step * transition,\r\n                                            seriesHeight)\r\n                                    }\r\n                                })\r\n                        } else {\r\n                            if (!anyHighlight) {\r\n                                if (this.#isInArea(x,\r\n                                    y - this.#y.step / 2 + barsIndex * seriesHeight,\r\n                                    <number>value.x / this.#x.unit * this.#x.step,\r\n                                    seriesHeight)) {\r\n                                    this.#hoverX = {\r\n                                        x: x,\r\n                                        y: y,\r\n                                        index: index,\r\n                                        data: value.data,\r\n                                        series: series\r\n                                    }\r\n\r\n                                    ctx.fillStyle += '88'\r\n\r\n                                    tooltipLines.push(new TooltipValue(`${ series.label }: ${ getTooltipValue().x }`, series.color))\r\n                                    this.#tooltipY = y - this.#y.step / 2\r\n                                } else {\r\n                                    ctx.fillStyle = series.color\r\n                                }\r\n                            }\r\n\r\n                            ctx.fillRect(x,\r\n                                y - this.#y.step / 2 + barsIndex * seriesHeight,\r\n                                <number>value.x / this.#x.unit * this.#x.step,\r\n                                seriesHeight)\r\n                        }\r\n\r\n                        break\r\n\r\n                    case PlotType.StackingColumn:\r\n                        y = this.canvas.height - this.#paddings.bottom - <number>value.y / this.#y.unit * this.#y.step\r\n\r\n                        columnWidth = this.#x.step * (series.width ? series.width / 100 : .5)\r\n\r\n                        if (this.state == RenderState.Init || this.animations.contains(value.id + index, AnimationType.Init)) {\r\n                            this.animations.add(value.id + index,\r\n                                AnimationType.Init,\r\n                                {\r\n                                    duration: 800,\r\n                                    continuous: true,\r\n                                    body: transition => {\r\n                                        columnsIndex = this.data.values.filter(s => s.type == PlotType.StackingColumn\r\n                                                                                    && s.values.filter(v => this.data.xType == PlotAxisType.Date\r\n                                                                                                            ? (v.x as Date).getTime() == (value.x as Date).getTime()\r\n                                                                                                            : v.x == value.x)\r\n                                                                                        .length > 0)\r\n                                                           .indexOf(series)\r\n\r\n                                        x = this.#paddings.left + xIndex * this.#x.step\r\n                                        y = this.canvas.height - this.#paddings.bottom - <number>value.y / this.#y.unit * this.#y.step\r\n\r\n                                        if (columnsIndex == 0)\r\n                                            stackingAccumulator[xIndex] = 0\r\n\r\n                                        let offset = stackingAccumulator[xIndex] != undefined\r\n                                                     ? stackingAccumulator[xIndex]\r\n                                                     : 0\r\n\r\n                                        yValue = this.canvas.height - this.#paddings.bottom + offset\r\n                                        yHeight = (y - this.canvas.height + this.#paddings.bottom) * transition\r\n\r\n                                        if (yValue > this.#paddings.top) {\r\n                                            if (yValue + yHeight < this.#paddings.top)\r\n                                                yHeight -= yValue + yHeight - this.#paddings.top\r\n\r\n                                            ctx.fillRect(x + (this.#x.step - columnWidth) / 2,\r\n                                                yValue,\r\n                                                columnWidth,\r\n                                                yHeight)\r\n                                        }\r\n\r\n                                        stackingAccumulator[xIndex] += (y - this.canvas.height + this.#paddings.bottom) * transition\r\n                                    }\r\n                                })\r\n                        } else {\r\n                            if (columnsIndex == 0)\r\n                                stackingAccumulator[xIndex] = 0\r\n\r\n                            let offset = stackingAccumulator[xIndex] != undefined\r\n                                         ? stackingAccumulator[xIndex]\r\n                                         : 0\r\n\r\n                            yValue = this.canvas.height - this.#paddings.bottom + offset\r\n                            yHeight = y - this.canvas.height + this.#paddings.bottom\r\n\r\n                            if (yValue > this.#paddings.top) {\r\n                                if (yValue + yHeight < this.#paddings.top)\r\n                                    yHeight -= yValue + yHeight - this.#paddings.top\r\n\r\n                                if (this.#isInArea(x + (this.#x.step - columnWidth) / 2,\r\n                                    yValue + yHeight,\r\n                                    columnWidth,\r\n                                    Math.abs(yHeight))) {\r\n                                    this.#hoverX = {\r\n                                        x: x,\r\n                                        y: y,\r\n                                        index: xIndex,\r\n                                        data: value.data,\r\n                                        series: series\r\n                                    }\r\n\r\n                                    tooltipLines.push(new TooltipValue(`${ series.label }: ${ getTooltipValue().y }`, series.color))\r\n                                    this.#tooltipX = x\r\n                                }\r\n\r\n                                ctx.fillRect(x + (this.#x.step - columnWidth) / 2,\r\n                                    yValue,\r\n                                    columnWidth,\r\n                                    yHeight)\r\n                            }\r\n\r\n                            stackingAccumulator[xIndex] += (y - this.canvas.height + this.#paddings.bottom)\r\n                        }\r\n\r\n                        break\r\n                }\r\n            }\r\n\r\n            ctx.setLineDash([])\r\n\r\n            switch (series.type) {\r\n                case PlotType.Line:\r\n                    ctx.stroke()\r\n\r\n                    if (this.#hoverX && this.#hoverX.series == series) {\r\n                        ctx.beginPath()\r\n                        ctx.lineWidth = 1\r\n                        ctx.strokeStyle = axisLineHoverColor\r\n                        ctx.moveTo(this.#paddings.left, this.#hoverX.y)\r\n                        ctx.lineTo(this.canvas.width - this.#paddings.right, this.#hoverX.y)\r\n                        ctx.stroke()\r\n\r\n                        let radius = Math.round(series.width * 1.1)\r\n                        if (radius < 5)\r\n                            radius = 5\r\n\r\n                        ctx.beginPath()\r\n                        ctx.arc(this.#hoverX.x, this.#hoverX.y, radius, 0, 2 * Math.PI)\r\n                        ctx.fill()\r\n                        ctx.lineWidth = Math.ceil(radius / 2)\r\n                        ctx.strokeStyle = Helper.adjustColor(series.color, 50)\r\n                        ctx.stroke()\r\n                    }\r\n\r\n                    break\r\n\r\n                case PlotType.AttentionLine:\r\n                    ctx.stroke()\r\n\r\n                    TextStyles.regular(ctx)\r\n                    ctx.fillText(series.label,\r\n                        this.#paddings.left + (this.canvas.width - this.#paddings.left - this.#paddings.right) / 2,\r\n                        this.canvas.height - this.#paddings.bottom - <number>series.values[0].y / this.#y.unit * this.#y.step + 16)\r\n\r\n                    break\r\n\r\n                case PlotType.Column:\r\n                case PlotType.StackingColumn:\r\n                    if (this.#hoverX)\r\n                        this.highlight(this.#hoverX.series)\r\n\r\n                    columnsIndex++\r\n\r\n                    break\r\n\r\n                case PlotType.Bar:\r\n                    if (this.#hoverX) {\r\n                        ctx.lineWidth = 1\r\n                        ctx.strokeStyle = axisLineHoverColor\r\n                        ctx.moveTo(this.#paddings.left,\r\n                            this.#tooltipY + this.#y.step / 2)\r\n                        ctx.lineTo(this.canvas.width - this.#paddings.right,\r\n                            this.#tooltipY + this.#y.step / 2)\r\n                        ctx.stroke()\r\n                    }\r\n\r\n                    barsIndex++\r\n\r\n                    break\r\n            }\r\n        }\r\n\r\n        this.#renderBase()\r\n\r\n        this.renderTitle()\r\n\r\n        this.tooltip.render(tooltipLines.length > 1 && !this.dropdown?.isActive,\r\n            this.onMouseMoveEvent,\r\n            tooltipLines,\r\n            this.#hoverX\r\n            ? this.#hoverX.series!.values[this.#hoverX.index]\r\n            : undefined)\r\n\r\n        if (!this.isDestroy)\r\n            requestAnimationFrame(this.render.bind(this))\r\n\r\n        this.state = RenderState.Idle\r\n\r\n        super.renderDropdown()\r\n\r\n        if (this.onContextMenuEvent && !this.#hoverX)\r\n            this.onContextMenuEvent = undefined\r\n\r\n        if (this.#hoverX == undefined)\r\n            this.highlight()\r\n\r\n        if (this.#hoverX\r\n            && (this.renderContextMenu(this.#hoverX.data)\r\n                || !this.onContextMenuEvent))\r\n            this.#hoverX = undefined\r\n    }\r\n\r\n    refresh() {\r\n        super.refresh()\r\n    }\r\n\r\n    resize() {\r\n        super.resize()\r\n\r\n        this.#base = undefined\r\n\r\n        this.#calculateSizes()\r\n    }\r\n\r\n    #isOnX(x: number): boolean {\r\n        if (!this.onMouseMoveEvent)\r\n            return false\r\n\r\n        const mouse = this.getMousePosition(this.onMouseMoveEvent)\r\n\r\n        return !(this.dropdown?.isActive ?? false)\r\n               && x - this.#x.step / 2 <= mouse.x && mouse.x < x + this.#x.step / 2\r\n               && this.#paddings.top <= mouse.y && mouse.y <= this.canvas.height - this.#paddings.bottom\r\n               && this.#paddings.left < mouse.x\r\n    }\r\n\r\n    #isInArea(x: number, y: number, w: number, h: number): boolean {\r\n        if (!this.onMouseMoveEvent)\r\n            return false\r\n\r\n        const mouse = this.getMousePosition(this.onMouseMoveEvent)\r\n\r\n        return !(this.dropdown?.isActive ?? false)\r\n               && mouse.x >= x && mouse.x <= x + w\r\n               && mouse.y >= y && mouse.y <= y + h\r\n    }\r\n\r\n    #renderBase(skip: boolean = false) {\r\n        if (this.#base && skip)\r\n            return\r\n\r\n        if (this.data.simple)\r\n            return\r\n\r\n        const ctx = Canvas.getContext(this.canvas)\r\n\r\n        if (skip)\r\n            ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\r\n\r\n        if (this.#base) {\r\n            ctx.drawImage(this.#base, 0, 0)\r\n            return\r\n        }\r\n\r\n        if (!skip)\r\n            return\r\n\r\n        const axisLabelOffset = 12\r\n\r\n        ctx.fillStyle = Theme.canvasBackground\r\n\r\n        ctx.fillRect(0, 0, this.#paddings.left, this.canvas.height)\r\n        ctx.fillRect(0, 0, this.canvas.width, this.#paddings.top)\r\n        ctx.fillRect(this.canvas.width - this.#paddings.right, 0, this.canvas.width, this.canvas.height)\r\n        ctx.fillRect(0, this.canvas.height - this.#paddings.bottom, this.canvas.width, this.canvas.height)\r\n\r\n        const isContainsBar = this.data.values.filter(s => s.type == PlotType.Bar).length > 0\r\n\r\n        ctx.setLineDash([])\r\n\r\n        if (this.data.xTitle || this.data.yTitle) {\r\n            ctx.textAlign = 'center'\r\n            ctx.textBaseline = 'bottom'\r\n            ctx.fillStyle = Theme.text\r\n\r\n            if (this.data.xTitle)\r\n                ctx.fillText(this.data.xTitle,\r\n                    this.#paddings.left + (this.canvas.width - this.#paddings.left - this.#paddings.right) / 2,\r\n                    this.canvas.height - 4)\r\n\r\n            if (this.data.yTitle) {\r\n                ctx.rotate(-Math.PI / 2)\r\n\r\n                ctx.textBaseline = 'top'\r\n\r\n                ctx.fillText(this.data.yTitle,\r\n                    -(this.#paddings.top + (this.canvas.height - this.#paddings.top - this.#paddings.bottom) / 2),\r\n                    8)\r\n\r\n                ctx.resetTransform()\r\n            }\r\n        }\r\n\r\n        ctx.textAlign = 'center'\r\n        ctx.textBaseline = 'top'\r\n\r\n        const step = this.#x.step,\r\n            xYPos = this.canvas.height - this.#paddings.bottom\r\n\r\n        let xCounter = 0,\r\n            acc = this.#paddings.left + step / 2\r\n\r\n        for (let i = 0; i < this.#allValuesX.length + 1; i++)\r\n            this.#labelsX.trySet(\r\n                Math.round(this.#paddings.left + i * this.#x.step),\r\n                Formatter.format(this.#allValuesX[i], this.data.xType)\r\n            )\r\n\r\n        const maxLabelWidth = Math.max(\r\n            ...[...this.#labelsX.values()].map(label => Math.ceil(Helper.stringWidth(label)))\r\n        ) + 10\r\n        const maxCount = Math.floor(\r\n            (this.canvas.width - this.#paddings.left - this.#paddings.right) / maxLabelWidth\r\n        )\r\n        const renderStep = Math.ceil(1 / (maxCount / this.#allValuesX.length))\r\n\r\n        while (acc < this.canvas.width - this.#paddings.right) {\r\n            if (xCounter % renderStep == 0) {\r\n                ctx.fillStyle = Theme.text + 'b7'\r\n\r\n                ctx.fillText(\r\n                    (this.#labelsX.get(Math.round(acc - this.#x.step / 2)) ?? '')\r\n                        + (!isContainsBar ? '' : this.settings.valuePostfix),\r\n                    acc,\r\n                    xYPos + axisLabelOffset / 2\r\n                )\r\n            }\r\n\r\n            acc += step\r\n            xCounter++\r\n        }\r\n\r\n        ctx.textAlign = 'right'\r\n        ctx.textBaseline = 'middle'\r\n\r\n        const yCount = this.#y.count > 10 ? 10 : this.#y.count\r\n\r\n        let yCounter = isContainsBar ? 1 : 0,\r\n            yStep = this.#allValuesY.length / yCount\r\n\r\n        for (let i = isContainsBar ? 1 : 0; i < this.#allValuesY.length + 1; i++) {\r\n            const labelY = this.canvas.height - yCounter * yStep * this.#y.step - this.#paddings.bottom,\r\n                labelYAsKey = Math.round(this.canvas.height - i * this.#y.step - this.#paddings.bottom)\r\n\r\n            if (!this.#labelsY.get(labelYAsKey))\r\n                this.#labelsY.set(labelYAsKey,\r\n                    Formatter.format(\r\n                        this.#y.min + (i + (isContainsBar ? -1 : 0)) * (this.#y.max - this.#y.min) / this.#y.count,\r\n                        PlotAxisType.Number,\r\n                        this.settings.valuePostfix\r\n                    ))\r\n\r\n            if (i >= yCounter * yStep) {\r\n                const label = {\r\n                    x: this.#paddings.left,\r\n                    y: labelY,\r\n                    label: this.#yAxisStep >= 1\r\n                           ? Math.round((this.#y.min + (yCounter * yStep + (isContainsBar ? -1 : 0)) * (this.#y.max - this.#y.min) / this.#y.count) / this.#yAxisStep) * this.#yAxisStep\r\n                           : Math.round(this.#y.min + (yCounter * yStep + (isContainsBar ? -1 : 0)) * (this.#y.max - this.#y.min) / this.#y.count / this.#yAxisStep) * this.#yAxisStep\r\n                }\r\n\r\n                if (label.label == -0)\r\n                    label.label = 0\r\n\r\n                let postfix = ''\r\n\r\n                if (this.data.shortLabels) {\r\n                    const countOfTens = Math.floor(label.label.toString().length / 4)\r\n\r\n                    if (countOfTens > 0) {\r\n                        label.label /= Math.pow(1000, countOfTens)\r\n\r\n                        postfix = [\r\n                            TextResources.thousandShort,\r\n                            TextResources.millionShort,\r\n                            TextResources.billionShort\r\n                        ][countOfTens - 1]\r\n                    }\r\n                }\r\n\r\n                ctx.fillText(\r\n                    Formatter.number(label.label)\r\n                        + postfix\r\n                        + (isContainsBar ? '' : this.settings.valuePostfix ?? ''),\r\n                    label.x - axisLabelOffset,\r\n                    label.y + (isContainsBar ? this.#y.step / 2 : 0)\r\n                )\r\n\r\n                yCounter++\r\n            }\r\n        }\r\n\r\n        ctx.beginPath()\r\n\r\n        ctx.strokeStyle = Theme.line\r\n        ctx.lineWidth = 1\r\n\r\n        const offset = .5,\r\n            isBar = this.data.values.filter(v => v.type == PlotType.Bar).length > 0\r\n\r\n        ctx.moveTo(this.#paddings.left - (isBar ? offset : 0),\r\n            this.canvas.height - this.#paddings.bottom + (isBar ? -offset : offset))\r\n\r\n        if (isBar)\r\n            ctx.lineTo(this.#paddings.left - offset, this.#paddings.top)\r\n        else\r\n            ctx.lineTo(this.canvas.width - this.#paddings.right, this.canvas.height - this.#paddings.bottom + offset)\r\n\r\n        ctx.stroke()\r\n\r\n        if (this.canvas.width > 0 && this.canvas.height > 0)\r\n            createImageBitmap(ctx.getImageData(0, 0, this.canvas.width, this.canvas.height))\r\n                .then(res => this.#base = res)\r\n    }\r\n\r\n    #renderBackLines() {\r\n        if (this.data.simple)\r\n            return\r\n\r\n        const ctx = Canvas.getContext(this.canvas)\r\n\r\n        if (this.#backLines) {\r\n            ctx.putImageData(this.#backLines, 0, 0)\r\n            return\r\n        }\r\n\r\n        ctx.fillStyle = Theme.canvasBackground\r\n        ctx.fillRect(0, 0, this.canvas.width, this.canvas.height)\r\n\r\n        const axisLineColor = Theme.lineAxis\r\n\r\n        const isContainsBar = this.data.values.filter(s => s.type == PlotType.Bar).length > 0\r\n\r\n        if (isContainsBar) {\r\n            const step = this.#x.step,\r\n                xYPos = this.canvas.height - this.#paddings.bottom\r\n\r\n            let xCounter = 0,\r\n                acc = this.#paddings.left + step / 2\r\n\r\n            for (let i = 0; i < this.#allValuesX.length + 1; i++)\r\n                this.#labelsX.trySet(\r\n                    Math.round(this.#paddings.left + i * this.#x.step),\r\n                    Formatter.format(this.#allValuesX[i - 1], this.data.xType)\r\n                )\r\n\r\n            const maxLabelWidth = Math.max(\r\n                ...[...this.#labelsX.values()].map(label => Math.ceil(Helper.stringWidth(label)))\r\n            ) + 10\r\n            const maxCount = Math.floor(\r\n                (this.canvas.width - this.#paddings.left - this.#paddings.right) / maxLabelWidth\r\n            )\r\n            const renderStep = Math.ceil(1 / (maxCount / this.#allValuesX.length))\r\n\r\n            while (acc < this.canvas.width - this.#paddings.right) {\r\n                if (xCounter % renderStep == 0) {\r\n                    ctx.beginPath()\r\n\r\n                    ctx.moveTo(acc, xYPos)\r\n                    ctx.lineTo(acc, this.#paddings.top)\r\n\r\n                    ctx.lineWidth = 1\r\n                    ctx.strokeStyle = axisLineColor\r\n                    ctx.setLineDash([6, 6])\r\n                    ctx.stroke()\r\n                }\r\n\r\n                acc += step\r\n                xCounter++\r\n            }\r\n        }\r\n\r\n        ctx.textAlign = 'right'\r\n        ctx.textBaseline = 'middle'\r\n\r\n        const yCount = this.#y.count > 10 ? 10 : this.#y.count\r\n\r\n        let yCounter = isContainsBar ? 1 : 0,\r\n            yStep = this.#allValuesY.length / yCount\r\n\r\n        for (let i = isContainsBar ? 1 : 0; i < this.#allValuesY.length + 1; i++) {\r\n            const labelY = this.canvas.height - yCounter * yStep * this.#y.step - this.#paddings.bottom\r\n\r\n            if (i >= yCounter * yStep) {\r\n                const label = {\r\n                    x: this.#paddings.left,\r\n                    y: labelY\r\n                }\r\n\r\n                if (this.data.values.filter(s => s.type.isAnyEquals(PlotType.Column, PlotType.StackingColumn, PlotType.Line)).length > 0) {\r\n                    ctx.beginPath()\r\n\r\n                    ctx.moveTo(label.x, label.y)\r\n                    ctx.lineTo(this.canvas.width - this.#paddings.right, label.y)\r\n\r\n                    ctx.lineWidth = 1\r\n                    ctx.strokeStyle = axisLineColor\r\n                    ctx.setLineDash([6, 6])\r\n                    ctx.stroke()\r\n                }\r\n\r\n                yCounter++\r\n            }\r\n        }\r\n\r\n        if (this.canvas.width > 0 && this.canvas.height > 0)\r\n            this.#backLines = ctx.getImageData(0, 0, this.canvas.width, this.canvas.height)\r\n    }\r\n\r\n    #calculateSizes() {\r\n        let xValues = this.data.values.flatMap(s => s.values.map(p => p.x)),\r\n            yValues = this.data.values.flatMap(s => s.values.map(p => p.y))\r\n\r\n        const isDate = this.data.xType == PlotAxisType.Date\r\n\r\n        if (isDate) {\r\n            let tempDate = new Date(Math.min(...(<number[]>xValues)))\r\n\r\n            while (tempDate.getTime() < Math.max(...(<number[]>xValues))) {\r\n                if (!xValues.includes(tempDate.getTime()))\r\n                    xValues.push(new Date(tempDate.getTime()))\r\n\r\n                tempDate = tempDate.addDays(1)\r\n            }\r\n\r\n            xValues.sort((a, b) => a < b ? -1 : 1)\r\n        }\r\n\r\n        yValues.sort((a, b) => b > a ? -1 : 1)\r\n\r\n        this.#allValuesX = [...new Set(xValues.filter(x => x != undefined).map(x => isDate ? x.toString() : x))]\r\n        this.#allValuesY = [...new Set(yValues.filter(y => y != undefined))]\r\n\r\n        this.#x = {\r\n            min: Math.min(...(<number[]>xValues)),\r\n            max: Math.max(...(<number[]>xValues)),\r\n            unit: (Math.abs(Math.min(...(<number[]>xValues))) + Math.abs(Math.max(...(<number[]>xValues)))) / (this.#allValuesX.length - 1),\r\n            step: (this.canvas.width - this.#paddings.left - this.#paddings.right) / this.#allValuesX.length,\r\n            minStep: 0,\r\n            count: this.#allValuesX.length\r\n        }\r\n\r\n        let yMin = Math.min(...(<number[]>yValues))\r\n        if (yMin > 0)\r\n            yMin = 0\r\n\r\n        this.#y = {\r\n            min: yMin,\r\n            max: this.data.yMax ?? Math.max(...(<number[]>yValues)),\r\n            unit: (Math.abs(yMin) + Math.abs(this.data.yMax ?? Math.max(...(<number[]>yValues)))) / (this.#allValuesY.length - 1),\r\n            step: (this.canvas.height - this.#paddings.top - this.#paddings.bottom) / this.#allValuesY.length,\r\n            minStep: 0,\r\n            count: this.#allValuesY.length\r\n        }\r\n\r\n        let stackingColumns = this.data.values.filter(s => s.type == PlotType.StackingColumn)\r\n\r\n        let max\r\n\r\n        if (stackingColumns.length > 0) {\r\n            let values = stackingColumns.map(s => s.values.flatMap(v => +v.y))\r\n\r\n            max = this.#y.max\r\n\r\n            for (let i = 0; i < values[0].length; i++) {\r\n                let sum = 0\r\n\r\n                for (const v of values)\r\n                    sum += v[i]\r\n\r\n                if (sum > max)\r\n                    max = sum\r\n            }\r\n\r\n            this.#y.max = max > this.data.yMax ? this.data.yMax : max\r\n            this.#y.unit = (Math.abs(this.#y.min) + Math.abs(this.#y.max)) / (this.#allValuesY.length - 1)\r\n        }\r\n\r\n        const yMaxWidth = Helper.stringWidth(Formatter.number(this.#y.max))\r\n        if (yMaxWidth > this.#paddings.left - 40 && !this.data.simple) {\r\n            this.#paddings.left += yMaxWidth - this.#paddings.left + 40\r\n            this.#x.step = (this.canvas.width - this.#paddings.left - this.#paddings.right) / this.#allValuesX.length\r\n        }\r\n\r\n        this.#yAxisStep = Math.abs(this.#y.min) + Math.abs(this.#y.max)\r\n\r\n        if (.5 <= this.#yAxisStep && this.#yAxisStep < 1)\r\n            this.#yAxisStep = .05\r\n        else if (1 <= this.#yAxisStep && this.#yAxisStep < 10)\r\n            this.#yAxisStep = .1\r\n        else if (10 <= this.#yAxisStep && this.#yAxisStep < 100)\r\n            this.#yAxisStep = 2\r\n        else if (100 <= this.#yAxisStep && this.#yAxisStep < 1000)\r\n            this.#yAxisStep = 20\r\n        else if (1000 <= this.#yAxisStep && this.#yAxisStep < 10000)\r\n            this.#yAxisStep = 50\r\n        else if (10000 <= this.#yAxisStep && this.#yAxisStep < 100000)\r\n            this.#yAxisStep = 1000\r\n        else if (100000 <= this.#yAxisStep && this.#yAxisStep < 1000000)\r\n            this.#yAxisStep = 10000\r\n        else if (1000000 <= this.#yAxisStep && this.#yAxisStep < 10000000)\r\n            this.#yAxisStep = 50000\r\n        else\r\n            this.#yAxisStep = 1\r\n\r\n        if (this.#yAxisStep != 1) {\r\n            max = yValues.length > 10\r\n                  ? (this.#y.max / 10 + this.#yAxisStep - (this.#y.max / 10) % this.#yAxisStep) * 10\r\n                  : Math.ceil(this.#y.max / this.#yAxisStep) * this.#yAxisStep\r\n\r\n            this.#y.max = max > this.data.yMax ? this.data.yMax : max\r\n            this.#y.unit = (Math.abs(this.#y.min) + Math.abs(this.#y.max)) / this.#allValuesY.length\r\n        }\r\n\r\n        this.#plot = {\r\n            width: this.canvas.width - this.#paddings.left - this.#paddings.right,\r\n            height: this.canvas.height - this.#paddings.top - this.#paddings.bottom\r\n        } as DOMRect\r\n\r\n        this.#x.minStep = this.#plot.width * 0.002\r\n        this.#y.minStep = this.#plot.height * 0.002\r\n    }\r\n\r\n    prepareSettings() {\r\n        super.prepareSettings()\r\n\r\n        this.#base = undefined\r\n        this.#backLines = undefined\r\n\r\n        this.data.values = this.data.values.map(v => new PlotSeries(v))\r\n\r\n        if (this.data.values.filter(v => v.type == PlotType.Bar).length > 0) {\r\n            for (let series of this.data.values) {\r\n                for (let item of series.values) {\r\n                    const x = item.x\r\n                    item['x'] = item.y\r\n                    item['y'] = x\r\n                }\r\n\r\n                series.values.sort((a, b) => b.x > a.x ? 1 : -1)\r\n            }\r\n        }\r\n\r\n        for (let item of this.data.values) {\r\n            item.disabled = !item.values\r\n            item.type ??= PlotType.Line\r\n\r\n            for (let it of item.values) {\r\n                it.id = Helper.guid()\r\n\r\n                if (this.data.xType == PlotAxisType.Date) {\r\n                    if (Helper.isISOString(it.x as string))\r\n                        it.x = new Date(it.x)\r\n                    else\r\n                        console.warn(`${ it.x } is not a date in ISO format.`)\r\n                }\r\n            }\r\n        }\r\n\r\n        this.#paddings = {\r\n            top: 30,\r\n            right: 40,\r\n            bottom: 50,\r\n            left: 80\r\n        }\r\n\r\n        if (this.data.simple)\r\n            this.#paddings = {\r\n                top: 10,\r\n                right: 10,\r\n                bottom: 10,\r\n                left: 10\r\n            }\r\n\r\n        if (this.settings.title)\r\n            this.#paddings.top += Constants.Values.titleOffset\r\n\r\n        this.tooltip = new Tooltip(this.canvas, this.settings)\r\n\r\n        this.#labelsX = new Map()\r\n        this.#labelsY = new Map()\r\n    }\r\n\r\n    initDropdown() {\r\n        super.initDropdown()\r\n\r\n        if (!this.data.simple)\r\n            this.dropdown = new Dropdown(this.canvas,\r\n                {\r\n                    x: -10,\r\n                    y: 10,\r\n                    icon: Icon.ThreeLines,\r\n                    items: [\r\n                        {\r\n                            text: TextResources.exportPNG,\r\n                            action: () => {\r\n                                Export.asPng(this.canvas, this.settings.title)\r\n                            }\r\n                        },\r\n                        {\r\n                            text: TextResources.exportCSV,\r\n                            action: () => {\r\n                                Export.asCsv(Decomposition.toTable(PlotData.getRows(this.data)), this.settings.title)\r\n                            }\r\n                        },\r\n                        {\r\n                            isDivider: true\r\n                        } as DropdownItem,\r\n                        {\r\n                            text: TextResources.decomposeToTable,\r\n                            action: () => {\r\n                                new Modal(Decomposition.toTable(PlotData.getRows(this.data))).open()\r\n                            }\r\n                        }\r\n                    ]\r\n                })\r\n        else\r\n            this.dropdown = undefined\r\n    }\r\n}","export class Dates {\r\n    static minDate = new Date(2000, 1, 1)\r\n}","import { Theme } from 'Theme'\r\n\r\nexport abstract class TextStyles {\r\n    static title(context: CanvasRenderingContext2D) {\r\n        context.fillStyle = Theme.text\r\n        context.textAlign = 'center'\r\n        context.textBaseline = 'middle'\r\n        context.font = '20px sans-serif'\r\n    }\r\n\r\n    static regular(context: CanvasRenderingContext2D) {\r\n        context.fillStyle = Theme.text\r\n        context.textAlign = 'center'\r\n        context.textBaseline = 'middle'\r\n        context.font = '14px sans-serif'\r\n    }\r\n\r\n    static large(context: CanvasRenderingContext2D) {\r\n        context.fillStyle = Theme.text\r\n        context.textAlign = 'center'\r\n        context.textBaseline = 'middle'\r\n        context.font = '16px sans-serif'\r\n    }\r\n\r\n    static tooltip(context: CanvasRenderingContext2D) {\r\n        context.font = '14px sans-serif'\r\n        context.textAlign = 'start'\r\n        context.textBaseline = 'alphabetic'\r\n    }\r\n\r\n    static circularLabel(context: CanvasRenderingContext2D, isRight: boolean) {\r\n        context.textAlign = isRight ? 'start' : 'end'\r\n        context.textBaseline = 'alphabetic'\r\n        context.font = '14px sans-serif'\r\n    }\r\n}","import { ChartSettings } from 'types/ChartSettings'\r\nimport { Animations } from 'Animations'\r\nimport { Tooltip } from 'Tooltip'\r\nimport { Dropdown } from 'Dropdown'\r\nimport { Chart } from 'Chart'\r\nimport { Canvas } from 'helpers/Canvas'\r\nimport { Events, RenderState, Tag } from 'static/Enums'\r\nimport { Styles } from 'static/constants/Styles'\r\nimport { Theme } from 'Theme'\r\n\r\nexport class Renderable {\r\n    node: HTMLElement\r\n\r\n    canvas: HTMLCanvasElement\r\n\r\n    settings: ChartSettings\r\n\r\n    animations: Animations\r\n\r\n    tooltip: Tooltip\r\n\r\n    protected state: RenderState = RenderState.Init\r\n\r\n    protected canvasPosition: DOMRect\r\n\r\n    protected onMouseMoveEvent: MouseEvent\r\n\r\n    protected onClickEvent: MouseEvent | undefined\r\n\r\n    protected onContextMenuEvent: MouseEvent | undefined\r\n\r\n    protected contextMenu: Dropdown | undefined\r\n\r\n    constructor(chart: Chart) {\r\n        this.node = chart.node\r\n        this.settings = chart.settings\r\n        this.animations = new Animations()\r\n\r\n        this.canvas = document.createElement(Tag.Canvas)\r\n\r\n        this.canvas.style.imageRendering = Styles.ImageRendering.Pixelated\r\n\r\n        this.node.append(this.canvas)\r\n\r\n        this.initAnimations()\r\n    }\r\n\r\n    render() {\r\n        const ctx = Canvas.getContext(this.canvas)\r\n\r\n        ctx.fillStyle = Theme.canvasBackground\r\n        ctx.fillRect(0, 0, this.canvas.width, this.canvas.height)\r\n    }\r\n\r\n    refresh() {\r\n        this.tooltip.refresh()\r\n        this.state = this.settings.disableInitAnimation ? RenderState.Idle : RenderState.Init\r\n    }\r\n\r\n    resetMouse() {\r\n        this.onMouseMoveEvent = new MouseEvent(Events.MouseMove)\r\n        this.onClickEvent = new MouseEvent(Events.Click)\r\n        this.onContextMenuEvent = undefined\r\n    }\r\n\r\n    initAnimations() {\r\n        this.tooltip = new Tooltip(this.canvas, this.settings)\r\n\r\n        this.canvasPosition = this.canvas.getBoundingClientRect()\r\n\r\n        this.canvasPosition.x += scrollX\r\n        this.canvasPosition.y += scrollY\r\n\r\n        if (this.state == RenderState.Init && !this.settings.disableInteractions) {\r\n            this.canvas.onmousemove = event => this.onMouseMoveEvent = event\r\n            this.canvas.onclick = event => this.onClickEvent = event\r\n            this.canvas.oncontextmenu = event => {\r\n                event.preventDefault()\r\n                this.contextMenu = undefined\r\n                if (this.onContextMenuEvent)\r\n                    this.onContextMenuEvent = undefined\r\n                else\r\n                    this.onContextMenuEvent = event\r\n            }\r\n            this.canvas.onmouseleave = () => this.onMouseMoveEvent = new MouseEvent(Events.MouseMove)\r\n        }\r\n    }\r\n\r\n    destroy() {\r\n        this.canvas.remove()\r\n    }\r\n}","import { TreeData } from 'types/data/TreeData'\r\nimport { Renderer } from 'types/base/Renderer'\r\nimport { Sector } from 'types/Sector'\r\nimport * as Helper from 'Helper'\r\nimport { DropdownItem } from 'types/DropdownItem'\r\nimport { Dropdown } from 'Dropdown'\r\nimport { Chart } from 'Chart'\r\nimport { TextStyles } from 'helpers/TextStyles'\r\nimport { TooltipValue } from 'types/TooltipValue'\r\nimport { Export } from 'Export'\r\nimport { Decomposition } from 'Decomposition'\r\nimport { Modal } from 'Modal'\r\nimport { TextResources } from 'static/TextResources'\r\nimport { Canvas } from 'helpers/Canvas'\r\nimport { TreeCell } from 'types/TreeCell'\r\nimport { Formatter } from 'helpers/Formatter'\r\nimport { AnimationType, Icon, PlotAxisType, RenderState } from 'static/Enums'\r\nimport * as Constants from 'static/constants/Index'\r\n\r\nexport class TreeRenderer extends Renderer<TreeData> {\r\n    constructor(chart: Chart) {\r\n        super(chart)\r\n\r\n        this.settings.enableLegend = false\r\n    }\r\n\r\n    render() {\r\n        super.render()\r\n\r\n        if (this.data.values.filter(v => v.value > 0).length == 0) {\r\n            this.#drawEmpty()\r\n            requestAnimationFrame(this.render.bind(this))\r\n            return\r\n        }\r\n\r\n        const titleOffset = this.settings.title ? Constants.Values.titleOffset : 0\r\n\r\n        const maxWidth = this.canvas.width - this.data.padding * 2,\r\n            maxHeight = this.canvas.height - this.data.padding * 2 - titleOffset\r\n\r\n        let sum = this.data.values.reduce((acc, cur) => acc + cur.value, 0),\r\n            totalSquare = maxWidth * maxHeight\r\n\r\n        let x = this.data.padding,\r\n            y = this.data.padding + titleOffset\r\n\r\n        let minX = this.data.padding,\r\n            minY = this.data.padding + titleOffset\r\n\r\n        let tooltipCell: TreeCell | undefined = undefined\r\n        let contextMenuData = undefined\r\n\r\n        const ctx = Canvas.getContext(this.canvas)\r\n\r\n        let isVertical = true\r\n        for (let i = 0; i < this.data.values.length; i++) {\r\n            const item = this.data.values[i]\r\n\r\n            const remainWidth = maxWidth - (x - this.data.padding),\r\n                remainHeight = maxHeight - (y - this.data.padding - titleOffset)\r\n\r\n            let cells: TreeCell[] = [\r\n                {\r\n                    color: item.color,\r\n                    label: item.label,\r\n                    s: item.value / sum * totalSquare,\r\n                    value: item.value,\r\n                    id: item.id,\r\n                    x: x,\r\n                    y: y\r\n                } as TreeCell\r\n            ]\r\n\r\n            if (i + 1 <= this.data.values.length - 1) {\r\n                const next = this.data.values[i + 1]\r\n\r\n                cells.push({\r\n                    color: next.color,\r\n                    label: next.label,\r\n                    s: next.value / sum * totalSquare,\r\n                    value: next.value,\r\n                    id: next.id,\r\n                    x: x,\r\n                    y: y\r\n                } as TreeCell)\r\n\r\n                i++\r\n            }\r\n\r\n            const isSingle = cells.length == 1,\r\n                isLast = i == this.data.values.length - 1\r\n\r\n            if (isVertical) {\r\n                for (let j = 1; j <= remainWidth + i * i; j++) {\r\n                    const w = remainWidth - j,\r\n                        h1 = cells[0].s / w,\r\n                        h2 = isSingle ? 0 : cells[1].s / w\r\n\r\n                    if (h1 + h2 >= remainHeight) {\r\n                        cells[0].w = Math.floor(w)\r\n                        cells[0].h = Math.floor(h1)\r\n\r\n                        if (!isSingle) {\r\n                            cells[1].w = Math.floor(w)\r\n                            cells[1].h = remainHeight - cells[0].h\r\n\r\n                            cells[1].y += cells[0].h\r\n                        }\r\n\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                for (let j = 1; j <= remainHeight + i * i; j++) {\r\n                    const h = remainHeight - j,\r\n                        w1 = cells[0].s / h,\r\n                        w2 = isSingle ? 0 : cells[1].s / h\r\n\r\n                    if (w1 + w2 >= remainWidth) {\r\n                        cells[0].h = Math.floor(h)\r\n                        cells[0].w = Math.floor(w1)\r\n\r\n                        if (!isSingle) {\r\n                            cells[1].h = Math.floor(h)\r\n                            cells[1].w = remainWidth - cells[0].w\r\n\r\n                            cells[1].x += cells[0].w\r\n                        }\r\n\r\n                        break\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (const cell of cells) {\r\n                if (isLast) {\r\n                    if (isVertical) {\r\n                        cell.w = remainWidth\r\n                        if (isSingle)\r\n                            cell.h = remainHeight\r\n                    } else {\r\n                        cell.h = remainHeight\r\n                        if (isSingle)\r\n                            cell.w = remainWidth\r\n                    }\r\n                }\r\n\r\n                ctx.beginPath()\r\n\r\n                ctx.fillStyle = cell.color\r\n\r\n                const cellInit = this.state != RenderState.Init\r\n                                 && !this.animations.contains(cell.id, AnimationType.Init)\r\n\r\n                const cellIndex = i + cells.indexOf(cell) + (isLast && isSingle ? 1 : 0),\r\n                    duration = 260\r\n\r\n                const getPrev = () => {\r\n                    let acc = 0\r\n                    for (let i = 0; i < cellIndex; i++)\r\n                        acc += duration - duration * (i / this.data.values.length) / Math.E\r\n\r\n                    return acc\r\n                }\r\n\r\n                const initAnimationDuration = duration - duration * cellIndex / (this.data.values.length + 1)\r\n\r\n                if (!cellInit) {\r\n                    this.animations.add(cell.id,\r\n                        AnimationType.Init,\r\n                        {\r\n                            duration: getPrev(),\r\n                            continuous: true,\r\n                            body: transition => {\r\n                                if (transition * getPrev() - getPrev() + initAnimationDuration < 0)\r\n                                    return ctx.fillStyle += '00'\r\n\r\n                                transition = (transition * getPrev() - getPrev() + initAnimationDuration) / initAnimationDuration\r\n\r\n                                const center = {\r\n                                    x: cell.x + cell.w / 2,\r\n                                    y: cell.y + cell.h / 2\r\n                                }\r\n\r\n                                const minSize = .7,\r\n                                    rest = 1 - minSize\r\n\r\n                                ctx.translate(center.x - center.x * (minSize + transition * rest),\r\n                                    center.y - center.y * (minSize + transition * rest))\r\n                                ctx.scale((minSize + transition * rest), (minSize + transition * rest))\r\n\r\n                                let opacity = Math.round(255 * transition).toString(16)\r\n\r\n                                if (opacity.length < 2)\r\n                                    opacity = 0 + opacity\r\n\r\n                                ctx.fillStyle = cell.color + opacity\r\n                            }\r\n                        })\r\n                } else {\r\n                    const translate = (transition: number, event: AnimationType) => {\r\n                        const center = {\r\n                            x: cell.x + cell.w / 2,\r\n                            y: cell.y + cell.h / 2\r\n                        }\r\n\r\n                        const margin = 12,\r\n                            minSize = cell.w > cell.h\r\n                                      ? 1 - margin / cell.w\r\n                                      : 1 - margin / cell.h,\r\n                            rest = 1 - minSize\r\n\r\n                        ctx.translate(center.x - center.x * (minSize + transition * rest),\r\n                            center.y - center.y * (minSize + transition * rest))\r\n                        ctx.scale(minSize + transition * rest, minSize + transition * rest)\r\n\r\n                        this.animations.reload(cell.id, event)\r\n                    }\r\n\r\n                    if (this.#isInCell(cell)\r\n                        && !tooltipCell) {\r\n                        tooltipCell = cell\r\n                        contextMenuData = cell.data\r\n\r\n                        this.animations.add(cell.id,\r\n                            AnimationType.MouseOver,\r\n                            {\r\n                                duration: Constants.Animations.tree,\r\n                                backward: true,\r\n                                body: transition => {\r\n                                    translate(transition, AnimationType.MouseLeave)\r\n                                }\r\n                            })\r\n                    } else {\r\n                        this.animations.add(cell.id,\r\n                            AnimationType.MouseLeave,\r\n                            {\r\n                                timer: Constants.Dates.minDate,\r\n                                duration: Constants.Animations.tree,\r\n                                body: transition => {\r\n                                    translate(transition, AnimationType.MouseOver)\r\n                                }\r\n                            })\r\n                    }\r\n                }\r\n\r\n                const gap = 4\r\n\r\n                ctx.roundRect(x + gap, y + gap, cell.w - gap, cell.h - gap, gap * 2)\r\n                ctx.fill()\r\n\r\n                if (cell.label\r\n                    && Helper.stringWidth(cell.label) < cell.w - gap\r\n                    && cell.h - gap > 16\r\n                    && !this.animations.contains(cell.id, AnimationType.Init)) {\r\n                    ctx.beginPath()\r\n                    TextStyles.large(ctx)\r\n                    ctx.fillStyle = !Helper.isColorVisible(cell.color, '#ffffff')\r\n                                    ? '#000000'\r\n                                    : '#ffffff'\r\n                    ctx.fillText(cell.label,\r\n                        x + 2 + cell.w / 2,\r\n                        y + 2 + cell.h / 2)\r\n                }\r\n\r\n                ctx.resetTransform()\r\n\r\n                if (isVertical)\r\n                    y += cell.h\r\n                else\r\n                    x += cell.w\r\n\r\n                totalSquare -= cell.w * cell.h\r\n                sum -= cell.value\r\n            }\r\n\r\n            if (isVertical) {\r\n                x += cells[0].w\r\n                y = minY\r\n            } else {\r\n                y += cells[0].h\r\n                x = minX\r\n            }\r\n\r\n            minX = x\r\n            minY = y\r\n\r\n            isVertical = !isVertical\r\n        }\r\n\r\n        this.tooltip.render(!!tooltipCell && !this.dropdown?.isActive,\r\n            this.onMouseMoveEvent,\r\n            [\r\n                new TooltipValue(`${ tooltipCell?.label }: ${ Formatter.format(tooltipCell?.value, PlotAxisType.Number, this.settings.valuePostfix) }`)\r\n            ],\r\n            this.data.values.find(v => v.id == tooltipCell?.id))\r\n\r\n        if (!this.isDestroy)\r\n            requestAnimationFrame(this.render.bind(this))\r\n\r\n        this.state = RenderState.Idle\r\n\r\n        super.renderDropdown()\r\n\r\n        if (tooltipCell || this.contextMenu)\r\n            this.renderContextMenu(contextMenuData)\r\n        else\r\n            this.onContextMenuEvent = undefined\r\n    }\r\n\r\n    #isInCell(cell: TreeCell) {\r\n        if (!this.onMouseMoveEvent || !cell)\r\n            return false\r\n\r\n        const mouse = this.getMousePosition(this.onMouseMoveEvent)\r\n\r\n        return !(this.dropdown?.isActive ?? false)\r\n               && cell.x <= mouse.x && mouse.x <= cell.x + cell.w\r\n               && cell.y <= mouse.y && mouse.y <= cell.y + cell.h\r\n    }\r\n\r\n    #drawEmpty() {\r\n        const ctx = Canvas.getContext(this.canvas)\r\n\r\n        TextStyles.regular(ctx)\r\n        ctx.fillText(TextResources.treeMapIsEmpty,\r\n            this.canvas.width / 2,\r\n            this.canvas.height / 2)\r\n    }\r\n\r\n    refresh() {\r\n        super.refresh()\r\n    }\r\n\r\n    resize() {\r\n        super.resize()\r\n\r\n        this.initAnimations()\r\n        this.animations.clear()\r\n    }\r\n\r\n    prepareSettings() {\r\n        super.prepareSettings()\r\n\r\n        this.data.values = this.data.values.map(v => new Sector(v))\r\n\r\n        this.data.values = this.data.values.filter(v => v.value > 0)\r\n\r\n        this.data.values.sort((a, b) => (b.value ?? 0) - (a.value ?? 0))\r\n\r\n        this.calculateColors(true)\r\n\r\n        for (let item of this.data.values) {\r\n            item.disabled = !item.value\r\n            item.value ??= 0\r\n        }\r\n    }\r\n\r\n    initDropdown() {\r\n        super.initDropdown()\r\n\r\n        this.dropdown = new Dropdown(this.canvas,\r\n            {\r\n                x: -10,\r\n                y: 10,\r\n                icon: Icon.ThreeLines,\r\n                items: [\r\n                    {\r\n                        text: TextResources.exportCSV,\r\n                        action: () => {\r\n                            Export.asCsv(Decomposition.toTable(TreeData.getRows(this.data)), this.settings.title)\r\n                        }\r\n                    },\r\n                    {\r\n                        isDivider: true\r\n                    } as DropdownItem,\r\n                    {\r\n                        text: TextResources.decomposeToTable,\r\n                        action: () => {\r\n                            new Modal(Decomposition.toTable(TreeData.getRows(this.data))).open()\r\n                        }\r\n                    }\r\n                ]\r\n            })\r\n    }\r\n}","import { TableData } from 'types/TableData'\r\nimport * as Helper from 'Helper'\r\nimport { Value } from 'types/base/Value'\r\nimport { ChartSettings } from 'types/ChartSettings'\r\nimport { Formatter } from 'helpers/Formatter'\r\nimport { Styles } from 'static/constants/Styles'\r\nimport { Tag } from 'static/Enums'\r\n\r\nexport class Decomposition {\r\n    static toTable(values: TableData) {\r\n        let table = document.createElement(Tag.Table)\r\n\r\n        table.classList.add('o-table')\r\n\r\n        let totals = new Map<string, number>()\r\n        let rows = '',\r\n            headers = '',\r\n            index = 0\r\n\r\n        let valuesMap = new Map<string, Map<string, any>>()\r\n\r\n        for (const tableValue of values.values) {\r\n            let allColumns = new Map<string, any>()\r\n\r\n            for (const header of values.headers)\r\n                allColumns.set(header.value, 0)\r\n\r\n            for (const [key, value] of tableValue.values)\r\n                allColumns.set(key, value)\r\n\r\n            let indexSpaces = ''\r\n            for (let i = 0; i < index; i++)\r\n                indexSpaces += ' '\r\n\r\n            valuesMap.set(tableValue.name + indexSpaces, allColumns)\r\n\r\n            index++\r\n        }\r\n\r\n        for (const tableHeader of values.headers)\r\n            headers += `\r\n                <th>\r\n                    ${ tableHeader.display }\r\n                </th>\r\n            `\r\n\r\n        for (const [key, value] of valuesMap) {\r\n            let columns = ''\r\n\r\n            for (const [vKey, vValue] of value) {\r\n                columns += `\r\n                    <td>\r\n                        ${ vValue == undefined ? '' : Formatter.number(vValue) }\r\n                    </td>\r\n                `\r\n\r\n                if (totals.has(vKey)) {\r\n                    let totalValue = +(totals.get(vKey) ?? 0)\r\n                    totals.set(vKey, totalValue + +vValue)\r\n                } else {\r\n                    totals.set(vKey, vValue)\r\n                }\r\n            }\r\n\r\n            rows += `\r\n                <tr>\r\n                    <td class=\"o-table-label\">\r\n                        ${ key.trim() }\r\n                    </td>\r\n                    \r\n                    ${ columns } \r\n                </tr>\r\n            `\r\n        }\r\n\r\n        let totalColumns = ''\r\n\r\n        for (const [, value] of totals)\r\n            totalColumns += `\r\n                <td>\r\n                    ${ value == undefined ? '' : Formatter.number(value) }\r\n                </td>\r\n            `\r\n\r\n        table.innerHTML = `\r\n            <thead>\r\n                <tr>\r\n                    <th></th>\r\n                \r\n                    ${ headers }\r\n                </tr>\r\n            </thead>\r\n        \r\n            <tbody>\r\n                ${ rows }\r\n            </tbody>\r\n            \r\n            <tfoot>\r\n                <tr>\r\n                    <td></td>\r\n                \r\n                    ${ totalColumns }\r\n                </tr>\r\n            </tfoot>\r\n        `\r\n\r\n        return table\r\n    }\r\n\r\n    static toChart<T extends Value>(settings: ChartSettings, values: T[]) {\r\n        let container = document.createElement(Tag.Div),\r\n            div = document.createElement(Tag.Div),\r\n            script = document.createElement(Tag.Script),\r\n            id = Helper.guid()\r\n\r\n        container.style.display = Styles.Display.Flex\r\n        container.style.height = '100%'\r\n\r\n        div.id = id\r\n        div.style.flexGrow = '1'\r\n\r\n        let cloneSettings = JSON.parse(JSON.stringify(settings)) as ChartSettings\r\n\r\n        if (cloneSettings.title)\r\n            cloneSettings.title = cloneSettings.title + ' (Other)'\r\n        cloneSettings.data.values = values\r\n        cloneSettings.minWidth = undefined\r\n        cloneSettings.minHeight = undefined\r\n\r\n        script.innerHTML = `\r\n            new OCharts.chart(document.getElementById('${ id }'), ${ JSON.stringify(cloneSettings) })\r\n                .render()\r\n        `\r\n\r\n        container.append(div, script)\r\n\r\n        return container\r\n    }\r\n}","export { Animations } from './Animations'\r\nexport { Dates } from './Dates'\r\nexport { Values } from './Values'","import { Renderer } from 'types/base/Renderer'\r\nimport { GaugeData } from 'types/data/GaugeData'\r\nimport * as Helper from 'Helper'\r\nimport { Sector } from 'types/Sector'\r\nimport { Dropdown } from 'Dropdown'\r\nimport { Point } from 'types/Point'\r\nimport { Chart } from 'Chart'\r\nimport { Theme } from 'Theme'\r\nimport { TextStyles } from 'helpers/TextStyles'\r\nimport { TooltipValue } from 'types/TooltipValue'\r\nimport { Export } from 'Export'\r\nimport { Formatter } from 'helpers/Formatter'\r\nimport { Canvas } from 'helpers/Canvas'\r\nimport { TextResources } from 'static/TextResources'\r\nimport { AnimationType, Icon, PlotAxisType, RenderState } from 'static/Enums'\r\n\r\nexport class GaugeRenderer extends Renderer<GaugeData> {\r\n    #radius: number\r\n\r\n    #center: Point\r\n\r\n    constructor(chart: Chart) {\r\n        super(chart)\r\n\r\n        this.settings.enableLegend = false\r\n    }\r\n\r\n    render() {\r\n        super.render()\r\n\r\n        this.#draw()\r\n\r\n        const value = this.data.values[0]\r\n        this.tooltip.render(this.#isInsideSector(this.onMouseMoveEvent, value) && !this.dropdown?.isActive,\r\n            this.onMouseMoveEvent,\r\n            [\r\n                new TooltipValue(`${ value?.label }: ${ Formatter.format(value?.current, PlotAxisType.Number, this.settings.valuePostfix) }`)\r\n            ],\r\n            value)\r\n\r\n        if (!this.isDestroy)\r\n            requestAnimationFrame(this.render.bind(this))\r\n\r\n        this.state = RenderState.Idle\r\n\r\n        super.renderDropdown()\r\n    }\r\n\r\n    #draw() {\r\n        const ctx = Canvas.getContext(this.canvas)\r\n\r\n        const value = this.data.values[0] ?? { id: Helper.guid() }\r\n\r\n        if (this.state == RenderState.Init || this.animations.contains(value.id, AnimationType.Init))\r\n            this.animations.add(value.id,\r\n                AnimationType.Init,\r\n                {\r\n                    duration: 450,\r\n                    continuous: true,\r\n                    body: transition => {\r\n                        value.current = value.value * transition\r\n                    }\r\n                })\r\n\r\n        ctx.beginPath()\r\n\r\n        ctx.strokeStyle = value.color\r\n        ctx.lineCap = 'round'\r\n        ctx.lineWidth = 40\r\n\r\n        const piece = value.current / this.data.max,\r\n            angle = (isNaN(piece) ? 1 : piece) * Math.PI\r\n\r\n        if (value.value) {\r\n            ctx.arc(this.#center.x, this.#center.y, this.#radius, Math.PI, angle - Math.PI)\r\n            ctx.stroke()\r\n        }\r\n\r\n        ctx.beginPath()\r\n\r\n        ctx.lineWidth = 1\r\n        ctx.lineCap = 'square'\r\n\r\n        let localAccumulator = 0,\r\n            localAngle = Math.PI\r\n\r\n        while (localAngle >= 0) {\r\n            let currentAngle = localAngle - Math.PI / 10 > 0\r\n                               ? Math.PI / 10\r\n                               : localAngle\r\n\r\n            const getPoint = (offset: number) => {\r\n                return {\r\n                    x: this.#center.x + (this.#radius + offset) * Math.cos(Math.PI + localAccumulator),\r\n                    y: this.#center.y + (this.#radius + offset) * Math.sin(Math.PI + localAccumulator)\r\n                }\r\n            }\r\n\r\n            let point1 = getPoint(50),\r\n                point2 = getPoint(90),\r\n                point3 = getPoint(115)\r\n\r\n            const opacity = Math.PI - localAngle > angle ? '66' : 'ff'\r\n\r\n            ctx.moveTo(point1.x, point1.y)\r\n            ctx.lineTo(point2.x, point2.y)\r\n            ctx.strokeStyle = Theme.text + opacity\r\n            ctx.stroke()\r\n\r\n            TextStyles.regular(ctx)\r\n            ctx.fillStyle = Theme.text + opacity\r\n            ctx.fillText(Formatter.number(this.data.max - localAngle / Math.PI * this.data.max), point3.x, point3.y)\r\n\r\n            localAccumulator += currentAngle\r\n\r\n            localAngle -= Math.PI / 10\r\n        }\r\n    }\r\n\r\n    #isInsideSector(event: MouseEvent, value: Sector): boolean {\r\n        if (!event)\r\n            return false\r\n\r\n        const isAngle = (point: Point) => {\r\n            let a = Math.atan2(point.y - this.#center.y, point.x - this.#center.x)\r\n            if (a < 0)\r\n                a += Math.PI * 2\r\n\r\n            const piece = value.current / this.data.max,\r\n                angle = (isNaN(piece) ? 1 : piece) * Math.PI\r\n\r\n            return a > Math.PI && Math.PI + angle >= a\r\n        }\r\n\r\n        const isWithinRadius = (v: Point) => {\r\n            const outerRadius = this.#radius + 20,\r\n                innerRadius = this.#radius - 20\r\n\r\n            return v.x * v.x + v.y * v.y <= outerRadius * outerRadius\r\n                   && v.x * v.x + v.y * v.y >= innerRadius * innerRadius\r\n        }\r\n\r\n        const point = this.getMousePosition(event),\r\n            inner = {\r\n                x: point.x - this.#center.x,\r\n                y: point.y - this.#center.y\r\n            }\r\n\r\n        return !(this.dropdown?.isActive ?? false)\r\n               && isAngle(point)\r\n               && isWithinRadius(inner)\r\n    }\r\n\r\n    #calculateSizes() {\r\n        const longSide = this.canvas.width < this.canvas.height\r\n                         ? this.canvas.height - 250\r\n                         : this.canvas.width\r\n\r\n        this.#radius = longSide / 3\r\n\r\n        this.#center = {\r\n            x: this.canvas.width / 2,\r\n            y: this.canvas.height - this.#radius / 5\r\n        }\r\n    }\r\n\r\n    refresh() {\r\n        super.refresh()\r\n    }\r\n\r\n    resize() {\r\n        super.resize()\r\n\r\n        this.initAnimations()\r\n        this.#calculateSizes()\r\n    }\r\n\r\n    prepareSettings() {\r\n        super.prepareSettings()\r\n\r\n        for (let item of this.data.values) {\r\n            item.disabled = !item.value\r\n            item.value ??= 0\r\n        }\r\n\r\n        if (this.data.values.length > 0 && this.data.values[0].value > this.data.max)\r\n            this.data.values[0].value = this.data.max\r\n    }\r\n\r\n    initDropdown() {\r\n        super.initDropdown()\r\n\r\n        this.dropdown = new Dropdown(this.canvas,\r\n            {\r\n                x: -10,\r\n                y: 10,\r\n                icon: Icon.ThreeLines,\r\n                items: [\r\n                    {\r\n                        text: TextResources.exportPNG,\r\n                        action: () => {\r\n                            Export.asPng(this.canvas, this.settings.title)\r\n                        }\r\n                    }\r\n                ]\r\n            })\r\n    }\r\n}","import { Theme } from 'Theme'\r\nimport * as Helper from 'Helper'\r\nimport { Canvas } from 'helpers/Canvas'\r\nimport { Icon, Tag } from 'static/Enums'\r\n\r\nexport class Export {\r\n    static asPng(canvas: HTMLCanvasElement, title: string) {\r\n        requestAnimationFrame(() => {\r\n            const ctx = Canvas.getContext(canvas)\r\n\r\n            let width = Helper.stringWidth(Icon.ThreeLines) + 20,\r\n                height = 64\r\n\r\n            ctx.fillStyle = Theme.canvasBackground\r\n            ctx.fillRect(canvas.width - width, 0, width, height)\r\n\r\n            let leftEmpty = 0,\r\n                rightEmpty = 0\r\n\r\n            const imageData = new Uint32Array(ctx.getImageData(0, 0, canvas.width, canvas.height).data.buffer)\r\n\r\n            let isBusy = false\r\n\r\n            for (let i = 0; i < canvas.width; i++) {\r\n                for (let j = 0; j < canvas.height; j++) {\r\n                    if (Canvas.isPixelBusy(imageData[i + j * canvas.width])) {\r\n                        isBusy = true\r\n                        break\r\n                    }\r\n                }\r\n\r\n                if (isBusy)\r\n                    break\r\n\r\n                leftEmpty++\r\n            }\r\n\r\n            isBusy = false\r\n\r\n            for (let i = canvas.width; i >= 0; i--) {\r\n                for (let j = 0; j < canvas.height; j++) {\r\n                    if (Canvas.isPixelBusy(imageData[i + j * canvas.width])) {\r\n                        isBusy = true\r\n                        break\r\n                    }\r\n                }\r\n\r\n                if (isBusy)\r\n                    break\r\n\r\n                rightEmpty++\r\n            }\r\n\r\n            if (leftEmpty > 4)\r\n                leftEmpty -= 4\r\n            if (rightEmpty > 4)\r\n                rightEmpty -= 4\r\n\r\n            if (leftEmpty > rightEmpty)\r\n                leftEmpty = rightEmpty\r\n            if (rightEmpty > leftEmpty)\r\n                rightEmpty = leftEmpty\r\n\r\n            let destinationCanvas = document.createElement(Tag.Canvas)\r\n            destinationCanvas.width = canvas.width - leftEmpty - rightEmpty\r\n            destinationCanvas.height = canvas.height\r\n\r\n            const destCtx = Canvas.getContext(destinationCanvas)\r\n\r\n            destCtx.fillStyle = Theme.background\r\n            destCtx.fillRect(0, 0, canvas.width, canvas.height)\r\n\r\n            destCtx.drawImage(canvas, -leftEmpty, 0)\r\n\r\n            Export.saveAs((title ?? 'chart') + '.png',\r\n                destinationCanvas.toDataURL('image/png'))\r\n        })\r\n    }\r\n\r\n    static asCsv(table: HTMLTableElement, title: string) {\r\n        let rows = table.querySelectorAll('tr'),\r\n            csv = []\r\n\r\n        for (let i = 0; i < rows.length; i++) {\r\n            let row = [],\r\n                cols = rows[i].querySelectorAll('td, th')\r\n\r\n            for (let j = 0; j < cols.length; j++) {\r\n                let data = cols[j].innerHTML\r\n                                  .replace(/(\\r\\n|\\n|\\r)/gm, '')\r\n                                  .replace(/(\\s\\s)/gm, ' ')\r\n\r\n                data = data.replace(/\"/g, '\"\"')\r\n                row.push('\"' + data + '\"')\r\n            }\r\n\r\n            csv.push(row.join(','))\r\n        }\r\n\r\n        Export.saveAs((title ?? 'table') + '.csv',\r\n            csv.join('\\n'),\r\n            'data:text/csv;charset=utf-8,' + encodeURIComponent(csv.join('\\n')),\r\n            true)\r\n    }\r\n\r\n    static saveAs(name: string, dataURL: string, href?: string | undefined, isText?: boolean) {\r\n        if (window.showSaveFilePicker != undefined) {\r\n            const accept = isText\r\n                           ? { 'text/csv': '.csv' } as FilePickerAcceptType\r\n                           : { 'image/*': '.png' } as FilePickerAcceptType\r\n\r\n            const options = {\r\n                suggestedName: name,\r\n                types: [\r\n                    {\r\n                        accept: accept\r\n                    }\r\n                ],\r\n                excludeAcceptAllOption: true\r\n            } as SaveFilePickerOptions\r\n\r\n            function toBlob(dataURI: string) {\r\n                const byteString = atob(dataURI.split(',')[1]),\r\n                    mimeString = dataURI.split(',')[0]\r\n                        .split(':')[1]\r\n                        .split(';')[0],\r\n                    buffer = new ArrayBuffer(byteString.length),\r\n                    imageArray = new Uint8Array(buffer)\r\n\r\n                for (let i = 0; i < byteString.length; i++)\r\n                    imageArray[i] = byteString.charCodeAt(i)\r\n\r\n                return new Blob([buffer], { type: mimeString })\r\n            }\r\n\r\n            window.showSaveFilePicker(options)\r\n                  .then(fileHandle => {\r\n                      fileHandle.createWritable()\r\n                                .then(writableStream => {\r\n                                    writableStream.write(isText ? dataURL : toBlob(dataURL))\r\n                                                  .then(() => writableStream.close())\r\n                                })\r\n                  })\r\n        } else {\r\n            let download = document.createElement(Tag.A)\r\n            download.href = href ?? dataURL\r\n            download.download = name\r\n            download.click()\r\n        }\r\n    }\r\n}","import { PlotAxisType } from 'static/Enums'\r\n\r\nexport abstract class Formatter {\r\n    static number = (value: number | undefined) =>\r\n        value?.toLocaleString(undefined, {\r\n            minimumFractionDigits: 2,\r\n            maximumFractionDigits: 2\r\n        }) ?? ''\r\n\r\n    static date = (value: Date | undefined) =>\r\n        value?.toLocaleDateString() ?? ''\r\n\r\n    static text = (value: string | undefined) =>\r\n        value ?? ''\r\n\r\n    static format(value: any | undefined, type: PlotAxisType, postfix?: string | undefined) {\r\n        let result = ''\r\n\r\n        switch (type) {\r\n            case PlotAxisType.Number:\r\n                result = Formatter.number(value)\r\n                break\r\n\r\n            case PlotAxisType.Date:\r\n                result = Formatter.date(new Date(value))\r\n                break\r\n\r\n            case PlotAxisType.Text:\r\n                result = Formatter.text(value)\r\n                break\r\n        }\r\n\r\n        return result + (postfix ?? '')\r\n    }\r\n\r\n}","import { TextStyles } from 'helpers/TextStyles'\r\nimport { Theme } from 'Theme'\r\nimport { Animations } from 'Animations'\r\nimport * as Helper from 'Helper'\r\nimport { ButtonOptions } from 'types/ButtonOptions'\r\nimport { Canvas } from 'helpers/Canvas'\r\nimport { AnimationType } from 'static/Enums'\r\nimport * as Constants from 'static/constants/Index'\r\nimport { Styles } from 'static/constants/Styles'\r\n\r\nexport class Button {\r\n    #canvas: HTMLCanvasElement\r\n\r\n    #options: ButtonOptions\r\n\r\n    #canvasPosition: DOMRect\r\n\r\n    animations: Animations\r\n\r\n    #isInit: boolean\r\n\r\n    #position: DOMRect\r\n\r\n    constructor(canvas: HTMLCanvasElement, options: ButtonOptions) {\r\n        this.#canvas = canvas\r\n        this.#options = options\r\n\r\n        this.animations = new Animations()\r\n\r\n        this.#initAnimations()\r\n    }\r\n\r\n    render(moveEvent: MouseEvent, clickEvent: MouseEvent | undefined) {\r\n        if (!this.#isInit)\r\n            this.#initAnimations()\r\n\r\n        const ctx = Canvas.getContext(this.#canvas)\r\n\r\n        ctx.beginPath()\r\n\r\n        const translate = (transition: number, event: AnimationType) => {\r\n            this.animations.reload('animation-button', event)\r\n\r\n            ctx.fillStyle = Helper.adjustColor(Theme.canvasBackground, -Math.round(transition * 25))\r\n        }\r\n\r\n        if (this.#isOnButton(moveEvent)) {\r\n            this.#canvas.style.cursor = Styles.Cursor.Pointer\r\n\r\n            if (clickEvent && this.#isOnButton(clickEvent)) {\r\n                this.#options.action()\r\n                clickEvent = undefined\r\n            }\r\n\r\n            this.animations.add('animation-button',\r\n                AnimationType.MouseOver,\r\n                {\r\n                    duration: 300,\r\n                    body: transition => {\r\n                        translate(transition, AnimationType.MouseLeave)\r\n                    }\r\n                })\r\n        } else {\r\n            this.animations.add('animation-button',\r\n                AnimationType.MouseLeave,\r\n                {\r\n                    timer: Constants.Dates.minDate,\r\n                    duration: 300,\r\n                    backward: true,\r\n                    body: transition => {\r\n                        translate(transition, AnimationType.MouseOver)\r\n                    }\r\n                })\r\n        }\r\n\r\n        ctx.roundRect(this.#position.x, this.#position.y, this.#position.width, this.#position.height, 4)\r\n        ctx.fill()\r\n\r\n        TextStyles.regular(ctx)\r\n        ctx.fillText(this.#options.text,\r\n            this.#position.x + this.#position.width / 2,\r\n            this.#position.y + this.#position.height / 2)\r\n\r\n        this.#isInit = true\r\n\r\n        return clickEvent\r\n    }\r\n\r\n    resize() {\r\n        this.#initAnimations()\r\n    }\r\n\r\n    #initAnimations() {\r\n        this.#canvasPosition = this.#canvas.getBoundingClientRect()\r\n\r\n        this.#canvasPosition.x += scrollX\r\n        this.#canvasPosition.y += scrollY\r\n\r\n        const width = Helper.stringWidth(this.#options.text) + 12,\r\n            height = 20\r\n\r\n        this.#position = <DOMRect>{\r\n            x: this.#options.x + width > this.#canvas.width\r\n               ? this.#canvas.width - width\r\n               : this.#options.x < 0\r\n                 ? this.#canvas.width + this.#options.x - width\r\n                 : this.#options.x,\r\n            y: this.#options.y + height > this.#canvas.height\r\n               ? this.#canvas.height - height\r\n               : this.#options.y < 0\r\n                 ? this.#canvas.height + this.#options.y - height\r\n                 : this.#options.y,\r\n            width: width,\r\n            height: height\r\n        }\r\n    }\r\n\r\n    #isOnButton(event: MouseEvent): boolean {\r\n        if (!event)\r\n            return false\r\n\r\n        let trueX = event.clientX - this.#canvasPosition.x + scrollX,\r\n            trueY = event.clientY - this.#canvasPosition.y + scrollY\r\n\r\n        return trueX >= this.#position.x && trueX <= this.#position.x + this.#position.width\r\n               && trueY >= this.#position.y && trueY <= this.#position.y + this.#position.height\r\n    }\r\n}","export enum AnimationType {\r\n    MouseOver,\r\n\r\n    MouseLeave,\r\n\r\n    Init,\r\n\r\n    Click,\r\n\r\n    AnotherItemOver,\r\n\r\n    AnotherItemLeave\r\n}\r\n\r\nexport enum Attribute {\r\n    Name = 'name'\r\n}\r\n\r\nexport enum ChartType {\r\n    Plot,\r\n\r\n    Circular,\r\n\r\n    Gauge,\r\n\r\n    TreeMap\r\n}\r\n\r\nexport enum ErrorType {\r\n    NullContext = 'Can\\'t find context',\r\n\r\n    ElementNotExist = 'Element does not exist'\r\n}\r\n\r\nexport enum Events {\r\n    VisibilityChanged = 'visibilitychange',\r\n\r\n    Blur = 'blur',\r\n\r\n    MouseMove = 'mousemove',\r\n\r\n    Click = 'click',\r\n\r\n    Change = 'change',\r\n\r\n    ContextMenu = 'contextmenu'\r\n}\r\n\r\nexport enum LegendPlace {\r\n    Bottom,\r\n\r\n    Left,\r\n\r\n    Top,\r\n\r\n    Right\r\n}\r\n\r\nexport enum LineType {\r\n    Solid,\r\n\r\n    Dash,\r\n\r\n    Dotted\r\n}\r\n\r\nexport enum PlotAxisType {\r\n    Number,\r\n\r\n    Date,\r\n\r\n    Text\r\n}\r\n\r\nexport enum PlotType {\r\n    Line,\r\n\r\n    AttentionLine,\r\n\r\n    Column,\r\n\r\n    Bar,\r\n\r\n    StackingColumn\r\n}\r\n\r\nexport enum Tag {\r\n    Canvas = 'canvas',\r\n\r\n    A = 'a',\r\n\r\n    Div = 'div',\r\n\r\n    Dialog = 'dialog',\r\n\r\n    Table = 'table',\r\n\r\n    Script = 'script'\r\n}\r\n\r\nexport enum RenderState {\r\n    Idle,\r\n\r\n    Init\r\n}\r\n\r\nexport enum Icon {\r\n    ThreeLines = '☰'\r\n}","import { Errors } from 'helpers/Errors'\r\nimport { ErrorType, Tag } from 'static/Enums'\r\n\r\nexport class Modal {\r\n    modal: HTMLDialogElement | undefined\r\n\r\n    #content: HTMLDivElement | undefined\r\n\r\n    constructor(content?: HTMLElement, size?: DOMRect) {\r\n        this.modal = document.createElement(Tag.Dialog)\r\n\r\n        this.modal.classList.add('o-modal')\r\n\r\n        if (size) {\r\n            this.modal.style.width = `${size.width}px`\r\n            this.modal.style.height = `${size.height}px`\r\n        }\r\n\r\n        this.modal.oncancel = () => this.close()\r\n\r\n        document.body.appendChild(this.modal)\r\n\r\n        this.#setHeader()\r\n\r\n        this.#setContent(content)\r\n    }\r\n\r\n    open() {\r\n        Errors.throwIsUndefined(this.modal, ErrorType.ElementNotExist)\r\n\r\n        this.modal!.showModal()\r\n    }\r\n\r\n    close() {\r\n        Errors.throwIsUndefined(this.modal, ErrorType.ElementNotExist)\r\n\r\n        this.modal!.close()\r\n\r\n        this.modal!.remove()\r\n\r\n        this.modal = undefined\r\n    }\r\n\r\n    #setHeader() {\r\n        Errors.throwIsUndefined(this.modal, ErrorType.ElementNotExist)\r\n\r\n        let closeButton = document.createElement('button')\r\n\r\n        closeButton.classList.add('o-modal-close')\r\n        closeButton.innerHTML = 'x'\r\n\r\n        this.modal!.appendChild(closeButton)\r\n\r\n        closeButton.onclick = () => this.close()\r\n    }\r\n\r\n    #setContent(content: HTMLElement | undefined) {\r\n        if (this.#content == undefined) {\r\n            this.#content = document.createElement(Tag.Div)\r\n\r\n            this.#content.classList.add('o-modal-content')\r\n\r\n            this.modal?.appendChild(this.#content)\r\n        }\r\n\r\n        if (content != undefined)\r\n            this.#content.appendChild(content)\r\n    }\r\n}","import { Value } from 'types/base/Value'\r\nimport { PlotPoint } from 'types/PlotPoint'\r\nimport { LineType, PlotType } from 'static/Enums'\r\n\r\nexport class PlotSeries extends Value {\r\n    values: PlotPoint[]\r\n\r\n    type: PlotType\r\n\r\n    width: number\r\n\r\n    lineType: LineType = LineType.Solid\r\n\r\n    constructor(obj: object) {\r\n        super()\r\n\r\n        Object.assign(this, obj)\r\n    }\r\n\r\n    toggle(transition: number) {\r\n        super.toggle(transition)\r\n    }\r\n\r\n    checkCondition(): boolean {\r\n        super.checkCondition()\r\n\r\n        return true\r\n    }\r\n\r\n    reset() {\r\n        super.reset()\r\n    }\r\n}","import { Value } from 'types/base/Value'\r\nimport { Renderable } from 'types/base/Renderable'\r\nimport * as Helper from 'Helper'\r\nimport { Sector } from 'types/Sector'\r\nimport { Point } from 'types/Point'\r\nimport { Theme } from 'Theme'\r\nimport { Chart } from 'Chart'\r\nimport { TextStyles } from 'helpers/TextStyles'\r\nimport { Canvas } from 'helpers/Canvas'\r\nimport { Button } from 'Button'\r\nimport { TextResources } from 'static/TextResources'\r\nimport * as Constants from 'static/constants/Index'\r\nimport { Styles } from 'static/constants/Styles'\r\nimport { AnimationType, Events, LegendPlace, RenderState } from 'static/Enums'\r\nimport { ChartSettings } from './types/ChartSettings'\r\n\r\nexport class Legend extends Renderable {\r\n    #button: Button\r\n\r\n    #offset: Point\r\n\r\n    #chart: Chart\r\n\r\n    #hoverCount: number\r\n\r\n    isDestroy: boolean = false\r\n\r\n    constructor(chart: Chart) {\r\n        super(chart)\r\n\r\n        this.#chart = chart\r\n\r\n        this.prepareSettings()\r\n    }\r\n\r\n    render() {\r\n        super.render()\r\n\r\n        const ctx = Canvas.getContext(this.canvas)\r\n\r\n        let nextPoint = { x: 20, y: 21 }\r\n\r\n        this.canvas.style.cursor = Styles.Cursor.Default\r\n\r\n        TextStyles.regular(ctx)\r\n        ctx.textAlign = 'start'\r\n        ctx.textBaseline = 'alphabetic'\r\n\r\n        ctx.translate(this.#offset.x, this.#offset.y)\r\n\r\n        this.#hoverCount = 0\r\n\r\n        for (const value of this.settings.data.values.filter(v => !v.hideInLegend))\r\n            nextPoint = this.#draw(value, nextPoint.x, nextPoint.y)\r\n\r\n        ctx.translate(-this.#offset.x, -this.#offset.y)\r\n\r\n        if (!this.isDestroy)\r\n            requestAnimationFrame(this.render.bind(this))\r\n\r\n        this.onClickEvent = this.#button?.render(this.onMouseMoveEvent, this.onClickEvent)\r\n\r\n        this.state = RenderState.Idle\r\n    }\r\n\r\n    #draw(value: Value, x: number, y: number): Point {\r\n        const ctx = Canvas.getContext(this.canvas)\r\n\r\n        const textWidth = Helper.stringWidth(value.label),\r\n            circleRadius = 6\r\n\r\n        if (x + 48 + textWidth >= this.canvas.width - 40 - this.#offset.x) {\r\n            x = 20\r\n            y += 26\r\n        }\r\n\r\n        let rectX = x - circleRadius - circleRadius,\r\n            rectY = y - circleRadius / 2 - circleRadius,\r\n            rectW = circleRadius + circleRadius + textWidth + 18,\r\n            rectH = 20\r\n\r\n        const isHover = (event: MouseEvent | undefined) => {\r\n            if (!event)\r\n                return false\r\n\r\n            const px = event.clientX - this.canvasPosition.x + scrollX - this.#offset.x,\r\n                py = event.clientY - this.canvasPosition.y + scrollY - this.#offset.y\r\n\r\n            return px >= rectX && px <= rectX + rectW\r\n                   && py >= rectY && py <= rectY + rectH\r\n        }\r\n\r\n        const translate = (transition: number, event: AnimationType) => {\r\n            this.animations.reload(value.id, event)\r\n\r\n            ctx.beginPath()\r\n\r\n            ctx.roundRect(rectX, rectY, rectW, rectH, circleRadius)\r\n\r\n            ctx.fillStyle = Helper.adjustColor(Theme.canvasBackground, Math.round(-25 * transition))\r\n            ctx.fill()\r\n        }\r\n\r\n        this.animations.add(value.id,\r\n            AnimationType.Click,\r\n            {\r\n                duration: Constants.Animations.legend,\r\n                continuous: true,\r\n                before: () => {\r\n                    return this.onClickEvent != undefined\r\n                           && (isHover(this.onClickEvent)\r\n                               || (value instanceof Sector\r\n                                   && value.current !== 0\r\n                                   && value.value !== value.current))\r\n                           && value.checkCondition()\r\n                },\r\n                body: transition => {\r\n                    value.toggle(transition)\r\n\r\n                    if (transition == 1)\r\n                        this.onClickEvent = new PointerEvent(Events.Click)\r\n                }\r\n            })\r\n\r\n        if (isHover(this.onMouseMoveEvent)) {\r\n            this.animations.add(value.id,\r\n                AnimationType.MouseOver,\r\n                {\r\n                    duration: Constants.Animations.button,\r\n                    body: transition => {\r\n                        translate(transition, AnimationType.MouseLeave)\r\n                    }\r\n                })\r\n\r\n            if (!value.disabled) {\r\n                this.#hoverCount++\r\n\r\n                this.#chart.highlight(value)\r\n            }\r\n\r\n            this.canvas.style.cursor = Styles.Cursor.Pointer\r\n        } else {\r\n            this.animations.add(value.id,\r\n                AnimationType.MouseLeave,\r\n                {\r\n                    timer: Constants.Dates.minDate,\r\n                    duration: Constants.Animations.button,\r\n                    backward: true,\r\n                    body: transition => {\r\n                        translate(transition, AnimationType.MouseOver)\r\n                    }\r\n                })\r\n        }\r\n\r\n        ctx.beginPath()\r\n\r\n        ctx.arc(x - 1, y + 1, 3, 0, 2 * Math.PI)\r\n        ctx.fillStyle = value.disabled ? Helper.grayScale(value.color) : value.color\r\n        ctx.fill()\r\n\r\n        ctx.fillStyle = Theme.text\r\n        if (value.disabled)\r\n            ctx.fillStyle += '7f'\r\n\r\n        ctx.fillText(value.label, x + circleRadius * 1.5 + 1, y + 6)\r\n\r\n        x += 20\r\n\r\n        if (value.disabled) {\r\n            ctx.moveTo(x - 10, y + 2)\r\n            ctx.lineTo(x + textWidth - 10, y + 2)\r\n            ctx.strokeStyle = Theme.text + '7f'\r\n            ctx.stroke()\r\n        }\r\n\r\n        x += textWidth + 22\r\n\r\n        return {\r\n            x: x,\r\n            y: y\r\n        }\r\n    }\r\n\r\n    destroy() {\r\n        this.isDestroy = true\r\n\r\n        this.canvas.remove()\r\n    }\r\n\r\n    refresh() {\r\n        this.state = RenderState.Init\r\n    }\r\n\r\n    resize() {\r\n        this.calculateSizes()\r\n        this.#button?.resize()\r\n        this.initAnimations()\r\n    }\r\n\r\n    calculateSizes() {\r\n        switch (this.settings.legendPlace) {\r\n            case LegendPlace.Bottom:\r\n            default:\r\n                this.canvas.width = this.settings.width\r\n                this.canvas.height = Legend.getLegendHeight(this.settings.data.values, this.canvas.width)\r\n\r\n                this.node.style.flexDirection = Styles.FlexDirection.Column\r\n\r\n                break\r\n\r\n            case LegendPlace.Top:\r\n                this.canvas.width = this.settings.width\r\n                this.canvas.height = Legend.getLegendHeight(this.settings.data.values, this.canvas.width)\r\n\r\n                this.node.style.flexDirection = Styles.FlexDirection.ColumnReverse\r\n\r\n                break\r\n\r\n            case LegendPlace.Left:\r\n                this.canvas.width = 500\r\n                this.canvas.height = this.settings.height\r\n\r\n                this.node.style.flexDirection = Styles.FlexDirection.Row\r\n\r\n                break\r\n\r\n            case LegendPlace.Right:\r\n                this.canvas.width = 500\r\n                this.canvas.height = this.settings.height\r\n\r\n                this.node.style.flexDirection = Styles.FlexDirection.RowReverse\r\n\r\n                break\r\n        }\r\n\r\n        this.#offset = {\r\n            x: Legend.getOffsetToCenter(this.settings.data.values, this.canvas.width),\r\n            y: (this.canvas.height - Legend.getLegendHeight(this.settings.data.values, this.canvas.width)) / 2\r\n        }\r\n    }\r\n\r\n    applySettings(settings: ChartSettings) {\r\n        this.settings = settings\r\n\r\n        this.prepareSettings()\r\n    }\r\n\r\n    prepareSettings() {\r\n        this.resize()\r\n\r\n        if (!this.settings.disableInteractions)\r\n            this.#button = new Button(this.canvas,\r\n                {\r\n                    x: -10,\r\n                    y: 12,\r\n                    text: TextResources.reset,\r\n                    action: () => {\r\n                        for (let value of this.settings.data.values)\r\n                            value.reset()\r\n                    }\r\n                })\r\n    }\r\n\r\n    static getOffsetToCenter(values: Value[], width: number): number {\r\n        let maxWidth = 20\r\n\r\n        for (const value of values.filter(v => !v.hideInLegend)) {\r\n            const labelWidth = Helper.stringWidth(value.label)\r\n\r\n            if (maxWidth + labelWidth + 47 >= width - 100)\r\n                break\r\n\r\n            maxWidth += labelWidth + 47\r\n        }\r\n\r\n        return width / 2 - maxWidth / 2\r\n    }\r\n\r\n    static getLegendHeight(values: Value[], width: number): number {\r\n        let count = 1,\r\n            acc = 20,\r\n            offset = Legend.getOffsetToCenter(values, width)\r\n\r\n        for (const value of values.filter(v => !v.hideInLegend)) {\r\n            const labelWidth = Helper.stringWidth(value.label)\r\n\r\n            if (acc + labelWidth + 48 >= width - 32 - offset) {\r\n                acc = 20\r\n                count++\r\n            }\r\n\r\n            acc += labelWidth + 48\r\n        }\r\n\r\n        return 24 + count * 20 + (count - 1) * 6\r\n    }\r\n}","export class Values {\r\n    static readonly titleOffset = 30\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","Number.prototype.isAnyEquals = function (...values) {\r\n    return values.includes(<number>this)\r\n}\r\n\r\nDate.prototype.addDays = function (days: number) {\r\n    let result = new Date(this)\r\n    result.setDate(result.getDate() + days)\r\n    return result\r\n}\r\n\r\nDate.prototype.addMilliseconds = function (milliseconds: number) {\r\n    let result = new Date(this)\r\n    result.setMilliseconds(result.getMilliseconds() + milliseconds)\r\n    return result\r\n}\r\n\r\nMap.prototype.trySet = function (key: any, value: any) {\r\n    if (!this.has(key))\r\n        this.set(key, value)\r\n}","import { Chart } from 'Chart'\r\nimport { ChartSettings } from 'types/ChartSettings'\r\n\r\nfunction OCharts() {\r\n}\r\n\r\nOCharts.chart = function(context: HTMLElement, settings: ChartSettings) {\r\n    return new Chart(context, settings)\r\n}\r\n\r\n// @ts-ignore\r\nwindow.OCharts = OCharts"],"names":["Animations","constructor","this","Map","add","id","type","value","key","has","set","contains","reload","get","timer","Date","clear","forEach","_value","AnimationType","Init","delete","initializeTransitions","i","t","x","Math","pow","y","transitionCurve","toFixed","getTransition","item","stamp","passed","getTime","transition","duration","before","body","backward","continuous","endsWith","color","amount","replace","min","max","parseInt","toString","slice","Array","join","round","reduce","a","v","padStart","floor","random","str","font","widths","from","String","acc","cur","charCodeAt","S4","substring","toLowerCase","background","foreground","backgroundAsRgb","hexToRgb","foregroundAsRgb","r","g","b","test","opacity","hex","result","exec","componentToHex","c","length","rgb","bg","Theme","canvasBackground","alpha","Color","text","Errors","error","Error","throwIsUndefined","object","undefined","throw","context","settings","node","applySettings","document","addEventListener","Events","VisibilityChanged","resetMouse","window","Blur","Click","event","target","canvas","closeDropdowns","render","ResizeObserver","destroy","observe","disconnect","highlight","reset","isNeedRestartRender","enableLegend","Legend","enableTooltip","disableInteractions","ChartType","Plot","PlotRenderer","Circular","CircularRenderer","Gauge","GaugeRenderer","TreeMap","TreeRenderer","prepareSettings","initDropdown","initAnimations","resize","refresh","initialize","isDarkThemeFunction","style","display","Styles","Display","Flex","flexDirection","FlexDirection","Column","alignItems","AlignItems","Center","justifyContent","JustifyContent","height","circular","legend","tree","tooltip","button","Sector","Value","obj","super","Object","assign","toggle","disabled","current","checkCondition","TextResources","exportPNG","decomposeToTable","exportCSV","menu","allDataIsHidden","other","thousandShort","millionShort","billionShort","show","noLabel","treeMapIsEmpty","getContext","willReadFrequently","ErrorType","NullContext","isPixelBusy","pixel","canvasBackgroundInt","data","templateId","getElementById","condition","lines","opacityValue","getBoundingClientRect","scrollX","scrollY","ctx","Canvas","textWidth","map","line","Helper","stringWidth","clientX","clientY","width","beginPath","roundRect","baseOpacity","strokeStyle","dropdownBorder","lineWidth","fillStyle","stroke","fill","offset","arc","PI","TextStyles","fillText","padding","updateVisibility","visibility","Visibility","Visible","regex","content","cloneNode","createElement","Tag","Div","innerHTML","position","Position","Absolute","pointerEvents","PointerEvents","None","setAttribute","Attribute","Name","matches","matchAll","html","match","property","replaceAll","appendChild","Hidden","left","top","tooltips","querySelectorAll","Constants","ThemeOptions","colors","backgrounds","lineAxes","lineActives","dropdownBorders","canvasBackgrounds","getRows","headers","values","series","seriesValues","push","xType","PlotAxisType","Formatter","date","name","label","unique","Set","uniqueHeaders","filter","sort","Cursor","Default","Pointer","ColumnReverse","Row","RowReverse","ImageRendering","Pixelated","options","isActive","icon","animations","moveEvent","clickEvent","translate","adjustColor","cursor","MouseOver","MouseLeave","Dates","minDate","regular","iconOffset","navigator","platform","borderRadius","items","dividers","maxWidth","dropdownOpacity","itemOpacityDec","itemBackground","dropdownItemHoverColor","borderColor","rect","setLineDash","isDivider","moveTo","lineTo","animationKey","isReturn","action","textAlign","textBaseline","close","w","h","trueX","trueY","callback","isDark","function","matchMedia","setTheme","Change","index","currentTheme","lineAxis","lineActive","Number","Renderer","chart","onMouseMoveEvent","MouseEvent","MouseMove","state","RenderState","Idle","renderDropdown","contextMenu","renderContextMenu","find","onContextMenuEvent","dropdown","enableOther","_other","Modal","Decomposition","toChart","innerWidth","innerHeight","open","innerRadius","console","warn","splice","sum","guid","Dropdown","Icon","ThreeLines","Export","asPng","title","asCsv","toTable","CircularData","anglesSum","flatMap","sector","angle","reverse","TooltipValue","format","valuePostfix","isDestroy","requestAnimationFrame","bind","piece","isNaN","isSingle","s","onClickEvent","includes","PointerEvent","direction","cos","sin","lineJoin","lineCap","indexOf","centerOfSector","minSize","rest","scale","applyAlpha","swap","point2","save","labelStartPoint","labelMidPoint","dir","endPoint","isBusy","imageDataX","imageDataY","imageData","Uint32Array","getImageData","buffer","quadraticCurveTo","circularLabel","restore","localAccumulator","localAngle","currentAngle","tangentIntersectionAngle","lengthToTangentIntersection","tangentIntersectionPoint","innerPoint2","changeColor","anyHighlight","highlightItems","AnotherItemOver","AnotherItemLeave","closePath","resetTransform","radius","isWithinRadius","point","getMousePosition","inner","outer","atan2","abs","findIndex","o","sumBefore","isAngle","innerTitle","titleOffset","Values","shortSide","longestLabel","large","Renderable","disableInitAnimation","renderTitle","remove","domRect","parentElement","minWidth","minHeight","calculateColors","dispatchEvent","CustomEvent","detail","force","baseColor","randomColor","adjustStep","adjustAmount","clone","canvasPosition","isClick","legendPlace","LegendPlace","Top","Bottom","getLegendHeight","Left","Right","tooltipLines","axisLineHoverColor","yValue","yHeight","columnWidth","seriesToRender","columnsIndex","columnsCount","PlotType","barsIndex","barsCount","Bar","stackingAccumulator","lineType","LineType","Dash","Dotted","Solid","xIndex","yIndex","getTooltipValue","step","Line","unit","pointDuration","now","addMilliseconds","next","prevValue","endPointX","endPointY","mouse","AttentionLine","bottom","right","yMax","minStep","seriesHeight","fillRect","StackingColumn","ceil","PlotSeries","it","isISOString","simple","Tooltip","PlotData","skip","clearRect","drawImage","isContainsBar","xTitle","yTitle","rotate","xYPos","xCounter","trySet","maxLabelWidth","maxCount","renderStep","axisLabelOffset","yCount","count","yCounter","yStep","labelY","labelYAsKey","postfix","shortLabels","countOfTens","number","isBar","createImageBitmap","then","res","putImageData","axisLineColor","isAnyEquals","xValues","p","yValues","isDate","tempDate","addDays","yMin","stackingColumns","yMaxWidth","isRight","imageRendering","append","onmousemove","onclick","oncontextmenu","preventDefault","onmouseleave","maxHeight","tooltipCell","contextMenuData","totalSquare","minX","minY","isVertical","remainWidth","remainHeight","cells","isLast","j","h1","w1","cell","cellInit","cellIndex","getPrev","E","initAnimationDuration","center","gap","isColorVisible","TreeData","table","Table","classList","totals","rows","valuesMap","tableValue","allColumns","header","indexSpaces","tableHeader","columns","vKey","vValue","totalValue","trim","totalColumns","container","div","script","Script","flexGrow","cloneSettings","JSON","parse","stringify","getPoint","point1","point3","outerRadius","longSide","leftEmpty","rightEmpty","destinationCanvas","destCtx","saveAs","toDataURL","csv","row","cols","encodeURIComponent","dataURL","href","isText","showSaveFilePicker","suggestedName","types","accept","excludeAcceptAllOption","toBlob","dataURI","byteString","atob","split","mimeString","ArrayBuffer","imageArray","Uint8Array","Blob","fileHandle","createWritable","writableStream","write","download","A","click","Text","toLocaleString","minimumFractionDigits","maximumFractionDigits","toLocaleDateString","size","modal","Dialog","oncancel","ElementNotExist","showModal","closeButton","nextPoint","hideInLegend","calculateSizes","getOffsetToCenter","Button","labelWidth","rectX","rectY","circleRadius","rectW","isHover","px","py","grayScale","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","prototype","days","setDate","getDate","milliseconds","setMilliseconds","getMilliseconds","OCharts","Chart"],"sourceRoot":""}