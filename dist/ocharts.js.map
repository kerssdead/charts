{"version":3,"file":"ocharts.js","mappings":"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","sources":["webpack://charts/./src/Animations.ts","webpack://charts/./src/Helper.ts","webpack://charts/./src/types/TooltipValue.ts","webpack://charts/./src/helpers/Errors.ts","webpack://charts/./src/Chart.ts","webpack://charts/./src/types/Color.ts","webpack://charts/./src/static/constants/Animations.ts","webpack://charts/./src/types/Sector.ts","webpack://charts/./src/static/TextResources.ts","webpack://charts/./src/helpers/Canvas.ts","webpack://charts/./src/Tooltip.ts","webpack://charts/./src/static/ThemeOptions.ts","webpack://charts/./src/types/data/PlotData.ts","webpack://charts/./src/static/constants/Styles.ts","webpack://charts/./src/Dropdown.ts","webpack://charts/./src/Theme.ts","webpack://charts/./src/render/CircularRenderer.ts","webpack://charts/./src/types/base/Renderer.ts","webpack://charts/./src/types/data/TreeData.ts","webpack://charts/./src/types/data/CircularData.ts","webpack://charts/./src/types/base/Value.ts","webpack://charts/./src/render/PlotRenderer.ts","webpack://charts/./src/static/constants/Dates.ts","webpack://charts/./src/helpers/TextStyles.ts","webpack://charts/./src/types/base/Renderable.ts","webpack://charts/./src/render/TreeRenderer.ts","webpack://charts/./src/Decomposition.ts","webpack://charts/./src/static/constants/Index.ts","webpack://charts/./src/render/GaugeRenderer.ts","webpack://charts/./src/Export.ts","webpack://charts/./src/helpers/Formatter.ts","webpack://charts/./src/Button.ts","webpack://charts/./src/static/Enums.ts","webpack://charts/./src/Modal.ts","webpack://charts/./src/types/PlotSeries.ts","webpack://charts/./src/Legend.ts","webpack://charts/./src/static/constants/Values.ts","webpack://charts/webpack/bootstrap","webpack://charts/./src/Prototypes.ts","webpack://charts/./src/OCharts.ts"],"sourcesContent":["import { AnimationItem } from 'types/AnimationItem'\nimport { AnimationType } from 'static/Enums'\n\nexport class Animations {\n    #queue: Map<string, AnimationItem>\n\n    static transitionCurve: Map<number, number> = new Map()\n\n    constructor() {\n        this.#queue = new Map()\n    }\n\n    add(id: string, type: AnimationType, value: AnimationItem) {\n        const key = this.#getKey(id, type)\n        if (!this.#queue.has(key))\n            this.#queue.set(key, value)\n\n        this.#process(key)\n    }\n\n    contains(id: string, type: AnimationType): boolean {\n        return this.#queue.has(this.#getKey(id, type))\n    }\n\n    reload(id: string, type: AnimationType) {\n        if (this.contains(id, type)) {\n            let item = <AnimationItem>this.#queue.get(this.#getKey(id, type))\n\n            item.timer = new Date()\n        }\n    }\n\n    clear() {\n        this.#queue.forEach((_value, key) => !this.#is(key, AnimationType.Init) && this.#queue.delete(key))\n    }\n\n    #process(key: string) {\n        const item = <AnimationItem>this.#queue.get(key),\n            stamp = new Date(),\n            passed = stamp.getTime() - (item.timer ?? stamp).getTime(),\n            transition = Animations.getTransition(passed > item.duration ? 1 : passed / item.duration),\n            before = item.before ? item.before() : true\n\n        if (!item.timer && before)\n            item.timer = stamp\n\n        if (before)\n            item.body(item.backward ? 1 - transition : transition)\n\n        if (transition == 1 && (!before || item.continuous))\n            this.#queue.delete(key)\n    }\n\n    #getKey(id: string, type: number) {\n        return id + '_' + type\n    }\n\n    #is(key: string, type: number) {\n        return key.endsWith('_' + type)\n    }\n\n    static initializeTransitions() {\n        const valuesCount = 30000,\n            offset = .23,\n            p0 = { x: 0, y: 0 },\n            p1 = { x: 1 - offset, y: offset },\n            p2 = { x: offset, y: 1 - offset },\n            p3 = { x: 1, y: 1 }\n\n        for (let i = 0; i < valuesCount; i++) {\n            const t = (i + 1) / valuesCount\n\n            let x = Math.pow(1 - t, 3) * p0.x\n                    + 3 * Math.pow(1 - t, 2) * p1.x * t\n                    + 3 * (1 - t) * Math.pow(t, 2) * p2.x\n                    + Math.pow(t, 3) * p3.x,\n                y = Math.pow(1 - t, 3) * p0.y\n                    + 3 * Math.pow(1 - t, 2) * p1.y * t\n                    + 3 * (1 - t) * Math.pow(t, 2) * p2.y\n                    + Math.pow(t, 3) * p3.y\n\n            Animations.transitionCurve.set(+x.toFixed(4), y)\n        }\n\n        Animations.transitionCurve.set(0, 0)\n    }\n\n    static getTransition(value: number): number {\n        return Animations.transitionCurve.get(+value.toFixed(4)) ?? 0\n    }\n}","import { Color } from 'types/Color'\nimport { Theme } from 'Theme'\n\nexport function adjustColor(color: string, amount: number) {\n    return '#' + color.replace(/^#/, '').replace(/../g, color => ('0' + Math.min(255, Math.max(0, parseInt(color, 16) + amount)).toString(16)).slice(-2))\n}\n\nexport function grayScale(color: string) {\n    return '#' + Array(4).join(Math.round([.3, .59, .11].reduce((a, v, i) => a + v * parseInt(color[2 * i + 1] + color[2 * i + 2], 16), 0) / 3).toString(16).padStart(2, '0'))\n}\n\nexport function randomColor() {\n    let letters = '0123456789ABCDEF',\n        color = '#'\n    for (let i = 0; i < 6; i++)\n        color += letters[Math.floor(Math.random() * 16)]\n\n    return color\n}\n\nexport function stringWidth(str: any | undefined, font?: number) {\n    if (!str)\n        return 0\n\n    const widths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.559375, 0.2765625, 0.3546875, 0.5546875, 0.5546875, 0.8890625, 0.665625, 0.190625, 0.3328125, 0.3328125, 0.3890625, 0.5828125, 0.2765625, 0.3328125, 0.2765625, 0.3015625, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.2765625, 0.2765625, 0.584375, 0.5828125, 0.584375, 0.5546875, 1.0140625, 0.665625, 0.665625, 0.721875, 0.721875, 0.665625, 0.609375, 0.7765625, 0.721875, 0.2765625, 0.5, 0.665625, 0.5546875, 0.8328125, 0.721875, 0.7765625, 0.665625, 0.7765625, 0.721875, 0.665625, 0.609375, 0.721875, 0.665625, 0.94375, 0.665625, 0.665625, 0.609375, 0.2765625, 0.3546875, 0.2765625, 0.4765625, 0.5546875, 0.3328125, 0.5546875, 0.5546875, 0.5, 0.5546875, 0.5546875, 0.2765625, 0.5546875, 0.5546875, 0.221875, 0.240625, 0.5, 0.221875, 0.8328125, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.3328125, 0.5, 0.2765625, 0.5546875, 0.5, 0.721875, 0.5, 0.5, 0.5, 0.3546875, 0.259375, 0.353125, 0.5890625],\n        avg = 0.5279276315789471\n\n    return Array.from(String(str)).reduce((acc, cur) => acc + (widths[cur.charCodeAt(0)] ?? avg), 0) * (font || 14)\n}\n\nexport function guid() {\n    const S4 = () => (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1)\n    return (S4() + S4() + '-' + S4() + '-4' + S4().slice(0, 3) + '-' + S4() + '-' + S4() + S4() + S4()).toLowerCase()\n}\n\nexport function isColorVisible(background: string, foreground: string) {\n    const backgroundAsRgb = hexToRgb(background),\n        foregroundAsRgb = hexToRgb(foreground),\n        value = .77\n\n    return (backgroundAsRgb.r + backgroundAsRgb.g + backgroundAsRgb.b) / (foregroundAsRgb.r + foregroundAsRgb.g + foregroundAsRgb.b) < value\n}\n\nexport function hexToRgb(hex: string): Color {\n    if (hex.length > 4) {\n        const value = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n        if (value)\n            return {\n                r: parseInt(value[1], 16),\n                g: parseInt(value[2], 16),\n                b: parseInt(value[3], 16)\n            }\n    } else {\n        const value = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i.exec(hex)\n        if (value)\n            return {\n                r: parseInt(value[1] + value[1], 16),\n                g: parseInt(value[2] + value[2], 16),\n                b: parseInt(value[3] + value[3], 16)\n            }\n    }\n\n    return new Color()\n}\n\nexport function isISOString(str: string) {\n    return /\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+/.test(str)\n}\n\nexport function applyAlpha(color: string, opacity: number) {\n    function hexToRgb(hex: string) {\n        let result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n        return result\n               ? {\n                   r: parseInt(result[1], 16),\n                   g: parseInt(result[2], 16),\n                   b: parseInt(result[3], 16)\n               } as Color\n               : {\n                   r: 0,\n                   g: 0,\n                   b: 0\n               } as Color\n    }\n\n    function componentToHex(c: number) {\n        let hex = c.toString(16)\n        return hex.length == 1 ? '0' + hex : hex\n    }\n\n    function rgbToHex(r: number, g: number, b: number) {\n        return '#' + componentToHex(r) + componentToHex(g) + componentToHex(b)\n    }\n\n    const rgb = hexToRgb(color),\n        bg = hexToRgb(Theme.canvasBackground)\n\n    opacity /= 255\n\n    const alpha = 1 - opacity\n\n    return rgbToHex(\n        Math.round((opacity * (rgb.r / 255) + (alpha * (bg.r / 255))) * 255),\n        Math.round((opacity * (rgb.g / 255) + (alpha * (bg.g / 255))) * 255),\n        Math.round((opacity * (rgb.b / 255) + (alpha * (bg.b / 255))) * 255)\n    )\n}","export class TooltipValue {\n    text: string | undefined\n\n    color: string | undefined\n\n    constructor(text?: string, color?: string) {\n        this.text = text\n        this.color = color\n    }\n}","import { ErrorType } from 'static/Enums'\n\nexport abstract class Errors {\n    static throw(error: ErrorType): never {\n        throw new Error(error)\n    }\n\n    static throwIsUndefined(object: any, error: ErrorType) {\n        if (object == undefined)\n            Errors.throw(error)\n    }\n}","import { ChartSettings } from 'types/ChartSettings'\nimport { Renderer } from 'types/base/Renderer'\nimport { Data } from 'types/interfaces/Data'\nimport { Legend } from 'Legend'\nimport { Value } from 'types/base/Value'\nimport { PlotRenderer } from 'render/PlotRenderer'\nimport { CircularRenderer } from 'render/CircularRenderer'\nimport { GaugeRenderer } from 'render/GaugeRenderer'\nimport { TreeRenderer } from 'render/TreeRenderer'\nimport { Animations } from 'Animations'\nimport { Theme } from 'Theme'\nimport { Styles } from 'static/constants/Styles'\nimport { ChartType, Events } from 'static/Enums'\n\nexport class Chart {\n    node: HTMLElement\n\n    settings: ChartSettings\n\n    #renderer: Renderer<Data>\n\n    #legend: Legend | undefined\n\n    #observer: ResizeObserver\n\n    #currentType: ChartType\n\n    constructor(context: HTMLElement, settings: ChartSettings) {\n        this.node = context\n\n        this.applySettings(settings)\n\n        this.#applyStyles()\n\n        document.addEventListener(Events.VisibilityChanged, () => this.#renderer.resetMouse())\n        window.addEventListener(Events.Blur, () => this.#renderer.resetMouse())\n\n        window.addEventListener(Events.Click, event => {\n            if (event.target != this.#renderer.canvas)\n                this.#renderer.closeDropdowns()\n        })\n    }\n\n    render() {\n        this.#renderer.render()\n        this.#legend?.render()\n\n        this.#observer = new ResizeObserver(() => {\n            if (this.#renderer.canvas)\n                this.#resize()\n            else\n                this.destroy()\n        })\n        this.#observer.observe(this.node)\n\n        this.#refresh()\n    }\n\n    destroy() {\n        this.#renderer.destroy()\n        this.#legend?.destroy()\n\n        this.#observer.disconnect()\n    }\n\n    highlight(value?: Value) {\n        this.#renderer.highlight(value)\n    }\n\n    reset() {\n        Theme.reset()\n\n        this.#initialize(this.settings)\n    }\n\n    applySettings(settings: ChartSettings) {\n        this.settings = settings\n\n        this.reset()\n\n        const isNeedRestartRender = this.settings.type != this.#currentType\n\n        this.#prepareSettings()\n\n        if (this.settings.enableLegend && this.#legend != undefined)\n            this.#legend.applySettings(settings)\n\n        if (this.settings.enableLegend && this.#legend == undefined) {\n            this.#legend = new Legend(this)\n\n            this.#legend.render()\n        }\n\n        if (!this.settings.enableLegend && this.#legend != undefined) {\n            this.#legend.destroy()\n\n            this.#legend = undefined\n        }\n\n        if (isNeedRestartRender)\n            this.#renderer.render()\n    }\n\n    #prepareSettings() {\n        this.settings.enableTooltip = !this.settings.disableInteractions && this.settings.enableTooltip\n\n        if (this.#renderer == undefined || this.settings.type != this.#currentType) {\n            this.#renderer?.destroy()\n\n            switch (this.settings.type) {\n                case ChartType.Plot:\n                    this.#renderer = new PlotRenderer(this)\n                    this.#currentType = ChartType.Plot\n                    break\n\n                case ChartType.Circular:\n                    this.#renderer = new CircularRenderer(this)\n                    this.#currentType = ChartType.Circular\n                    break\n\n                case ChartType.Gauge:\n                    this.#renderer = new GaugeRenderer(this)\n                    this.#currentType = ChartType.Gauge\n                    break\n\n                case ChartType.TreeMap:\n                    this.#renderer = new TreeRenderer(this)\n                    this.#currentType = ChartType.TreeMap\n                    break\n            }\n        } else {\n            this.#renderer.applySettings(this.settings)\n        }\n\n        this.#renderer.prepareSettings()\n\n        if (!this.settings.disableInteractions) {\n            this.#renderer.initDropdown()\n            this.#renderer.initAnimations()\n        }\n\n        this.#renderer.resize()\n    }\n\n    #refresh() {\n        this.#renderer.refresh()\n        this.#legend?.refresh()\n    }\n\n    #resize() {\n        this.#renderer.resize()\n        this.#legend?.resize()\n    }\n\n    #initialize(settings: ChartSettings) {\n        Theme.initialize(\n            () => this.#resize(),\n            settings.isDarkThemeFunction\n        )\n        Animations.initializeTransitions()\n    }\n\n    #applyStyles() {\n        this.node.style.display = Styles.Display.Flex\n        this.node.style.flexDirection = Styles.FlexDirection.Column\n        this.node.style.alignItems = Styles.AlignItems.Center\n        this.node.style.justifyContent = Styles.JustifyContent.Center\n        this.node.style.height = '100%'\n    }\n}","export class Color {\n    r: number\n\n    g: number\n\n    b: number\n}","export class Animations {\n    static circular = 335\n\n    static legend = 500\n\n    static tree = 250\n\n    static tooltip = 120\n\n    static button = 200\n}","import { Value } from 'types/base/Value'\nimport { Point } from 'types/Point'\n\nexport class Sector extends Value {\n    current: number\n\n    transition: number\n\n    translate: Point\n\n    innerRadius: number\n\n    constructor(obj: object) {\n        super()\n\n        Object.assign(this, obj)\n    }\n\n    toggle(transition: number) {\n        super.toggle(transition)\n\n        if (this.disabled)\n            this.current = this.value * (1 - transition)\n        else\n            this.current = this.value * transition\n    }\n\n    checkCondition(): boolean {\n        super.checkCondition()\n\n        return (this.current == 0 && !this.disabled) || this.value != 0\n    }\n\n    reset() {\n        super.reset()\n\n        this.current = this.value\n    }\n}","export class TextResources {\n    static exportPNG = 'Save as image...'\n\n    static decomposeToTable = 'Show as table...'\n\n    static reset = 'Reset'\n\n    static exportCSV = 'Save as table...'\n\n    static menu = 'Menu'\n\n    static allDataIsHidden = 'All data is hidden'\n\n    static other = 'Other'\n\n    static thousandShort = 'K'\n\n    static millionShort = 'M'\n\n    static billionShort = 'B'\n\n    static show = 'Show...'\n\n    static noLabel = 'No Label'\n\n    static treeMapIsEmpty = 'Tree Map is empty'\n}","import { Errors } from 'helpers/Errors'\nimport { ErrorType } from 'static/Enums'\nimport { Theme } from 'Theme'\n\nexport abstract class Canvas {\n    static getContext(canvas: HTMLCanvasElement): CanvasRenderingContext2D {\n        return canvas.getContext('2d', { willReadFrequently: true })\n               ?? Errors.throw(ErrorType.NullContext)\n    }\n\n    static isPixelBusy(pixel: number) {\n        return pixel != undefined && pixel - Theme.canvasBackgroundInt != 0\n    }\n}","import { Value } from 'types/base/Value'\nimport { Theme } from 'Theme'\nimport { TextStyles } from 'helpers/TextStyles'\nimport * as Helper from 'Helper'\nimport { ChartSettings } from 'types/ChartSettings'\nimport { TooltipValue } from 'types/TooltipValue'\nimport { Data } from 'types/interfaces/Data'\nimport { Canvas } from 'helpers/Canvas'\nimport * as Constants from 'static/constants/Index'\nimport { Styles } from 'static/constants/Styles'\nimport { HTMLTooltipElement } from 'types/extends/HTMLTooltipElement'\nimport { Attribute, Tag } from 'static/Enums'\n\nexport class Tooltip {\n    canvas: HTMLCanvasElement\n\n    data: Data\n\n    readonly #enabled: boolean\n\n    readonly #isCustom: boolean\n\n    #canvasPosition: DOMRect\n\n    #template: HTMLTemplateElement\n\n    #inProgress: boolean\n\n    #toHide: boolean\n\n    #timer: Date | undefined\n\n    #lines: TooltipValue[]\n\n    constructor(canvas: HTMLCanvasElement, settings: ChartSettings) {\n        this.canvas = canvas\n        this.data = settings.data\n        this.#enabled = settings.enableTooltip\n        this.#isCustom = !!settings.templateId\n\n        if (this.#isCustom)\n            this.#template = <HTMLTemplateElement>document.getElementById(settings.templateId)\n\n        this.refresh()\n    }\n\n    render(condition: boolean, event: MouseEvent, lines: TooltipValue[], value?: Value) {\n        this.#hideAll()\n\n        if (!this.#enabled || !event)\n            return\n\n        if (condition || this.#inProgress || this.#toHide) {\n            if (condition)\n                this.#lines = lines\n\n            if (!this.#timer)\n                this.#timer = new Date()\n\n            if (!this.#toHide)\n                this.#inProgress = true\n            else if (this.#inProgress)\n                this.#timer = new Date()\n\n            if (this.#isCustom)\n                this.#renderCustom(event, value)\n            else\n                this.#renderRegular(event)\n\n            const opacityValue = this.#getOpacityValue()\n\n            if (this.#toHide && opacityValue >= 1) {\n                this.#inProgress = false\n                this.#toHide = false\n            }\n\n            if (this.#toHide && opacityValue <= 0) {\n                this.#inProgress = false\n                this.#toHide = false\n                this.#timer = undefined\n            }\n\n            if (!condition && this.#timer != undefined)\n                this.#toHide = true\n        } else {\n            this.#timer = undefined\n        }\n    }\n\n    #renderRegular(event: MouseEvent) {\n        const ctx = Canvas.getContext(this.canvas)\n\n        const textWidth = Math.max(...this.#lines.map(line => Helper.stringWidth(line.text ?? '') + (line.color ? 8 : 0)))\n\n        const padding = 6,\n            borderRadius = 6\n\n        let x = event.clientX - this.#canvasPosition.x + 10,\n            y = event.clientY - this.#canvasPosition.y + scrollY + 10\n\n        if (x + textWidth + 25 > this.#canvasPosition.width)\n            x = this.#canvasPosition.width - (textWidth + 25)\n\n        if (y + 15 + this.#lines.length * 18 > this.#canvasPosition.height)\n            y = this.#canvasPosition.height - 15 - this.#lines.length * 18\n\n        ctx.beginPath()\n        ctx.roundRect(x, y, textWidth + 24, 16 + 16 * this.#lines.length, borderRadius)\n        let opacity = Math.round(this.#getOpacityValue() * 255).toString(16),\n            baseOpacity = Math.round(this.#getOpacityValue() * 207).toString(16)\n        if (opacity.length == 1)\n            opacity = '0' + opacity\n        if (baseOpacity.length == 1)\n            baseOpacity = '0' + baseOpacity\n\n        ctx.strokeStyle = Theme.dropdownBorder + baseOpacity\n        ctx.lineWidth = 1\n        ctx.fillStyle = Theme.background + baseOpacity\n        ctx.stroke()\n        ctx.fill()\n\n        for (let line of this.#lines) {\n            let offset = 0\n\n            if (line.color) {\n                offset = 12\n\n                ctx.beginPath()\n                ctx.fillStyle = line.color + opacity\n                ctx.arc(x + 16, y + 17, 5, 0, Math.PI * 2)\n                ctx.fill()\n            }\n\n            TextStyles.tooltip(ctx)\n            ctx.fillStyle = Theme.text + opacity\n            ctx.fillText(line.text ?? '', x + offset + padding * 2, y + 21)\n\n            y += 16\n        }\n    }\n\n    #renderCustom(event: MouseEvent, value?: Value) {\n        if (value == undefined)\n            return\n\n        const id = this.#template.id + value.id\n\n        let tooltip = <HTMLTooltipElement>document.getElementById(id)\n\n        const updateVisibility = () => {\n            this.#hideAll()\n\n            tooltip.style.visibility = Styles.Visibility.Visible\n        }\n\n        if (!tooltip) {\n            const regex = /\\${[^}]*}/gm\n\n            let content = <HTMLElement>this.#template.cloneNode(true)\n\n            tooltip = document.createElement(Tag.Div) as HTMLTooltipElement\n\n            tooltip.innerHTML = content.innerHTML\n\n            tooltip.id = id\n            tooltip.style.position = Styles.Position.Absolute\n            tooltip.style.pointerEvents = Styles.PointerEvents.None\n            tooltip.style.visibility = Styles.Visibility.Visible\n\n            tooltip.setAttribute(Attribute.Name, this.#template.id)\n\n            const matches = [...tooltip.innerHTML.matchAll(regex)]\n\n            let html = tooltip.innerHTML\n\n            for (const match of matches) {\n                const property = match[0].replace('${', '')\n                                         .replace('}', '')\n                                         .replaceAll(' ', '')\n\n                html = html.replaceAll(match[0], value.data[property])\n            }\n\n            tooltip.innerHTML = html\n\n            document.body.appendChild(tooltip)\n\n            tooltip.position = tooltip.getBoundingClientRect()\n\n            updateVisibility()\n        }\n\n        if (tooltip.style.visibility == Styles.Visibility.Hidden)\n            updateVisibility()\n\n        if (tooltip.position.height == 0)\n            tooltip.position = tooltip.getBoundingClientRect()\n\n        const offset = 10\n\n        let opacity = '1'\n\n        let x = event.clientX,\n            y = event.clientY + scrollY\n\n        if (x + tooltip.position.width - this.#canvasPosition.x > this.#canvasPosition.width - offset) {\n            x = this.#canvasPosition.width - tooltip.position.width + this.#canvasPosition.x - offset\n            opacity = '.67'\n        }\n\n        if (y + tooltip.position.height - this.#canvasPosition.y > this.#canvasPosition.height - offset) {\n            y = this.#canvasPosition.height - tooltip.position.height + this.#canvasPosition.y - offset\n            opacity = '.67'\n        }\n\n        if (x == 0 && y == 0)\n            opacity = '0'\n\n        tooltip.style.left = x + offset + 'px'\n        tooltip.style.top = y + offset + 'px'\n        tooltip.style.opacity = opacity\n    }\n\n    refresh() {\n        this.#canvasPosition = this.canvas.getBoundingClientRect()\n        this.#canvasPosition.x += scrollX\n        this.#canvasPosition.y += scrollY\n    }\n\n    #hideAll() {\n        if (!this.#isCustom)\n            return\n\n        const tooltips = <NodeListOf<HTMLElement>>document.querySelectorAll(`[name=\"${ this.#template.id }\"]`)\n\n        for (let node of tooltips)\n            node.style.visibility = Styles.Visibility.Hidden\n    }\n\n    #getOpacityValue(): number {\n        if (!this.#timer)\n            return 0\n\n        let opacityValue = this.#toHide\n                           ? 1 - (new Date().getTime() - this.#timer.getTime()) / Constants.Animations.tooltip\n                           : (new Date().getTime() - this.#timer.getTime()) / Constants.Animations.tooltip\n        if (opacityValue > 1)\n            opacityValue = 1\n        if (opacityValue < 0)\n            opacityValue = 0\n\n        return opacityValue\n    }\n}","export class ThemeOptions {\n    static readonly colors = ['#000000', '#ffffff']\n\n    static readonly backgrounds = ['#f7f7f7', '#222222']\n\n    static readonly lines = ['#000000', '#eeeeee']\n\n    static readonly lineAxes = ['#e0e0e0', '#212121']\n\n    static readonly lineActives = ['#898989', '#898989']\n\n    static readonly dropdownBorders = ['#bcbcbc', '#7e7e7e']\n\n    static readonly canvasBackgrounds = ['#ffffff', '#222222']\n}","import { TableValue } from 'types/TableValue'\nimport { PlotSeries } from 'types/PlotSeries'\nimport { TableHeaderValue } from 'types/TableHeaderValue'\nimport { TableData } from 'types/TableData'\nimport { Data } from 'types/interfaces/Data'\nimport { Formatter } from 'helpers/Formatter'\nimport { PlotAxisType } from 'static/Enums'\n\nexport class PlotData implements Data {\n    shortLabels: boolean\n\n    simple: boolean\n\n    yMax: number\n\n    xTitle: string\n\n    yTitle: string\n\n    xType: PlotAxisType\n\n    values: PlotSeries[]\n\n    static getRows(data: PlotData): TableData {\n        let headers: TableHeaderValue[] = []\n\n        let values: TableValue[] = []\n\n        for (const series of data.values) {\n            let seriesValues = new Map<string, any>()\n\n            for (const value of series.values) {\n                seriesValues.set(value.x.toString(), value.y)\n                headers.push({\n                    value: value.x.toString(),\n                    display: data.xType == PlotAxisType.Date\n                             ? Formatter.date(new Date(value.x))\n                             : value.x.toString()\n                })\n            }\n\n            values.push({\n                name: series.label,\n                values: seriesValues\n            })\n        }\n\n        const unique = new Set(),\n            uniqueHeaders = headers.filter(v => !unique.has(v.display) && unique.add(v.display))\n\n        if (data.xType == PlotAxisType.Date)\n            uniqueHeaders.sort((a, b) => new Date(a.value).getTime() - new Date(b.value).getTime())\n\n        return {\n            headers: uniqueHeaders,\n            values: values\n        }\n    }\n}","export namespace Styles {\n    export class Cursor {\n        static Default = 'default'\n\n        static Pointer = 'pointer'\n    }\n\n    export class Display {\n        static Flex = 'flex'\n    }\n\n    export class FlexDirection {\n        static Column = 'column'\n\n        static ColumnReverse = 'column-reverse'\n\n        static Row = 'row'\n\n        static RowReverse = 'row-reverse'\n    }\n\n    export class AlignItems {\n        static Center = 'center'\n    }\n\n    export class Visibility {\n        static Visible = 'visible'\n\n        static Hidden = 'hidden'\n    }\n\n    export class Position {\n        static Absolute = 'absolute'\n    }\n\n    export class PointerEvents {\n        static None = 'none'\n    }\n\n    export class JustifyContent {\n        static Center = 'center'\n    }\n\n    export class ImageRendering {\n        static Pixelated = 'pixelated'\n    }\n}","import { Theme } from 'Theme'\nimport { DropdownOptions } from 'types/DropdownOptions'\nimport { Animations } from 'Animations'\nimport * as Helper from 'Helper'\nimport { TextStyles } from 'helpers/TextStyles'\nimport { Canvas } from 'helpers/Canvas'\nimport { AnimationType } from 'static/Enums'\nimport * as Constants from 'static/constants/Index'\nimport { Styles } from 'static/constants/Styles'\n\nexport class Dropdown {\n    isActive: boolean = false\n\n    #isInit: boolean\n\n    #options: DropdownOptions\n\n    #canvasPosition: DOMRect\n\n    animations: Animations\n\n    #position: DOMRect\n\n    readonly #isOnlyMenu: boolean\n\n    readonly #canvas: HTMLCanvasElement\n\n    constructor(canvas: HTMLCanvasElement, options: DropdownOptions) {\n        this.#canvas = canvas\n        this.#options = options\n\n        if (this.#options.icon)\n            this.#options.text = this.#options.icon\n\n        this.#isOnlyMenu = this.#options.text == undefined\n\n        this.animations = new Animations()\n    }\n\n    render(moveEvent: MouseEvent, clickEvent: MouseEvent | undefined) {\n        if (!this.#isInit)\n            this.#initAnimations()\n\n        if (this.#isOnlyMenu)\n            this.isActive = true\n\n        const ctx = Canvas.getContext(this.#canvas)\n\n        let x = this.#position.x,\n            y = this.#position.y,\n            width = this.#position.width,\n            height = this.#position.height\n\n        ctx.beginPath()\n\n        if (!this.#isOnlyMenu) {\n            const translate = (transition: number, event: AnimationType) => {\n                this.animations.reload('animation-dropdown', event)\n\n                ctx.fillStyle = Helper.adjustColor(Theme.canvasBackground, -Math.round(25 * transition))\n            }\n\n            if (this.#isOnButton(moveEvent, x, y, width, height)) {\n                this.#canvas.style.cursor = Styles.Cursor.Pointer\n\n                if (clickEvent && moveEvent.x == clickEvent.x && moveEvent.y == clickEvent.y) {\n                    this.isActive = !this.isActive\n                    clickEvent = undefined\n                }\n\n                if (!this.isActive)\n                    this.animations.add('animation-dropdown',\n                        AnimationType.MouseOver,\n                        {\n                            duration: 300,\n                            body: transition => {\n                                translate(transition, AnimationType.MouseLeave)\n                            }\n                        })\n                else\n                    ctx.fillStyle = Helper.adjustColor(Theme.canvasBackground, -25)\n            } else {\n                this.#canvas.style.cursor = Styles.Cursor.Default\n\n                if (!this.isActive)\n                    this.animations.add('animation-dropdown',\n                        AnimationType.MouseLeave,\n                        {\n                            timer: Constants.Dates.minDate,\n                            duration: 300,\n                            backward: true,\n                            body: transition => {\n                                translate(transition, AnimationType.MouseOver)\n                            }\n                        })\n                else\n                    ctx.fillStyle = Helper.adjustColor(Theme.canvasBackground, -25)\n            }\n\n            ctx.roundRect(x, y, width, height, 4)\n            ctx.fill()\n\n            TextStyles.regular(ctx)\n\n            if (this.#options.icon)\n                ctx.font = '20px sans-serif'\n\n            const iconOffset = this.#options.icon\n                               ? navigator.platform != 'Win32'\n                                 ? 1\n                                 : -1\n                               : 0\n\n            ctx.fillText(\n                this.#options.text ?? '',\n                x + width / 2,\n                y + height / 2 - iconOffset\n            )\n        }\n\n        if (this.isActive) {\n            const padding = 6,\n                borderRadius = 6\n\n            y += height\n\n            const items = this.#options.items.filter(value => value.text),\n                dividers = this.#options.items.filter(value => !value.text)\n\n            let maxWidth = Math.max(...items.map(value => Helper.stringWidth(value.text)))\n                           + padding * 4\n\n            if (x + maxWidth > this.#canvas.width - 4)\n                x -= x + maxWidth - this.#canvas.width + 4\n\n            const dropdownOpacity = 'bb',\n                itemOpacityDec = 127,\n                itemBackground = Theme.dropdownItemHoverColor,\n                borderColor = Theme.dropdownBorder\n\n            ctx.beginPath()\n\n            const rect = {\n                x: x,\n                y: y,\n                width: maxWidth,\n                height: items.length * 26\n                        + dividers.length * 4\n                        + (items.length == 1 ? padding : 0)\n                        + (items.length == 2 && dividers.length == 1 ? padding : 0)\n            }\n\n            ctx.roundRect(rect.x, rect.y, rect.width, rect.height, borderRadius)\n            ctx.fillStyle = Theme.background + dropdownOpacity\n            ctx.setLineDash([])\n            ctx.lineWidth = 1\n            ctx.strokeStyle = borderColor + dropdownOpacity\n            ctx.fill()\n            ctx.stroke()\n\n            ctx.beginPath()\n\n            y += 6\n\n            for (const item of this.#options.items) {\n                ctx.beginPath()\n\n                if (item.isDivider == true) {\n                    y += 2\n\n                    ctx.moveTo(x + padding, y)\n                    ctx.lineTo(x + maxWidth - padding, y)\n\n                    ctx.lineWidth = .5\n                    ctx.stroke()\n\n                    y += 4\n\n                    continue\n                }\n\n                ctx.fillStyle = 'transparent'\n\n                const animationKey = 'animation-dropdown' + item.text\n\n                const translate = (transition: number, event: AnimationType, isReturn?: boolean) => {\n                    this.animations.reload(animationKey, event)\n\n                    if (isReturn && transition == 1)\n                        return\n\n                    let opacity = Math.round(itemOpacityDec * transition).toString(16)\n                    if (opacity.length == 1)\n                        opacity = '0' + opacity\n\n                    ctx.fillStyle = itemBackground + opacity\n                }\n\n                if (this.#isOnButton(moveEvent, x, y, maxWidth, 20)) {\n                    this.animations.add(animationKey,\n                        AnimationType.MouseOver,\n                        {\n                            duration: 300,\n                            body: transition => {\n                                translate(transition, AnimationType.MouseLeave)\n                            }\n                        })\n\n                    this.#canvas.style.cursor = Styles.Cursor.Pointer\n\n                    if (clickEvent) {\n                        item.action()\n\n                        clickEvent = undefined\n                        this.isActive = false\n                    }\n                } else {\n                    this.animations.add(animationKey,\n                        AnimationType.MouseLeave,\n                        {\n                            timer: Constants.Dates.minDate,\n                            duration: 300,\n                            backward: true,\n                            body: transition => {\n                                translate(transition, AnimationType.MouseOver, true)\n                            }\n                        })\n                }\n\n                ctx.roundRect(x + padding, y, maxWidth - padding * 2, 20, borderRadius)\n                ctx.fill()\n\n                TextStyles.regular(ctx)\n                ctx.fillStyle = Theme.text\n                ctx.textAlign = 'left'\n                ctx.textBaseline = 'hanging'\n                ctx.fillText(item.text, x + padding * 2, y + 5)\n\n                y += 22\n            }\n        }\n\n        ctx.lineWidth = 1\n\n        if (!this.#isOnlyMenu && clickEvent != undefined && this.isActive) {\n            this.isActive = false\n            clickEvent = undefined\n        }\n\n        this.#isInit = true\n\n        if (this.#isOnlyMenu && clickEvent && moveEvent.x == clickEvent.x && moveEvent.y == clickEvent.y) {\n            this.isActive = !this.isActive\n            clickEvent = undefined\n        }\n\n        return clickEvent\n    }\n\n    #initAnimations() {\n        this.#canvasPosition = this.#canvas.getBoundingClientRect()\n\n        this.#canvasPosition.x += scrollX\n        this.#canvasPosition.y += scrollY\n    }\n\n    #isOnButton(event: MouseEvent, x: number, y: number, w: number, h: number): boolean {\n        if (!event)\n            return false\n\n        let trueX = event.clientX - this.#canvasPosition.x + scrollX,\n            trueY = event.clientY - this.#canvasPosition.y + scrollY\n\n        return trueX >= x && trueX <= x + w\n               && trueY >= y && trueY <= y + h\n    }\n\n    refresh() {\n        this.#isInit = false\n    }\n\n    resize() {\n        this.#initAnimations()\n        this.#calculatePosition()\n    }\n\n    close() {\n        this.isActive = false\n    }\n\n    #calculatePosition() {\n        const width = this.#isOnlyMenu ? 0 : Helper.stringWidth(this.#options.text ?? '') + 12,\n            height = this.#isOnlyMenu ? 0 : 20\n\n        this.#position = {\n            x: this.#options.x + width > this.#canvas.width\n               ? this.#canvas.width - width\n               : this.#options.x < 0\n                 ? this.#canvas.width + this.#options.x - width\n                 : this.#options.x,\n            y: this.#options.y + height > this.#canvas.height\n               ? this.#canvas.height - height\n               : this.#options.y < 0\n                 ? this.#canvas.height + this.#options.y - height\n                 : this.#options.y,\n            width: width,\n            height: height\n        } as DOMRect\n    }\n}","import * as Helper from 'Helper'\nimport { ThemeOptions } from 'static/ThemeOptions'\nimport { Events } from 'static/Enums'\n\nexport class Theme {\n    static currentTheme = 0\n\n    static text: string\n\n    static background: string\n\n    static line: string\n\n    static lineAxis: string\n\n    static lineActive: string\n\n    static dropdownItemHoverColor: string\n\n    static dropdownBorder: string\n\n    static canvasBackground: string\n\n    static canvasBackgroundInt: number\n\n    static function: Function | undefined\n\n    static initialize(callback: Function, isDark?: Function) {\n        if (!Theme.function && isDark)\n            Theme.function = isDark\n\n        if (window.matchMedia\n            && window.matchMedia('(prefers-color-scheme: dark)').matches\n            && (!Theme.function || Theme.function()))\n            Theme.setTheme(1)\n        else\n            Theme.setTheme(0)\n\n        window.matchMedia('(prefers-color-scheme: dark)')\n              .addEventListener(Events.Change, event => {\n                  Theme.setTheme(event.matches && (!Theme.function || Theme.function()) ? 1 : 0)\n                  callback()\n              })\n    }\n\n    static setTheme(index: number) {\n        Theme.currentTheme = index\n\n        Theme.text = ThemeOptions.colors[index]\n        Theme.background = ThemeOptions.backgrounds[index]\n        Theme.line = ThemeOptions.lines[index]\n        Theme.lineAxis = ThemeOptions.lineAxes[index]\n        Theme.lineActive = ThemeOptions.lineActives[index]\n        Theme.dropdownItemHoverColor = Helper.adjustColor(Theme.background, index == 0 ? -50 : 50)\n        Theme.dropdownBorder = ThemeOptions.dropdownBorders[index]\n        Theme.canvasBackground = ThemeOptions.canvasBackgrounds[index]\n        Theme.canvasBackgroundInt = Number(`0xff${ Theme.canvasBackground.slice(1) }`)\n    }\n\n    static reset() {\n        this.function = undefined\n    }\n}","import { Renderer } from 'types/base/Renderer'\nimport { CircularData } from 'types/data/CircularData'\nimport { Sector } from 'types/Sector'\nimport { CircularAngle } from 'types/CircularAngle'\nimport { Point } from 'types/Point'\nimport { DropdownItem } from 'types/DropdownItem'\nimport * as Helper from 'Helper'\nimport { Dropdown } from 'Dropdown'\nimport { Theme } from 'Theme'\nimport { TextStyles } from 'helpers/TextStyles'\nimport { Chart } from 'Chart'\nimport { TooltipValue } from 'types/TooltipValue'\nimport { Decomposition } from 'Decomposition'\nimport { Export } from 'Export'\nimport { TextResources } from 'static/TextResources'\nimport { Modal } from 'Modal'\nimport { Canvas } from 'helpers/Canvas'\nimport { Formatter } from 'helpers/Formatter'\nimport { AnimationType, Events, Icon, RenderState } from 'static/Enums'\nimport * as Constants from 'static/constants/Index'\nimport { Styles } from 'static/constants/Styles'\n\nexport class CircularRenderer extends Renderer<CircularData> {\n    #canRenderInnerTitle: boolean\n\n    #isDonut: boolean\n\n    #radius: number\n\n    #sum: number\n\n    #accumulator: number\n\n    #animationOffset: number\n\n    #hoverCount: number\n\n    #currentHover: string | undefined\n\n    #pinned: string[]\n\n    #center: Point\n\n    #startPoint: Point\n\n    #angles: CircularAngle[]\n\n    #other: Sector[]\n\n    #innerTitleStyle: Function\n\n    readonly #startAngle: number\n\n    constructor(chart: Chart) {\n        super(chart)\n\n        this.#startAngle = Math.PI / 4\n\n        this.onMouseMoveEvent = new MouseEvent(Events.MouseMove)\n    }\n\n    render() {\n        super.render()\n\n        this.#accumulator = this.#startAngle\n        this.#hoverCount = 0\n\n        if (this.data.values.filter(v => !v.disabled).length == 0)\n            this.#drawEmpty()\n        else\n            this.#draw()\n\n        if (this.#hoverCount == 0)\n            this.#currentHover = undefined\n\n        this.state = RenderState.Idle\n\n        super.renderDropdown()\n\n        if (this.#currentHover || this.contextMenu)\n            this.renderContextMenu(this.data.values.find(v => v.id == this.#currentHover)?.data ?? {})\n        else\n            this.onContextMenuEvent = undefined\n\n        if (this.#currentHover)\n            this.canvas.style.cursor = Styles.Cursor.Pointer\n        else\n            this.highlight()\n    }\n\n    #draw() {\n        if (this.onMouseMoveEvent || this.state == RenderState.Init) {\n            this.#sum = this.data.values.reduce((acc, v) => acc + v.current, 0)\n\n            let anglesSum = this.#startAngle\n            this.#angles = this.data.values.flatMap(sector => {\n                                   const angle = sector.current / this.#sum * 2 * Math.PI\n\n                                   return {\n                                       id: sector.id,\n                                       value: angle,\n                                       sum: (anglesSum += angle) - angle\n                                   }\n                               })\n                               .reverse()\n\n            this.#startPoint = this.#getPoint(this.#radius, 0)\n\n            for (const value of this.data.values)\n                this.#drawSector(value)\n\n            const value = this.data.values.find(v => v.id == this.#currentHover)\n            this.tooltip.render(!!value && !this.dropdown?.isActive,\n                this.onMouseMoveEvent,\n                [\n                    new TooltipValue(`${ value?.label }: ${ Formatter.number(value?.current) }`)\n                ],\n                value)\n\n            this.#drawInnerTitle()\n        }\n\n        if (!this.isDestroy)\n            requestAnimationFrame(this.render.bind(this))\n    }\n\n    #drawSector(value: Sector) {\n        const ctx = Canvas.getContext(this.canvas)\n\n        ctx.fillStyle = value.color\n        ctx.strokeStyle = value.color\n\n        const piece = value.current / this.#sum,\n            angle = (isNaN(piece) ? 1 : piece) * 2 * Math.PI\n\n        const isSingle = this.data.values.filter(s => !s.disabled).length == 1\n\n        if ((!!this.onClickEvent || this.#pinned.includes(value.id))\n            && !this.animations.contains(value.id, AnimationType.Init)\n            && !isSingle) {\n            this.animations.add(value.id,\n                AnimationType.Click,\n                {\n                    duration: Constants.Animations.circular,\n                    before: () => {\n                        if (!!this.onClickEvent) {\n                            if (this.#isInsideSector(this.onClickEvent, value)) {\n                                if (this.#pinned.includes(value.id))\n                                    this.#pinned = this.#pinned.filter(id => id != value.id)\n                                else\n                                    this.#pinned.push(value.id)\n\n                                this.onClickEvent = new PointerEvent(Events.Click)\n                            }\n                        }\n\n                        return true\n                    },\n                    body: () => {\n                        if (!this.#pinned.includes(value.id))\n                            return\n\n                        const piece = value.current / this.#sum,\n                            angle = (isNaN(piece) ? 1 : piece) * 2 * Math.PI,\n                            direction = this.#accumulator + angle / 2\n\n                        const transition = {\n                            x: this.#animationOffset * Math.cos(direction),\n                            y: this.#animationOffset * Math.sin(direction)\n                        }\n\n                        ctx.translate(transition.x, transition.y)\n\n                        if (angle > Math.PI / 6)\n                            ctx.lineWidth = 8\n                        ctx.lineJoin = 'round'\n                        ctx.lineCap = 'round'\n\n                        ctx.fillStyle = value.color\n                    }\n                })\n        }\n\n        if (this.onMouseMoveEvent && this.#isInsideSector(this.onMouseMoveEvent, value)) {\n            this.#currentHover = value.id\n            this.#hoverCount++\n        }\n\n        if (this.state == RenderState.Init || this.animations.contains(value.id, AnimationType.Init)) {\n            this.animations.add(value.id,\n                AnimationType.Init,\n                {\n                    duration: Constants.Animations.circular + (this.data.values.indexOf(value) + 1) / this.data.values.length * Constants.Animations.circular,\n                    continuous: true,\n                    body: transition => {\n                        const centerOfSector = {\n                            x: this.#center.x + this.#radius / 2 * Math.cos(this.#accumulator + angle / 2),\n                            y: this.#center.y + this.#radius / 2 * Math.sin(this.#accumulator + angle / 2)\n                        }\n\n                        const minSize = .7,\n                            rest = 1 - minSize\n\n                        ctx.translate(centerOfSector.x - centerOfSector.x * (minSize + transition * rest),\n                            centerOfSector.y - centerOfSector.y * (minSize + transition * rest))\n                        ctx.scale((minSize + transition * rest), (minSize + transition * rest))\n\n                        let opacity = Math.round(255 * transition).toString(16)\n\n                        if (opacity.length < 2)\n                            opacity = 0 + opacity\n\n                        ctx.fillStyle = value.color + opacity\n                        ctx.strokeStyle = Helper.applyAlpha(value.color, 255 * transition)\n                    }\n                })\n        } else if (this.onMouseMoveEvent\n                   && !this.animations.contains(value.id, AnimationType.Init)\n                   && !this.#pinned.includes(value.id)\n                   && !isSingle) {\n            const translate = (transition: number, event: AnimationType, swap: boolean) => {\n                this.animations.reload(value.id, event)\n\n                ctx.lineWidth = 1\n                ctx.lineJoin = 'miter'\n                ctx.lineCap = 'butt'\n\n                if (transition == 0)\n                    return\n\n                if (swap)\n                    transition = value.transition\n\n                const piece = value.current / this.#sum,\n                    angle = (isNaN(piece) ? 1 : piece) * 2 * Math.PI,\n                    direction = this.#accumulator + angle / 2,\n                    translate = {\n                        x: this.#animationOffset * Math.cos(direction) * transition,\n                        y: this.#animationOffset * Math.sin(direction) * transition\n                    }\n\n                ctx.translate(translate.x, translate.y)\n\n                if (angle > Math.PI / 6)\n                    ctx.lineWidth = transition * 8\n                ctx.lineJoin = 'round'\n                ctx.lineCap = 'round'\n\n                value.translate = translate\n                value.transition = transition\n            }\n\n            if (!this.#isInsideSector(this.onMouseMoveEvent, value)\n                || !this.animations.contains(value.id, AnimationType.MouseLeave))\n                this.animations.add(value.id,\n                    AnimationType.MouseLeave,\n                    {\n                        timer: Constants.Dates.minDate,\n                        duration: Constants.Animations.circular,\n                        backward: true,\n                        body: transition => {\n                            translate(transition,\n                                AnimationType.MouseOver,\n                                value.transition < transition)\n                        }\n                    })\n            else\n                this.animations.add(value.id,\n                    AnimationType.MouseOver,\n                    {\n                        duration: Constants.Animations.circular,\n                        body: transition => {\n                            translate(transition,\n                                AnimationType.MouseLeave,\n                                value.transition > transition)\n                        }\n                    })\n        }\n\n        let point2 = this.#getPoint(this.#radius, angle)\n\n        if (angle > 0) {\n            ctx.save()\n\n            if (value.current > 0) {\n                let labelStartPoint = this.#getPoint(this.#radius + 10, angle / 2),\n                    labelMidPoint = this.#getPoint(this.#radius + 20, angle / 2)\n\n                const dir = labelStartPoint.x > this.#center.x ? 1 : -1\n\n                let endPoint = {\n                    x: labelMidPoint.x + 10 * dir,\n                    y: labelMidPoint.y\n                }\n\n                let isBusy = false\n\n                const textWidth = Helper.stringWidth(value.label),\n                    imageDataX = dir == 1 ? endPoint.x + 12 : endPoint.x - textWidth - 12 + (value.translate ? value.translate.x : 0),\n                    imageDataY = endPoint.y - 12 + (value.translate ? value.translate.y : 0),\n                    imageData = new Uint32Array(ctx.getImageData(imageDataX, imageDataY, textWidth + 12, 28).data.buffer)\n\n                if (imageDataX < 0 || imageDataX + textWidth > this.canvas.width\n                    || endPoint.y - 12 < 0 || endPoint.y + 12 > this.canvas.height)\n                    isBusy = true\n\n                if (!isBusy)\n                    for (let i = 0; i < imageData.length; i++)\n                        if (Canvas.isPixelBusy(imageData[i])) {\n                            isBusy = true\n                            break\n                        }\n\n                if (!isBusy) {\n                    ctx.beginPath()\n                    ctx.moveTo(labelStartPoint.x, labelStartPoint.y)\n\n                    ctx.quadraticCurveTo(labelMidPoint.x, labelMidPoint.y, endPoint.x, endPoint.y)\n\n                    let opacity = Math.round(255 * (value.current / value.value)).toString(16)\n\n                    if (opacity.length < 2)\n                        opacity = 0 + opacity\n\n                    ctx.strokeStyle = Theme.text + opacity\n                    ctx.lineCap = 'butt'\n                    ctx.lineJoin = 'miter'\n                    ctx.lineWidth = 1\n                    ctx.stroke()\n\n                    ctx.fillStyle = Theme.text + opacity\n                    TextStyles.circularLabel(ctx, dir == 1)\n                    ctx.fillText(value.label, endPoint.x + 8 * dir, endPoint.y + 4)\n                }\n            }\n\n            ctx.restore()\n\n            ctx.beginPath()\n\n            if (!this.#isDonut)\n                ctx.moveTo(this.#center.x, this.#center.y)\n\n            ctx.lineTo(this.#startPoint.x, this.#startPoint.y)\n\n            let localAccumulator = 0,\n                localAngle = angle\n\n            while (localAngle > 0) {\n                let currentAngle = localAngle - Math.PI / 6 > 0\n                                   ? Math.PI / 6\n                                   : localAngle\n\n                point2 = this.#getPoint(this.#radius, localAccumulator + currentAngle)\n\n                const tangentIntersectionAngle = Math.PI - currentAngle,\n                    lengthToTangentIntersection = this.#radius / Math.sin(tangentIntersectionAngle / 2),\n                    tangentIntersectionPoint = this.#getPoint(lengthToTangentIntersection, localAccumulator + currentAngle / 2)\n\n                ctx.quadraticCurveTo(tangentIntersectionPoint.x, tangentIntersectionPoint.y, point2.x, point2.y)\n\n                localAccumulator += currentAngle\n\n                localAngle -= Math.PI / 6\n            }\n\n            if (this.#isDonut || value.innerRadius != 0) {\n                const innerRadius = this.#radius * (value.innerRadius / 100)\n\n                const innerPoint2 = {\n                    x: point2.x - (((this.#radius - innerRadius) * (point2.x - this.#center.x)) / this.#radius),\n                    y: point2.y - (((this.#radius - innerRadius) * (point2.y - this.#center.y)) / this.#radius)\n                }\n\n                ctx.lineTo(innerPoint2.x, innerPoint2.y)\n\n                localAngle = 0\n                localAccumulator = angle\n\n                while (localAngle < angle) {\n                    let currentAngle = localAngle + Math.PI / 6 < angle\n                                       ? Math.PI / 6\n                                       : angle - localAngle\n\n                    point2 = this.#getPoint(innerRadius, localAccumulator - currentAngle)\n\n                    const tangentIntersectionAngle = Math.PI - currentAngle,\n                        lengthToTangentIntersection = innerRadius / Math.sin(tangentIntersectionAngle / 2),\n                        tangentIntersectionPoint = this.#getPoint(lengthToTangentIntersection, localAccumulator - currentAngle / 2)\n\n                    ctx.quadraticCurveTo(tangentIntersectionPoint.x, tangentIntersectionPoint.y, point2.x, point2.y)\n\n                    localAccumulator -= currentAngle\n\n                    localAngle += Math.PI / 6\n                }\n\n                point2 = this.#getPoint(this.#radius, angle)\n            }\n\n            if (!this.animations.contains(value.id, AnimationType.Init)) {\n                const changeColor = (transition: number, event: AnimationType) => {\n                    this.animations.reload(value.id, event)\n\n                    if (transition == 0)\n                        return\n\n                    let opacity = Math.round(255 - 127 * transition).toString(16)\n                    if (opacity.length < 2)\n                        opacity = 0 + opacity\n\n                    ctx.fillStyle = value.color + opacity\n                    ctx.strokeStyle = Helper.applyAlpha(value.color, 255 - 127 * transition)\n                }\n\n                const anyHighlight = this.highlightItems.length != 0\n\n                if ((this.#currentHover && this.#currentHover != value.id)\n                    || (anyHighlight && !this.highlightItems.includes(value.id))) {\n                    this.animations.add(\n                        value.id,\n                        AnimationType.AnotherItemOver,\n                        {\n                            duration: Constants.Animations.circular,\n                            body: transition => {\n                                changeColor(transition, AnimationType.AnotherItemLeave)\n                            }\n                        }\n                    )\n                } else if (this.#currentHover == undefined || !anyHighlight) {\n                    this.animations.add(\n                        value.id,\n                        AnimationType.AnotherItemLeave,\n                        {\n                            timer: Constants.Dates.minDate,\n                            duration: Constants.Animations.circular,\n                            backward: true,\n                            body: transition => {\n                                changeColor(transition, AnimationType.AnotherItemOver)\n                            }\n                        }\n                    )\n                }\n            }\n\n            ctx.closePath()\n\n            ctx.fill()\n            ctx.stroke()\n\n            this.#accumulator += angle\n        }\n\n        ctx.resetTransform()\n\n        this.#startPoint = point2\n    }\n\n    #getPoint(radius: number, angle: number): Point {\n        return {\n            x: this.#center.x + radius * Math.cos(this.#accumulator + angle),\n            y: this.#center.y + radius * Math.sin(this.#accumulator + angle)\n        }\n    }\n\n    #isInsideSector(event: MouseEvent, value: Sector): boolean {\n        const isAngle = (point: Point) => {\n            let a = Math.atan2(point.y - this.#center.y, point.x - this.#center.x)\n            if (a < 0)\n                a += Math.PI * 2\n            if (a < this.#startAngle)\n                a = Math.PI * 2 - Math.abs(this.#startAngle - a) + this.#startAngle\n\n            let index = this.#angles.findIndex(o => o.id == value.id),\n                sumBefore = this.#angles[index].sum\n\n            return !(this.dropdown?.isActive ?? false)\n                   && sumBefore <= a\n                   && sumBefore + this.#angles[index].value - a >= 0\n        }\n\n        const isWithinRadius = (v: Point) => {\n            return v.x * v.x + v.y * v.y <= this.#radius * this.#radius\n                   && (!this.#isDonut || v.x * v.x + v.y * v.y\n                       >= this.#radius * (value.innerRadius / 100) * this.#radius * (value.innerRadius / 100))\n        }\n\n        const point = this.getMousePosition(event),\n            inner = {\n                x: point.x - this.#center.x,\n                y: point.y - this.#center.y\n            },\n            outer = {\n                x: point.x - this.#center.x - value.translate?.x,\n                y: point.y - this.#center.y - value.translate?.y\n            }\n\n        return isAngle(point) && (isWithinRadius(inner) || isWithinRadius(outer))\n    }\n\n    #drawEmpty() {\n        const ctx = Canvas.getContext(this.canvas)\n\n        ctx.beginPath()\n\n        ctx.arc(this.#center.x, this.#center.y, this.#radius, 0, 2 * Math.PI)\n        ctx.strokeStyle = Theme.text\n        ctx.stroke()\n\n        TextStyles.regular(ctx)\n        ctx.fillText(TextResources.allDataIsHidden, this.#center.x, this.#center.y)\n\n        requestAnimationFrame(this.render.bind(this))\n    }\n\n    #drawInnerTitle() {\n        if (this.#canRenderInnerTitle) {\n            const ctx = Canvas.getContext(this.canvas)\n\n            this.#innerTitleStyle(ctx)\n            ctx.fillText(this.data.innerTitle, this.#center.x, this.#center.y)\n        }\n    }\n\n    #calculateSizes() {\n        const titleOffset = this.settings.title\n                            ? Constants.Values.titleOffset\n                            : 0\n\n        const shortSide = this.canvas.width > this.canvas.height - titleOffset * 2\n                          ? this.canvas.height - titleOffset * 2\n                          : this.canvas.width\n\n        this.#center = {\n            x: this.canvas.width / 2,\n            y: titleOffset + this.canvas.height / 2\n        }\n\n        let longestLabel = 0\n\n        for (const value of this.data.values) {\n            const width = Helper.stringWidth(value.label)\n\n            if (width > longestLabel)\n                longestLabel = width\n        }\n\n        this.#radius = shortSide / 2 - (longestLabel + 50)\n\n        if (this.#radius < shortSide / 2 - 50)\n            this.#radius = shortSide / 2 - 50\n\n        if (this.data.innerTitle != undefined && this.data.innerTitle != '') {\n            this.#innerTitleStyle = TextStyles.large\n            this.#canRenderInnerTitle = Helper.stringWidth(this.data.innerTitle, 16)\n                                        < (this.data.innerRadius / 100) * this.#radius * 2\n\n            if (!this.#canRenderInnerTitle) {\n                this.#innerTitleStyle = TextStyles.regular\n                this.#canRenderInnerTitle = Helper.stringWidth(this.data.innerTitle, 14)\n                                            < (this.data.innerRadius / 100) * this.#radius * 2\n            }\n\n            if (!this.#canRenderInnerTitle)\n                console.warn(`Inner title is declared, but can't be rendered`)\n        }\n\n        this.#animationOffset = this.#radius * .1\n    }\n\n    refresh() {\n        super.refresh()\n\n        this.dropdown?.refresh()\n    }\n\n    resize() {\n        super.resize()\n\n        this.initAnimations()\n        this.#calculateSizes()\n        this.dropdown?.resize()\n    }\n\n    prepareSettings() {\n        super.prepareSettings()\n\n        this.data.values = this.data.values.map(v => new Sector(v))\n\n        if (this.settings.enableOther) {\n            if (!this.settings.contextMenu)\n                this.settings.contextMenu = [] as DropdownItem[]\n            else\n                this.settings.contextMenu.push({\n                    isDivider: true\n                } as DropdownItem)\n\n            this.settings.contextMenu.push({\n                text: TextResources.show,\n                condition: data => data?._other,\n                action: () => {\n                    new Modal(Decomposition.toChart<Sector>(this.settings, this.#other),\n                        {\n                            width: window.innerWidth * .8,\n                            height: window.innerHeight * .8\n                        } as DOMRect)\n                        .open()\n                }\n            })\n        }\n\n        this.#pinned = []\n\n        this.#isDonut = (this.data.innerRadius ?? 0) != 0\n\n        for (let item of this.data.values) {\n            item.disabled = !item.value\n            item.value ??= 0\n            item.current = item.value\n            item.innerRadius ??= this.data.innerRadius ?? 0\n\n            if (item.value < 0)\n                console.warn(`\"${ item.label }\" has negative value (${ item.value }) and will not be render`)\n        }\n\n        this.data.values = this.data.values.filter(v => v.value >= 0)\n\n        if (this.settings.enableOther && this.data.values.length > 20) {\n            this.#other = this.data.values.splice(20)\n\n            const sum = this.#other.reduce((acc, v) => acc + v.current, 0)\n\n            this.data.values = this.data.values.slice(0, 20)\n\n            this.data.values.push(new Sector({\n                value: sum,\n                current: sum,\n                label: TextResources.other,\n                id: Helper.guid(),\n                color: this.#other[this.#other.length - 1].color,\n                innerRadius: this.data.innerRadius,\n                data: {\n                    _other: true\n                }\n            }))\n        }\n    }\n\n    initDropdown() {\n        super.initDropdown()\n\n        this.dropdown = new Dropdown(this.canvas,\n            {\n                x: -10,\n                y: 10,\n                icon: Icon.ThreeLines,\n                items: [\n                    {\n                        text: TextResources.exportPNG,\n                        action: () => {\n                            Export.asPng(this.canvas, this.settings.title)\n                        }\n                    },\n                    {\n                        text: TextResources.exportCSV,\n                        action: () => {\n                            Export.asCsv(Decomposition.toTable(CircularData.getRows(this.data)), this.settings.title)\n                        }\n                    },\n                    {\n                        isDivider: true\n                    } as DropdownItem,\n                    {\n                        text: TextResources.decomposeToTable,\n                        action: () => {\n                            new Modal(Decomposition.toTable(CircularData.getRows(this.data))).open()\n                        }\n                    }\n                ]\n            })\n    }\n}","import { Data } from 'types/interfaces/Data'\nimport { Renderable } from 'types/base/Renderable'\nimport * as Helper from 'Helper'\nimport { Value } from 'types/base/Value'\nimport { Legend } from 'Legend'\nimport { Dropdown } from 'Dropdown'\nimport { DropdownItem } from 'types/DropdownItem'\nimport { Point } from 'types/Point'\nimport { TextResources } from 'static/TextResources'\nimport { Chart } from 'Chart'\nimport { Canvas } from 'helpers/Canvas'\nimport { TextStyles } from 'helpers/TextStyles'\nimport { LegendPlace, RenderState } from 'static/Enums'\nimport * as Constants from 'static/constants/Index'\nimport { ChartSettings } from '../ChartSettings'\n\nexport class Renderer<T extends Data> extends Renderable {\n    dropdown: Dropdown\n\n    data: T\n\n    protected isDestroy: boolean = false\n\n    protected highlightItems: string[]\n\n    constructor(chart: Chart) {\n        super(chart)\n\n        this.highlightItems = []\n\n        this.state = this.settings.disableInitAnimation ? RenderState.Idle : RenderState.Init\n    }\n\n    render() {\n        super.render()\n\n        this.renderTitle()\n    }\n\n    destroy() {\n        this.isDestroy = true\n\n        this.canvas.remove()\n    }\n\n    renderDropdown() {\n        this.onClickEvent = this.dropdown?.render(this.onMouseMoveEvent, this.onClickEvent)\n    }\n\n    resize() {\n        this.#calculateSizes()\n        this.tooltip.refresh()\n        this.dropdown?.resize()\n    }\n\n    prepareSettings() {\n        this.data = <T>this.settings.data\n\n        const domRect = this.node.parentElement!.getBoundingClientRect()\n\n        this.settings.minWidth = isNaN(+this.settings.width)\n                                 ? 0\n                                 : +this.settings.width\n        this.settings.minHeight = isNaN(+this.settings.height)\n                                  ? 0\n                                  : +this.settings.height\n\n        this.settings.width = this.settings.minWidth != 0 && domRect.width < this.settings.minWidth\n                              ? this.settings.minWidth\n                              : domRect.width\n\n        this.settings.height = this.settings.minHeight != 0 && domRect.height < this.settings.minHeight\n                               ? this.settings.minHeight\n                               : domRect.height\n\n        this.canvas.width = this.settings.width\n        this.canvas.height = this.settings.height\n\n        for (let item of this.settings.data.values) {\n            item.id = Helper.guid()\n            item.label ??= TextResources.noLabel\n\n            if (item.label.length > 30)\n                item.label = item.label.slice(0, 27) + '...'\n        }\n\n        this.calculateColors()\n\n        for (let item of this.settings.contextMenu ?? [])\n            if (item.id != undefined)\n                item.action = data => this.node.dispatchEvent(new CustomEvent(item.id ?? '', { detail: data }))\n    }\n\n    calculateColors(force: boolean = false) {\n        const baseColor = this.settings.baseColor ?? Helper.randomColor()\n        let adjustStep = Math.round(100 / this.settings.data.values.length),\n            adjustAmount = -50\n\n        if (adjustStep <= 1)\n            adjustStep = 1\n\n        for (let item of this.settings.data.values)\n            if (item.color == undefined || force)\n                item.color = Helper.adjustColor(baseColor, adjustAmount += adjustStep)\n    }\n\n    initDropdown() {\n    }\n\n    renderContextMenu(data: any) {\n        if (this.dropdown?.isActive) {\n            this.onContextMenuEvent = undefined\n\n            return false\n        }\n\n        if (this.onContextMenuEvent != undefined && this.settings.contextMenu?.length != 0) {\n            if (this.contextMenu == undefined && this.settings.contextMenu != undefined) {\n                let clone: DropdownItem[] = []\n\n                for (const item of this.settings.contextMenu)\n                    if (!item.condition || item.condition(data))\n                        clone.push({\n                            id: item.id,\n                            text: item.text,\n                            isDivider: item.isDivider,\n                            action: () => {\n                                item.action(data)\n\n                                this.onContextMenuEvent = undefined\n                                this.contextMenu = undefined\n                            }\n                        })\n\n                this.contextMenu = new Dropdown(this.canvas, {\n                    x: this.onContextMenuEvent.x - this.canvasPosition.x,\n                    y: this.onContextMenuEvent.y - this.canvasPosition.y,\n                    items: clone,\n                    data: data\n                })\n\n                this.contextMenu.resize()\n\n                this.onClickEvent = undefined\n            }\n\n            const isClick = this.onClickEvent != undefined\n\n            this.onClickEvent = this.contextMenu?.render(this.onMouseMoveEvent, this.onClickEvent)\n\n            if (this.onClickEvent == undefined && isClick) {\n                this.contextMenu = undefined\n                this.onContextMenuEvent = undefined\n\n                return true\n            }\n        }\n\n        return false\n    }\n\n    highlight(value?: Value) {\n        if (value)\n            this.highlightItems = [value.id]\n        else\n            this.highlightItems = []\n    }\n\n    closeDropdowns() {\n        this.dropdown?.close()\n        this.onContextMenuEvent = undefined\n    }\n\n    protected renderTitle() {\n        const ctx = Canvas.getContext(this.canvas)\n\n        if (this.settings.title) {\n            TextStyles.title(ctx)\n            ctx.fillText(this.settings.title, this.canvas.width / 2, Constants.Values.titleOffset)\n        }\n    }\n\n    #calculateSizes() {\n        let domRect = this.node.getBoundingClientRect()\n\n        this.settings.width = this.settings.minWidth && domRect.width < this.settings.minWidth\n                              ? this.settings.minWidth\n                              : domRect.width\n        this.settings.height = this.settings.minHeight && domRect.height < this.settings.minHeight\n                               ? this.settings.minHeight\n                               : domRect.height\n\n        this.canvas.width = this.settings.width\n        this.canvas.height = this.settings.height\n\n        if (this.settings.enableLegend) {\n            if (this.settings.legendPlace == undefined\n                || this.settings.legendPlace == LegendPlace.Top\n                || this.settings.legendPlace == LegendPlace.Bottom)\n                this.canvas.height -= Legend.getLegendHeight(this.settings.data.values, this.canvas.width)\n\n            if (this.settings.legendPlace == LegendPlace.Left\n                || this.settings.legendPlace == LegendPlace.Right)\n                this.canvas.width -= 500\n        }\n    }\n\n    protected getMousePosition(event: MouseEvent): Point {\n        return {\n            x: event.clientX - this.canvasPosition.x + scrollX,\n            y: event.clientY - this.canvasPosition.y + scrollY\n        }\n    }\n\n    applySettings(settings: ChartSettings) {\n        this.settings = settings\n    }\n}","import { Value } from 'types/base/Value'\nimport { TableValue } from 'types/TableValue'\nimport { TableData } from 'types/TableData'\nimport { Data } from 'types/interfaces/Data'\n\nexport class TreeData implements Data {\n    values: Value[]\n\n    padding: number\n\n    static getRows(data: TreeData): TableData {\n        const key = 'Value'\n\n        let values: TableValue[] = []\n\n        for (const value of data.values)\n            values.push({\n                name: value.label,\n                values: new Map([[key, value.value]])\n            })\n\n        return {\n            headers: [\n                {\n                    value: key,\n                    display: key\n                }\n            ],\n            values: values\n        }\n    }\n}","import { TableValue } from 'types/TableValue'\nimport { Sector } from 'types/Sector'\nimport { TableData } from 'types/TableData'\nimport { Data } from 'types/interfaces/Data'\n\nexport class CircularData implements Data {\n    values: Sector[]\n\n    innerRadius: number\n\n    innerTitle: string\n\n    static getRows(data: CircularData): TableData {\n        const key = 'Value'\n\n        let values: TableValue[] = []\n\n        for (const value of data.values)\n            values.push({\n                name: value.label,\n                values: new Map([[key, value.value]])\n            })\n\n        return {\n            headers: [\n                {\n                    value: key,\n                    display: key\n                }\n            ],\n            values: values\n        }\n    }\n}","export class Value {\n    id: string\n\n    color: string\n\n    label: string\n\n    disabled: boolean\n\n    hideInLegend: boolean\n\n    data: { [key: string]: string }\n\n    value: number\n\n    toggle(transition: number) {\n        if (transition == 0)\n            this.disabled = !this.disabled\n    }\n\n    checkCondition(): boolean {\n        return false\n    }\n\n    reset() {\n        this.disabled = false\n    }\n}","import { PlotData } from 'types/data/PlotData'\nimport { Renderer } from 'types/base/Renderer'\nimport * as Helper from 'Helper'\nimport { DropdownItem } from 'types/DropdownItem'\nimport { PlotAxis } from 'types/PlotAxis'\nimport { Paddings } from 'types/Paddings'\nimport { Dropdown } from 'Dropdown'\nimport { HoverItem } from 'types/HoverItem'\nimport { PlotSeries } from 'types/PlotSeries'\nimport { Tooltip } from 'Tooltip'\nimport { Theme } from 'Theme'\nimport { Chart } from 'Chart'\nimport { TextStyles } from 'helpers/TextStyles'\nimport { TooltipValue } from 'types/TooltipValue'\nimport { Export } from 'Export'\nimport { Decomposition } from 'Decomposition'\nimport { Modal } from 'Modal'\nimport { TextResources } from 'static/TextResources'\nimport { Formatter } from 'helpers/Formatter'\nimport { Canvas } from 'helpers/Canvas'\nimport { AnimationType, Icon, LineType, PlotAxisType, PlotType, RenderState } from 'static/Enums'\nimport * as Constants from 'static/constants/Index'\n\nexport class PlotRenderer extends Renderer<PlotData> {\n    #x: PlotAxis\n\n    #y: PlotAxis\n\n    #paddings: Paddings\n\n    #tooltipX: number\n\n    #tooltipY: number\n\n    #labelsX: Map<number, string>\n\n    #labelsY: Map<number, string>\n\n    #allValuesX: any[]\n\n    #allValuesY: any[]\n\n    #base: ImageBitmap | undefined\n\n    #backLines: ImageData | undefined\n\n    #yAxisStep: number\n\n    #plot: DOMRect\n\n    #hoverX: HoverItem | undefined\n\n    constructor(chart: Chart) {\n        super(chart)\n    }\n\n    render() {\n        super.render()\n\n        let tooltipLines = [\n            new TooltipValue(this.#labelsX.get(Math.round(this.#tooltipX))\n                             ?? this.#labelsY.get(Math.round(this.#tooltipY)))\n        ]\n\n        const ctx = Canvas.getContext(this.canvas)\n\n        TextStyles.regular(ctx)\n        ctx.lineJoin = 'round'\n\n        const axisLineHoverColor = Theme.lineActive\n\n        this.#renderBackLines()\n        this.#renderBase(true)\n\n        let x = 0,\n            y = 0,\n            yValue = 0,\n            yHeight = 0,\n            columnWidth = 0\n\n        const seriesToRender = this.data.values.filter(s => !s.disabled)\n\n        let columnsIndex = 0,\n            columnsCount = seriesToRender.filter(s => s.type == PlotType.Column).length\n\n        let barsIndex = 0,\n            barsCount = seriesToRender.filter(s => s.type == PlotType.Bar).length\n\n        let stackingAccumulator = []\n        for (let i = 0; i < this.#allValuesY.length; i++)\n            stackingAccumulator.push(0)\n\n        for (const series of seriesToRender) {\n            ctx.beginPath()\n\n            ctx.strokeStyle = series.color\n            ctx.fillStyle = series.color\n            ctx.lineWidth = series.width\n            ctx.lineCap = 'round'\n\n            const anyHighlight = this.highlightItems.length != 0\n\n            if (!this.animations.contains(series.id, AnimationType.Init)) {\n                const changeColor = (transition: number, event: AnimationType) => {\n                    this.animations.reload(series.id, event)\n\n                    if (transition == 0)\n                        return\n\n                    let opacity = Math.round(255 - 127 * transition).toString(16)\n                    if (opacity.length < 2)\n                        opacity = 0 + opacity\n\n                    ctx.fillStyle = series.color + opacity\n                    ctx.strokeStyle = series.color + opacity\n                }\n\n                if (anyHighlight && !this.highlightItems.includes(series.id)) {\n                    this.animations.add(\n                        series.id,\n                        AnimationType.AnotherItemOver,\n                        {\n                            duration: Constants.Animations.circular,\n                            body: transition => {\n                                changeColor(transition, AnimationType.AnotherItemLeave)\n                            }\n                        }\n                    )\n                } else if (!anyHighlight) {\n                    this.animations.add(\n                        series.id,\n                        AnimationType.AnotherItemLeave,\n                        {\n                            timer: Constants.Dates.minDate,\n                            duration: Constants.Animations.circular,\n                            backward: true,\n                            body: transition => {\n                                changeColor(transition, AnimationType.AnotherItemOver)\n                            }\n                        }\n                    )\n                }\n            }\n\n            switch (series.lineType) {\n                case LineType.Dash:\n                    ctx.setLineDash([series.width * 3, series.width * 2])\n\n                    break\n\n                case LineType.Dotted:\n                    ctx.setLineDash([series.width, series.width])\n\n                    break\n\n                case LineType.Solid:\n                default:\n                    break\n            }\n\n            for (const value of series.values) {\n                let index = series.values.indexOf(value),\n                    xIndex = this.#allValuesX.indexOf(this.data.xType == PlotAxisType.Date ? value.x?.toString() : value.x),\n                    yIndex = this.#allValuesY.indexOf(value.y)\n\n                const getTooltipValue = () => {\n                    return {\n                        x: value.x\n                           ? this.data.xType == PlotAxisType.Number\n                             ? Formatter.number(this.#allValuesX[xIndex])\n                             : this.#allValuesX[xIndex]\n                           : '0',\n                        y: value.y\n                           ? Formatter.number(this.#allValuesY[yIndex])\n                           : '0'\n                    }\n                }\n\n                x = this.#paddings.left\n                if (series.type != PlotType.Bar)\n                    x += xIndex * this.#x.step\n                if (series.type == PlotType.Line)\n                    x -= this.#x.step / 2 - this.#x.step\n\n                switch (series.type) {\n                    case PlotType.Line:\n                        y = this.#paddings.top + this.#plot.height - <number>value.y / this.#y.unit * this.#y.step\n                            - Math.abs(this.#y.min / this.#y.unit * this.#y.step)\n\n                        const pointDuration = 1500 / series.values.length * 1.2\n\n                        if (this.state == RenderState.Init || this.animations.contains(value.id, AnimationType.Init)) {\n                            this.animations.add(value.id,\n                                AnimationType.Init,\n                                {\n                                    timer: new Date(Date.now()).addMilliseconds(pointDuration * (index - 1)),\n                                    duration: pointDuration,\n                                    continuous: true,\n                                    body: transition => {\n                                        if (index == 0)\n                                            return\n\n                                        x = this.#paddings.left + xIndex * this.#x.step - this.#x.step / 2\n                                        y = this.#paddings.top + this.#plot.height - <number>value.y / this.#y.unit * this.#y.step\n                                            - Math.abs(this.#y.min / this.#y.unit * this.#y.step)\n\n                                        const next = series.values[index - 1]\n\n                                        let prevValue = {\n                                            x: this.#paddings.left + xIndex * this.#x.step - this.#x.step / 2,\n                                            y: this.#paddings.top + this.#plot.height - <number>next.y / this.#y.unit * this.#y.step\n                                               - Math.abs(this.#y.min / this.#y.unit * this.#y.step)\n                                        }\n\n                                        const endPointX = prevValue.x + (this.#x.step + (x - prevValue.x)) * transition,\n                                            endPointY = prevValue.y + (y - prevValue.y) * transition\n\n                                        if (prevValue.x != endPointX && prevValue.y != endPointY) {\n                                            ctx.moveTo(prevValue.x, prevValue.y)\n                                            ctx.lineTo(endPointX, endPointY)\n                                        }\n                                    }\n                                })\n                        } else {\n                            ctx.lineTo(x, y)\n\n                            if (this.#isOnX(x)) {\n                                const mouse = this.getMousePosition(this.onMouseMoveEvent)\n\n                                if (Math.abs(mouse.y - y) < 5) {\n                                    this.#hoverX = {\n                                        x: x,\n                                        y: y,\n                                        index: index,\n                                        data: value.data,\n                                        series: series\n                                    }\n\n                                    tooltipLines.push(new TooltipValue(`${ series.label }: ${ getTooltipValue().y }`, series.color))\n                                    this.#tooltipX = x - this.#x.step / 2\n                                }\n                            }\n                        }\n\n                        break\n\n                    case PlotType.AttentionLine:\n                        yValue = this.canvas.height - this.#paddings.bottom - <number>value.y / this.#y.unit * this.#y.step\n\n                        ctx.moveTo(this.#paddings.left, yValue)\n\n                        if (this.state == RenderState.Init || this.animations.contains(value.id, AnimationType.Init))\n                            this.animations.add(value.id,\n                                AnimationType.Init,\n                                {\n                                    duration: 1500,\n                                    continuous: true,\n                                    body: transition => {\n                                        ctx.lineTo(this.#paddings.left + (this.canvas.width - this.#paddings.left - this.#paddings.right) * transition,\n                                            this.canvas.height - this.#paddings.bottom - <number>value.y / this.#y.unit * this.#y.step)\n                                    }\n                                })\n                        else\n                            ctx.lineTo(this.canvas.width - this.#paddings.right, yValue)\n\n                        break\n\n                    case PlotType.Column:\n                        yValue = <number>value.y > this.data.yMax ? this.data.yMax : <number>value.y\n\n                        y = this.#plot.height * yValue / this.#y.max\n                        if (y < this.#y.minStep)\n                            y = this.#y.minStep\n\n                        columnWidth = this.#x.step * (series.width ? series.width / 100 : .5) / columnsCount\n\n                        ctx.beginPath()\n\n                        if (this.state == RenderState.Init || this.animations.contains(value.id + columnsIndex, AnimationType.Init)) {\n                            this.animations.add(value.id + columnsIndex,\n                                AnimationType.Init,\n                                {\n                                    duration: 800,\n                                    continuous: true,\n                                    body: transition => {\n                                        yValue = <number>value.y > this.data.yMax ? this.data.yMax : <number>value.y\n\n                                        x = this.#paddings.left + xIndex * this.#x.step\n                                        y = this.#plot.height * yValue / this.#y.max * transition\n\n                                        if (y < this.#y.minStep)\n                                            y = this.#y.minStep * transition\n\n                                        columnsIndex = this.data.values.filter(s => s.type == PlotType.Column)\n                                                           .indexOf(series)\n\n                                        ctx.roundRect(x + columnsIndex * columnWidth + (this.#x.step - columnsCount * columnWidth) / 2,\n                                            this.canvas.height - this.#paddings.bottom - y,\n                                            columnWidth,\n                                            y,\n                                            [6, 6, 0, 0])\n                                        ctx.fill()\n                                    }\n                                })\n                        } else {\n                            if (this.#isInArea(x + columnsIndex * columnWidth + (this.#x.step - columnsCount * columnWidth) / 2,\n                                    this.canvas.height - this.#paddings.bottom - y,\n                                    columnWidth,\n                                    y)\n                                && (this.contextMenu?.isActive == undefined\n                                    || this.contextMenu?.isActive == false)) {\n                                this.#hoverX = {\n                                    x: x,\n                                    y: y,\n                                    index: index,\n                                    data: value.data,\n                                    series: series\n                                }\n\n                                tooltipLines.push(new TooltipValue(`${ series.label }: ${ getTooltipValue().y }`, series.color))\n                                this.#tooltipX = x\n                            }\n\n                            ctx.roundRect(x + columnsIndex * columnWidth + (this.#x.step - columnsCount * columnWidth) / 2,\n                                this.canvas.height - this.#paddings.bottom - y,\n                                columnWidth,\n                                y,\n                                [6, 6, 0, 0])\n                            ctx.fill()\n                        }\n\n                        break\n\n                    case PlotType.Bar:\n                        y = this.#paddings.top + yIndex * this.#y.step + this.#y.step / 2\n                            + (100 - series.width) * this.#y.step / 100 / 2\n\n                        const seriesHeight = (series.width * this.#y.step / 100) / barsCount\n\n                        if (this.state == RenderState.Init || this.animations.contains(value.id + barsIndex, AnimationType.Init)) {\n                            this.animations.add(value.id + barsIndex,\n                                AnimationType.Init,\n                                {\n                                    duration: 800,\n                                    continuous: true,\n                                    body: transition => {\n                                        y = this.#paddings.top + yIndex * this.#y.step + this.#y.step / 2\n                                            + (100 - series.width) * this.#y.step / 100 / 2\n\n                                        barsIndex = this.data.values.filter(s => s.type == PlotType.Bar)\n                                                        .indexOf(series)\n\n                                        ctx.fillRect(x,\n                                            y - this.#y.step / 2 + barsIndex * seriesHeight,\n                                            <number>value.x / this.#x.unit * this.#x.step * transition,\n                                            seriesHeight)\n                                    }\n                                })\n                        } else {\n                            if (!anyHighlight) {\n                                if (this.#isInArea(x,\n                                    y - this.#y.step / 2 + barsIndex * seriesHeight,\n                                    <number>value.x / this.#x.unit * this.#x.step,\n                                    seriesHeight)) {\n                                    this.#hoverX = {\n                                        x: x,\n                                        y: y,\n                                        index: index,\n                                        data: value.data,\n                                        series: series\n                                    }\n\n                                    ctx.fillStyle += '88'\n\n                                    tooltipLines.push(new TooltipValue(`${ series.label }: ${ getTooltipValue().x }`, series.color))\n                                    this.#tooltipY = y - this.#y.step / 2\n                                } else {\n                                    ctx.fillStyle = series.color\n                                }\n                            }\n\n                            ctx.fillRect(x,\n                                y - this.#y.step / 2 + barsIndex * seriesHeight,\n                                <number>value.x / this.#x.unit * this.#x.step,\n                                seriesHeight)\n                        }\n\n                        break\n\n                    case PlotType.StackingColumn:\n                        y = this.canvas.height - this.#paddings.bottom - <number>value.y / this.#y.unit * this.#y.step\n\n                        columnWidth = this.#x.step * (series.width ? series.width / 100 : .5)\n\n                        if (this.state == RenderState.Init || this.animations.contains(value.id + index, AnimationType.Init)) {\n                            this.animations.add(value.id + index,\n                                AnimationType.Init,\n                                {\n                                    duration: 800,\n                                    continuous: true,\n                                    body: transition => {\n                                        columnsIndex = this.data.values.filter(s => s.type == PlotType.StackingColumn\n                                                                                    && s.values.filter(v => this.data.xType == PlotAxisType.Date\n                                                                                                            ? (v.x as Date).getTime() == (value.x as Date).getTime()\n                                                                                                            : v.x == value.x)\n                                                                                        .length > 0)\n                                                           .indexOf(series)\n\n                                        x = this.#paddings.left + xIndex * this.#x.step\n                                        y = this.canvas.height - this.#paddings.bottom - <number>value.y / this.#y.unit * this.#y.step\n\n                                        if (columnsIndex == 0)\n                                            stackingAccumulator[xIndex] = 0\n\n                                        let offset = stackingAccumulator[xIndex] != undefined\n                                                     ? stackingAccumulator[xIndex]\n                                                     : 0\n\n                                        yValue = this.canvas.height - this.#paddings.bottom + offset\n                                        yHeight = (y - this.canvas.height + this.#paddings.bottom) * transition\n\n                                        if (yValue > this.#paddings.top) {\n                                            if (yValue + yHeight < this.#paddings.top)\n                                                yHeight -= yValue + yHeight - this.#paddings.top\n\n                                            ctx.fillRect(x + (this.#x.step - columnWidth) / 2,\n                                                yValue,\n                                                columnWidth,\n                                                yHeight)\n                                        }\n\n                                        stackingAccumulator[xIndex] += (y - this.canvas.height + this.#paddings.bottom) * transition\n                                    }\n                                })\n                        } else {\n                            if (columnsIndex == 0)\n                                stackingAccumulator[xIndex] = 0\n\n                            let offset = stackingAccumulator[xIndex] != undefined\n                                         ? stackingAccumulator[xIndex]\n                                         : 0\n\n                            yValue = this.canvas.height - this.#paddings.bottom + offset\n                            yHeight = y - this.canvas.height + this.#paddings.bottom\n\n                            if (yValue > this.#paddings.top) {\n                                if (yValue + yHeight < this.#paddings.top)\n                                    yHeight -= yValue + yHeight - this.#paddings.top\n\n                                if (this.#isInArea(x + (this.#x.step - columnWidth) / 2,\n                                    yValue + yHeight,\n                                    columnWidth,\n                                    Math.abs(yHeight))) {\n                                    this.#hoverX = {\n                                        x: x,\n                                        y: y,\n                                        index: xIndex,\n                                        data: value.data,\n                                        series: series\n                                    }\n\n                                    tooltipLines.push(new TooltipValue(`${ series.label }: ${ getTooltipValue().y }`, series.color))\n                                    this.#tooltipX = x\n                                }\n\n                                ctx.fillRect(x + (this.#x.step - columnWidth) / 2,\n                                    yValue,\n                                    columnWidth,\n                                    yHeight)\n                            }\n\n                            stackingAccumulator[xIndex] += (y - this.canvas.height + this.#paddings.bottom)\n                        }\n\n                        break\n                }\n            }\n\n            ctx.setLineDash([])\n\n            switch (series.type) {\n                case PlotType.Line:\n                    ctx.stroke()\n\n                    if (this.#hoverX && this.#hoverX.series == series) {\n                        ctx.beginPath()\n                        ctx.lineWidth = 1\n                        ctx.strokeStyle = axisLineHoverColor\n                        ctx.moveTo(this.#paddings.left, this.#hoverX.y)\n                        ctx.lineTo(this.canvas.width - this.#paddings.right, this.#hoverX.y)\n                        ctx.stroke()\n\n                        let radius = Math.round(series.width * 1.1)\n                        if (radius < 5)\n                            radius = 5\n\n                        ctx.beginPath()\n                        ctx.arc(this.#hoverX.x, this.#hoverX.y, radius, 0, 2 * Math.PI)\n                        ctx.fill()\n                        ctx.lineWidth = Math.ceil(radius / 2)\n                        ctx.strokeStyle = Helper.adjustColor(series.color, 50)\n                        ctx.stroke()\n                    }\n\n                    break\n\n                case PlotType.AttentionLine:\n                    ctx.stroke()\n\n                    TextStyles.regular(ctx)\n                    ctx.fillText(series.label,\n                        this.#paddings.left + (this.canvas.width - this.#paddings.left - this.#paddings.right) / 2,\n                        this.canvas.height - this.#paddings.bottom - <number>series.values[0].y / this.#y.unit * this.#y.step + 16)\n\n                    break\n\n                case PlotType.Column:\n                case PlotType.StackingColumn:\n                    if (this.#hoverX)\n                        this.highlight(this.#hoverX.series)\n\n                    columnsIndex++\n\n                    break\n\n                case PlotType.Bar:\n                    if (this.#hoverX) {\n                        ctx.lineWidth = 1\n                        ctx.strokeStyle = axisLineHoverColor\n                        ctx.moveTo(this.#paddings.left,\n                            this.#tooltipY + this.#y.step / 2)\n                        ctx.lineTo(this.canvas.width - this.#paddings.right,\n                            this.#tooltipY + this.#y.step / 2)\n                        ctx.stroke()\n                    }\n\n                    barsIndex++\n\n                    break\n            }\n        }\n\n        this.#renderBase()\n\n        this.renderTitle()\n\n        this.tooltip.render(tooltipLines.length > 1 && !this.dropdown?.isActive,\n            this.onMouseMoveEvent,\n            tooltipLines,\n            this.#hoverX\n            ? this.#hoverX.series!.values[this.#hoverX.index]\n            : undefined)\n\n        if (!this.isDestroy)\n            requestAnimationFrame(this.render.bind(this))\n\n        this.state = RenderState.Idle\n\n        super.renderDropdown()\n\n        if (this.onContextMenuEvent && !this.#hoverX)\n            this.onContextMenuEvent = undefined\n\n        if (this.#hoverX == undefined)\n            this.highlight()\n\n        if (this.#hoverX\n            && (this.renderContextMenu(this.#hoverX.data)\n                || !this.onContextMenuEvent))\n            this.#hoverX = undefined\n    }\n\n    refresh() {\n        super.refresh()\n    }\n\n    resize() {\n        super.resize()\n\n        this.#base = undefined\n\n        this.#calculateSizes()\n    }\n\n    #isOnX(x: number): boolean {\n        if (!this.onMouseMoveEvent)\n            return false\n\n        const mouse = this.getMousePosition(this.onMouseMoveEvent)\n\n        return !(this.dropdown?.isActive ?? false)\n               && x - this.#x.step / 2 <= mouse.x && mouse.x < x + this.#x.step / 2\n               && this.#paddings.top <= mouse.y && mouse.y <= this.canvas.height - this.#paddings.bottom\n               && this.#paddings.left < mouse.x\n    }\n\n    #isInArea(x: number, y: number, w: number, h: number): boolean {\n        if (!this.onMouseMoveEvent)\n            return false\n\n        const mouse = this.getMousePosition(this.onMouseMoveEvent)\n\n        return !(this.dropdown?.isActive ?? false)\n               && mouse.x >= x && mouse.x <= x + w\n               && mouse.y >= y && mouse.y <= y + h\n    }\n\n    #renderBase(skip: boolean = false) {\n        if (this.#base && skip)\n            return\n\n        if (this.data.simple)\n            return\n\n        const ctx = Canvas.getContext(this.canvas)\n\n        if (skip)\n            ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\n\n        if (this.#base) {\n            ctx.drawImage(this.#base, 0, 0)\n            return\n        }\n\n        if (!skip)\n            return\n\n        const axisLabelOffset = 12\n\n        ctx.fillStyle = Theme.canvasBackground\n\n        ctx.fillRect(0, 0, this.#paddings.left, this.canvas.height)\n        ctx.fillRect(0, 0, this.canvas.width, this.#paddings.top)\n        ctx.fillRect(this.canvas.width - this.#paddings.right, 0, this.canvas.width, this.canvas.height)\n        ctx.fillRect(0, this.canvas.height - this.#paddings.bottom, this.canvas.width, this.canvas.height)\n\n        const isContainsBar = this.data.values.filter(s => s.type == PlotType.Bar).length > 0\n\n        ctx.setLineDash([])\n\n        if (this.data.xTitle || this.data.yTitle) {\n            ctx.textAlign = 'center'\n            ctx.textBaseline = 'bottom'\n            ctx.fillStyle = Theme.text\n\n            if (this.data.xTitle)\n                ctx.fillText(this.data.xTitle,\n                    this.#paddings.left + (this.canvas.width - this.#paddings.left - this.#paddings.right) / 2,\n                    this.canvas.height - 4)\n\n            if (this.data.yTitle) {\n                ctx.rotate(-Math.PI / 2)\n\n                ctx.textBaseline = 'top'\n\n                ctx.fillText(this.data.yTitle,\n                    -(this.#paddings.top + (this.canvas.height - this.#paddings.top - this.#paddings.bottom) / 2),\n                    8)\n\n                ctx.resetTransform()\n            }\n        }\n\n        ctx.textAlign = 'center'\n        ctx.textBaseline = 'top'\n\n        const step = this.#x.step,\n            xYPos = this.canvas.height - this.#paddings.bottom\n\n        let xCounter = 0,\n            acc = this.#paddings.left + step / 2\n\n        for (let i = 0; i < this.#allValuesX.length + 1; i++)\n            this.#labelsX.trySet(\n                Math.round(this.#paddings.left + i * this.#x.step),\n                Formatter.format(this.#allValuesX[i], this.data.xType)\n            )\n\n        const maxLabelWidth = Math.max(\n            ...[...this.#labelsX.values()].map(label => Math.ceil(Helper.stringWidth(label)))\n        ) + 10\n        const maxCount = Math.floor(\n            (this.canvas.width - this.#paddings.left - this.#paddings.right) / maxLabelWidth\n        )\n        const renderStep = Math.ceil(1 / (maxCount / this.#allValuesX.length))\n\n        while (acc < this.canvas.width - this.#paddings.right) {\n            if (xCounter % renderStep == 0) {\n                ctx.fillStyle = Theme.text + 'b7'\n\n                ctx.fillText(\n                    this.#labelsX.get(Math.round(acc - this.#x.step / 2)) ?? '',\n                    acc,\n                    xYPos + axisLabelOffset / 2\n                )\n            }\n\n            acc += step\n            xCounter++\n        }\n\n        ctx.textAlign = 'right'\n        ctx.textBaseline = 'middle'\n\n        const yCount = this.#y.count > 10 ? 10 : this.#y.count\n\n        let yCounter = isContainsBar ? 1 : 0,\n            yStep = this.#allValuesY.length / yCount\n\n        for (let i = isContainsBar ? 1 : 0; i < this.#allValuesY.length + 1; i++) {\n            const labelY = this.canvas.height - yCounter * yStep * this.#y.step - this.#paddings.bottom,\n                labelYAsKey = Math.round(this.canvas.height - i * this.#y.step - this.#paddings.bottom)\n\n            if (!this.#labelsY.get(labelYAsKey))\n                this.#labelsY.set(labelYAsKey,\n                    Formatter.number(this.#y.min + (i + (isContainsBar ? -1 : 0)) * (this.#y.max - this.#y.min) / this.#y.count))\n\n            if (i >= yCounter * yStep) {\n                const label = {\n                    x: this.#paddings.left,\n                    y: labelY,\n                    label: this.#yAxisStep >= 1\n                           ? Math.round((this.#y.min + (yCounter * yStep + (isContainsBar ? -1 : 0)) * (this.#y.max - this.#y.min) / this.#y.count) / this.#yAxisStep) * this.#yAxisStep\n                           : Math.round(this.#y.min + (yCounter * yStep + (isContainsBar ? -1 : 0)) * (this.#y.max - this.#y.min) / this.#y.count / this.#yAxisStep) * this.#yAxisStep\n                }\n\n                if (label.label == -0)\n                    label.label = 0\n\n                let postfix = ''\n\n                if (this.data.shortLabels) {\n                    const countOfTens = Math.floor(label.label.toString().length / 4)\n\n                    if (countOfTens > 0) {\n                        label.label /= Math.pow(1000, countOfTens)\n\n                        postfix = [\n                            TextResources.thousandShort,\n                            TextResources.millionShort,\n                            TextResources.billionShort\n                        ][countOfTens - 1]\n                    }\n                }\n\n                ctx.fillText(Formatter.number(label.label) + postfix,\n                    label.x - axisLabelOffset,\n                    label.y + (isContainsBar ? this.#y.step / 2 : 0))\n\n                yCounter++\n            }\n        }\n\n        ctx.beginPath()\n\n        ctx.strokeStyle = Theme.line\n        ctx.lineWidth = 1\n\n        const offset = .5,\n            isBar = this.data.values.filter(v => v.type == PlotType.Bar).length > 0\n\n        ctx.moveTo(this.#paddings.left - (isBar ? offset : 0),\n            this.canvas.height - this.#paddings.bottom + (isBar ? -offset : offset))\n\n        if (isBar)\n            ctx.lineTo(this.#paddings.left - offset, this.#paddings.top)\n        else\n            ctx.lineTo(this.canvas.width - this.#paddings.right, this.canvas.height - this.#paddings.bottom + offset)\n\n        ctx.stroke()\n\n        if (this.canvas.width > 0 && this.canvas.height > 0)\n            createImageBitmap(ctx.getImageData(0, 0, this.canvas.width, this.canvas.height))\n                .then(res => this.#base = res)\n    }\n\n    #renderBackLines() {\n        if (this.data.simple)\n            return\n\n        const ctx = Canvas.getContext(this.canvas)\n\n        if (this.#backLines) {\n            ctx.putImageData(this.#backLines, 0, 0)\n            return\n        }\n\n        ctx.fillStyle = Theme.canvasBackground\n        ctx.fillRect(0, 0, this.canvas.width, this.canvas.height)\n\n        const axisLineColor = Theme.lineAxis\n\n        const isContainsBar = this.data.values.filter(s => s.type == PlotType.Bar).length > 0\n\n        if (isContainsBar) {\n            const step = this.#x.step,\n                xYPos = this.canvas.height - this.#paddings.bottom\n\n            let xCounter = 0,\n                acc = this.#paddings.left + step / 2\n\n            for (let i = 0; i < this.#allValuesX.length + 1; i++)\n                this.#labelsX.trySet(\n                    Math.round(this.#paddings.left + i * this.#x.step),\n                    Formatter.format(this.#allValuesX[i - 1], this.data.xType)\n                )\n\n            const maxLabelWidth = Math.max(\n                ...[...this.#labelsX.values()].map(label => Math.ceil(Helper.stringWidth(label)))\n            ) + 10\n            const maxCount = Math.floor(\n                (this.canvas.width - this.#paddings.left - this.#paddings.right) / maxLabelWidth\n            )\n            const renderStep = Math.ceil(1 / (maxCount / this.#allValuesX.length))\n\n            while (acc < this.canvas.width - this.#paddings.right) {\n                if (xCounter % renderStep == 0) {\n                    ctx.beginPath()\n\n                    ctx.moveTo(acc, xYPos)\n                    ctx.lineTo(acc, this.#paddings.top)\n\n                    ctx.lineWidth = 1\n                    ctx.strokeStyle = axisLineColor\n                    ctx.setLineDash([6, 6])\n                    ctx.stroke()\n                }\n\n                acc += step\n                xCounter++\n            }\n        }\n\n        ctx.textAlign = 'right'\n        ctx.textBaseline = 'middle'\n\n        const yCount = this.#y.count > 10 ? 10 : this.#y.count\n\n        let yCounter = isContainsBar ? 1 : 0,\n            yStep = this.#allValuesY.length / yCount\n\n        for (let i = isContainsBar ? 1 : 0; i < this.#allValuesY.length + 1; i++) {\n            const labelY = this.canvas.height - yCounter * yStep * this.#y.step - this.#paddings.bottom\n\n            if (i >= yCounter * yStep) {\n                const label = {\n                    x: this.#paddings.left,\n                    y: labelY\n                }\n\n                if (this.data.values.filter(s => s.type.isAnyEquals(PlotType.Column, PlotType.StackingColumn, PlotType.Line)).length > 0) {\n                    ctx.beginPath()\n\n                    ctx.moveTo(label.x, label.y)\n                    ctx.lineTo(this.canvas.width - this.#paddings.right, label.y)\n\n                    ctx.lineWidth = 1\n                    ctx.strokeStyle = axisLineColor\n                    ctx.setLineDash([6, 6])\n                    ctx.stroke()\n                }\n\n                yCounter++\n            }\n        }\n\n        if (this.canvas.width > 0 && this.canvas.height > 0)\n            this.#backLines = ctx.getImageData(0, 0, this.canvas.width, this.canvas.height)\n    }\n\n    #calculateSizes() {\n        let xValues = this.data.values.flatMap(s => s.values.map(p => p.x)),\n            yValues = this.data.values.flatMap(s => s.values.map(p => p.y))\n\n        const isDate = this.data.xType == PlotAxisType.Date\n\n        if (isDate) {\n            let tempDate = new Date(Math.min(...(<number[]>xValues)))\n\n            while (tempDate.getTime() < Math.max(...(<number[]>xValues))) {\n                if (!xValues.includes(tempDate.getTime()))\n                    xValues.push(new Date(tempDate.getTime()))\n\n                tempDate = tempDate.addDays(1)\n            }\n\n            xValues.sort((a, b) => a < b ? -1 : 1)\n        }\n\n        yValues.sort((a, b) => b > a ? -1 : 1)\n\n        this.#allValuesX = [...new Set(xValues.filter(x => x != undefined).map(x => isDate ? x.toString() : x))]\n        this.#allValuesY = [...new Set(yValues.filter(y => y != undefined))]\n\n        this.#x = {\n            min: Math.min(...(<number[]>xValues)),\n            max: Math.max(...(<number[]>xValues)),\n            unit: (Math.abs(Math.min(...(<number[]>xValues))) + Math.abs(Math.max(...(<number[]>xValues)))) / (this.#allValuesX.length - 1),\n            step: (this.canvas.width - this.#paddings.left - this.#paddings.right) / this.#allValuesX.length,\n            minStep: 0,\n            count: this.#allValuesX.length\n        }\n\n        let yMin = Math.min(...(<number[]>yValues))\n        if (yMin > 0)\n            yMin = 0\n\n        this.#y = {\n            min: yMin,\n            max: this.data.yMax ?? Math.max(...(<number[]>yValues)),\n            unit: (Math.abs(yMin) + Math.abs(this.data.yMax ?? Math.max(...(<number[]>yValues)))) / (this.#allValuesY.length - 1),\n            step: (this.canvas.height - this.#paddings.top - this.#paddings.bottom) / this.#allValuesY.length,\n            minStep: 0,\n            count: this.#allValuesY.length\n        }\n\n        let stackingColumns = this.data.values.filter(s => s.type == PlotType.StackingColumn)\n\n        let max\n\n        if (stackingColumns.length > 0) {\n            let values = stackingColumns.map(s => s.values.flatMap(v => +v.y))\n\n            max = this.#y.max\n\n            for (let i = 0; i < values[0].length; i++) {\n                let sum = 0\n\n                for (const v of values)\n                    sum += v[i]\n\n                if (sum > max)\n                    max = sum\n            }\n\n            this.#y.max = max > this.data.yMax ? this.data.yMax : max\n            this.#y.unit = (Math.abs(this.#y.min) + Math.abs(this.#y.max)) / (this.#allValuesY.length - 1)\n        }\n\n        const yMaxWidth = Helper.stringWidth(Formatter.number(this.#y.max))\n        if (yMaxWidth > this.#paddings.left - 40 && !this.data.simple) {\n            this.#paddings.left += yMaxWidth - this.#paddings.left + 40\n            this.#x.step = (this.canvas.width - this.#paddings.left - this.#paddings.right) / this.#allValuesX.length\n        }\n\n        this.#yAxisStep = Math.abs(this.#y.min) + Math.abs(this.#y.max)\n\n        if (.5 <= this.#yAxisStep && this.#yAxisStep < 1)\n            this.#yAxisStep = .05\n        else if (1 <= this.#yAxisStep && this.#yAxisStep < 10)\n            this.#yAxisStep = .1\n        else if (10 <= this.#yAxisStep && this.#yAxisStep < 100)\n            this.#yAxisStep = 2\n        else if (100 <= this.#yAxisStep && this.#yAxisStep < 1000)\n            this.#yAxisStep = 20\n        else if (1000 <= this.#yAxisStep && this.#yAxisStep < 10000)\n            this.#yAxisStep = 50\n        else if (10000 <= this.#yAxisStep && this.#yAxisStep < 100000)\n            this.#yAxisStep = 1000\n        else if (100000 <= this.#yAxisStep && this.#yAxisStep < 1000000)\n            this.#yAxisStep = 10000\n        else if (1000000 <= this.#yAxisStep && this.#yAxisStep < 10000000)\n            this.#yAxisStep = 50000\n        else\n            this.#yAxisStep = 1\n\n        if (this.#yAxisStep != 1) {\n            max = yValues.length > 10\n                  ? (this.#y.max / 10 + this.#yAxisStep - (this.#y.max / 10) % this.#yAxisStep) * 10\n                  : Math.ceil(this.#y.max / this.#yAxisStep) * this.#yAxisStep\n\n            this.#y.max = max > this.data.yMax ? this.data.yMax : max\n            this.#y.unit = (Math.abs(this.#y.min) + Math.abs(this.#y.max)) / this.#allValuesY.length\n        }\n\n        this.#plot = {\n            width: this.canvas.width - this.#paddings.left - this.#paddings.right,\n            height: this.canvas.height - this.#paddings.top - this.#paddings.bottom\n        } as DOMRect\n\n        this.#x.minStep = this.#plot.width * 0.002\n        this.#y.minStep = this.#plot.height * 0.002\n    }\n\n    prepareSettings() {\n        super.prepareSettings()\n\n        this.#base = undefined\n        this.#backLines = undefined\n\n        this.data.values = this.data.values.map(v => new PlotSeries(v))\n\n        if (this.data.values.filter(v => v.type == PlotType.Bar).length > 0) {\n            for (let series of this.data.values) {\n                for (let item of series.values) {\n                    const x = item.x\n                    item['x'] = item.y\n                    item['y'] = x\n                }\n\n                series.values.sort((a, b) => b.x > a.x ? 1 : -1)\n            }\n        }\n\n        for (let item of this.data.values) {\n            item.disabled = !item.values\n            item.type ??= PlotType.Line\n\n            for (let it of item.values) {\n                it.id = Helper.guid()\n\n                if (this.data.xType == PlotAxisType.Date) {\n                    if (Helper.isISOString(it.x as string))\n                        it.x = new Date(it.x)\n                    else\n                        console.warn(`${ it.x } is not a date in ISO format.`)\n                }\n            }\n        }\n\n        this.#paddings = {\n            top: 30,\n            right: 40,\n            bottom: 50,\n            left: 80\n        }\n\n        if (this.data.simple)\n            this.#paddings = {\n                top: 10,\n                right: 10,\n                bottom: 10,\n                left: 10\n            }\n\n        if (this.settings.title)\n            this.#paddings.top += Constants.Values.titleOffset\n\n        this.tooltip = new Tooltip(this.canvas, this.settings)\n\n        this.#labelsX = new Map()\n        this.#labelsY = new Map()\n    }\n\n    initDropdown() {\n        super.initDropdown()\n\n        this.dropdown = new Dropdown(this.canvas,\n            {\n                x: -10,\n                y: 10,\n                icon: Icon.ThreeLines,\n                items: [\n                    {\n                        text: TextResources.exportPNG,\n                        action: () => {\n                            Export.asPng(this.canvas, this.settings.title)\n                        }\n                    },\n                    {\n                        text: TextResources.exportCSV,\n                        action: () => {\n                            Export.asCsv(Decomposition.toTable(PlotData.getRows(this.data)), this.settings.title)\n                        }\n                    },\n                    {\n                        isDivider: true\n                    } as DropdownItem,\n                    {\n                        text: TextResources.decomposeToTable,\n                        action: () => {\n                            new Modal(Decomposition.toTable(PlotData.getRows(this.data))).open()\n                        }\n                    }\n                ]\n            })\n    }\n}","export class Dates {\n    static minDate = new Date(2000, 1, 1)\n}","import { Theme } from 'Theme'\n\nexport abstract class TextStyles {\n    static title(context: CanvasRenderingContext2D) {\n        context.fillStyle = Theme.text\n        context.textAlign = 'center'\n        context.textBaseline = 'middle'\n        context.font = '20px sans-serif'\n    }\n\n    static regular(context: CanvasRenderingContext2D) {\n        context.fillStyle = Theme.text\n        context.textAlign = 'center'\n        context.textBaseline = 'middle'\n        context.font = '14px sans-serif'\n    }\n\n    static large(context: CanvasRenderingContext2D) {\n        context.fillStyle = Theme.text\n        context.textAlign = 'center'\n        context.textBaseline = 'middle'\n        context.font = '16px sans-serif'\n    }\n\n    static tooltip(context: CanvasRenderingContext2D) {\n        context.font = '14px sans-serif'\n        context.textAlign = 'start'\n        context.textBaseline = 'alphabetic'\n    }\n\n    static circularLabel(context: CanvasRenderingContext2D, isRight: boolean) {\n        context.textAlign = isRight ? 'start' : 'end'\n        context.textBaseline = 'alphabetic'\n        context.font = '14px sans-serif'\n    }\n}","import { ChartSettings } from 'types/ChartSettings'\nimport { Animations } from 'Animations'\nimport { Tooltip } from 'Tooltip'\nimport { Dropdown } from 'Dropdown'\nimport { Chart } from 'Chart'\nimport { Canvas } from 'helpers/Canvas'\nimport { Events, RenderState, Tag } from 'static/Enums'\nimport { Styles } from 'static/constants/Styles'\nimport { Theme } from 'Theme'\n\nexport class Renderable {\n    node: HTMLElement\n\n    canvas: HTMLCanvasElement\n\n    settings: ChartSettings\n\n    animations: Animations\n\n    tooltip: Tooltip\n\n    protected state: RenderState = RenderState.Init\n\n    protected canvasPosition: DOMRect\n\n    protected onMouseMoveEvent: MouseEvent\n\n    protected onClickEvent: MouseEvent | undefined\n\n    protected onContextMenuEvent: MouseEvent | undefined\n\n    protected contextMenu: Dropdown | undefined\n\n    constructor(chart: Chart) {\n        this.node = chart.node\n        this.settings = chart.settings\n        this.animations = new Animations()\n\n        this.canvas = document.createElement(Tag.Canvas)\n\n        this.canvas.style.imageRendering = Styles.ImageRendering.Pixelated\n\n        this.node.append(this.canvas)\n\n        this.initAnimations()\n    }\n\n    render() {\n        const ctx = Canvas.getContext(this.canvas)\n\n        ctx.fillStyle = Theme.canvasBackground\n        ctx.fillRect(0, 0, this.canvas.width, this.canvas.height)\n    }\n\n    refresh() {\n        this.tooltip.refresh()\n        this.state = this.settings.disableInitAnimation ? RenderState.Idle : RenderState.Init\n    }\n\n    resetMouse() {\n        this.onMouseMoveEvent = new MouseEvent(Events.MouseMove)\n        this.onClickEvent = new MouseEvent(Events.Click)\n        this.onContextMenuEvent = undefined\n    }\n\n    initAnimations() {\n        this.tooltip = new Tooltip(this.canvas, this.settings)\n\n        this.canvasPosition = this.canvas.getBoundingClientRect()\n\n        this.canvasPosition.x += scrollX\n        this.canvasPosition.y += scrollY\n\n        if (this.state == RenderState.Init && !this.settings.disableInteractions) {\n            this.canvas.onmousemove = event => this.onMouseMoveEvent = event\n            this.canvas.onclick = event => this.onClickEvent = event\n            this.canvas.oncontextmenu = event => {\n                event.preventDefault()\n                this.contextMenu = undefined\n                if (this.onContextMenuEvent)\n                    this.onContextMenuEvent = undefined\n                else\n                    this.onContextMenuEvent = event\n            }\n            this.canvas.onmouseleave = () => this.onMouseMoveEvent = new MouseEvent(Events.MouseMove)\n        }\n    }\n\n    destroy() {\n        this.canvas.remove()\n    }\n}","import { TreeData } from 'types/data/TreeData'\nimport { Renderer } from 'types/base/Renderer'\nimport { Sector } from 'types/Sector'\nimport * as Helper from 'Helper'\nimport { DropdownItem } from 'types/DropdownItem'\nimport { Dropdown } from 'Dropdown'\nimport { Chart } from 'Chart'\nimport { TextStyles } from 'helpers/TextStyles'\nimport { TooltipValue } from 'types/TooltipValue'\nimport { Export } from 'Export'\nimport { Decomposition } from 'Decomposition'\nimport { Modal } from 'Modal'\nimport { TextResources } from 'static/TextResources'\nimport { Canvas } from 'helpers/Canvas'\nimport { TreeCell } from 'types/TreeCell'\nimport { Formatter } from 'helpers/Formatter'\nimport { AnimationType, Icon, RenderState } from 'static/Enums'\nimport * as Constants from 'static/constants/Index'\n\nexport class TreeRenderer extends Renderer<TreeData> {\n    constructor(chart: Chart) {\n        super(chart)\n\n        this.settings.enableLegend = false\n    }\n\n    render() {\n        super.render()\n\n        if (this.data.values.filter(v => v.value > 0).length == 0) {\n            this.#drawEmpty()\n            requestAnimationFrame(this.render.bind(this))\n            return\n        }\n\n        const titleOffset = this.settings.title ? Constants.Values.titleOffset : 0\n\n        const maxWidth = this.canvas.width - this.data.padding * 2,\n            maxHeight = this.canvas.height - this.data.padding * 2 - titleOffset\n\n        let sum = this.data.values.reduce((acc, cur) => acc + cur.value, 0),\n            totalSquare = maxWidth * maxHeight\n\n        let x = this.data.padding,\n            y = this.data.padding + titleOffset\n\n        let minX = this.data.padding,\n            minY = this.data.padding + titleOffset\n\n        let tooltipCell: TreeCell | undefined = undefined\n        let contextMenuData = undefined\n\n        const ctx = Canvas.getContext(this.canvas)\n\n        let isVertical = true\n        for (let i = 0; i < this.data.values.length; i++) {\n            const item = this.data.values[i]\n\n            const remainWidth = maxWidth - (x - this.data.padding),\n                remainHeight = maxHeight - (y - this.data.padding - titleOffset)\n\n            let cells: TreeCell[] = [\n                {\n                    color: item.color,\n                    label: item.label,\n                    s: item.value / sum * totalSquare,\n                    value: item.value,\n                    id: item.id,\n                    x: x,\n                    y: y\n                } as TreeCell\n            ]\n\n            if (i + 1 <= this.data.values.length - 1) {\n                const next = this.data.values[i + 1]\n\n                cells.push({\n                    color: next.color,\n                    label: next.label,\n                    s: next.value / sum * totalSquare,\n                    value: next.value,\n                    id: next.id,\n                    x: x,\n                    y: y\n                } as TreeCell)\n\n                i++\n            }\n\n            const isSingle = cells.length == 1,\n                isLast = i == this.data.values.length - 1\n\n            if (isVertical) {\n                for (let j = 1; j <= remainWidth + i * i; j++) {\n                    const w = remainWidth - j,\n                        h1 = cells[0].s / w,\n                        h2 = isSingle ? 0 : cells[1].s / w\n\n                    if (h1 + h2 >= remainHeight) {\n                        cells[0].w = Math.floor(w)\n                        cells[0].h = Math.floor(h1)\n\n                        if (!isSingle) {\n                            cells[1].w = Math.floor(w)\n                            cells[1].h = remainHeight - cells[0].h\n\n                            cells[1].y += cells[0].h\n                        }\n\n                        break\n                    }\n                }\n            } else {\n                for (let j = 1; j <= remainHeight + i * i; j++) {\n                    const h = remainHeight - j,\n                        w1 = cells[0].s / h,\n                        w2 = isSingle ? 0 : cells[1].s / h\n\n                    if (w1 + w2 >= remainWidth) {\n                        cells[0].h = Math.floor(h)\n                        cells[0].w = Math.floor(w1)\n\n                        if (!isSingle) {\n                            cells[1].h = Math.floor(h)\n                            cells[1].w = remainWidth - cells[0].w\n\n                            cells[1].x += cells[0].w\n                        }\n\n                        break\n                    }\n                }\n            }\n\n            for (const cell of cells) {\n                if (isLast) {\n                    if (isVertical) {\n                        cell.w = remainWidth\n                        if (isSingle)\n                            cell.h = remainHeight\n                    } else {\n                        cell.h = remainHeight\n                        if (isSingle)\n                            cell.w = remainWidth\n                    }\n                }\n\n                ctx.beginPath()\n\n                ctx.fillStyle = cell.color\n\n                const cellInit = this.state != RenderState.Init\n                                 && !this.animations.contains(cell.id, AnimationType.Init)\n\n                const cellIndex = i + cells.indexOf(cell) + (isLast && isSingle ? 1 : 0),\n                    duration = 260\n\n                const getPrev = () => {\n                    let acc = 0\n                    for (let i = 0; i < cellIndex; i++)\n                        acc += duration - duration * (i / this.data.values.length) / Math.E\n\n                    return acc\n                }\n\n                const initAnimationDuration = duration - duration * cellIndex / (this.data.values.length + 1)\n\n                if (!cellInit) {\n                    this.animations.add(cell.id,\n                        AnimationType.Init,\n                        {\n                            duration: getPrev(),\n                            continuous: true,\n                            body: transition => {\n                                if (transition * getPrev() - getPrev() + initAnimationDuration < 0)\n                                    return ctx.fillStyle += '00'\n\n                                transition = (transition * getPrev() - getPrev() + initAnimationDuration) / initAnimationDuration\n\n                                const center = {\n                                    x: cell.x + cell.w / 2,\n                                    y: cell.y + cell.h / 2\n                                }\n\n                                const minSize = .7,\n                                    rest = 1 - minSize\n\n                                ctx.translate(center.x - center.x * (minSize + transition * rest),\n                                    center.y - center.y * (minSize + transition * rest))\n                                ctx.scale((minSize + transition * rest), (minSize + transition * rest))\n\n                                let opacity = Math.round(255 * transition).toString(16)\n\n                                if (opacity.length < 2)\n                                    opacity = 0 + opacity\n\n                                ctx.fillStyle = cell.color + opacity\n                            }\n                        })\n                } else {\n                    const translate = (transition: number, event: AnimationType) => {\n                        const center = {\n                            x: cell.x + cell.w / 2,\n                            y: cell.y + cell.h / 2\n                        }\n\n                        const margin = 12,\n                            minSize = cell.w > cell.h\n                                      ? 1 - margin / cell.w\n                                      : 1 - margin / cell.h,\n                            rest = 1 - minSize\n\n                        ctx.translate(center.x - center.x * (minSize + transition * rest),\n                            center.y - center.y * (minSize + transition * rest))\n                        ctx.scale(minSize + transition * rest, minSize + transition * rest)\n\n                        this.animations.reload(cell.id, event)\n                    }\n\n                    if (this.#isInCell(cell)\n                        && !tooltipCell) {\n                        tooltipCell = cell\n                        contextMenuData = cell.data\n\n                        this.animations.add(cell.id,\n                            AnimationType.MouseOver,\n                            {\n                                duration: Constants.Animations.tree,\n                                backward: true,\n                                body: transition => {\n                                    translate(transition, AnimationType.MouseLeave)\n                                }\n                            })\n                    } else {\n                        this.animations.add(cell.id,\n                            AnimationType.MouseLeave,\n                            {\n                                timer: Constants.Dates.minDate,\n                                duration: Constants.Animations.tree,\n                                body: transition => {\n                                    translate(transition, AnimationType.MouseOver)\n                                }\n                            })\n                    }\n                }\n\n                const gap = 4\n\n                ctx.roundRect(x + gap, y + gap, cell.w - gap, cell.h - gap, gap * 2)\n                ctx.fill()\n\n                if (cell.label\n                    && Helper.stringWidth(cell.label) < cell.w - gap\n                    && cell.h - gap > 16\n                    && !this.animations.contains(cell.id, AnimationType.Init)) {\n                    ctx.beginPath()\n                    TextStyles.large(ctx)\n                    ctx.fillStyle = !Helper.isColorVisible(cell.color, '#ffffff')\n                                    ? '#000000'\n                                    : '#ffffff'\n                    ctx.fillText(cell.label,\n                        x + 2 + cell.w / 2,\n                        y + 2 + cell.h / 2)\n                }\n\n                ctx.resetTransform()\n\n                if (isVertical)\n                    y += cell.h\n                else\n                    x += cell.w\n\n                totalSquare -= cell.w * cell.h\n                sum -= cell.value\n            }\n\n            if (isVertical) {\n                x += cells[0].w\n                y = minY\n            } else {\n                y += cells[0].h\n                x = minX\n            }\n\n            minX = x\n            minY = y\n\n            isVertical = !isVertical\n        }\n\n        this.tooltip.render(!!tooltipCell && !this.dropdown?.isActive,\n            this.onMouseMoveEvent,\n            [\n                new TooltipValue(`${ tooltipCell?.label }: ${ Formatter.number(tooltipCell?.value) }`)\n            ],\n            this.data.values.find(v => v.id == tooltipCell?.id))\n\n        if (!this.isDestroy)\n            requestAnimationFrame(this.render.bind(this))\n\n        this.state = RenderState.Idle\n\n        super.renderDropdown()\n\n        if (tooltipCell || this.contextMenu)\n            this.renderContextMenu(contextMenuData)\n        else\n            this.onContextMenuEvent = undefined\n    }\n\n    #isInCell(cell: TreeCell) {\n        if (!this.onMouseMoveEvent || !cell)\n            return false\n\n        const mouse = this.getMousePosition(this.onMouseMoveEvent)\n\n        return !(this.dropdown?.isActive ?? false)\n               && cell.x <= mouse.x && mouse.x <= cell.x + cell.w\n               && cell.y <= mouse.y && mouse.y <= cell.y + cell.h\n    }\n\n    #drawEmpty() {\n        const ctx = Canvas.getContext(this.canvas)\n\n        TextStyles.regular(ctx)\n        ctx.fillText(TextResources.treeMapIsEmpty,\n            this.canvas.width / 2,\n            this.canvas.height / 2)\n    }\n\n    refresh() {\n        super.refresh()\n    }\n\n    resize() {\n        super.resize()\n\n        this.initAnimations()\n        this.animations.clear()\n    }\n\n    prepareSettings() {\n        super.prepareSettings()\n\n        this.data.values = this.data.values.map(v => new Sector(v))\n\n        this.data.values = this.data.values.filter(v => v.value > 0)\n\n        this.data.values.sort((a, b) => (b.value ?? 0) - (a.value ?? 0))\n\n        this.calculateColors(true)\n\n        for (let item of this.data.values) {\n            item.disabled = !item.value\n            item.value ??= 0\n        }\n    }\n\n    initDropdown() {\n        super.initDropdown()\n\n        this.dropdown = new Dropdown(this.canvas,\n            {\n                x: -10,\n                y: 10,\n                icon: Icon.ThreeLines,\n                items: [\n                    {\n                        text: TextResources.exportCSV,\n                        action: () => {\n                            Export.asCsv(Decomposition.toTable(TreeData.getRows(this.data)), this.settings.title)\n                        }\n                    },\n                    {\n                        isDivider: true\n                    } as DropdownItem,\n                    {\n                        text: TextResources.decomposeToTable,\n                        action: () => {\n                            new Modal(Decomposition.toTable(TreeData.getRows(this.data))).open()\n                        }\n                    }\n                ]\n            })\n    }\n}","import { TableData } from 'types/TableData'\nimport * as Helper from 'Helper'\nimport { Value } from 'types/base/Value'\nimport { ChartSettings } from 'types/ChartSettings'\nimport { Formatter } from 'helpers/Formatter'\nimport { Styles } from 'static/constants/Styles'\nimport { Tag } from 'static/Enums'\n\nexport class Decomposition {\n    static toTable(values: TableData) {\n        let table = document.createElement(Tag.Table)\n\n        table.classList.add('o-table')\n\n        let totals = new Map<string, number>()\n        let rows = '',\n            headers = '',\n            index = 0\n\n        let valuesMap = new Map<string, Map<string, any>>()\n\n        for (const tableValue of values.values) {\n            let allColumns = new Map<string, any>()\n\n            for (const header of values.headers)\n                allColumns.set(header.value, 0)\n\n            for (const [key, value] of tableValue.values)\n                allColumns.set(key, value)\n\n            let indexSpaces = ''\n            for (let i = 0; i < index; i++)\n                indexSpaces += ' '\n\n            valuesMap.set(tableValue.name + indexSpaces, allColumns)\n\n            index++\n        }\n\n        for (const tableHeader of values.headers)\n            headers += `\n                <th>\n                    ${ tableHeader.display }\n                </th>\n            `\n\n        for (const [key, value] of valuesMap) {\n            let columns = ''\n\n            for (const [vKey, vValue] of value) {\n                columns += `\n                    <td>\n                        ${ vValue == undefined ? '' : Formatter.number(vValue) }\n                    </td>\n                `\n\n                if (totals.has(vKey)) {\n                    let totalValue = +(totals.get(vKey) ?? 0)\n                    totals.set(vKey, totalValue + +vValue)\n                } else {\n                    totals.set(vKey, vValue)\n                }\n            }\n\n            rows += `\n                <tr>\n                    <td class=\"o-table-label\">\n                        ${ key.trim() }\n                    </td>\n                    \n                    ${ columns } \n                </tr>\n            `\n        }\n\n        let totalColumns = ''\n\n        for (const [, value] of totals)\n            totalColumns += `\n                <td>\n                    ${ value == undefined ? '' : Formatter.number(value) }\n                </td>\n            `\n\n        table.innerHTML = `\n            <thead>\n                <tr>\n                    <th></th>\n                \n                    ${ headers }\n                </tr>\n            </thead>\n        \n            <tbody>\n                ${ rows }\n            </tbody>\n            \n            <tfoot>\n                <tr>\n                    <td></td>\n                \n                    ${ totalColumns }\n                </tr>\n            </tfoot>\n        `\n\n        return table\n    }\n\n    static toChart<T extends Value>(settings: ChartSettings, values: T[]) {\n        let container = document.createElement(Tag.Div),\n            div = document.createElement(Tag.Div),\n            script = document.createElement(Tag.Script),\n            id = Helper.guid()\n\n        container.style.display = Styles.Display.Flex\n        container.style.height = '100%'\n\n        div.id = id\n        div.style.flexGrow = '1'\n\n        let cloneSettings = JSON.parse(JSON.stringify(settings)) as ChartSettings\n\n        if (cloneSettings.title)\n            cloneSettings.title = cloneSettings.title + ' (Other)'\n        cloneSettings.data.values = values\n        cloneSettings.minWidth = undefined\n        cloneSettings.minHeight = undefined\n\n        script.innerHTML = `\n            new OCharts.chart(document.getElementById('${ id }'), ${ JSON.stringify(cloneSettings) })\n                .render()\n        `\n\n        container.append(div, script)\n\n        return container\n    }\n}","export { Animations } from './Animations'\nexport { Dates } from './Dates'\nexport { Values } from './Values'","import { Renderer } from 'types/base/Renderer'\nimport { GaugeData } from 'types/data/GaugeData'\nimport * as Helper from 'Helper'\nimport { Sector } from 'types/Sector'\nimport { Dropdown } from 'Dropdown'\nimport { Point } from 'types/Point'\nimport { Chart } from 'Chart'\nimport { Theme } from 'Theme'\nimport { TextStyles } from 'helpers/TextStyles'\nimport { TooltipValue } from 'types/TooltipValue'\nimport { Export } from 'Export'\nimport { Formatter } from 'helpers/Formatter'\nimport { Canvas } from 'helpers/Canvas'\nimport { TextResources } from 'static/TextResources'\nimport { AnimationType, Icon, RenderState } from 'static/Enums'\n\nexport class GaugeRenderer extends Renderer<GaugeData> {\n    #radius: number\n\n    #center: Point\n\n    constructor(chart: Chart) {\n        super(chart)\n\n        this.settings.enableLegend = false\n    }\n\n    render() {\n        super.render()\n\n        this.#draw()\n\n        const value = this.data.values[0]\n        this.tooltip.render(this.#isInsideSector(this.onMouseMoveEvent, value) && !this.dropdown?.isActive,\n            this.onMouseMoveEvent,\n            [\n                new TooltipValue(`${ value?.label }: ${ Formatter.number(value?.current) }`)\n            ],\n            value)\n\n        if (!this.isDestroy)\n            requestAnimationFrame(this.render.bind(this))\n\n        this.state = RenderState.Idle\n\n        super.renderDropdown()\n    }\n\n    #draw() {\n        const ctx = Canvas.getContext(this.canvas)\n\n        const value = this.data.values[0] ?? { id: Helper.guid() }\n\n        if (this.state == RenderState.Init || this.animations.contains(value.id, AnimationType.Init))\n            this.animations.add(value.id,\n                AnimationType.Init,\n                {\n                    duration: 450,\n                    continuous: true,\n                    body: transition => {\n                        value.current = value.value * transition\n                    }\n                })\n\n        ctx.beginPath()\n\n        ctx.strokeStyle = value.color\n        ctx.lineCap = 'round'\n        ctx.lineWidth = 40\n\n        const piece = value.current / this.data.max,\n            angle = (isNaN(piece) ? 1 : piece) * Math.PI\n\n        if (value.value) {\n            ctx.arc(this.#center.x, this.#center.y, this.#radius, Math.PI, angle - Math.PI)\n            ctx.stroke()\n        }\n\n        ctx.beginPath()\n\n        ctx.lineWidth = 1\n        ctx.lineCap = 'square'\n\n        let localAccumulator = 0,\n            localAngle = Math.PI\n\n        while (localAngle >= 0) {\n            let currentAngle = localAngle - Math.PI / 10 > 0\n                               ? Math.PI / 10\n                               : localAngle\n\n            const getPoint = (offset: number) => {\n                return {\n                    x: this.#center.x + (this.#radius + offset) * Math.cos(Math.PI + localAccumulator),\n                    y: this.#center.y + (this.#radius + offset) * Math.sin(Math.PI + localAccumulator)\n                }\n            }\n\n            let point1 = getPoint(50),\n                point2 = getPoint(90),\n                point3 = getPoint(115)\n\n            const opacity = Math.PI - localAngle > angle ? '66' : 'ff'\n\n            ctx.moveTo(point1.x, point1.y)\n            ctx.lineTo(point2.x, point2.y)\n            ctx.strokeStyle = Theme.text + opacity\n            ctx.stroke()\n\n            TextStyles.regular(ctx)\n            ctx.fillStyle = Theme.text + opacity\n            ctx.fillText(Formatter.number(this.data.max - localAngle / Math.PI * this.data.max), point3.x, point3.y)\n\n            localAccumulator += currentAngle\n\n            localAngle -= Math.PI / 10\n        }\n    }\n\n    #isInsideSector(event: MouseEvent, value: Sector): boolean {\n        if (!event)\n            return false\n\n        const isAngle = (point: Point) => {\n            let a = Math.atan2(point.y - this.#center.y, point.x - this.#center.x)\n            if (a < 0)\n                a += Math.PI * 2\n\n            const piece = value.current / this.data.max,\n                angle = (isNaN(piece) ? 1 : piece) * Math.PI\n\n            return a > Math.PI && Math.PI + angle >= a\n        }\n\n        const isWithinRadius = (v: Point) => {\n            const outerRadius = this.#radius + 20,\n                innerRadius = this.#radius - 20\n\n            return v.x * v.x + v.y * v.y <= outerRadius * outerRadius\n                   && v.x * v.x + v.y * v.y >= innerRadius * innerRadius\n        }\n\n        const point = this.getMousePosition(event),\n            inner = {\n                x: point.x - this.#center.x,\n                y: point.y - this.#center.y\n            }\n\n        return !(this.dropdown?.isActive ?? false)\n               && isAngle(point)\n               && isWithinRadius(inner)\n    }\n\n    #calculateSizes() {\n        const longSide = this.canvas.width < this.canvas.height\n                         ? this.canvas.height - 250\n                         : this.canvas.width\n\n        this.#radius = longSide / 3\n\n        this.#center = {\n            x: this.canvas.width / 2,\n            y: this.canvas.height - this.#radius / 5\n        }\n    }\n\n    refresh() {\n        super.refresh()\n    }\n\n    resize() {\n        super.resize()\n\n        this.initAnimations()\n        this.#calculateSizes()\n    }\n\n    prepareSettings() {\n        super.prepareSettings()\n\n        for (let item of this.data.values) {\n            item.disabled = !item.value\n            item.value ??= 0\n        }\n\n        if (this.data.values.length > 0 && this.data.values[0].value > this.data.max)\n            this.data.values[0].value = this.data.max\n    }\n\n    initDropdown() {\n        super.initDropdown()\n\n        this.dropdown = new Dropdown(this.canvas,\n            {\n                x: -10,\n                y: 10,\n                icon: Icon.ThreeLines,\n                items: [\n                    {\n                        text: TextResources.exportPNG,\n                        action: () => {\n                            Export.asPng(this.canvas, this.settings.title)\n                        }\n                    }\n                ]\n            })\n    }\n}","import { Theme } from 'Theme'\nimport * as Helper from 'Helper'\nimport { Canvas } from 'helpers/Canvas'\nimport { Icon, Tag } from 'static/Enums'\n\nexport class Export {\n    static asPng(canvas: HTMLCanvasElement, title: string) {\n        requestAnimationFrame(() => {\n            const ctx = Canvas.getContext(canvas)\n\n            let width = Helper.stringWidth(Icon.ThreeLines) + 20,\n                height = 64\n\n            ctx.fillStyle = Theme.canvasBackground\n            ctx.fillRect(canvas.width - width, 0, width, height)\n\n            let leftEmpty = 0,\n                rightEmpty = 0\n\n            const imageData = new Uint32Array(ctx.getImageData(0, 0, canvas.width, canvas.height).data.buffer)\n\n            let isBusy = false\n\n            for (let i = 0; i < canvas.width; i++) {\n                for (let j = 0; j < canvas.height; j++) {\n                    if (Canvas.isPixelBusy(imageData[i + j * canvas.width])) {\n                        isBusy = true\n                        break\n                    }\n                }\n\n                if (isBusy)\n                    break\n\n                leftEmpty++\n            }\n\n            isBusy = false\n\n            for (let i = canvas.width; i >= 0; i--) {\n                for (let j = 0; j < canvas.height; j++) {\n                    if (Canvas.isPixelBusy(imageData[i + j * canvas.width])) {\n                        isBusy = true\n                        break\n                    }\n                }\n\n                if (isBusy)\n                    break\n\n                rightEmpty++\n            }\n\n            if (leftEmpty > 4)\n                leftEmpty -= 4\n            if (rightEmpty > 4)\n                rightEmpty -= 4\n\n            if (leftEmpty > rightEmpty)\n                leftEmpty = rightEmpty\n            if (rightEmpty > leftEmpty)\n                rightEmpty = leftEmpty\n\n            let destinationCanvas = document.createElement(Tag.Canvas)\n            destinationCanvas.width = canvas.width - leftEmpty - rightEmpty\n            destinationCanvas.height = canvas.height\n\n            const destCtx = Canvas.getContext(destinationCanvas)\n\n            destCtx.fillStyle = Theme.background\n            destCtx.fillRect(0, 0, canvas.width, canvas.height)\n\n            destCtx.drawImage(canvas, -leftEmpty, 0)\n\n            Export.saveAs((title ?? 'chart') + '.png',\n                destinationCanvas.toDataURL('image/png'))\n        })\n    }\n\n    static asCsv(table: HTMLTableElement, title: string) {\n        let rows = table.querySelectorAll('tr'),\n            csv = []\n\n        for (let i = 0; i < rows.length; i++) {\n            let row = [],\n                cols = rows[i].querySelectorAll('td, th')\n\n            for (let j = 0; j < cols.length; j++) {\n                let data = cols[j].innerHTML\n                                  .replace(/(\\r\\n|\\n|\\r)/gm, '')\n                                  .replace(/(\\s\\s)/gm, ' ')\n\n                data = data.replace(/\"/g, '\"\"')\n                row.push('\"' + data + '\"')\n            }\n\n            csv.push(row.join(','))\n        }\n\n        Export.saveAs((title ?? 'table') + '.csv',\n            csv.join('\\n'),\n            'data:text/csv;charset=utf-8,' + encodeURIComponent(csv.join('\\n')),\n            true)\n    }\n\n    static saveAs(name: string, dataURL: string, href?: string | undefined, isText?: boolean) {\n        if (window.showSaveFilePicker != undefined) {\n            const accept = isText\n                           ? { 'text/csv': '.csv' } as FilePickerAcceptType\n                           : { 'image/*': '.png' } as FilePickerAcceptType\n\n            const options = {\n                suggestedName: name,\n                types: [\n                    {\n                        accept: accept\n                    }\n                ],\n                excludeAcceptAllOption: true\n            } as SaveFilePickerOptions\n\n            function toBlob(dataURI: string) {\n                const byteString = atob(dataURI.split(',')[1]),\n                    mimeString = dataURI.split(',')[0]\n                        .split(':')[1]\n                        .split(';')[0],\n                    buffer = new ArrayBuffer(byteString.length),\n                    imageArray = new Uint8Array(buffer)\n\n                for (let i = 0; i < byteString.length; i++)\n                    imageArray[i] = byteString.charCodeAt(i)\n\n                return new Blob([buffer], { type: mimeString })\n            }\n\n            window.showSaveFilePicker(options)\n                  .then(fileHandle => {\n                      fileHandle.createWritable()\n                                .then(writableStream => {\n                                    writableStream.write(isText ? dataURL : toBlob(dataURL))\n                                                  .then(() => writableStream.close())\n                                })\n                  })\n        } else {\n            let download = document.createElement(Tag.A)\n            download.href = href ?? dataURL\n            download.download = name\n            download.click()\n        }\n    }\n}","import { PlotAxisType } from 'static/Enums'\n\nexport abstract class Formatter {\n    static number = (value: number | undefined) =>\n        value?.toLocaleString(undefined, {\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2\n        }) ?? ''\n\n    static date = (value: Date) =>\n        value.toLocaleDateString()\n\n    static text = (value: string | undefined) =>\n        value ?? ''\n\n    static format(value: any | undefined, type: PlotAxisType) {\n        switch (type) {\n            case PlotAxisType.Number:\n                return Formatter.number(value)\n\n            case PlotAxisType.Date:\n                return Formatter.date(new Date(value))\n\n            case PlotAxisType.Text:\n                return Formatter.text(value)\n        }\n    }\n\n}","import { TextStyles } from 'helpers/TextStyles'\nimport { Theme } from 'Theme'\nimport { Animations } from 'Animations'\nimport * as Helper from 'Helper'\nimport { ButtonOptions } from 'types/ButtonOptions'\nimport { Canvas } from 'helpers/Canvas'\nimport { AnimationType } from 'static/Enums'\nimport * as Constants from 'static/constants/Index'\nimport { Styles } from 'static/constants/Styles'\n\nexport class Button {\n    #canvas: HTMLCanvasElement\n\n    #options: ButtonOptions\n\n    #canvasPosition: DOMRect\n\n    animations: Animations\n\n    #isInit: boolean\n\n    #position: DOMRect\n\n    constructor(canvas: HTMLCanvasElement, options: ButtonOptions) {\n        this.#canvas = canvas\n        this.#options = options\n\n        this.animations = new Animations()\n\n        this.#initAnimations()\n    }\n\n    render(moveEvent: MouseEvent, clickEvent: MouseEvent | undefined) {\n        if (!this.#isInit)\n            this.#initAnimations()\n\n        const ctx = Canvas.getContext(this.#canvas)\n\n        ctx.beginPath()\n\n        const translate = (transition: number, event: AnimationType) => {\n            this.animations.reload('animation-button', event)\n\n            ctx.fillStyle = Helper.adjustColor(Theme.canvasBackground, -Math.round(transition * 25))\n        }\n\n        if (this.#isOnButton(moveEvent)) {\n            this.#canvas.style.cursor = Styles.Cursor.Pointer\n\n            if (clickEvent && this.#isOnButton(clickEvent)) {\n                this.#options.action()\n                clickEvent = undefined\n            }\n\n            this.animations.add('animation-button',\n                AnimationType.MouseOver,\n                {\n                    duration: 300,\n                    body: transition => {\n                        translate(transition, AnimationType.MouseLeave)\n                    }\n                })\n        } else {\n            this.animations.add('animation-button',\n                AnimationType.MouseLeave,\n                {\n                    timer: Constants.Dates.minDate,\n                    duration: 300,\n                    backward: true,\n                    body: transition => {\n                        translate(transition, AnimationType.MouseOver)\n                    }\n                })\n        }\n\n        ctx.roundRect(this.#position.x, this.#position.y, this.#position.width, this.#position.height, 4)\n        ctx.fill()\n\n        TextStyles.regular(ctx)\n        ctx.fillText(this.#options.text,\n            this.#position.x + this.#position.width / 2,\n            this.#position.y + this.#position.height / 2)\n\n        this.#isInit = true\n\n        return clickEvent\n    }\n\n    resize() {\n        this.#initAnimations()\n    }\n\n    #initAnimations() {\n        this.#canvasPosition = this.#canvas.getBoundingClientRect()\n\n        this.#canvasPosition.x += scrollX\n        this.#canvasPosition.y += scrollY\n\n        const width = Helper.stringWidth(this.#options.text) + 12,\n            height = 20\n\n        this.#position = <DOMRect>{\n            x: this.#options.x + width > this.#canvas.width\n               ? this.#canvas.width - width\n               : this.#options.x < 0\n                 ? this.#canvas.width + this.#options.x - width\n                 : this.#options.x,\n            y: this.#options.y + height > this.#canvas.height\n               ? this.#canvas.height - height\n               : this.#options.y < 0\n                 ? this.#canvas.height + this.#options.y - height\n                 : this.#options.y,\n            width: width,\n            height: height\n        }\n    }\n\n    #isOnButton(event: MouseEvent): boolean {\n        if (!event)\n            return false\n\n        let trueX = event.clientX - this.#canvasPosition.x + scrollX,\n            trueY = event.clientY - this.#canvasPosition.y + scrollY\n\n        return trueX >= this.#position.x && trueX <= this.#position.x + this.#position.width\n               && trueY >= this.#position.y && trueY <= this.#position.y + this.#position.height\n    }\n}","export enum AnimationType {\n    MouseOver,\n\n    MouseLeave,\n\n    Init,\n\n    Click,\n\n    AnotherItemOver,\n\n    AnotherItemLeave\n}\n\nexport enum Attribute {\n    Name = 'name'\n}\n\nexport enum ChartType {\n    Plot,\n\n    Circular,\n\n    Gauge,\n\n    TreeMap\n}\n\nexport enum ErrorType {\n    NullContext = 'Can\\'t find context',\n\n    ElementNotExist = 'Element does not exist'\n}\n\nexport enum Events {\n    VisibilityChanged = 'visibilitychange',\n\n    Blur = 'blur',\n\n    MouseMove = 'mousemove',\n\n    Click = 'click',\n\n    Change = 'change',\n\n    ContextMenu = 'contextmenu'\n}\n\nexport enum LegendPlace {\n    Bottom,\n\n    Left,\n\n    Top,\n\n    Right\n}\n\nexport enum LineType {\n    Solid,\n\n    Dash,\n\n    Dotted\n}\n\nexport enum PlotAxisType {\n    Number,\n\n    Date,\n\n    Text\n}\n\nexport enum PlotType {\n    Line,\n\n    AttentionLine,\n\n    Column,\n\n    Bar,\n\n    StackingColumn\n}\n\nexport enum Tag {\n    Canvas = 'canvas',\n\n    A = 'a',\n\n    Div = 'div',\n\n    Dialog = 'dialog',\n\n    Table = 'table',\n\n    Script = 'script'\n}\n\nexport enum RenderState {\n    Idle,\n\n    Init\n}\n\nexport enum Icon {\n    ThreeLines = '☰'\n}","import { Errors } from 'helpers/Errors'\nimport { ErrorType, Tag } from 'static/Enums'\n\nexport class Modal {\n    modal: HTMLDialogElement | undefined\n\n    #content: HTMLDivElement | undefined\n\n    constructor(content?: HTMLElement, size?: DOMRect) {\n        this.modal = document.createElement(Tag.Dialog)\n\n        this.modal.classList.add('o-modal')\n\n        if (size) {\n            this.modal.style.width = `${size.width}px`\n            this.modal.style.height = `${size.height}px`\n        }\n\n        this.modal.oncancel = () => this.close()\n\n        document.body.appendChild(this.modal)\n\n        this.#setHeader()\n\n        this.#setContent(content)\n    }\n\n    open() {\n        Errors.throwIsUndefined(this.modal, ErrorType.ElementNotExist)\n\n        this.modal!.showModal()\n    }\n\n    close() {\n        Errors.throwIsUndefined(this.modal, ErrorType.ElementNotExist)\n\n        this.modal!.close()\n\n        this.modal!.remove()\n\n        this.modal = undefined\n    }\n\n    #setHeader() {\n        Errors.throwIsUndefined(this.modal, ErrorType.ElementNotExist)\n\n        let closeButton = document.createElement('button')\n\n        closeButton.classList.add('o-modal-close')\n        closeButton.innerHTML = 'x'\n\n        this.modal!.appendChild(closeButton)\n\n        closeButton.onclick = () => this.close()\n    }\n\n    #setContent(content: HTMLElement | undefined) {\n        if (this.#content == undefined) {\n            this.#content = document.createElement(Tag.Div)\n\n            this.#content.classList.add('o-modal-content')\n\n            this.modal?.appendChild(this.#content)\n        }\n\n        if (content != undefined)\n            this.#content.appendChild(content)\n    }\n}","import { Value } from 'types/base/Value'\nimport { PlotPoint } from 'types/PlotPoint'\nimport { LineType, PlotType } from 'static/Enums'\n\nexport class PlotSeries extends Value {\n    values: PlotPoint[]\n\n    type: PlotType\n\n    width: number\n\n    lineType: LineType = LineType.Solid\n\n    constructor(obj: object) {\n        super()\n\n        Object.assign(this, obj)\n    }\n\n    toggle(transition: number) {\n        super.toggle(transition)\n    }\n\n    checkCondition(): boolean {\n        super.checkCondition()\n\n        return true\n    }\n\n    reset() {\n        super.reset()\n    }\n}","import { Value } from 'types/base/Value'\nimport { Renderable } from 'types/base/Renderable'\nimport * as Helper from 'Helper'\nimport { Sector } from 'types/Sector'\nimport { Point } from 'types/Point'\nimport { Theme } from 'Theme'\nimport { Chart } from 'Chart'\nimport { TextStyles } from 'helpers/TextStyles'\nimport { Canvas } from 'helpers/Canvas'\nimport { Button } from 'Button'\nimport { TextResources } from 'static/TextResources'\nimport * as Constants from 'static/constants/Index'\nimport { Styles } from 'static/constants/Styles'\nimport { AnimationType, Events, LegendPlace, RenderState } from 'static/Enums'\nimport { ChartSettings } from './types/ChartSettings'\n\nexport class Legend extends Renderable {\n    #button: Button\n\n    #offset: Point\n\n    #chart: Chart\n\n    #hoverCount: number\n\n    isDestroy: boolean = false\n\n    constructor(chart: Chart) {\n        super(chart)\n\n        this.#chart = chart\n\n        this.prepareSettings()\n    }\n\n    render() {\n        super.render()\n\n        const ctx = Canvas.getContext(this.canvas)\n\n        let nextPoint = { x: 20, y: 21 }\n\n        this.canvas.style.cursor = Styles.Cursor.Default\n\n        TextStyles.regular(ctx)\n        ctx.textAlign = 'start'\n        ctx.textBaseline = 'alphabetic'\n\n        ctx.translate(this.#offset.x, this.#offset.y)\n\n        this.#hoverCount = 0\n\n        for (const value of this.settings.data.values.filter(v => !v.hideInLegend))\n            nextPoint = this.#draw(value, nextPoint.x, nextPoint.y)\n\n        ctx.translate(-this.#offset.x, -this.#offset.y)\n\n        if (!this.isDestroy)\n            requestAnimationFrame(this.render.bind(this))\n\n        this.onClickEvent = this.#button?.render(this.onMouseMoveEvent, this.onClickEvent)\n\n        this.state = RenderState.Idle\n    }\n\n    #draw(value: Value, x: number, y: number): Point {\n        const ctx = Canvas.getContext(this.canvas)\n\n        const textWidth = Helper.stringWidth(value.label),\n            circleRadius = 6\n\n        if (x + 48 + textWidth >= this.canvas.width - 40 - this.#offset.x) {\n            x = 20\n            y += 26\n        }\n\n        let rectX = x - circleRadius - circleRadius,\n            rectY = y - circleRadius / 2 - circleRadius,\n            rectW = circleRadius + circleRadius + textWidth + 18,\n            rectH = 20\n\n        const isHover = (event: MouseEvent | undefined) => {\n            if (!event)\n                return false\n\n            const px = event.clientX - this.canvasPosition.x + scrollX - this.#offset.x,\n                py = event.clientY - this.canvasPosition.y + scrollY - this.#offset.y\n\n            return px >= rectX && px <= rectX + rectW\n                   && py >= rectY && py <= rectY + rectH\n        }\n\n        const translate = (transition: number, event: AnimationType) => {\n            this.animations.reload(value.id, event)\n\n            ctx.beginPath()\n\n            ctx.roundRect(rectX, rectY, rectW, rectH, circleRadius)\n\n            ctx.fillStyle = Helper.adjustColor(Theme.canvasBackground, Math.round(-25 * transition))\n            ctx.fill()\n        }\n\n        this.animations.add(value.id,\n            AnimationType.Click,\n            {\n                duration: Constants.Animations.legend,\n                continuous: true,\n                before: () => {\n                    return this.onClickEvent != undefined\n                           && (isHover(this.onClickEvent)\n                               || (value instanceof Sector\n                                   && value.current !== 0\n                                   && value.value !== value.current))\n                           && value.checkCondition()\n                },\n                body: transition => {\n                    value.toggle(transition)\n\n                    if (transition == 1)\n                        this.onClickEvent = new PointerEvent(Events.Click)\n                }\n            })\n\n        if (isHover(this.onMouseMoveEvent)) {\n            this.animations.add(value.id,\n                AnimationType.MouseOver,\n                {\n                    duration: Constants.Animations.button,\n                    body: transition => {\n                        translate(transition, AnimationType.MouseLeave)\n                    }\n                })\n\n            if (!value.disabled) {\n                this.#hoverCount++\n\n                this.#chart.highlight(value)\n            }\n\n            this.canvas.style.cursor = Styles.Cursor.Pointer\n        } else {\n            this.animations.add(value.id,\n                AnimationType.MouseLeave,\n                {\n                    timer: Constants.Dates.minDate,\n                    duration: Constants.Animations.button,\n                    backward: true,\n                    body: transition => {\n                        translate(transition, AnimationType.MouseOver)\n                    }\n                })\n        }\n\n        ctx.beginPath()\n\n        ctx.arc(x - 1, y + 1, 3, 0, 2 * Math.PI)\n        ctx.fillStyle = value.disabled ? Helper.grayScale(value.color) : value.color\n        ctx.fill()\n\n        ctx.fillStyle = Theme.text\n        if (value.disabled)\n            ctx.fillStyle += '7f'\n\n        ctx.fillText(value.label, x + circleRadius * 1.5 + 1, y + 6)\n\n        x += 20\n\n        if (value.disabled) {\n            ctx.moveTo(x - 10, y + 2)\n            ctx.lineTo(x + textWidth - 10, y + 2)\n            ctx.strokeStyle = Theme.text + '7f'\n            ctx.stroke()\n        }\n\n        x += textWidth + 22\n\n        return {\n            x: x,\n            y: y\n        }\n    }\n\n    destroy() {\n        this.isDestroy = true\n\n        this.canvas.remove()\n    }\n\n    refresh() {\n        this.state = RenderState.Init\n    }\n\n    resize() {\n        this.calculateSizes()\n        this.#button?.resize()\n        this.initAnimations()\n    }\n\n    calculateSizes() {\n        switch (this.settings.legendPlace) {\n            case LegendPlace.Bottom:\n            default:\n                this.canvas.width = this.settings.width\n                this.canvas.height = Legend.getLegendHeight(this.settings.data.values, this.canvas.width)\n\n                this.node.style.flexDirection = Styles.FlexDirection.Column\n\n                break\n\n            case LegendPlace.Top:\n                this.canvas.width = this.settings.width\n                this.canvas.height = Legend.getLegendHeight(this.settings.data.values, this.canvas.width)\n\n                this.node.style.flexDirection = Styles.FlexDirection.ColumnReverse\n\n                break\n\n            case LegendPlace.Left:\n                this.canvas.width = 500\n                this.canvas.height = this.settings.height\n\n                this.node.style.flexDirection = Styles.FlexDirection.Row\n\n                break\n\n            case LegendPlace.Right:\n                this.canvas.width = 500\n                this.canvas.height = this.settings.height\n\n                this.node.style.flexDirection = Styles.FlexDirection.RowReverse\n\n                break\n        }\n\n        this.#offset = {\n            x: Legend.getOffsetToCenter(this.settings.data.values, this.canvas.width),\n            y: (this.canvas.height - Legend.getLegendHeight(this.settings.data.values, this.canvas.width)) / 2\n        }\n    }\n\n    applySettings(settings: ChartSettings) {\n        this.settings = settings\n\n        this.prepareSettings()\n    }\n\n    prepareSettings() {\n        this.calculateSizes()\n\n        if (!this.settings.disableInteractions)\n            this.#button = new Button(this.canvas,\n                {\n                    x: -10,\n                    y: 12,\n                    text: TextResources.reset,\n                    action: () => {\n                        for (let value of this.settings.data.values)\n                            value.reset()\n                    }\n                })\n    }\n\n    static getOffsetToCenter(values: Value[], width: number): number {\n        let maxWidth = 20\n\n        for (const value of values.filter(v => !v.hideInLegend)) {\n            const labelWidth = Helper.stringWidth(value.label)\n\n            if (maxWidth + labelWidth + 47 >= width - 100)\n                break\n\n            maxWidth += labelWidth + 47\n        }\n\n        return width / 2 - maxWidth / 2\n    }\n\n    static getLegendHeight(values: Value[], width: number): number {\n        let count = 1,\n            acc = 20,\n            offset = Legend.getOffsetToCenter(values, width)\n\n        for (const value of values.filter(v => !v.hideInLegend)) {\n            const labelWidth = Helper.stringWidth(value.label)\n\n            if (acc + labelWidth + 48 >= width - 32 - offset) {\n                acc = 20\n                count++\n            }\n\n            acc += labelWidth + 48\n        }\n\n        return 24 + count * 20 + (count - 1) * 6\n    }\n}","export class Values {\n    static readonly titleOffset = 30\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","Number.prototype.isAnyEquals = function (...values) {\n    return values.includes(<number>this)\n}\n\nDate.prototype.addDays = function (days: number) {\n    let result = new Date(this)\n    result.setDate(result.getDate() + days)\n    return result\n}\n\nDate.prototype.addMilliseconds = function (milliseconds: number) {\n    let result = new Date(this)\n    result.setMilliseconds(result.getMilliseconds() + milliseconds)\n    return result\n}\n\nMap.prototype.trySet = function (key: any, value: any) {\n    if (!this.has(key))\n        this.set(key, value)\n}","import { Chart } from 'Chart'\nimport { ChartSettings } from 'types/ChartSettings'\n\nfunction OCharts() {\n}\n\nOCharts.chart = function(context: HTMLElement, settings: ChartSettings) {\n    return new Chart(context, settings)\n}\n\n// @ts-ignore\nwindow.OCharts = OCharts"],"names":["Animations","constructor","this","Map","add","id","type","value","key","has","set","contains","reload","get","timer","Date","clear","forEach","_value","AnimationType","Init","delete","initializeTransitions","i","t","x","Math","pow","y","transitionCurve","toFixed","getTransition","item","stamp","passed","getTime","transition","duration","before","body","backward","continuous","endsWith","color","amount","replace","min","max","parseInt","toString","slice","Array","join","round","reduce","a","v","padStart","floor","random","str","font","widths","from","String","acc","cur","charCodeAt","S4","substring","toLowerCase","background","foreground","backgroundAsRgb","hexToRgb","foregroundAsRgb","r","g","b","test","opacity","hex","result","exec","componentToHex","c","length","rgb","bg","Theme","canvasBackground","alpha","Color","text","Errors","error","Error","throwIsUndefined","object","undefined","throw","context","settings","node","applySettings","document","addEventListener","Events","VisibilityChanged","resetMouse","window","Blur","Click","event","target","canvas","closeDropdowns","render","ResizeObserver","destroy","observe","disconnect","highlight","reset","isNeedRestartRender","enableLegend","Legend","enableTooltip","disableInteractions","ChartType","Plot","PlotRenderer","Circular","CircularRenderer","Gauge","GaugeRenderer","TreeMap","TreeRenderer","prepareSettings","initDropdown","initAnimations","resize","refresh","initialize","isDarkThemeFunction","style","display","Styles","Display","Flex","flexDirection","FlexDirection","Column","alignItems","AlignItems","Center","justifyContent","JustifyContent","height","circular","legend","tree","tooltip","button","Sector","Value","obj","super","Object","assign","toggle","disabled","current","checkCondition","TextResources","exportPNG","decomposeToTable","exportCSV","menu","allDataIsHidden","other","thousandShort","millionShort","billionShort","show","noLabel","treeMapIsEmpty","getContext","willReadFrequently","ErrorType","NullContext","isPixelBusy","pixel","canvasBackgroundInt","data","templateId","getElementById","condition","lines","opacityValue","getBoundingClientRect","scrollX","scrollY","ctx","Canvas","textWidth","map","line","Helper","stringWidth","clientX","clientY","width","beginPath","roundRect","baseOpacity","strokeStyle","dropdownBorder","lineWidth","fillStyle","stroke","fill","offset","arc","PI","TextStyles","fillText","padding","updateVisibility","visibility","Visibility","Visible","regex","content","cloneNode","createElement","Tag","Div","innerHTML","position","Position","Absolute","pointerEvents","PointerEvents","None","setAttribute","Attribute","Name","matches","matchAll","html","match","property","replaceAll","appendChild","Hidden","left","top","tooltips","querySelectorAll","Constants","ThemeOptions","colors","backgrounds","lineAxes","lineActives","dropdownBorders","canvasBackgrounds","getRows","headers","values","series","seriesValues","push","xType","PlotAxisType","Formatter","date","name","label","unique","Set","uniqueHeaders","filter","sort","Cursor","Default","Pointer","ColumnReverse","Row","RowReverse","ImageRendering","Pixelated","options","isActive","icon","animations","moveEvent","clickEvent","translate","adjustColor","cursor","MouseOver","MouseLeave","Dates","minDate","regular","iconOffset","navigator","platform","borderRadius","items","dividers","maxWidth","dropdownOpacity","itemOpacityDec","itemBackground","dropdownItemHoverColor","borderColor","rect","setLineDash","isDivider","moveTo","lineTo","animationKey","isReturn","action","textAlign","textBaseline","close","w","h","trueX","trueY","callback","isDark","function","matchMedia","setTheme","Change","index","currentTheme","lineAxis","lineActive","Number","Renderer","chart","onMouseMoveEvent","MouseEvent","MouseMove","state","RenderState","Idle","renderDropdown","contextMenu","renderContextMenu","find","onContextMenuEvent","dropdown","enableOther","_other","Modal","Decomposition","toChart","innerWidth","innerHeight","open","innerRadius","console","warn","splice","sum","guid","Dropdown","Icon","ThreeLines","Export","asPng","title","asCsv","toTable","CircularData","anglesSum","flatMap","sector","angle","reverse","TooltipValue","number","isDestroy","requestAnimationFrame","bind","piece","isNaN","isSingle","s","onClickEvent","includes","PointerEvent","direction","cos","sin","lineJoin","lineCap","indexOf","centerOfSector","minSize","rest","scale","applyAlpha","swap","point2","save","labelStartPoint","labelMidPoint","dir","endPoint","isBusy","imageDataX","imageDataY","imageData","Uint32Array","getImageData","buffer","quadraticCurveTo","circularLabel","restore","localAccumulator","localAngle","currentAngle","tangentIntersectionAngle","lengthToTangentIntersection","tangentIntersectionPoint","innerPoint2","changeColor","anyHighlight","highlightItems","AnotherItemOver","AnotherItemLeave","closePath","resetTransform","radius","isWithinRadius","point","getMousePosition","inner","outer","atan2","abs","findIndex","o","sumBefore","isAngle","innerTitle","titleOffset","Values","shortSide","longestLabel","large","Renderable","disableInitAnimation","renderTitle","remove","domRect","parentElement","minWidth","minHeight","calculateColors","dispatchEvent","CustomEvent","detail","force","baseColor","randomColor","adjustStep","adjustAmount","clone","canvasPosition","isClick","legendPlace","LegendPlace","Top","Bottom","getLegendHeight","Left","Right","tooltipLines","axisLineHoverColor","yValue","yHeight","columnWidth","seriesToRender","columnsIndex","columnsCount","PlotType","barsIndex","barsCount","Bar","stackingAccumulator","lineType","LineType","Dash","Dotted","Solid","xIndex","yIndex","getTooltipValue","step","Line","unit","pointDuration","now","addMilliseconds","next","prevValue","endPointX","endPointY","mouse","AttentionLine","bottom","right","yMax","minStep","seriesHeight","fillRect","StackingColumn","ceil","PlotSeries","it","isISOString","simple","Tooltip","PlotData","skip","clearRect","drawImage","isContainsBar","xTitle","yTitle","rotate","xYPos","xCounter","trySet","format","maxLabelWidth","maxCount","renderStep","axisLabelOffset","yCount","count","yCounter","yStep","labelY","labelYAsKey","postfix","shortLabels","countOfTens","isBar","createImageBitmap","then","res","putImageData","axisLineColor","isAnyEquals","xValues","p","yValues","isDate","tempDate","addDays","yMin","stackingColumns","yMaxWidth","isRight","imageRendering","append","onmousemove","onclick","oncontextmenu","preventDefault","onmouseleave","maxHeight","tooltipCell","contextMenuData","totalSquare","minX","minY","isVertical","remainWidth","remainHeight","cells","isLast","j","h1","w1","cell","cellInit","cellIndex","getPrev","E","initAnimationDuration","center","gap","isColorVisible","TreeData","table","Table","classList","totals","rows","valuesMap","tableValue","allColumns","header","indexSpaces","tableHeader","columns","vKey","vValue","totalValue","trim","totalColumns","container","div","script","Script","flexGrow","cloneSettings","JSON","parse","stringify","getPoint","point1","point3","outerRadius","longSide","leftEmpty","rightEmpty","destinationCanvas","destCtx","saveAs","toDataURL","csv","row","cols","encodeURIComponent","dataURL","href","isText","showSaveFilePicker","suggestedName","types","accept","excludeAcceptAllOption","toBlob","dataURI","byteString","atob","split","mimeString","ArrayBuffer","imageArray","Uint8Array","Blob","fileHandle","createWritable","writableStream","write","download","A","click","Text","toLocaleString","minimumFractionDigits","maximumFractionDigits","toLocaleDateString","size","modal","Dialog","oncancel","ElementNotExist","showModal","closeButton","nextPoint","hideInLegend","calculateSizes","getOffsetToCenter","Button","labelWidth","rectX","rectY","circleRadius","rectW","isHover","px","py","grayScale","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","prototype","days","setDate","getDate","milliseconds","setMilliseconds","getMilliseconds","OCharts","Chart"],"sourceRoot":""}