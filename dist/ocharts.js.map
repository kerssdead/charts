{"version":3,"file":"ocharts.js","mappings":"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","sources":["webpack://charts/./src/Animations.ts","webpack://charts/./src/Helper.ts","webpack://charts/./src/types/TooltipValue.ts","webpack://charts/./src/helpers/Errors.ts","webpack://charts/./src/Chart.ts","webpack://charts/./src/types/Color.ts","webpack://charts/./src/static/constants/Animations.ts","webpack://charts/./src/types/Sector.ts","webpack://charts/./src/static/TextResources.ts","webpack://charts/./src/helpers/Canvas.ts","webpack://charts/./src/Tooltip.ts","webpack://charts/./src/static/ThemeOptions.ts","webpack://charts/./src/types/data/PlotData.ts","webpack://charts/./src/static/constants/Styles.ts","webpack://charts/./src/Dropdown.ts","webpack://charts/./src/Theme.ts","webpack://charts/./src/render/CircularRenderer.ts","webpack://charts/./src/types/base/Renderer.ts","webpack://charts/./src/types/data/TreeData.ts","webpack://charts/./src/types/data/CircularData.ts","webpack://charts/./src/types/base/Value.ts","webpack://charts/./src/render/PlotRenderer.ts","webpack://charts/./src/static/constants/Dates.ts","webpack://charts/./src/helpers/TextStyles.ts","webpack://charts/./src/types/base/Renderable.ts","webpack://charts/./src/render/TreeRenderer.ts","webpack://charts/./src/Decomposition.ts","webpack://charts/./src/static/constants/Index.ts","webpack://charts/./src/render/GaugeRenderer.ts","webpack://charts/./src/Export.ts","webpack://charts/./src/helpers/Formatter.ts","webpack://charts/./src/Button.ts","webpack://charts/./src/static/Enums.ts","webpack://charts/./src/Modal.ts","webpack://charts/./src/types/PlotSeries.ts","webpack://charts/./src/Legend.ts","webpack://charts/./src/static/constants/Values.ts","webpack://charts/webpack/bootstrap","webpack://charts/./src/Prototypes.ts","webpack://charts/./src/OCharts.ts"],"sourcesContent":["import { AnimationItem } from './types/AnimationItem'\nimport { AnimationType } from './static/Enums'\n\nexport class Animations {\n    #queue: Map<string, AnimationItem>\n\n    static transitionCurve: Map<number, number> = new Map()\n\n    constructor() {\n        this.#queue = new Map()\n    }\n\n    add(id: string, type: AnimationType, value: AnimationItem) {\n        const key = this.#getKey(id, type)\n        if (!this.#queue.has(key))\n            this.#queue.set(key, value)\n\n        this.#process(key)\n    }\n\n    contains(id: string, type: AnimationType): boolean {\n        return this.#queue.has(this.#getKey(id, type))\n    }\n\n    reload(id: string, type: AnimationType) {\n        if (this.contains(id, type)) {\n            let item = <AnimationItem>this.#queue.get(this.#getKey(id, type))\n\n            item.timer = new Date()\n        }\n    }\n\n    clear() {\n        this.#queue.forEach((_value, key) => !this.#is(key, AnimationType.Init) && this.#queue.delete(key))\n    }\n\n    #process(key: string) {\n        const item = <AnimationItem>this.#queue.get(key),\n            stamp = new Date(),\n            passed = stamp.getTime() - (item.timer ?? stamp).getTime(),\n            transition = Animations.getTransition(passed > item.duration ? 1 : passed / item.duration),\n            before = item.before ? item.before() : true\n\n        if (!item.timer && before)\n            item.timer = stamp\n\n        if (before)\n            item.body(item.backward ? 1 - transition : transition)\n\n        if (transition == 1 && (!before || item.continuous))\n            this.#queue.delete(key)\n    }\n\n    #getKey(id: string, type: number) {\n        return id + '_' + type\n    }\n\n    #is(key: string, type: number) {\n        return key.endsWith('_' + type)\n    }\n\n    static initializeTransitions() {\n        const valuesCount = 30000,\n            offset = .23,\n            p0 = { x: 0, y: 0 },\n            p1 = { x: 1 - offset, y: offset },\n            p2 = { x: offset, y: 1 - offset },\n            p3 = { x: 1, y: 1 }\n\n        for (let i = 0; i < valuesCount; i++) {\n            const t = (i + 1) / valuesCount\n\n            let x = Math.pow(1 - t, 3) * p0.x\n                    + 3 * Math.pow(1 - t, 2) * p1.x * t\n                    + 3 * (1 - t) * Math.pow(t, 2) * p2.x\n                    + Math.pow(t, 3) * p3.x,\n                y = Math.pow(1 - t, 3) * p0.y\n                    + 3 * Math.pow(1 - t, 2) * p1.y * t\n                    + 3 * (1 - t) * Math.pow(t, 2) * p2.y\n                    + Math.pow(t, 3) * p3.y\n\n            Animations.transitionCurve.set(+x.toFixed(4), y)\n        }\n\n        Animations.transitionCurve.set(0, 0)\n    }\n\n    static getTransition(value: number): number {\n        return Animations.transitionCurve.get(+value.toFixed(4)) ?? 0\n    }\n}","import { Color } from './types/Color'\nimport { Theme } from './Theme'\n\nexport class Helper {\n    static adjustColor(color: string, amount: number) {\n        return '#' + color.replace(/^#/, '').replace(/../g, color => ('0' + Math.min(255, Math.max(0, parseInt(color, 16) + amount)).toString(16)).slice(-2))\n    }\n\n    static grayScale(color: string) {\n        return '#' + Array(4).join(Math.round([.3, .59, .11].reduce((a, v, i) => a + v * parseInt(color[2 * i + 1] + color[2 * i + 2], 16), 0) / 3).toString(16).padStart(2, '0'))\n    }\n\n    static randomColor() {\n        let letters = '0123456789ABCDEF',\n            color = '#'\n        for (let i = 0; i < 6; i++)\n            color += letters[Math.floor(Math.random() * 16)]\n\n        return color\n    }\n\n    static stringWidth(str: string | undefined, font?: number) {\n        if (!str)\n            return 0\n\n        const widths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2796875, 0.2765625, 0.3546875, 0.5546875, 0.5546875, 0.8890625, 0.665625, 0.190625, 0.3328125, 0.3328125, 0.3890625, 0.5828125, 0.2765625, 0.3328125, 0.2765625, 0.3015625, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.2765625, 0.2765625, 0.584375, 0.5828125, 0.584375, 0.5546875, 1.0140625, 0.665625, 0.665625, 0.721875, 0.721875, 0.665625, 0.609375, 0.7765625, 0.721875, 0.2765625, 0.5, 0.665625, 0.5546875, 0.8328125, 0.721875, 0.7765625, 0.665625, 0.7765625, 0.721875, 0.665625, 0.609375, 0.721875, 0.665625, 0.94375, 0.665625, 0.665625, 0.609375, 0.2765625, 0.3546875, 0.2765625, 0.4765625, 0.5546875, 0.3328125, 0.5546875, 0.5546875, 0.5, 0.5546875, 0.5546875, 0.2765625, 0.5546875, 0.5546875, 0.221875, 0.240625, 0.5, 0.221875, 0.8328125, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.3328125, 0.5, 0.2765625, 0.5546875, 0.5, 0.721875, 0.5, 0.5, 0.5, 0.3546875, 0.259375, 0.353125, 0.5890625],\n            avg = 0.5279276315789471\n\n        return Array.from(str).reduce((acc, cur) => acc + (widths[cur.charCodeAt(0)] ?? avg), 0) * (font || 14)\n    }\n\n    static guid() {\n        const S4 = () => (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1)\n        return (S4() + S4() + '-' + S4() + '-4' + S4().slice(0, 3) + '-' + S4() + '-' + S4() + S4() + S4()).toLowerCase()\n    }\n\n    static hexToRgb(hex: string): Color {\n        if (hex.length > 4) {\n            const value = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n            if (value)\n                return {\n                    r: parseInt(value[1], 16),\n                    g: parseInt(value[2], 16),\n                    b: parseInt(value[3], 16)\n                }\n        } else {\n            const value = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i.exec(hex)\n            if (value)\n                return {\n                    r: parseInt(value[1] + value[1], 16),\n                    g: parseInt(value[2] + value[2], 16),\n                    b: parseInt(value[3] + value[3], 16)\n                }\n        }\n\n        return new Color()\n    }\n\n    static isColorVisible(background: string, foreground: string) {\n        const backgroundAsRgb = Helper.hexToRgb(background),\n            foregroundAsRgb = Helper.hexToRgb(foreground),\n            value = .77\n\n        return (backgroundAsRgb.r + backgroundAsRgb.g + backgroundAsRgb.b) / (foregroundAsRgb.r + foregroundAsRgb.g + foregroundAsRgb.b) < value\n    }\n\n    static isISOString(str: string) {\n        return /\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+/.test(str)\n    }\n\n    static applyAlpha(color: string, opacity: number) {\n        function hexToRgb(hex: string) {\n            let result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n            return result\n                   ? {\n                    r: parseInt(result[1], 16),\n                    g: parseInt(result[2], 16),\n                    b: parseInt(result[3], 16)\n                } as Color\n                   : {\n                    r: 0,\n                    g: 0,\n                    b: 0\n                } as Color\n        }\n\n        function componentToHex(c: number) {\n            let hex = c.toString(16)\n            return hex.length == 1 ? '0' + hex : hex\n        }\n\n        function rgbToHex(r: number, g: number, b: number) {\n            return '#' + componentToHex(r) + componentToHex(g) + componentToHex(b)\n        }\n\n        const rgb = hexToRgb(color),\n            bg = hexToRgb(Theme.canvasBackground)\n\n        opacity /= 255\n\n        const alpha = 1 - opacity\n\n        return rgbToHex(\n            Math.round((opacity * (rgb.r / 255) + (alpha * (bg.r / 255))) * 255),\n            Math.round((opacity * (rgb.g / 255) + (alpha * (bg.g / 255))) * 255),\n            Math.round((opacity * (rgb.b / 255) + (alpha * (bg.b / 255))) * 255)\n        )\n    }\n}","export class TooltipValue {\n    text: string | undefined\n\n    color: string | undefined\n\n    constructor(text?: string, color?: string) {\n        this.text = text\n        this.color = color\n    }\n}","import { ErrorType } from '../static/Enums'\n\nexport abstract class Errors {\n    static throw(error: ErrorType): never {\n        throw new Error(error)\n    }\n\n    static throwIsUndefined(object: any, error: ErrorType) {\n        if (object == undefined)\n            Errors.throw(error)\n    }\n}","import { ChartSettings } from './types/ChartSettings'\nimport { Renderer } from './types/base/Renderer'\nimport { Data } from './types/interfaces/Data'\nimport { Legend } from './Legend'\nimport { Value } from './types/base/Value'\nimport { PlotRenderer } from './render/PlotRenderer'\nimport { CircularRenderer } from './render/CircularRenderer'\nimport { GaugeRenderer } from './render/GaugeRenderer'\nimport { TreeRenderer } from './render/TreeRenderer'\nimport { Animations } from './Animations'\nimport { Theme } from './Theme'\nimport { Styles } from './static/constants/Styles'\nimport { ChartType, Events } from './static/Enums'\n\nexport class Chart {\n    node: HTMLElement\n\n    settings: ChartSettings\n\n    #renderer: Renderer<Data>\n\n    #legend: Legend\n\n    #observer: ResizeObserver\n\n    constructor(context: HTMLElement, settings: ChartSettings) {\n        this.#initialize(settings)\n\n        this.node = context\n        this.settings = settings\n\n        this.#applyStyles()\n        this.#prepareSettings()\n\n        if (settings.enableLegend)\n            this.#legend = new Legend(this)\n\n        document.addEventListener(Events.VisibilityChanged, () => this.#renderer.resetMouse())\n        window.addEventListener(Events.Blur, () => this.#renderer.resetMouse())\n\n        window.addEventListener(Events.Click, event => {\n            if (event.target != this.#renderer.canvas)\n                this.#renderer.closeDropdowns()\n        })\n    }\n\n    render() {\n        this.#renderer.render()\n        this.#legend?.render()\n\n        this.#observer = new ResizeObserver(() => {\n            if (this.#renderer.canvas)\n                this.#resize()\n            else\n                this.destroy()\n        })\n        this.#observer.observe(this.node)\n\n        this.#refresh()\n    }\n\n    destroy() {\n        this.#renderer.destroy()\n        this.#legend?.destroy()\n\n        this.#observer.disconnect()\n    }\n\n    highlight(value?: Value) {\n        this.#renderer.highlight(value)\n    }\n\n    reset() {\n        Theme.reset()\n\n        this.#initialize(this.settings)\n    }\n\n    #prepareSettings() {\n        this.settings.enableTooltip = !this.settings.disableInteractions && this.settings.enableTooltip\n\n        switch (this.settings.type) {\n            case ChartType.Plot:\n                this.#renderer = new PlotRenderer(this)\n                break\n\n            case ChartType.Circular:\n                this.#renderer = new CircularRenderer(this)\n                break\n\n            case ChartType.Gauge:\n                this.#renderer = new GaugeRenderer(this)\n                break\n\n            case ChartType.TreeMap:\n                this.#renderer = new TreeRenderer(this)\n                break\n        }\n\n        this.#renderer.prepareSettings()\n\n        if (!this.settings.disableInteractions) {\n            this.#renderer.initDropdown()\n            this.#renderer.initAnimations()\n        }\n\n        this.#renderer.resize()\n    }\n\n    #refresh() {\n        this.#renderer.refresh()\n        this.#legend?.refresh()\n    }\n\n    #resize() {\n        this.#renderer.resize()\n        this.#legend?.resize()\n    }\n\n    #initialize(settings: ChartSettings) {\n        Theme.initialize(\n            () => this.#resize(),\n            settings.isDarkThemeFunction\n        )\n        Animations.initializeTransitions()\n    }\n\n    #applyStyles() {\n        this.node.style.display = Styles.Display.Flex\n        this.node.style.flexDirection = Styles.FlexDirection.Column\n        this.node.style.alignItems = Styles.AlignItems.Center\n        this.node.style.justifyContent = Styles.JustifyContent.Center\n        this.node.style.height = '100%'\n    }\n}","export class Color {\n    r: number\n\n    g: number\n\n    b: number\n}","export class Animations {\n    static circular = 335\n\n    static legend = 500\n\n    static tree = 250\n\n    static tooltip = 120\n\n    static button = 200\n}","import { Value } from './base/Value'\nimport { Point } from './Point'\n\nexport class Sector extends Value {\n    current: number\n\n    transition: number\n\n    translate: Point\n\n    innerRadius: number\n\n    constructor(obj: object) {\n        super()\n\n        Object.assign(this, obj)\n    }\n\n    toggle(transition: number) {\n        super.toggle(transition)\n\n        if (this.disabled)\n            this.current = this.value * (1 - transition)\n        else\n            this.current = this.value * transition\n    }\n\n    checkCondition(): boolean {\n        super.checkCondition()\n\n        return (this.current == 0 && !this.disabled) || this.value != 0\n    }\n\n    reset() {\n        super.reset()\n\n        this.current = this.value\n    }\n}","export class TextResources {\n    static exportPNG = 'Save as image...'\n\n    static decomposeToTable = 'Show as table...'\n\n    static reset = 'Reset'\n\n    static exportCSV = 'Save as table...'\n\n    static menu = 'Menu'\n\n    static allDataIsHidden = 'All data is hidden'\n\n    static other = 'Other'\n\n    static incorrectValues = 'Incorrect values'\n\n    static ThousandShort = 'K'\n\n    static MillionShort = 'M'\n\n    static BillionShort = 'B'\n\n    static Show = 'Show...'\n\n    static NoLabel = 'No Label'\n\n    static treeMapIsEmpty = 'Tree Map is empty'\n}","import { Errors } from './Errors'\nimport { ErrorType } from '../static/Enums'\nimport { Theme } from '../Theme'\n\nexport abstract class Canvas {\n    static getContext(canvas: HTMLCanvasElement): CanvasRenderingContext2D {\n        return canvas.getContext('2d', { willReadFrequently: true })\n               ?? Errors.throw(ErrorType.NullContext)\n    }\n\n    static isPixelBusy(pixel: number) {\n        return pixel != undefined && pixel - Theme.canvasBackgroundInt != 0\n    }\n}","import { Value } from './types/base/Value'\nimport { Theme } from './Theme'\nimport { TextStyles } from './helpers/TextStyles'\nimport { Helper } from './Helper'\nimport { ChartSettings } from './types/ChartSettings'\nimport { TooltipValue } from './types/TooltipValue'\nimport { Data } from './types/interfaces/Data'\nimport { Canvas } from './helpers/Canvas'\nimport * as Constants from './static/constants/Index'\nimport { Styles } from './static/constants/Styles'\nimport { HTMLTooltipElement } from './types/extends/HTMLTooltipElement'\nimport { Attribute, Tag } from './static/Enums'\n\nexport class Tooltip {\n    canvas: HTMLCanvasElement\n\n    data: Data\n\n    readonly #enabled: boolean\n\n    readonly #isCustom: boolean\n\n    #canvasPosition: DOMRect\n\n    #template: HTMLTemplateElement\n\n    #inProgress: boolean\n\n    #toHide: boolean\n\n    #timer: Date | undefined\n\n    #lines: TooltipValue[]\n\n    constructor(canvas: HTMLCanvasElement, settings: ChartSettings) {\n        this.canvas = canvas\n        this.data = settings.data\n        this.#enabled = settings.enableTooltip\n        this.#isCustom = !!settings.templateId\n\n        if (this.#isCustom)\n            this.#template = <HTMLTemplateElement>document.getElementById(settings.templateId)\n\n        this.refresh()\n    }\n\n    render(condition: boolean, event: MouseEvent, lines: TooltipValue[], value?: Value) {\n        this.#hideAll()\n\n        if (!this.#enabled || !event)\n            return\n\n        if (condition || this.#inProgress || this.#toHide) {\n            if (condition)\n                this.#lines = lines\n\n            if (!this.#timer)\n                this.#timer = new Date()\n\n            if (!this.#toHide)\n                this.#inProgress = true\n            else if (this.#inProgress)\n                this.#timer = new Date()\n\n            if (this.#isCustom)\n                this.#renderCustom(event, value)\n            else\n                this.#renderRegular(event)\n\n            const opacityValue = this.#getOpacityValue()\n\n            if (this.#toHide && opacityValue >= 1) {\n                this.#inProgress = false\n                this.#toHide = false\n            }\n\n            if (this.#toHide && opacityValue <= 0) {\n                this.#inProgress = false\n                this.#toHide = false\n                this.#timer = undefined\n            }\n\n            if (!condition && this.#timer != undefined)\n                this.#toHide = true\n        } else {\n            this.#timer = undefined\n        }\n    }\n\n    #renderRegular(event: MouseEvent) {\n        const ctx = Canvas.getContext(this.canvas)\n\n        const textWidth = Math.max(...this.#lines.map(line => Helper.stringWidth(line.text ?? '') + (line.color ? 8 : 0)))\n\n        const padding = 6,\n            borderRadius = 6\n\n        let x = event.clientX - this.#canvasPosition.x + 10,\n            y = event.clientY - this.#canvasPosition.y + scrollY + 10\n\n        if (x + textWidth + 25 > this.#canvasPosition.width)\n            x = this.#canvasPosition.width - (textWidth + 25)\n\n        if (y + 4 + this.#lines.length * 18 > this.#canvasPosition.height)\n            y = this.#canvasPosition.height - 4 - this.#lines.length * 18\n\n        ctx.beginPath()\n        ctx.roundRect(x, y, textWidth + 24, 16 + 16 * this.#lines.length, borderRadius)\n        let opacity = Math.round(this.#getOpacityValue() * 255).toString(16),\n            baseOpacity = Math.round(this.#getOpacityValue() * 207).toString(16)\n        if (opacity.length == 1)\n            opacity = '0' + opacity\n        if (baseOpacity.length == 1)\n            baseOpacity = '0' + baseOpacity\n\n        ctx.strokeStyle = Theme.dropdownBorder + baseOpacity\n        ctx.lineWidth = 1\n        ctx.fillStyle = Theme.background + baseOpacity\n        ctx.stroke()\n        ctx.fill()\n\n        for (let line of this.#lines) {\n            let offset = 0\n\n            if (line.color) {\n                offset = 12\n\n                ctx.beginPath()\n                ctx.fillStyle = line.color + opacity\n                ctx.arc(x + 16, y + 17, 5, 0, Math.PI * 2)\n                ctx.fill()\n            }\n\n            TextStyles.tooltip(ctx)\n            ctx.fillStyle = Theme.text + opacity\n            ctx.fillText(line.text ?? '', x + offset + padding * 2, y + 21)\n\n            y += 16\n        }\n    }\n\n    #renderCustom(event: MouseEvent, value?: Value) {\n        if (value == undefined)\n            return\n\n        const id = this.#template.id + value.id\n\n        let tooltip = <HTMLTooltipElement>document.getElementById(id)\n\n        const updateVisibility = () => {\n            this.#hideAll()\n\n            tooltip.style.visibility = Styles.Visibility.Visible\n        }\n\n        if (!tooltip) {\n            const regex = /\\${[^}]*}/gm\n\n            let content = <HTMLElement>this.#template.cloneNode(true)\n\n            tooltip = document.createElement(Tag.Div) as HTMLTooltipElement\n\n            tooltip.innerHTML = content.innerHTML\n\n            tooltip.id = id\n            tooltip.style.position = Styles.Position.Absolute\n            tooltip.style.pointerEvents = Styles.PointerEvents.None\n            tooltip.style.visibility = Styles.Visibility.Visible\n\n            tooltip.setAttribute(Attribute.Name, this.#template.id)\n\n            const matches = [...tooltip.innerHTML.matchAll(regex)]\n\n            let html = tooltip.innerHTML\n\n            for (const match of matches) {\n                const property = match[0].replace('${', '')\n                                         .replace('}', '')\n                                         .replaceAll(' ', '')\n\n                html = html.replaceAll(match[0], value.data[property])\n            }\n\n            tooltip.innerHTML = html\n\n            document.body.appendChild(tooltip)\n\n            tooltip.position = tooltip.getBoundingClientRect()\n\n            updateVisibility()\n        }\n\n        if (tooltip.style.visibility == Styles.Visibility.Hidden)\n            updateVisibility()\n\n        if (tooltip.position.height == 0)\n            tooltip.position = tooltip.getBoundingClientRect()\n\n        const offset = 10\n\n        let opacity = '1'\n\n        let x = event.clientX,\n            y = event.clientY + scrollY\n\n        if (x + tooltip.position.width - this.#canvasPosition.x > this.#canvasPosition.width - offset) {\n            x = this.#canvasPosition.width - tooltip.position.width + this.#canvasPosition.x - offset\n            opacity = '.67'\n        }\n\n        if (y + tooltip.position.height - this.#canvasPosition.y > this.#canvasPosition.height - offset) {\n            y = this.#canvasPosition.height - tooltip.position.height + this.#canvasPosition.y - offset\n            opacity = '.67'\n        }\n\n        if (x == 0 && y == 0)\n            opacity = '0'\n\n        tooltip.style.left = x + offset + 'px'\n        tooltip.style.top = y + offset + 'px'\n        tooltip.style.opacity = opacity\n    }\n\n    refresh() {\n        this.#canvasPosition = this.canvas.getBoundingClientRect()\n        this.#canvasPosition.x += scrollX\n        this.#canvasPosition.y += scrollY\n    }\n\n    #hideAll() {\n        if (!this.#isCustom)\n            return\n\n        const tooltips = <NodeListOf<HTMLElement>>document.querySelectorAll(`[name=\"${ this.#template.id }\"]`)\n\n        for (let node of tooltips)\n            node.style.visibility = Styles.Visibility.Hidden\n    }\n\n    #getOpacityValue(): number {\n        if (!this.#timer)\n            return 0\n\n        let opacityValue = this.#toHide\n                           ? 1 - (new Date().getTime() - this.#timer.getTime()) / Constants.Animations.tooltip\n                           : (new Date().getTime() - this.#timer.getTime()) / Constants.Animations.tooltip\n        if (opacityValue > 1)\n            opacityValue = 1\n        if (opacityValue < 0)\n            opacityValue = 0\n\n        return opacityValue\n    }\n}","export class ThemeOptions {\n    static readonly colors = ['#000000', '#ffffff']\n\n    static readonly backgrounds = ['#f7f7f7', '#222222']\n\n    static readonly lines = ['#000000', '#eeeeee']\n\n    static readonly lineAxes = ['#e0e0e0', '#212121']\n\n    static readonly lineActives = ['#898989', '#898989']\n\n    static readonly dropdownBorders = ['#bcbcbc', '#7e7e7e']\n\n    static readonly canvasBackgrounds = ['#ffffff', '#222222']\n}","import { TableValue } from '../TableValue'\nimport { PlotSeries } from '../PlotSeries'\nimport { TableHeaderValue } from '../TableHeaderValue'\nimport { TableData } from '../TableData'\nimport { Data } from '../interfaces/Data'\nimport { Formatter } from '../../helpers/Formatter'\nimport { PlotAxisType } from '../../static/Enums'\n\nexport class PlotData implements Data {\n    shortLabels: boolean\n\n    simple: boolean\n\n    yMax: number\n\n    xTitle: string\n\n    yTitle: string\n\n    xType: PlotAxisType\n\n    values: PlotSeries[]\n\n    static getRows(data: PlotData): TableData {\n        let headers: TableHeaderValue[] = []\n\n        let values: TableValue[] = []\n\n        for (const series of data.values) {\n            let seriesValues = new Map<string, any>()\n\n            for (const value of series.values) {\n                seriesValues.set(value.x.toString(), value.y)\n                headers.push({\n                    value: value.x.toString(),\n                    display: data.xType == PlotAxisType.Date\n                             ? Formatter.date(new Date(value.x))\n                             : value.x.toString()\n                })\n            }\n\n            values.push({\n                name: series.label,\n                values: seriesValues\n            })\n        }\n\n        const unique = new Set(),\n            uniqueHeaders = headers.filter(v => !unique.has(v.display) && unique.add(v.display))\n\n        if (data.xType == PlotAxisType.Date)\n            uniqueHeaders.sort((a, b) => new Date(a.value).getTime() - new Date(b.value).getTime())\n\n        return {\n            headers: uniqueHeaders,\n            values: values\n        }\n    }\n}","export namespace Styles {\n    export class Cursor {\n        static Default = 'default'\n\n        static Pointer = 'pointer'\n    }\n\n    export class Display {\n        static Flex = 'flex'\n    }\n\n    export class FlexDirection {\n        static Column = 'column'\n\n        static ColumnReverse = 'column-reverse'\n\n        static Row = 'row'\n\n        static RowReverse = 'row-reverse'\n    }\n\n    export class AlignItems {\n        static Center = 'center'\n    }\n\n    export class Visibility {\n        static Visible = 'visible'\n\n        static Hidden = 'hidden'\n    }\n\n    export class Position {\n        static Absolute = 'absolute'\n    }\n\n    export class PointerEvents {\n        static None = 'none'\n    }\n\n    export class JustifyContent {\n        static Center = 'center'\n    }\n\n    export class ImageRendering {\n        static Pixelated = 'pixelated'\n    }\n}","import { Theme } from './Theme'\nimport { DropdownOptions } from './types/DropdownOptions'\nimport { Animations } from './Animations'\nimport { Helper } from './Helper'\nimport { TextStyles } from './helpers/TextStyles'\nimport { Canvas } from './helpers/Canvas'\nimport { AnimationType } from './static/Enums'\nimport * as Constants from './static/constants/Index'\nimport { Styles } from './static/constants/Styles'\n\nexport class Dropdown {\n    isActive: boolean = false\n\n    #isInit: boolean\n\n    #options: DropdownOptions\n\n    #canvasPosition: DOMRect\n\n    animations: Animations\n\n    #position: DOMRect\n\n    readonly #isOnlyMenu: boolean\n\n    readonly #canvas: HTMLCanvasElement\n\n    constructor(canvas: HTMLCanvasElement, options: DropdownOptions) {\n        this.#canvas = canvas\n        this.#options = options\n\n        if (this.#options.icon)\n            this.#options.text = this.#options.icon\n\n        this.#isOnlyMenu = this.#options.text == undefined\n\n        this.animations = new Animations()\n    }\n\n    render(moveEvent: MouseEvent, clickEvent: MouseEvent | undefined) {\n        if (!this.#isInit)\n            this.#initAnimations()\n\n        if (this.#isOnlyMenu)\n            this.isActive = true\n\n        const ctx = Canvas.getContext(this.#canvas)\n\n        let x = this.#position.x,\n            y = this.#position.y,\n            width = this.#position.width,\n            height = this.#position.height\n\n        ctx.beginPath()\n\n        if (!this.#isOnlyMenu) {\n            const translate = (transition: number, event: AnimationType) => {\n                this.animations.reload('animation-dropdown', event)\n\n                ctx.fillStyle = Helper.adjustColor(Theme.canvasBackground, -Math.round(25 * transition))\n            }\n\n            if (this.#isOnButton(moveEvent, x, y, width, height)) {\n                this.#canvas.style.cursor = Styles.Cursor.Pointer\n\n                if (clickEvent && moveEvent.x == clickEvent.x && moveEvent.y == clickEvent.y) {\n                    this.isActive = !this.isActive\n                    clickEvent = undefined\n                }\n\n                if (!this.isActive)\n                    this.animations.add('animation-dropdown',\n                        AnimationType.MouseOver,\n                        {\n                            duration: 300,\n                            body: transition => {\n                                translate(transition, AnimationType.MouseLeave)\n                            }\n                        })\n                else\n                    ctx.fillStyle = Helper.adjustColor(Theme.canvasBackground, -25)\n            } else {\n                this.#canvas.style.cursor = Styles.Cursor.Default\n\n                if (!this.isActive)\n                    this.animations.add('animation-dropdown',\n                        AnimationType.MouseLeave,\n                        {\n                            timer: Constants.Dates.minDate,\n                            duration: 300,\n                            backward: true,\n                            body: transition => {\n                                translate(transition, AnimationType.MouseOver)\n                            }\n                        })\n                else\n                    ctx.fillStyle = Helper.adjustColor(Theme.canvasBackground, -25)\n            }\n\n            ctx.roundRect(x, y, width, height, 4)\n            ctx.fill()\n\n            TextStyles.regular(ctx)\n\n            if (this.#options.icon)\n                ctx.font = '20px sans-serif'\n\n            const iconOffset = this.#options.icon\n                               ? navigator.platform != 'Win32'\n                                 ? 1\n                                 : -1\n                               : 0\n\n            ctx.fillText(\n                this.#options.text ?? '',\n                x + width / 2,\n                y + height / 2 - iconOffset\n            )\n        }\n\n        if (this.isActive) {\n            const padding = 6,\n                borderRadius = 6\n\n            y += height\n\n            const items = this.#options.items.filter(value => value.text),\n                dividers = this.#options.items.filter(value => !value.text)\n\n            let maxWidth = Math.max(...items.map(value => Helper.stringWidth(value.text)))\n                           + padding * 4\n\n            if (x + maxWidth > this.#canvas.width - 4)\n                x -= x + maxWidth - this.#canvas.width + 4\n\n            const dropdownOpacity = 'bb',\n                itemOpacityDec = 127,\n                itemBackground = Theme.dropdownItemHoverColor,\n                borderColor = Theme.dropdownBorder\n\n            ctx.beginPath()\n\n            const rect = {\n                x: x,\n                y: y,\n                width: maxWidth,\n                height: items.length * 26\n                        + dividers.length * 4\n                        + (items.length == 1 ? padding : 0)\n                        + (items.length == 2 && dividers.length == 1 ? padding : 0)\n            }\n\n            ctx.roundRect(rect.x, rect.y, rect.width, rect.height, borderRadius)\n            ctx.fillStyle = Theme.background + dropdownOpacity\n            ctx.setLineDash([])\n            ctx.lineWidth = 1\n            ctx.strokeStyle = borderColor + dropdownOpacity\n            ctx.fill()\n            ctx.stroke()\n\n            ctx.beginPath()\n\n            y += 6\n\n            for (const item of this.#options.items) {\n                ctx.beginPath()\n\n                if (item.isDivider == true) {\n                    y += 2\n\n                    ctx.moveTo(x + padding, y)\n                    ctx.lineTo(x + maxWidth - padding, y)\n\n                    ctx.lineWidth = .5\n                    ctx.stroke()\n\n                    y += 4\n\n                    continue\n                }\n\n                ctx.fillStyle = 'transparent'\n\n                const animationKey = 'animation-dropdown' + item.text\n\n                const translate = (transition: number, event: AnimationType, isReturn?: boolean) => {\n                    this.animations.reload(animationKey, event)\n\n                    if (isReturn && transition == 1)\n                        return\n\n                    let opacity = Math.round(itemOpacityDec * transition).toString(16)\n                    if (opacity.length == 1)\n                        opacity = '0' + opacity\n\n                    ctx.fillStyle = itemBackground + opacity\n                }\n\n                if (this.#isOnButton(moveEvent, x, y, maxWidth, 20)) {\n                    this.animations.add(animationKey,\n                        AnimationType.MouseOver,\n                        {\n                            duration: 300,\n                            body: transition => {\n                                translate(transition, AnimationType.MouseLeave)\n                            }\n                        })\n\n                    this.#canvas.style.cursor = Styles.Cursor.Pointer\n\n                    if (clickEvent) {\n                        item.action()\n\n                        clickEvent = undefined\n                        this.isActive = false\n                    }\n                } else {\n                    this.animations.add(animationKey,\n                        AnimationType.MouseLeave,\n                        {\n                            timer: Constants.Dates.minDate,\n                            duration: 300,\n                            backward: true,\n                            body: transition => {\n                                translate(transition, AnimationType.MouseOver, true)\n                            }\n                        })\n                }\n\n                ctx.roundRect(x + padding, y, maxWidth - padding * 2, 20, borderRadius)\n                ctx.fill()\n\n                TextStyles.regular(ctx)\n                ctx.fillStyle = Theme.text\n                ctx.textAlign = 'left'\n                ctx.textBaseline = 'hanging'\n                ctx.fillText(item.text, x + padding * 2, y + 5)\n\n                y += 22\n            }\n        }\n\n        ctx.lineWidth = 1\n\n        if (!this.#isOnlyMenu && clickEvent != undefined && this.isActive) {\n            this.isActive = false\n            clickEvent = undefined\n        }\n\n        this.#isInit = true\n\n        if (this.#isOnlyMenu && clickEvent && moveEvent.x == clickEvent.x && moveEvent.y == clickEvent.y) {\n            this.isActive = !this.isActive\n            clickEvent = undefined\n        }\n\n        return clickEvent\n    }\n\n    #initAnimations() {\n        this.#canvasPosition = this.#canvas.getBoundingClientRect()\n\n        this.#canvasPosition.x += scrollX\n        this.#canvasPosition.y += scrollY\n    }\n\n    #isOnButton(event: MouseEvent, x: number, y: number, w: number, h: number): boolean {\n        if (!event)\n            return false\n\n        let trueX = event.clientX - this.#canvasPosition.x + scrollX,\n            trueY = event.clientY - this.#canvasPosition.y + scrollY\n\n        return trueX >= x && trueX <= x + w\n               && trueY >= y && trueY <= y + h\n    }\n\n    refresh() {\n        this.#isInit = false\n    }\n\n    resize() {\n        this.#initAnimations()\n        this.#calculatePosition()\n    }\n\n    close() {\n        this.isActive = false\n    }\n\n    #calculatePosition() {\n        const width = this.#isOnlyMenu ? 0 : Helper.stringWidth(this.#options.text ?? '') + 12,\n            height = this.#isOnlyMenu ? 0 : 20\n\n        this.#position = {\n            x: this.#options.x + width > this.#canvas.width\n               ? this.#canvas.width - width\n               : this.#options.x < 0\n                 ? this.#canvas.width + this.#options.x - width\n                 : this.#options.x,\n            y: this.#options.y + height > this.#canvas.height\n               ? this.#canvas.height - height\n               : this.#options.y < 0\n                 ? this.#canvas.height + this.#options.y - height\n                 : this.#options.y,\n            width: width,\n            height: height\n        } as DOMRect\n    }\n}","import { Helper } from './Helper'\nimport { ThemeOptions } from './static/ThemeOptions'\nimport { Events } from './static/Enums'\n\nexport class Theme {\n    static currentTheme = 0\n\n    static text: string\n\n    static background: string\n\n    static line: string\n\n    static lineAxis: string\n\n    static lineActive: string\n\n    static dropdownItemHoverColor: string\n\n    static dropdownBorder: string\n\n    static canvasBackground: string\n\n    static canvasBackgroundInt: number\n\n    static function: Function | undefined\n\n    static initialize(callback: Function, isDark?: Function) {\n        if (!Theme.function && isDark)\n            Theme.function = isDark\n\n        if (window.matchMedia\n            && window.matchMedia('(prefers-color-scheme: dark)').matches\n            && (!Theme.function || Theme.function()))\n            Theme.setTheme(1)\n        else\n            Theme.setTheme(0)\n\n        window.matchMedia('(prefers-color-scheme: dark)')\n              .addEventListener(Events.Change, event => {\n                  Theme.setTheme(event.matches && (!Theme.function || Theme.function()) ? 1 : 0)\n                  callback()\n              })\n    }\n\n    static setTheme(index: number) {\n        Theme.currentTheme = index\n\n        Theme.text = ThemeOptions.colors[index]\n        Theme.background = ThemeOptions.backgrounds[index]\n        Theme.line = ThemeOptions.lines[index]\n        Theme.lineAxis = ThemeOptions.lineAxes[index]\n        Theme.lineActive = ThemeOptions.lineActives[index]\n        Theme.dropdownItemHoverColor = Helper.adjustColor(Theme.background, index == 0 ? -50 : 50)\n        Theme.dropdownBorder = ThemeOptions.dropdownBorders[index]\n        Theme.canvasBackground = ThemeOptions.canvasBackgrounds[index]\n        Theme.canvasBackgroundInt = Number(`0xff${ Theme.canvasBackground.slice(1) }`)\n    }\n\n    static reset() {\n        this.function = undefined\n    }\n}","import { Renderer } from '../types/base/Renderer'\nimport { CircularData } from '../types/data/CircularData'\nimport { Sector } from '../types/Sector'\nimport { CircularAngle } from '../types/CircularAngle'\nimport { Point } from '../types/Point'\nimport { DropdownItem } from '../types/DropdownItem'\nimport { Helper } from '../Helper'\nimport { Dropdown } from '../Dropdown'\nimport { Theme } from '../Theme'\nimport { TextStyles } from '../helpers/TextStyles'\nimport { Chart } from '../Chart'\nimport { TooltipValue } from '../types/TooltipValue'\nimport { Decomposition } from '../Decomposition'\nimport { Export } from '../Export'\nimport { TextResources } from '../static/TextResources'\nimport { Modal } from '../Modal'\nimport { Canvas } from '../helpers/Canvas'\nimport { Formatter } from '../helpers/Formatter'\nimport { AnimationType, Events, Icon, RenderState } from '../static/Enums'\nimport * as Constants from '../static/constants/Index'\nimport { Styles } from '../static/constants/Styles'\n\nexport class CircularRenderer extends Renderer<CircularData> {\n    #canRenderInnerTitle: boolean\n\n    #isDonut: boolean\n\n    #radius: number\n\n    #sum: number\n\n    #accumulator: number\n\n    #animationOffset: number\n\n    #hoverCount: number\n\n    #currentHover: string | undefined\n\n    #pinned: string[]\n\n    #center: Point\n\n    #startPoint: Point\n\n    #angles: CircularAngle[]\n\n    #other: Sector[]\n\n    #innerTitleStyle: Function\n\n    readonly #startAngle: number\n\n    constructor(chart: Chart) {\n        super(chart)\n\n        this.data.values = this.data.values.map(v => new Sector(v))\n\n        if (this.settings.enableOther) {\n            if (!this.settings.contextMenu)\n                this.settings.contextMenu = [] as DropdownItem[]\n            else\n                this.settings.contextMenu.push({\n                    isDivider: true\n                } as DropdownItem)\n\n            this.settings.contextMenu.push({\n                    text: TextResources.Show,\n                    condition: data => data?._other,\n                    action: () => {\n                        new Modal(Decomposition.toChart<Sector>(this.settings, this.#other),\n                            {\n                                width: window.innerWidth * .8,\n                                height: window.innerHeight * .8\n                            } as DOMRect)\n                            .open()\n                    }\n                })\n        }\n\n        this.#startAngle = Math.PI / 4\n\n        this.#pinned = []\n\n        this.onMouseMoveEvent = new MouseEvent(Events.MouseMove)\n    }\n\n    render() {\n        super.render()\n\n        this.#accumulator = this.#startAngle\n        this.#hoverCount = 0\n\n        if (this.data.values.filter(v => !v.disabled).length == 0)\n            this.#drawEmpty()\n        else\n            this.#draw()\n\n        if (this.#hoverCount == 0)\n            this.#currentHover = undefined\n\n        this.state = RenderState.Idle\n\n        super.renderDropdown()\n\n        if (this.#currentHover || this.contextMenu)\n            this.renderContextMenu(this.data.values.find(v => v.id == this.#currentHover)?.data ?? {})\n        else\n            this.onContextMenuEvent = undefined\n\n        if (this.#currentHover)\n            this.canvas.style.cursor = Styles.Cursor.Pointer\n    }\n\n    #draw() {\n        if (this.onMouseMoveEvent || this.state == RenderState.Init) {\n            this.#sum = this.data.values.reduce((acc, v) => acc + v.current, 0)\n\n            let anglesSum = this.#startAngle\n            this.#angles = this.data.values.flatMap(sector => {\n                                   const angle = sector.current / this.#sum * 2 * Math.PI\n\n                                   return {\n                                       id: sector.id,\n                                       value: angle,\n                                       sum: (anglesSum += angle) - angle\n                                   }\n                               })\n                               .reverse()\n\n            this.#startPoint = this.#getPoint(this.#radius, 0)\n\n            for (const value of this.data.values)\n                this.#drawSector(value)\n\n            const value = this.data.values.find(v => v.id == this.#currentHover)\n            this.tooltip.render(!!value && !this.dropdown?.isActive,\n                this.onMouseMoveEvent,\n                [\n                    new TooltipValue(`${ value?.label }: ${ Formatter.number(value?.current) }`)\n                ],\n                value)\n\n            this.#drawInnerTitle()\n        }\n\n        if (!this.isDestroy)\n            requestAnimationFrame(this.render.bind(this))\n    }\n\n    #drawSector(value: Sector) {\n        const ctx = Canvas.getContext(this.canvas)\n\n        ctx.fillStyle = value.color\n        ctx.strokeStyle = value.color\n\n        const piece = value.current / this.#sum,\n            angle = (isNaN(piece) ? 1 : piece) * 2 * Math.PI\n\n        const isSingle = this.data.values.filter(s => !s.disabled).length == 1\n\n        if ((!!this.onClickEvent || this.#pinned.includes(value.id))\n            && !this.animations.contains(value.id, AnimationType.Init)\n            && !isSingle) {\n            this.animations.add(value.id,\n                AnimationType.Click,\n                {\n                    duration: Constants.Animations.circular,\n                    before: () => {\n                        if (!!this.onClickEvent) {\n                            if (this.#isInsideSector(this.onClickEvent, value)) {\n                                if (this.#pinned.includes(value.id))\n                                    this.#pinned = this.#pinned.filter(id => id != value.id)\n                                else\n                                    this.#pinned.push(value.id)\n\n                                this.onClickEvent = new PointerEvent(Events.Click)\n                            }\n                        }\n\n                        return true\n                    },\n                    body: () => {\n                        if (!this.#pinned.includes(value.id))\n                            return\n\n                        const piece = value.current / this.#sum,\n                            angle = (isNaN(piece) ? 1 : piece) * 2 * Math.PI,\n                            direction = this.#accumulator + angle / 2\n\n                        const transition = {\n                            x: this.#animationOffset * Math.cos(direction),\n                            y: this.#animationOffset * Math.sin(direction)\n                        }\n\n                        ctx.translate(transition.x, transition.y)\n\n                        if (angle > Math.PI / 6)\n                            ctx.lineWidth = 8\n                        ctx.lineJoin = 'round'\n                        ctx.lineCap = 'round'\n\n                        ctx.fillStyle = value.color\n                    }\n                })\n        }\n\n        if (this.onMouseMoveEvent && this.#isInsideSector(this.onMouseMoveEvent, value)) {\n            this.#currentHover = value.id\n            this.#hoverCount++\n        }\n\n        if (this.state == RenderState.Init || this.animations.contains(value.id, AnimationType.Init)) {\n            this.animations.add(value.id,\n                AnimationType.Init,\n                {\n                    duration: Constants.Animations.circular + (this.data.values.indexOf(value) + 1) / this.data.values.length * Constants.Animations.circular,\n                    continuous: true,\n                    body: transition => {\n                        const centerOfSector = {\n                            x: this.#center.x + this.#radius / 2 * Math.cos(this.#accumulator + angle / 2),\n                            y: this.#center.y + this.#radius / 2 * Math.sin(this.#accumulator + angle / 2)\n                        }\n\n                        const minSize = .7,\n                            rest = 1 - minSize\n\n                        ctx.translate(centerOfSector.x - centerOfSector.x * (minSize + transition * rest),\n                            centerOfSector.y - centerOfSector.y * (minSize + transition * rest))\n                        ctx.scale((minSize + transition * rest), (minSize + transition * rest))\n\n                        let opacity = Math.round(255 * transition).toString(16)\n\n                        if (opacity.length < 2)\n                            opacity = 0 + opacity\n\n                        ctx.fillStyle = value.color + opacity\n                        ctx.strokeStyle = Helper.applyAlpha(value.color, 255 * transition)\n                    }\n                })\n        } else if (this.onMouseMoveEvent\n                   && !this.animations.contains(value.id, AnimationType.Init)\n                   && !this.#pinned.includes(value.id)\n                   && !isSingle) {\n            const translate = (transition: number, event: AnimationType, swap: boolean) => {\n                this.animations.reload(value.id, event)\n\n                ctx.lineWidth = 1\n                ctx.lineJoin = 'miter'\n                ctx.lineCap = 'butt'\n\n                if (transition == 0)\n                    return\n\n                if (swap)\n                    transition = value.transition\n\n                const piece = value.current / this.#sum,\n                    angle = (isNaN(piece) ? 1 : piece) * 2 * Math.PI,\n                    direction = this.#accumulator + angle / 2,\n                    translate = {\n                        x: this.#animationOffset * Math.cos(direction) * transition,\n                        y: this.#animationOffset * Math.sin(direction) * transition\n                    }\n\n                ctx.translate(translate.x, translate.y)\n\n                if (angle > Math.PI / 6)\n                    ctx.lineWidth = transition * 8\n                ctx.lineJoin = 'round'\n                ctx.lineCap = 'round'\n\n                value.translate = translate\n                value.transition = transition\n            }\n\n            if (!this.#isInsideSector(this.onMouseMoveEvent, value)\n                || !this.animations.contains(value.id, AnimationType.MouseLeave))\n                this.animations.add(value.id,\n                    AnimationType.MouseLeave,\n                    {\n                        timer: Constants.Dates.minDate,\n                        duration: Constants.Animations.circular,\n                        backward: true,\n                        body: transition => {\n                            translate(transition,\n                                AnimationType.MouseOver,\n                                value.transition < transition)\n                        }\n                    })\n            else\n                this.animations.add(value.id,\n                    AnimationType.MouseOver,\n                    {\n                        duration: Constants.Animations.circular,\n                        body: transition => {\n                            translate(transition,\n                                AnimationType.MouseLeave,\n                                value.transition > transition)\n                        }\n                    })\n        }\n\n        let point2 = this.#getPoint(this.#radius, angle)\n\n        if (angle > 0) {\n            ctx.save()\n\n            if (value.current > 0) {\n                let labelStartPoint = this.#getPoint(this.#radius + 10, angle / 2),\n                    labelMidPoint = this.#getPoint(this.#radius + 20, angle / 2)\n\n                const dir = labelStartPoint.x > this.#center.x ? 1 : -1\n\n                let endPoint = {\n                    x: labelMidPoint.x + 10 * dir,\n                    y: labelMidPoint.y\n                }\n\n                let isBusy = false\n\n                const textWidth = Helper.stringWidth(value.label),\n                    imageDataX = dir == 1 ? endPoint.x + 12 : endPoint.x - textWidth - 12,\n                    imageData = new Uint32Array(ctx.getImageData(imageDataX, endPoint.y - 12, textWidth + 12, 28).data.buffer)\n\n                if (imageDataX < 0 || imageDataX + textWidth > this.canvas.width\n                    || endPoint.y - 12 < 0 || endPoint.y + 12 > this.canvas.height)\n                    isBusy = true\n\n                if (!isBusy)\n                    for (let i = 0; i < imageData.length; i++)\n                        if (Canvas.isPixelBusy(imageData[i])) {\n                            isBusy = true\n                            break\n                        }\n\n                if (!isBusy) {\n                    ctx.beginPath()\n                    ctx.moveTo(labelStartPoint.x, labelStartPoint.y)\n\n                    ctx.quadraticCurveTo(labelMidPoint.x, labelMidPoint.y, endPoint.x, endPoint.y)\n\n                    let opacity = Math.round(255 * (value.current / value.value)).toString(16)\n\n                    if (opacity.length < 2)\n                        opacity = 0 + opacity\n\n                    ctx.strokeStyle = Theme.text + opacity\n                    ctx.lineCap = 'butt'\n                    ctx.lineJoin = 'miter'\n                    ctx.lineWidth = 1\n                    ctx.stroke()\n\n                    ctx.fillStyle = Theme.text + opacity\n                    TextStyles.circularLabel(ctx, dir == 1)\n                    ctx.fillText(value.label, endPoint.x + 8 * dir, endPoint.y + 4)\n                }\n            }\n\n            ctx.restore()\n\n            ctx.beginPath()\n\n            if (!this.#isDonut)\n                ctx.moveTo(this.#center.x, this.#center.y)\n\n            ctx.lineTo(this.#startPoint.x, this.#startPoint.y)\n\n            let localAccumulator = 0,\n                localAngle = angle\n\n            while (localAngle > 0) {\n                let currentAngle = localAngle - Math.PI / 6 > 0\n                                   ? Math.PI / 6\n                                   : localAngle\n\n                point2 = this.#getPoint(this.#radius, localAccumulator + currentAngle)\n\n                const tangentIntersectionAngle = Math.PI - currentAngle,\n                    lengthToTangentIntersection = this.#radius / Math.sin(tangentIntersectionAngle / 2),\n                    tangentIntersectionPoint = this.#getPoint(lengthToTangentIntersection, localAccumulator + currentAngle / 2)\n\n                ctx.quadraticCurveTo(tangentIntersectionPoint.x, tangentIntersectionPoint.y, point2.x, point2.y)\n\n                localAccumulator += currentAngle\n\n                localAngle -= Math.PI / 6\n            }\n\n            if (this.#isDonut || value.innerRadius != 0) {\n                const innerRadius = this.#radius * (value.innerRadius / 100)\n\n                const innerPoint2 = {\n                    x: point2.x - (((this.#radius - innerRadius) * (point2.x - this.#center.x)) / this.#radius),\n                    y: point2.y - (((this.#radius - innerRadius) * (point2.y - this.#center.y)) / this.#radius)\n                }\n\n                ctx.lineTo(innerPoint2.x, innerPoint2.y)\n\n                localAngle = 0\n                localAccumulator = angle\n\n                while (localAngle < angle) {\n                    let currentAngle = localAngle + Math.PI / 6 < angle\n                                       ? Math.PI / 6\n                                       : angle - localAngle\n\n                    point2 = this.#getPoint(innerRadius, localAccumulator - currentAngle)\n\n                    const tangentIntersectionAngle = Math.PI - currentAngle,\n                        lengthToTangentIntersection = innerRadius / Math.sin(tangentIntersectionAngle / 2),\n                        tangentIntersectionPoint = this.#getPoint(lengthToTangentIntersection, localAccumulator - currentAngle / 2)\n\n                    ctx.quadraticCurveTo(tangentIntersectionPoint.x, tangentIntersectionPoint.y, point2.x, point2.y)\n\n                    localAccumulator -= currentAngle\n\n                    localAngle += Math.PI / 6\n                }\n\n                point2 = this.#getPoint(this.#radius, angle)\n            }\n\n            if (!this.animations.contains(value.id, AnimationType.Init)) {\n                const changeColor = (transition: number, event: AnimationType) => {\n                    this.animations.reload(value.id, event)\n\n                    if (transition == 0)\n                        return\n\n                    let opacity = Math.round(255 - 127 * transition).toString(16)\n                    if (opacity.length < 2)\n                        opacity = 0 + opacity\n\n                    ctx.fillStyle = value.color + opacity\n                    ctx.strokeStyle = Helper.applyAlpha(value.color, 255 - 127 * transition)\n                }\n\n                const anyHighlight = this.highlightItems.length != 0\n\n                if ((this.#currentHover && this.#currentHover != value.id)\n                    || (anyHighlight && !this.highlightItems.includes(value.id))) {\n                    this.animations.add(\n                        value.id,\n                        AnimationType.AnotherItemOver,\n                        {\n                            duration: Constants.Animations.circular,\n                            body: transition => {\n                                changeColor(transition, AnimationType.AnotherItemLeave)\n                            }\n                        }\n                    )\n                } else if (this.#currentHover == undefined || !anyHighlight) {\n                    this.animations.add(\n                        value.id,\n                        AnimationType.AnotherItemLeave,\n                        {\n                            timer: Constants.Dates.minDate,\n                            duration: Constants.Animations.circular,\n                            backward: true,\n                            body: transition => {\n                                changeColor(transition, AnimationType.AnotherItemOver)\n                            }\n                        }\n                    )\n                }\n            }\n\n            ctx.closePath()\n\n            ctx.fill()\n            ctx.stroke()\n\n            this.#accumulator += angle\n        }\n\n        ctx.resetTransform()\n\n        this.#startPoint = point2\n    }\n\n    #getPoint(radius: number, angle: number): Point {\n        return {\n            x: this.#center.x + radius * Math.cos(this.#accumulator + angle),\n            y: this.#center.y + radius * Math.sin(this.#accumulator + angle)\n        }\n    }\n\n    #isInsideSector(event: MouseEvent, value: Sector): boolean {\n        const isAngle = (point: Point) => {\n            let a = Math.atan2(point.y - this.#center.y, point.x - this.#center.x)\n            if (a < 0)\n                a += Math.PI * 2\n            if (a < this.#startAngle)\n                a = Math.PI * 2 - Math.abs(this.#startAngle - a) + this.#startAngle\n\n            let index = this.#angles.findIndex(o => o.id == value.id),\n                sumBefore = this.#angles[index].sum\n\n            return !(this.dropdown?.isActive ?? false)\n                   && sumBefore <= a\n                   && sumBefore + this.#angles[index].value - a >= 0\n        }\n\n        const isWithinRadius = (v: Point) => {\n            return v.x * v.x + v.y * v.y <= this.#radius * this.#radius\n                   && (!this.#isDonut || v.x * v.x + v.y * v.y\n                       >= this.#radius * (value.innerRadius / 100) * this.#radius * (value.innerRadius / 100))\n        }\n\n        const point = this.getMousePosition(event),\n            inner = {\n                x: point.x - this.#center.x,\n                y: point.y - this.#center.y\n            },\n            outer = {\n                x: point.x - this.#center.x - value.translate?.x,\n                y: point.y - this.#center.y - value.translate?.y\n            }\n\n        return isAngle(point) && (isWithinRadius(inner) || isWithinRadius(outer))\n    }\n\n    #drawEmpty() {\n        const ctx = Canvas.getContext(this.canvas)\n\n        ctx.beginPath()\n\n        ctx.arc(this.#center.x, this.#center.y, this.#radius, 0, 2 * Math.PI)\n        ctx.strokeStyle = Theme.text\n        ctx.stroke()\n\n        TextStyles.regular(ctx)\n        ctx.fillText(TextResources.allDataIsHidden, this.#center.x, this.#center.y)\n\n        requestAnimationFrame(this.render.bind(this))\n    }\n\n    #drawInnerTitle() {\n        if (this.#canRenderInnerTitle) {\n            const ctx = Canvas.getContext(this.canvas)\n\n            this.#innerTitleStyle(ctx)\n            ctx.fillText(this.data.innerTitle, this.#center.x, this.#center.y)\n        }\n    }\n\n    #calculateSizes() {\n        const titleOffset = this.settings.title\n                            ? Constants.Values.titleOffset\n                            : 0\n\n        const shortSide = this.canvas.width > this.canvas.height - titleOffset * 2\n                          ? this.canvas.height - titleOffset * 2\n                          : this.canvas.width\n\n        this.#center = {\n            x: this.canvas.width / 2,\n            y: titleOffset + this.canvas.height / 2\n        }\n\n        let longestLabel = 0\n\n        for (const value of this.data.values) {\n            const width = Helper.stringWidth(value.label)\n\n            if (width > longestLabel)\n                longestLabel = width\n        }\n\n        this.#radius = shortSide / 2 - (longestLabel + 50)\n\n        if (this.#radius < shortSide / 2 - 50)\n            this.#radius = shortSide / 2 - 50\n\n        if (this.data.innerTitle != undefined && this.data.innerTitle != '') {\n            this.#innerTitleStyle = TextStyles.large\n            this.#canRenderInnerTitle = Helper.stringWidth(this.data.innerTitle, 16)\n                                        < (this.data.innerRadius / 100) * this.#radius * 2\n\n            if (!this.#canRenderInnerTitle) {\n                this.#innerTitleStyle = TextStyles.regular\n                this.#canRenderInnerTitle = Helper.stringWidth(this.data.innerTitle, 14)\n                                            < (this.data.innerRadius / 100) * this.#radius * 2\n            }\n\n            if (!this.#canRenderInnerTitle)\n                console.warn(`Inner title is declared, but can't be rendered`)\n        }\n\n        this.#animationOffset = this.#radius * .1\n    }\n\n    refresh() {\n        super.refresh()\n\n        this.dropdown?.refresh()\n    }\n\n    resize() {\n        super.resize()\n\n        this.initAnimations()\n        this.#calculateSizes()\n        this.dropdown?.resize()\n    }\n\n    prepareSettings() {\n        super.prepareSettings()\n\n        this.#isDonut = (this.data.innerRadius ?? 0) != 0\n\n        for (let item of this.data.values) {\n            item.disabled = !item.value\n            item.value ??= 0\n            item.current = item.value\n            item.innerRadius ??= this.data.innerRadius ?? 0\n\n            if (item.value < 0)\n                console.warn(`\"${ item.label }\" has negative value (${ item.value }) and will not be render`)\n        }\n\n        this.data.values = this.data.values.filter(v => v.value >= 0)\n\n        if (this.settings.enableOther && this.data.values.length > 20) {\n            this.#other = this.data.values.splice(20)\n\n            const sum = this.#other.reduce((acc, v) => acc + v.current, 0)\n\n            this.data.values = this.data.values.slice(0, 20)\n\n            this.data.values.push(new Sector({\n                value: sum,\n                current: sum,\n                label: TextResources.other,\n                id: Helper.guid(),\n                color: this.#other[this.#other.length - 1].color,\n                innerRadius: this.data.innerRadius,\n                data: {\n                    _other: true\n                }\n            }))\n        }\n    }\n\n    initDropdown() {\n        super.initDropdown()\n\n        this.dropdown = new Dropdown(this.canvas,\n            {\n                x: -10,\n                y: 10,\n                icon: Icon.ThreeLines,\n                items: [\n                    {\n                        text: TextResources.exportPNG,\n                        action: () => {\n                            Export.asPng(this.canvas, this.settings.title)\n                        }\n                    },\n                    {\n                        text: TextResources.exportCSV,\n                        action: () => {\n                            Export.asCsv(Decomposition.toTable(CircularData.getRows(this.data)), this.settings.title)\n                        }\n                    },\n                    {\n                        isDivider: true\n                    } as DropdownItem,\n                    {\n                        text: TextResources.decomposeToTable,\n                        action: () => {\n                            new Modal(Decomposition.toTable(CircularData.getRows(this.data))).open()\n                        }\n                    }\n                ]\n            })\n    }\n}","import { Data } from '../interfaces/Data'\nimport { Renderable } from './Renderable'\nimport { Helper } from '../../Helper'\nimport { Value } from './Value'\nimport { Legend } from '../../Legend'\nimport { Dropdown } from '../../Dropdown'\nimport { DropdownItem } from '../DropdownItem'\nimport { Point } from '../Point'\nimport { TextResources } from '../../static/TextResources'\nimport { Chart } from '../../Chart'\nimport { Canvas } from '../../helpers/Canvas'\nimport { TextStyles } from '../../helpers/TextStyles'\nimport { LegendPlace, RenderState } from '../../static/Enums'\nimport * as Constants from '../../static/constants/Index'\n\nexport class Renderer<T extends Data> extends Renderable {\n    dropdown: Dropdown\n\n    data: T\n\n    protected isDestroy: boolean = false\n\n    protected highlightItems: string[]\n\n    constructor(chart: Chart) {\n        super(chart)\n\n        this.data = <T>this.settings.data\n\n        this.highlightItems = []\n\n        this.state = this.settings.disableInitAnimation ? RenderState.Idle : RenderState.Init\n    }\n\n    render() {\n        super.render()\n\n        this.renderTitle()\n    }\n\n    destroy() {\n        this.isDestroy = true\n\n        this.canvas.remove()\n    }\n\n    renderDropdown() {\n        this.onClickEvent = this.dropdown?.render(this.onMouseMoveEvent, this.onClickEvent)\n    }\n\n    resize() {\n        this.#calculateSizes()\n        this.tooltip.refresh()\n        this.dropdown?.resize()\n    }\n\n    prepareSettings() {\n        const domRect = this.node.parentElement!.getBoundingClientRect()\n\n        this.settings.minWidth = isNaN(+this.settings.width)\n                                 ? 0\n                                 : +this.settings.width\n        this.settings.minHeight = isNaN(+this.settings.height)\n                                  ? 0\n                                  : +this.settings.height\n\n        this.settings.width = this.settings.minWidth != 0 && domRect.width < this.settings.minWidth\n                              ? this.settings.minWidth\n                              : domRect.width\n\n        this.settings.height = this.settings.minHeight != 0 && domRect.height < this.settings.minHeight\n                               ? this.settings.minHeight\n                               : domRect.height\n\n        this.canvas.width = this.settings.width\n        this.canvas.height = this.settings.height\n\n        const baseColor = this.settings.baseColor ?? Helper.randomColor()\n        let adjustStep = Math.round(100 / this.settings.data.values.length),\n            adjustAmount = -50\n\n        if (adjustStep <= 1)\n            adjustStep = 1\n\n        for (let item of this.settings.data.values) {\n            item.id = Helper.guid()\n            item.color ??= Helper.adjustColor(baseColor, adjustAmount += adjustStep)\n            item.label ??= TextResources.NoLabel\n\n            if (item.label.length > 30)\n                item.label = item.label.slice(0, 27) + '...'\n        }\n\n        for (let item of this.settings.contextMenu ?? [])\n            if (item.id != undefined)\n                item.action = data => this.node.dispatchEvent(new CustomEvent(item.id ?? '', { detail: data }))\n    }\n\n    initDropdown() {\n    }\n\n    renderContextMenu(data: any) {\n        if (this.dropdown?.isActive) {\n            this.onContextMenuEvent = undefined\n\n            return false\n        }\n\n        if (this.onContextMenuEvent != undefined && this.settings.contextMenu?.length != 0) {\n            if (this.contextMenu == undefined && this.settings.contextMenu != undefined) {\n                let clone: DropdownItem[] = []\n\n                for (const item of this.settings.contextMenu)\n                    if (!item.condition || item.condition(data))\n                        clone.push({\n                            id: item.id,\n                            text: item.text,\n                            isDivider: item.isDivider,\n                            action: () => {\n                                item.action(data)\n\n                                this.onContextMenuEvent = undefined\n                                this.contextMenu = undefined\n                            }\n                        })\n\n                this.contextMenu = new Dropdown(this.canvas, {\n                    x: this.onContextMenuEvent.x - this.canvasPosition.x,\n                    y: this.onContextMenuEvent.y - this.canvasPosition.y,\n                    items: clone,\n                    data: data\n                })\n\n                this.contextMenu.resize()\n\n                this.onClickEvent = undefined\n            }\n\n            const isClick = this.onClickEvent != undefined\n\n            this.onClickEvent = this.contextMenu?.render(this.onMouseMoveEvent, this.onClickEvent)\n\n            if (this.onClickEvent == undefined && isClick) {\n                this.contextMenu = undefined\n                this.onContextMenuEvent = undefined\n\n                return true\n            }\n        }\n\n        return false\n    }\n\n    highlight(value?: Value) {\n        if (value)\n            this.highlightItems = [value.id]\n        else\n            this.highlightItems = []\n    }\n\n    closeDropdowns() {\n        this.dropdown?.close()\n        this.onContextMenuEvent = undefined\n    }\n\n    protected renderTitle() {\n        const ctx = Canvas.getContext(this.canvas)\n\n        if (this.settings.title) {\n            TextStyles.title(ctx)\n            ctx.fillText(this.settings.title, this.canvas.width / 2, Constants.Values.titleOffset)\n        }\n    }\n\n    #calculateSizes() {\n        let domRect = this.node.getBoundingClientRect()\n\n        this.settings.width = this.settings.minWidth && domRect.width < this.settings.minWidth\n                              ? this.settings.minWidth\n                              : domRect.width\n        this.settings.height = this.settings.minHeight && domRect.height < this.settings.minHeight\n                               ? this.settings.minHeight\n                               : domRect.height\n\n        this.canvas.width = this.settings.width\n        this.canvas.height = this.settings.height\n\n        if (this.settings.enableLegend) {\n            if (this.settings.legendPlace == undefined\n                || this.settings.legendPlace == LegendPlace.Top\n                || this.settings.legendPlace == LegendPlace.Bottom)\n                this.canvas.height -= Legend.getLegendHeight(this.settings.data.values, this.canvas.width)\n\n            if (this.settings.legendPlace == LegendPlace.Left\n                || this.settings.legendPlace == LegendPlace.Right)\n                this.canvas.width -= 500\n        }\n    }\n\n    protected getMousePosition(event: MouseEvent): Point {\n        return {\n            x: event.clientX - this.canvasPosition.x + scrollX,\n            y: event.clientY - this.canvasPosition.y + scrollY\n        }\n    }\n}","import { Value } from '../base/Value'\nimport { TableValue } from '../TableValue'\nimport { TableData } from '../TableData'\nimport { Data } from '../interfaces/Data'\n\nexport class TreeData implements Data {\n    values: Value[]\n\n    padding: number\n\n    static getRows(data: TreeData): TableData {\n        const key = 'Value'\n\n        let values: TableValue[] = []\n\n        for (const value of data.values)\n            values.push({\n                name: value.label,\n                values: new Map([[key, value.value]])\n            })\n\n        return {\n            headers: [\n                {\n                    value: key,\n                    display: key\n                }\n            ],\n            values: values\n        }\n    }\n}","import { TableValue } from '../TableValue'\nimport { Sector } from '../Sector'\nimport { TableData } from '../TableData'\nimport { Data } from '../interfaces/Data'\n\nexport class CircularData implements Data {\n    values: Sector[]\n\n    innerRadius: number\n\n    innerTitle: string\n\n    static getRows(data: CircularData): TableData {\n        const key = 'Value'\n\n        let values: TableValue[] = []\n\n        for (const value of data.values)\n            values.push({\n                name: value.label,\n                values: new Map([[key, value.value]])\n            })\n\n        return {\n            headers: [\n                {\n                    value: key,\n                    display: key\n                }\n            ],\n            values: values\n        }\n    }\n}","export class Value {\n    id: string\n\n    color: string\n\n    label: string\n\n    disabled: boolean\n\n    hideInLegend: boolean\n\n    data: { [key: string]: string }\n\n    value: number\n\n    toggle(transition: number) {\n        if (transition == 0)\n            this.disabled = !this.disabled\n    }\n\n    checkCondition(): boolean {\n        return false\n    }\n\n    reset() {\n        this.disabled = false\n    }\n}","import { PlotData } from '../types/data/PlotData'\nimport { Renderer } from '../types/base/Renderer'\nimport { Helper } from '../Helper'\nimport { DropdownItem } from '../types/DropdownItem'\nimport { PlotAxis } from '../types/PlotAxis'\nimport { Paddings } from '../types/Paddings'\nimport { Dropdown } from '../Dropdown'\nimport { HoverItem } from '../types/HoverItem'\nimport { PlotSeries } from '../types/PlotSeries'\nimport { Tooltip } from '../Tooltip'\nimport { Theme } from '../Theme'\nimport { Chart } from '../Chart'\nimport { TextStyles } from '../helpers/TextStyles'\nimport { TooltipValue } from '../types/TooltipValue'\nimport { Export } from '../Export'\nimport { Decomposition } from '../Decomposition'\nimport { Modal } from '../Modal'\nimport { TextResources } from '../static/TextResources'\nimport { Formatter } from '../helpers/Formatter'\nimport { Canvas } from '../helpers/Canvas'\nimport { AnimationType, Icon, LineType, PlotAxisType, PlotType, RenderState } from '../static/Enums'\nimport * as Constants from '../static/constants/Index'\n\nexport class PlotRenderer extends Renderer<PlotData> {\n    #x: PlotAxis\n\n    #y: PlotAxis\n\n    #paddings: Paddings\n\n    #tooltipX: number\n\n    #tooltipY: number\n\n    #labelsX: Map<number, string>\n\n    #labelsY: Map<number, string>\n\n    #allValuesX: any[]\n\n    #allValuesY: any[]\n\n    #base: ImageBitmap | undefined\n\n    #backLines: ImageData | undefined\n\n    #yAxisStep: number\n\n    #plot: DOMRect\n\n    #hoverX: HoverItem | undefined\n\n    constructor(chart: Chart) {\n        super(chart)\n\n        this.data.values = this.data.values.map(v => new PlotSeries(v))\n\n        if (this.data.values.filter(v => v.type == PlotType.Bar).length > 0) {\n            for (let series of this.data.values) {\n                for (let item of series.values) {\n                    const x = item.x\n                    item['x'] = item.y\n                    item['y'] = x\n                }\n\n                series.values.sort((a, b) => b.x > a.x ? 1 : -1)\n            }\n        }\n\n        this.#paddings = {\n            top: 30,\n            right: 40,\n            bottom: 50,\n            left: 80\n        }\n\n        if (this.settings.title)\n            this.#paddings.top += Constants.Values.titleOffset\n\n        this.tooltip = new Tooltip(this.canvas, this.settings)\n\n        this.#labelsX = new Map()\n        this.#labelsY = new Map()\n    }\n\n    render() {\n        super.render()\n\n        let tooltipLines = [\n            new TooltipValue(this.#labelsX.get(Math.round(this.#tooltipX))\n                             ?? this.#labelsY.get(Math.round(this.#tooltipY)))\n        ]\n\n        const ctx = Canvas.getContext(this.canvas)\n\n        TextStyles.regular(ctx)\n        ctx.lineJoin = 'round'\n\n        const axisLineHoverColor = Theme.lineActive\n\n        this.#renderBackLines()\n        this.#renderBase(true)\n\n        let x = 0,\n            y = 0,\n            yValue = 0,\n            yHeight = 0,\n            columnWidth = 0\n\n        const seriesToRender = this.data.values.filter(s => !s.disabled)\n\n        let columnsIndex = 0,\n            columnsCount = seriesToRender.filter(s => s.type == PlotType.Column).length\n\n        let barsIndex = 0,\n            barsCount = seriesToRender.filter(s => s.type == PlotType.Bar).length\n\n        let stackingAccumulator = []\n        for (let i = 0; i < this.#allValuesY.length; i++)\n            stackingAccumulator.push(0)\n\n        for (const series of seriesToRender) {\n            ctx.beginPath()\n\n            ctx.strokeStyle = series.color\n            ctx.fillStyle = series.color\n            ctx.lineWidth = series.width\n            ctx.lineCap = 'round'\n\n            const anyHighlight = this.highlightItems.length != 0\n\n            if (!this.animations.contains(series.id, AnimationType.Init)) {\n                const changeColor = (transition: number, event: AnimationType) => {\n                    this.animations.reload(series.id, event)\n\n                    if (transition == 0)\n                        return\n\n                    let opacity = Math.round(255 - 127 * transition).toString(16)\n                    if (opacity.length < 2)\n                        opacity = 0 + opacity\n\n                    ctx.fillStyle = series.color + opacity\n                    ctx.strokeStyle = series.color + opacity\n                }\n\n                if (anyHighlight && !this.highlightItems.includes(series.id)) {\n                    this.animations.add(\n                        series.id,\n                        AnimationType.AnotherItemOver,\n                        {\n                            duration: Constants.Animations.circular,\n                            body: transition => {\n                                changeColor(transition, AnimationType.AnotherItemLeave)\n                            }\n                        }\n                    )\n                } else if (!anyHighlight) {\n                    this.animations.add(\n                        series.id,\n                        AnimationType.AnotherItemLeave,\n                        {\n                            timer: Constants.Dates.minDate,\n                            duration: Constants.Animations.circular,\n                            backward: true,\n                            body: transition => {\n                                changeColor(transition, AnimationType.AnotherItemOver)\n                            }\n                        }\n                    )\n                }\n            }\n\n            switch (series.lineType) {\n                case LineType.Dash:\n                    ctx.setLineDash([series.width * 3, series.width * 2])\n\n                    break\n\n                case LineType.Dotted:\n                    ctx.setLineDash([series.width, series.width])\n\n                    break\n\n                case LineType.Solid:\n                default:\n                    break\n            }\n\n            for (const value of series.values) {\n                let index = series.values.indexOf(value),\n                    xIndex = this.#allValuesX.indexOf(this.data.xType == PlotAxisType.Date ? value.x?.toString() : value.x),\n                    yIndex = this.#allValuesY.indexOf(value.y)\n\n                const getTooltipValue = () => {\n                    return {\n                        x: value.x\n                           ? this.data.xType == PlotAxisType.Date\n                             ? this.#allValuesX[xIndex]\n                             : Formatter.number(this.#allValuesX[xIndex])\n                           : '0',\n                        y: value.y\n                           ? Formatter.number(this.#allValuesY[yIndex])\n                           : '0'\n                    }\n                }\n\n                x = this.#paddings.left\n                if (series.type != PlotType.Bar)\n                    x += xIndex * this.#x.step\n                if (series.type == PlotType.Line)\n                    x -= this.#x.step / 2 - this.#x.step\n\n                switch (series.type) {\n                    case PlotType.Line:\n                        y = this.#paddings.top + this.#plot.height - <number>value.y / this.#y.unit * this.#y.step\n                            - Math.abs(this.#y.min / this.#y.unit * this.#y.step)\n\n                        const pointDuration = 1500 / series.values.length * 1.2\n\n                        if (this.state == RenderState.Init || this.animations.contains(value.id, AnimationType.Init)) {\n                            this.animations.add(value.id,\n                                AnimationType.Init,\n                                {\n                                    timer: new Date(Date.now()).addMilliseconds(pointDuration * (index - 1)),\n                                    duration: pointDuration,\n                                    continuous: true,\n                                    body: transition => {\n                                        if (index == 0)\n                                            return\n\n                                        x = this.#paddings.left + xIndex * this.#x.step - this.#x.step / 2\n                                        y = this.#paddings.top + this.#plot.height - <number>value.y / this.#y.unit * this.#y.step\n                                            - Math.abs(this.#y.min / this.#y.unit * this.#y.step)\n\n                                        const next = series.values[index - 1]\n\n                                        let prevValue = {\n                                            x: this.#paddings.left + xIndex * this.#x.step - this.#x.step / 2,\n                                            y: this.#paddings.top + this.#plot.height - <number>next.y / this.#y.unit * this.#y.step\n                                               - Math.abs(this.#y.min / this.#y.unit * this.#y.step)\n                                        }\n\n                                        const endPointX = prevValue.x + (this.#x.step + (x - prevValue.x)) * transition,\n                                            endPointY = prevValue.y + (y - prevValue.y) * transition\n\n                                        if (prevValue.x != endPointX && prevValue.y != endPointY) {\n                                            ctx.moveTo(prevValue.x, prevValue.y)\n                                            ctx.lineTo(endPointX, endPointY)\n                                        }\n                                    }\n                                })\n                        } else {\n                            ctx.lineTo(x, y)\n\n                            if (this.#isOnX(x)) {\n                                const mouse = this.getMousePosition(this.onMouseMoveEvent)\n\n                                if (Math.abs(mouse.y - y) < 5) {\n                                    this.#hoverX = {\n                                        x: x,\n                                        y: y,\n                                        index: index,\n                                        data: value.data,\n                                        series: series\n                                    }\n\n                                    tooltipLines.push(new TooltipValue(`${ series.label }: ${ getTooltipValue().y }`, series.color))\n                                    this.#tooltipX = x - this.#x.step / 2\n                                }\n                            }\n                        }\n\n                        break\n\n                    case PlotType.AttentionLine:\n                        yValue = this.canvas.height - this.#paddings.bottom - <number>value.y / this.#y.unit * this.#y.step\n\n                        ctx.moveTo(this.#paddings.left, yValue)\n\n                        if (this.state == RenderState.Init || this.animations.contains(value.id, AnimationType.Init))\n                            this.animations.add(value.id,\n                                AnimationType.Init,\n                                {\n                                    duration: 1500,\n                                    continuous: true,\n                                    body: transition => {\n                                        ctx.lineTo(this.#paddings.left + (this.canvas.width - this.#paddings.left - this.#paddings.right) * transition,\n                                            this.canvas.height - this.#paddings.bottom - <number>value.y / this.#y.unit * this.#y.step)\n                                    }\n                                })\n                        else\n                            ctx.lineTo(this.canvas.width - this.#paddings.right, yValue)\n\n                        break\n\n                    case PlotType.Column:\n                        yValue = <number>value.y > this.data.yMax ? this.data.yMax : <number>value.y\n\n                        y = this.#plot.height * yValue / this.#y.max\n                        if (y < this.#y.minStep)\n                            y = this.#y.minStep\n\n                        columnWidth = this.#x.step * (series.width ? series.width / 100 : .5) / columnsCount\n\n                        ctx.beginPath()\n\n                        if (this.state == RenderState.Init || this.animations.contains(value.id + columnsIndex, AnimationType.Init)) {\n                            this.animations.add(value.id + columnsIndex,\n                                AnimationType.Init,\n                                {\n                                    duration: 800,\n                                    continuous: true,\n                                    body: transition => {\n                                        yValue = <number>value.y > this.data.yMax ? this.data.yMax : <number>value.y\n\n                                        x = this.#paddings.left + xIndex * this.#x.step\n                                        y = this.#plot.height * yValue / this.#y.max * transition\n\n                                        if (y < this.#y.minStep)\n                                            y = this.#y.minStep * transition\n\n                                        columnsIndex = this.data.values.filter(s => s.type == PlotType.Column)\n                                                           .indexOf(series)\n\n                                        ctx.roundRect(x + columnsIndex * columnWidth + (this.#x.step - columnsCount * columnWidth) / 2,\n                                            this.canvas.height - this.#paddings.bottom - y,\n                                            columnWidth,\n                                            y,\n                                            [6, 6, 0, 0])\n                                        ctx.fill()\n                                    }\n                                })\n                        } else {\n                            if (!anyHighlight) {\n                                if (this.#isInArea(x + columnsIndex * columnWidth + (this.#x.step - columnsCount * columnWidth) / 2,\n                                        this.canvas.height - this.#paddings.bottom - y,\n                                        columnWidth,\n                                        y)\n                                    && (this.contextMenu?.isActive == undefined\n                                        || this.contextMenu?.isActive == false)) {\n                                    this.#hoverX = {\n                                        x: x,\n                                        y: y,\n                                        index: index,\n                                        data: value.data,\n                                        series: series\n                                    }\n\n                                    tooltipLines.push(new TooltipValue(`${ series.label }: ${ getTooltipValue().y }`, series.color))\n                                    this.#tooltipX = x\n\n                                    ctx.fillStyle += '88'\n                                } else {\n                                    ctx.fillStyle = series.color\n                                }\n                            }\n\n                            ctx.roundRect(x + columnsIndex * columnWidth + (this.#x.step - columnsCount * columnWidth) / 2,\n                                this.canvas.height - this.#paddings.bottom - y,\n                                columnWidth,\n                                y,\n                                [6, 6, 0, 0])\n                            ctx.fill()\n                        }\n\n                        break\n\n                    case PlotType.Bar:\n                        y = this.#paddings.top + yIndex * this.#y.step + this.#y.step / 2\n                            + (100 - series.width) * this.#y.step / 100 / 2\n\n                        const seriesHeight = (series.width * this.#y.step / 100) / barsCount\n\n                        if (this.state == RenderState.Init || this.animations.contains(value.id + barsIndex, AnimationType.Init)) {\n                            this.animations.add(value.id + barsIndex,\n                                AnimationType.Init,\n                                {\n                                    duration: 800,\n                                    continuous: true,\n                                    body: transition => {\n                                        y = this.#paddings.top + yIndex * this.#y.step + this.#y.step / 2\n                                            + (100 - series.width) * this.#y.step / 100 / 2\n\n                                        barsIndex = this.data.values.filter(s => s.type == PlotType.Bar)\n                                                        .indexOf(series)\n\n                                        ctx.fillRect(x,\n                                            y - this.#y.step / 2 + barsIndex * seriesHeight,\n                                            <number>value.x / this.#x.unit * this.#x.step * transition,\n                                            seriesHeight)\n                                    }\n                                })\n                        } else {\n                            if (!anyHighlight) {\n                                if (this.#isInArea(x,\n                                    y - this.#y.step / 2 + barsIndex * seriesHeight,\n                                    <number>value.x / this.#x.unit * this.#x.step,\n                                    seriesHeight)) {\n                                    this.#hoverX = {\n                                        x: x,\n                                        y: y,\n                                        index: index,\n                                        data: value.data,\n                                        series: series\n                                    }\n\n                                    ctx.fillStyle += '88'\n\n                                    tooltipLines.push(new TooltipValue(`${ series.label }: ${ getTooltipValue().x }`, series.color))\n                                    this.#tooltipY = y - this.#y.step / 2\n                                } else {\n                                    ctx.fillStyle = series.color\n                                }\n                            }\n\n                            ctx.fillRect(x,\n                                y - this.#y.step / 2 + barsIndex * seriesHeight,\n                                <number>value.x / this.#x.unit * this.#x.step,\n                                seriesHeight)\n                        }\n\n                        break\n\n                    case PlotType.StackingColumn:\n                        y = this.canvas.height - this.#paddings.bottom - <number>value.y / this.#y.unit * this.#y.step\n\n                        columnWidth = this.#x.step * (series.width ? series.width / 100 : .5)\n\n                        if (this.state == RenderState.Init || this.animations.contains(value.id + index, AnimationType.Init)) {\n                            this.animations.add(value.id + index,\n                                AnimationType.Init,\n                                {\n                                    duration: 800,\n                                    continuous: true,\n                                    body: transition => {\n                                        columnsIndex = this.data.values.filter(s => s.type == PlotType.StackingColumn && s.values.filter(v => v.x == value.x).length > 0)\n                                                           .indexOf(series)\n\n                                        x = this.#paddings.left + xIndex * this.#x.step\n                                        y = this.canvas.height - this.#paddings.bottom - <number>value.y / this.#y.unit * this.#y.step\n\n                                        if (columnsIndex == 0)\n                                            stackingAccumulator[xIndex] = 0\n\n                                        let offset = stackingAccumulator[xIndex] != undefined\n                                                     ? stackingAccumulator[xIndex]\n                                                     : 0\n\n                                        yValue = this.canvas.height - this.#paddings.bottom + offset\n                                        yHeight = (y - this.canvas.height + this.#paddings.bottom) * transition\n\n                                        if (yValue > this.#paddings.top) {\n                                            if (yValue + yHeight < this.#paddings.top)\n                                                yHeight -= yValue + yHeight - this.#paddings.top\n\n                                            ctx.fillRect(x + (this.#x.step - columnWidth) / 2,\n                                                yValue,\n                                                columnWidth,\n                                                yHeight)\n                                        }\n\n                                        stackingAccumulator[xIndex] += (y - this.canvas.height + this.#paddings.bottom) * transition\n                                    }\n                                })\n                        } else {\n                            if (columnsIndex == 0)\n                                stackingAccumulator[xIndex] = 0\n\n                            let offset = stackingAccumulator[xIndex] != undefined\n                                         ? stackingAccumulator[xIndex]\n                                         : 0\n\n                            yValue = this.canvas.height - this.#paddings.bottom + offset\n                            yHeight = y - this.canvas.height + this.#paddings.bottom\n\n                            if (yValue > this.#paddings.top) {\n                                if (yValue + yHeight < this.#paddings.top)\n                                    yHeight -= yValue + yHeight - this.#paddings.top\n\n                                if (!anyHighlight) {\n                                    if (this.#isInArea(x + (this.#x.step - columnWidth) / 2,\n                                        yValue + yHeight,\n                                        columnWidth,\n                                        Math.abs(yHeight))) {\n                                        this.#hoverX = {\n                                            x: x,\n                                            y: y,\n                                            index: xIndex,\n                                            data: value.data,\n                                            series: series\n                                        }\n\n                                        tooltipLines.push(new TooltipValue(`${ series.label }: ${ getTooltipValue().y }`, series.color))\n                                        this.#tooltipX = x\n\n                                        ctx.fillStyle += '88'\n                                    } else {\n                                        ctx.fillStyle = series.color\n                                    }\n                                }\n\n                                ctx.fillRect(x + (this.#x.step - columnWidth) / 2,\n                                    yValue,\n                                    columnWidth,\n                                    yHeight)\n                            }\n\n                            stackingAccumulator[xIndex] += (y - this.canvas.height + this.#paddings.bottom)\n                        }\n\n                        break\n                }\n            }\n\n            ctx.setLineDash([])\n\n            switch (series.type) {\n                case PlotType.Line:\n                    ctx.stroke()\n\n                    if (this.#hoverX && this.#hoverX.series == series) {\n                        ctx.beginPath()\n                        ctx.lineWidth = 1\n                        ctx.strokeStyle = axisLineHoverColor\n                        ctx.moveTo(this.#paddings.left, this.#hoverX.y)\n                        ctx.lineTo(this.canvas.width - this.#paddings.right, this.#hoverX.y)\n                        ctx.stroke()\n\n                        let radius = Math.round(series.width * 1.1)\n                        if (radius < 5)\n                            radius = 5\n\n                        ctx.beginPath()\n                        ctx.arc(this.#hoverX.x, this.#hoverX.y, radius, 0, 2 * Math.PI)\n                        ctx.fill()\n                        ctx.lineWidth = Math.ceil(radius / 2)\n                        ctx.strokeStyle = Helper.adjustColor(series.color, 50)\n                        ctx.stroke()\n                    }\n\n                    break\n\n                case PlotType.AttentionLine:\n                    ctx.stroke()\n\n                    TextStyles.regular(ctx)\n                    ctx.fillText(series.label,\n                        this.#paddings.left + (this.canvas.width - this.#paddings.left - this.#paddings.right) / 2,\n                        this.canvas.height - this.#paddings.bottom - <number>series.values[0].y / this.#y.unit * this.#y.step + 16)\n\n                    break\n\n                case PlotType.Column:\n                case PlotType.StackingColumn:\n                    if (this.#hoverX) {\n                        let offset = stackingAccumulator[this.#hoverX.index] != undefined\n                                     ? stackingAccumulator[this.#hoverX.index]\n                                     : 0\n\n                        if (this.canvas.height - this.#paddings.bottom + offset > this.#paddings.top) {\n                            ctx.beginPath()\n                            ctx.lineWidth = 1\n                            ctx.strokeStyle = axisLineHoverColor\n                            ctx.moveTo(this.#tooltipX + this.#x.step / 2,\n                                this.#paddings.top)\n                            ctx.lineTo(this.#tooltipX + this.#x.step / 2,\n                                this.canvas.height - this.#paddings.bottom + offset)\n                            ctx.stroke()\n                        }\n                    }\n\n                    columnsIndex++\n\n                    break\n\n                case PlotType.Bar:\n                    if (this.#hoverX) {\n                        ctx.lineWidth = 1\n                        ctx.strokeStyle = axisLineHoverColor\n                        ctx.moveTo(this.#paddings.left,\n                            this.#tooltipY + this.#y.step / 2)\n                        ctx.lineTo(this.canvas.width - this.#paddings.right,\n                            this.#tooltipY + this.#y.step / 2)\n                        ctx.stroke()\n                    }\n\n                    barsIndex++\n\n                    break\n            }\n        }\n\n        this.#renderBase()\n\n        this.renderTitle()\n\n        this.tooltip.render(tooltipLines.length > 1 && !this.dropdown?.isActive,\n            this.onMouseMoveEvent,\n            tooltipLines,\n            this.#hoverX\n            ? this.#hoverX.series!.values[this.#hoverX.index]\n            : undefined)\n\n        if (!this.isDestroy)\n            requestAnimationFrame(this.render.bind(this))\n\n        this.state = RenderState.Idle\n\n        super.renderDropdown()\n\n        if (this.onContextMenuEvent && !this.#hoverX)\n            this.onContextMenuEvent = undefined\n\n        if (this.#hoverX\n            && (this.renderContextMenu(this.#hoverX.data)\n                || !this.onContextMenuEvent))\n            this.#hoverX = undefined\n    }\n\n    refresh() {\n        super.refresh()\n    }\n\n    resize() {\n        super.resize()\n\n        this.#base = undefined\n\n        this.#calculateSizes()\n    }\n\n    #isOnX(x: number): boolean {\n        if (!this.onMouseMoveEvent)\n            return false\n\n        const mouse = this.getMousePosition(this.onMouseMoveEvent)\n\n        return !(this.dropdown?.isActive ?? false)\n               && x - this.#x.step / 2 <= mouse.x && mouse.x < x + this.#x.step / 2\n               && this.#paddings.top <= mouse.y && mouse.y <= this.canvas.height - this.#paddings.bottom\n               && this.#paddings.left < mouse.x\n    }\n\n    #isInArea(x: number, y: number, w: number, h: number): boolean {\n        if (!this.onMouseMoveEvent)\n            return false\n\n        const mouse = this.getMousePosition(this.onMouseMoveEvent)\n\n        return !(this.dropdown?.isActive ?? false)\n               && mouse.x >= x && mouse.x <= x + w\n               && mouse.y >= y && mouse.y <= y + h\n    }\n\n    #renderBase(skip: boolean = false) {\n        if (this.#base && skip)\n            return\n\n        if (this.data.simple)\n            return\n\n        const ctx = Canvas.getContext(this.canvas)\n\n        if (skip)\n            ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\n\n        if (this.#base) {\n            ctx.drawImage(this.#base, 0, 0)\n            return\n        }\n\n        if (!skip)\n            return\n\n        const axisLabelOffset = 12\n\n        ctx.fillStyle = Theme.canvasBackground\n\n        ctx.fillRect(0, 0, this.#paddings.left, this.canvas.height)\n        ctx.fillRect(0, 0, this.canvas.width, this.#paddings.top)\n        ctx.fillRect(this.canvas.width - this.#paddings.right, 0, this.canvas.width, this.canvas.height)\n        ctx.fillRect(0, this.canvas.height - this.#paddings.bottom, this.canvas.width, this.canvas.height)\n\n        const isContainsBar = this.data.values.filter(s => s.type == PlotType.Bar).length > 0\n\n        if (this.data.xTitle || this.data.yTitle) {\n            ctx.textAlign = 'center'\n            ctx.textBaseline = 'bottom'\n            ctx.fillStyle = Theme.text\n\n            if (this.data.xTitle)\n                ctx.fillText(this.data.xTitle,\n                    this.#paddings.left + (this.canvas.width - this.#paddings.left - this.#paddings.right) / 2,\n                    this.canvas.height - 4)\n\n            if (this.data.yTitle) {\n                ctx.rotate(-Math.PI / 2)\n\n                ctx.textBaseline = 'top'\n\n                ctx.fillText(this.data.yTitle,\n                    -(this.#paddings.top + (this.canvas.height - this.#paddings.top - this.#paddings.bottom) / 2),\n                    8)\n\n                ctx.resetTransform()\n            }\n        }\n\n        ctx.textAlign = 'center'\n        ctx.textBaseline = 'top'\n\n        const step = this.#x.step,\n            xYPos = this.canvas.height - this.#paddings.bottom\n\n        let xCounter = 0,\n            acc = this.#paddings.left + step / 2\n\n        for (let i = 0; i < this.#allValuesX.length + 1; i++)\n            this.#labelsX.trySet(\n                Math.round(this.#paddings.left + i * this.#x.step),\n                this.data.xType == PlotAxisType.Date\n                ? Formatter.date(new Date(this.#allValuesX[i]))\n                : isNaN(+this.#x.min) || !isFinite(+this.#x.min)\n                  ? this.#allValuesX[i - 1]\n                  : Formatter.number(\n                        this.#x.min + i * (this.#x.max - this.#x.min) / (this.#x.count - 1)\n                    )\n            )\n\n        const maxLabelWidth = Math.max(\n            ...[...this.#labelsX.values()].map(label => Math.ceil(Helper.stringWidth(label)))\n        ) + 10\n        const maxCount = Math.floor(\n            (this.canvas.width - this.#paddings.left - this.#paddings.right) / maxLabelWidth\n        )\n        const renderStep = Math.ceil(1 / (maxCount / this.#allValuesX.length))\n\n        while (acc < this.canvas.width - this.#paddings.right) {\n            if (xCounter % renderStep == 0) {\n                ctx.fillStyle = Theme.text + 'b7'\n\n                ctx.fillText(\n                    this.#labelsX.get(Math.round(acc - this.#x.step / 2)) ?? '',\n                    acc,\n                    xYPos + axisLabelOffset / 2\n                )\n            }\n\n            acc += step\n            xCounter++\n        }\n\n        ctx.textAlign = 'right'\n        ctx.textBaseline = 'middle'\n\n        const yCount = this.#y.count > 10 ? 10 : this.#y.count\n\n        let yCounter = isContainsBar ? 1 : 0,\n            yStep = this.#allValuesY.length / yCount\n\n        for (let i = isContainsBar ? 1 : 0; i < this.#allValuesY.length + 1; i++) {\n            const labelY = this.canvas.height - yCounter * yStep * this.#y.step - this.#paddings.bottom,\n                labelYAsKey = Math.round(this.canvas.height - i * this.#y.step - this.#paddings.bottom)\n\n            if (!this.#labelsY.get(labelYAsKey))\n                this.#labelsY.set(labelYAsKey,\n                    Formatter.number(this.#y.min + (i + (isContainsBar ? -1 : 0)) * (this.#y.max - this.#y.min) / this.#y.count))\n\n            if (i >= yCounter * yStep) {\n                const label = {\n                    x: this.#paddings.left,\n                    y: labelY,\n                    label: this.#yAxisStep >= 1\n                           ? Math.round((this.#y.min + (yCounter * yStep + (isContainsBar ? -1 : 0)) * (this.#y.max - this.#y.min) / this.#y.count) / this.#yAxisStep) * this.#yAxisStep\n                           : Math.round(this.#y.min + (yCounter * yStep + (isContainsBar ? -1 : 0)) * (this.#y.max - this.#y.min) / this.#y.count / this.#yAxisStep) * this.#yAxisStep\n                }\n\n                let postfix = ''\n\n                if (this.data.shortLabels) {\n                    const countOfTens = Math.floor(label.label.toString().length / 4)\n\n                    if (countOfTens > 0) {\n                        label.label /= Math.pow(1000, countOfTens)\n\n                        postfix = [\n                            TextResources.ThousandShort,\n                            TextResources.MillionShort,\n                            TextResources.BillionShort\n                        ][countOfTens - 1]\n                    }\n                }\n\n                ctx.fillText(Formatter.number(label.label) + postfix,\n                    label.x - axisLabelOffset,\n                    label.y + (isContainsBar ? this.#y.step / 2 : 0))\n\n                yCounter++\n            }\n        }\n\n        ctx.beginPath()\n\n        ctx.strokeStyle = Theme.line\n        ctx.lineWidth = 1\n\n        const offset = .5,\n            isBar = this.data.values.filter(v => v.type == PlotType.Bar).length > 0\n\n        ctx.moveTo(this.#paddings.left - offset,\n            this.canvas.height - this.#paddings.bottom + (isBar ? -offset : offset))\n\n        if (isBar)\n            ctx.lineTo(this.#paddings.left - offset, this.#paddings.top)\n        else\n            ctx.lineTo(this.canvas.width - this.#paddings.right, this.canvas.height - this.#paddings.bottom + offset)\n\n        ctx.stroke()\n\n        if (this.canvas.width > 0 && this.canvas.height > 0)\n            createImageBitmap(ctx.getImageData(0, 0, this.canvas.width, this.canvas.height))\n                .then(res => this.#base = res)\n    }\n\n    #renderBackLines() {\n        if (this.data.simple)\n            return\n\n        const ctx = Canvas.getContext(this.canvas)\n\n        if (this.#backLines) {\n            ctx.putImageData(this.#backLines, 0, 0)\n            return\n        }\n\n        ctx.fillStyle = Theme.canvasBackground\n        ctx.fillRect(0, 0, this.canvas.width, this.canvas.height)\n\n        const axisLineColor = Theme.lineAxis\n\n        const isContainsBar = this.data.values.filter(s => s.type == PlotType.Bar).length > 0\n\n        if (isContainsBar) {\n            const step = this.#x.step,\n                xYPos = this.canvas.height - this.#paddings.bottom\n\n            let xCounter = 0,\n                acc = this.#paddings.left + step / 2\n\n            for (let i = 0; i < this.#allValuesX.length + 1; i++)\n                this.#labelsX.trySet(\n                    Math.round(this.#paddings.left + i * this.#x.step),\n                    this.data.xType == PlotAxisType.Date\n                    ? Formatter.date(new Date(this.#allValuesX[i - 1]))\n                    : isNaN(+this.#x.min) || !isFinite(+this.#x.min)\n                      ? this.#allValuesX[i - 1]\n                      : Formatter.number(\n                            this.#x.min + i * (this.#x.max - this.#x.min) / (this.#x.count - 1)\n                        )\n                )\n\n            const maxLabelWidth = Math.max(\n                ...[...this.#labelsX.values()].map(label => Math.ceil(Helper.stringWidth(label)))\n            ) + 10\n            const maxCount = Math.floor(\n                (this.canvas.width - this.#paddings.left - this.#paddings.right) / maxLabelWidth\n            )\n            const renderStep = Math.ceil(1 / (maxCount / this.#allValuesX.length))\n\n            while (acc < this.canvas.width - this.#paddings.right) {\n                if (xCounter % renderStep == 0) {\n                    ctx.beginPath()\n\n                    ctx.moveTo(acc, xYPos)\n                    ctx.lineTo(acc, this.#paddings.top)\n\n                    ctx.lineWidth = 1\n                    ctx.strokeStyle = axisLineColor\n                    ctx.setLineDash([6, 6])\n                    ctx.stroke()\n                }\n\n                acc += step\n                xCounter++\n            }\n        }\n\n        ctx.textAlign = 'right'\n        ctx.textBaseline = 'middle'\n\n        const yCount = this.#y.count > 10 ? 10 : this.#y.count\n\n        let yCounter = isContainsBar ? 1 : 0,\n            yStep = this.#allValuesY.length / yCount\n\n        for (let i = isContainsBar ? 1 : 0; i < this.#allValuesY.length + 1; i++) {\n            const labelY = this.canvas.height - yCounter * yStep * this.#y.step - this.#paddings.bottom\n\n            if (i >= yCounter * yStep) {\n                const label = {\n                    x: this.#paddings.left,\n                    y: labelY\n                }\n\n                if (this.data.values.filter(s => s.type.isAnyEquals(PlotType.Column, PlotType.StackingColumn, PlotType.Line)).length > 0) {\n                    ctx.beginPath()\n\n                    ctx.moveTo(label.x, label.y)\n                    ctx.lineTo(this.canvas.width - this.#paddings.right, label.y)\n\n                    ctx.lineWidth = 1\n                    ctx.strokeStyle = axisLineColor\n                    ctx.setLineDash([6, 6])\n                    ctx.stroke()\n                }\n\n                yCounter++\n            }\n        }\n\n        if (this.canvas.width > 0 && this.canvas.height > 0)\n            this.#backLines = ctx.getImageData(0, 0, this.canvas.width, this.canvas.height)\n    }\n\n    #calculateSizes() {\n        let xValues = this.data.values.flatMap(s => s.values.map(p => p.x)),\n            yValues = this.data.values.flatMap(s => s.values.map(p => p.y))\n\n        const isDate = this.data.xType == PlotAxisType.Date\n\n        if (isDate) {\n            let tempDate = new Date(Math.min(...(<number[]>xValues)))\n\n            while (tempDate.getTime() < Math.max(...(<number[]>xValues))) {\n                if (!xValues.includes(tempDate.getTime()))\n                    xValues.push(new Date(tempDate.getTime()))\n\n                tempDate = tempDate.addDays(1)\n            }\n\n            xValues.sort((a, b) => a < b ? -1 : 1)\n        }\n\n        yValues.sort((a, b) => b > a ? -1 : 1)\n\n        this.#allValuesX = [...new Set(xValues.filter(x => x != undefined).map(x => isDate ? x.toString() : x))]\n        this.#allValuesY = [...new Set(yValues.filter(y => y != undefined))]\n\n        this.#x = {\n            min: Math.min(...(<number[]>xValues)),\n            max: Math.max(...(<number[]>xValues)),\n            unit: (Math.abs(Math.min(...(<number[]>xValues))) + Math.abs(Math.max(...(<number[]>xValues)))) / (this.#allValuesX.length - 1),\n            step: (this.canvas.width - this.#paddings.left - this.#paddings.right) / this.#allValuesX.length,\n            minStep: 0,\n            count: this.#allValuesX.length\n        }\n\n        let yMin = Math.min(...(<number[]>yValues))\n        if (yMin > 0)\n            yMin = 0\n\n        this.#y = {\n            min: yMin,\n            max: this.data.yMax ?? Math.max(...(<number[]>yValues)),\n            unit: (Math.abs(yMin) + Math.abs(this.data.yMax ?? Math.max(...(<number[]>yValues)))) / (this.#allValuesY.length - 1),\n            step: (this.canvas.height - this.#paddings.top - this.#paddings.bottom) / this.#allValuesY.length,\n            minStep: 0,\n            count: this.#allValuesY.length\n        }\n\n        let stackingColumns = this.data.values.filter(s => s.type == PlotType.StackingColumn)\n\n        let max\n\n        if (stackingColumns.length > 0) {\n            let values = stackingColumns.map(s => s.values.flatMap(v => +v.y))\n\n            max = this.#y.max\n\n            for (let i = 0; i < values[0].length; i++) {\n                let sum = 0\n\n                for (const v of values)\n                    sum += v[i]\n\n                if (sum > max)\n                    max = sum\n            }\n\n            this.#y.max = max > this.data.yMax ? this.data.yMax : max\n            this.#y.unit = (Math.abs(this.#y.min) + Math.abs(this.#y.max)) / (this.#allValuesY.length - 1)\n        }\n\n        const yMaxWidth = Helper.stringWidth(Formatter.number(this.#y.max))\n        if (yMaxWidth > this.#paddings.left - 40) {\n            this.#paddings.left += yMaxWidth - this.#paddings.left + 40\n            this.#x.step = (this.canvas.width - this.#paddings.left - this.#paddings.right) / this.#allValuesX.length\n        }\n\n        this.#yAxisStep = Math.abs(this.#y.min) + Math.abs(this.#y.max)\n\n        if (.5 <= this.#yAxisStep && this.#yAxisStep < 1)\n            this.#yAxisStep = .05\n        else if (1 <= this.#yAxisStep && this.#yAxisStep < 10)\n            this.#yAxisStep = .1\n        else if (10 <= this.#yAxisStep && this.#yAxisStep < 100)\n            this.#yAxisStep = 2\n        else if (100 <= this.#yAxisStep && this.#yAxisStep < 1000)\n            this.#yAxisStep = 20\n        else if (1000 <= this.#yAxisStep && this.#yAxisStep < 10000)\n            this.#yAxisStep = 50\n        else if (10000 <= this.#yAxisStep && this.#yAxisStep < 100000)\n            this.#yAxisStep = 1000\n        else if (100000 <= this.#yAxisStep && this.#yAxisStep < 1000000)\n            this.#yAxisStep = 10000\n        else if (1000000 <= this.#yAxisStep && this.#yAxisStep < 10000000)\n            this.#yAxisStep = 50000\n        else\n            this.#yAxisStep = 1\n\n        if (this.#yAxisStep != 1) {\n            max = yValues.length > 10\n                  ? (this.#y.max / 10 + this.#yAxisStep - (this.#y.max / 10) % this.#yAxisStep) * 10\n                  : Math.ceil(this.#y.max / this.#yAxisStep) * this.#yAxisStep\n\n            this.#y.max = max > this.data.yMax ? this.data.yMax : max\n            this.#y.unit = (Math.abs(this.#y.min) + Math.abs(this.#y.max)) / this.#allValuesY.length\n        }\n\n        this.#plot = {\n            width: this.canvas.width - this.#paddings.left - this.#paddings.right,\n            height: this.canvas.height - this.#paddings.top - this.#paddings.bottom\n        } as DOMRect\n\n        this.#x.minStep = this.#plot.width * 0.002\n        this.#y.minStep = this.#plot.height * 0.002\n    }\n\n    prepareSettings() {\n        super.prepareSettings()\n\n        for (let item of this.data.values) {\n            item.disabled = !item.values\n            item.type ??= PlotType.Line\n\n            for (let it of item.values) {\n                it.id = Helper.guid()\n\n                if (this.data.xType == PlotAxisType.Date) {\n                    if (Helper.isISOString(it.x as string))\n                        it.x = new Date(it.x)\n                    else\n                        console.warn(`${ it.x } is not a date in ISO format.`)\n                }\n            }\n        }\n    }\n\n    initDropdown() {\n        super.initDropdown()\n\n        this.dropdown = new Dropdown(this.canvas,\n            {\n                x: -10,\n                y: 10,\n                icon: Icon.ThreeLines,\n                items: [\n                    {\n                        text: TextResources.exportPNG,\n                        action: () => {\n                            Export.asPng(this.canvas, this.settings.title)\n                        }\n                    },\n                    {\n                        text: TextResources.exportCSV,\n                        action: () => {\n                            Export.asCsv(Decomposition.toTable(PlotData.getRows(this.data)), this.settings.title)\n                        }\n                    },\n                    {\n                        isDivider: true\n                    } as DropdownItem,\n                    {\n                        text: TextResources.decomposeToTable,\n                        action: () => {\n                            new Modal(Decomposition.toTable(PlotData.getRows(this.data))).open()\n                        }\n                    }\n                ]\n            })\n    }\n}","export class Dates {\n    static minDate = new Date(2000, 1, 1)\n}","import { Theme } from '../Theme'\n\nexport abstract class TextStyles {\n    static title(context: CanvasRenderingContext2D) {\n        context.fillStyle = Theme.text\n        context.textAlign = 'center'\n        context.textBaseline = 'middle'\n        context.font = '20px sans-serif'\n    }\n\n    static regular(context: CanvasRenderingContext2D) {\n        context.fillStyle = Theme.text\n        context.textAlign = 'center'\n        context.textBaseline = 'middle'\n        context.font = '14px sans-serif'\n    }\n\n    static large(context: CanvasRenderingContext2D) {\n        context.fillStyle = Theme.text\n        context.textAlign = 'center'\n        context.textBaseline = 'middle'\n        context.font = '16px sans-serif'\n    }\n\n    static tooltip(context: CanvasRenderingContext2D) {\n        context.font = '14px sans-serif'\n        context.textAlign = 'start'\n        context.textBaseline = 'alphabetic'\n    }\n\n    static circularLabel(context: CanvasRenderingContext2D, isRight: boolean) {\n        context.textAlign = isRight ? 'start' : 'end'\n        context.textBaseline = 'alphabetic'\n        context.font = '14px sans-serif'\n    }\n}","import { ChartSettings } from '../ChartSettings'\nimport { Animations } from '../../Animations'\nimport { Tooltip } from '../../Tooltip'\nimport { Dropdown } from '../../Dropdown'\nimport { Chart } from '../../Chart'\nimport { Canvas } from '../../helpers/Canvas'\nimport { Events, RenderState, Tag } from '../../static/Enums'\nimport { Styles } from '../../static/constants/Styles'\nimport { Theme } from '../../Theme'\n\nexport class Renderable {\n    node: HTMLElement\n\n    canvas: HTMLCanvasElement\n\n    settings: ChartSettings\n\n    animations: Animations\n\n    tooltip: Tooltip\n\n    protected state: RenderState = RenderState.Init\n\n    protected canvasPosition: DOMRect\n\n    protected onMouseMoveEvent: MouseEvent\n\n    protected onClickEvent: MouseEvent | undefined\n\n    protected onContextMenuEvent: MouseEvent | undefined\n\n    protected contextMenu: Dropdown | undefined\n\n    constructor(chart: Chart) {\n        this.node = chart.node\n        this.settings = chart.settings\n        this.animations = new Animations()\n\n        this.canvas = document.createElement(Tag.Canvas)\n\n        this.canvas.style.imageRendering = Styles.ImageRendering.Pixelated\n\n        this.node.append(this.canvas)\n\n        this.tooltip = new Tooltip(this.canvas, this.settings)\n\n        this.initAnimations()\n    }\n\n    render() {\n        const ctx = Canvas.getContext(this.canvas)\n\n        ctx.fillStyle = Theme.canvasBackground\n        ctx.fillRect(0, 0, this.canvas.width, this.canvas.height)\n    }\n\n    refresh() {\n        this.tooltip.refresh()\n        this.state = this.settings.disableInitAnimation ? RenderState.Idle : RenderState.Init\n    }\n\n    resetMouse() {\n        this.onMouseMoveEvent = new MouseEvent(Events.MouseMove)\n        this.onClickEvent = new MouseEvent(Events.Click)\n        this.onContextMenuEvent = undefined\n    }\n\n    initAnimations() {\n        this.canvasPosition = this.canvas.getBoundingClientRect()\n\n        this.canvasPosition.x += scrollX\n        this.canvasPosition.y += scrollY\n\n        if (this.state == RenderState.Init && !this.settings.disableInteractions) {\n            this.canvas.onmousemove = event => this.onMouseMoveEvent = event\n            this.canvas.onclick = event => this.onClickEvent = event\n            this.canvas.oncontextmenu = event => {\n                event.preventDefault()\n                this.contextMenu = undefined\n                if (this.onContextMenuEvent)\n                    this.onContextMenuEvent = undefined\n                else\n                    this.onContextMenuEvent = event\n            }\n            this.canvas.onmouseleave = () => this.onMouseMoveEvent = new MouseEvent(Events.MouseMove)\n        }\n    }\n}","import { TreeData } from '../types/data/TreeData'\nimport { Renderer } from '../types/base/Renderer'\nimport { Sector } from '../types/Sector'\nimport { Helper } from '../Helper'\nimport { DropdownItem } from '../types/DropdownItem'\nimport { Dropdown } from '../Dropdown'\nimport { Chart } from '../Chart'\nimport { TextStyles } from '../helpers/TextStyles'\nimport { TooltipValue } from '../types/TooltipValue'\nimport { Export } from '../Export'\nimport { Decomposition } from '../Decomposition'\nimport { Modal } from '../Modal'\nimport { TextResources } from '../static/TextResources'\nimport { Canvas } from '../helpers/Canvas'\nimport { TreeCell } from '../types/TreeCell'\nimport { Formatter } from '../helpers/Formatter'\nimport { AnimationType, Icon, RenderState } from '../static/Enums'\nimport * as Constants from '../static/constants/Index'\n\nexport class TreeRenderer extends Renderer<TreeData> {\n    constructor(chart: Chart) {\n        super(chart)\n\n        this.settings.enableLegend = false\n\n        this.data.values = this.data.values.map(v => new Sector(v))\n    }\n\n    render() {\n        super.render()\n\n        if (this.data.values.filter(v => v.value > 0).length == 0) {\n            this.#drawEmpty()\n            requestAnimationFrame(this.render.bind(this))\n            return\n        }\n\n        const titleOffset = this.settings.title ? Constants.Values.titleOffset : 0\n\n        const maxWidth = this.canvas.width - this.data.padding * 2,\n            maxHeight = this.canvas.height - this.data.padding * 2 - titleOffset\n\n        let sum = this.data.values.reduce((acc, cur) => acc + cur.value, 0),\n            totalSquare = maxWidth * maxHeight\n\n        let x = this.data.padding,\n            y = this.data.padding + titleOffset\n\n        let minX = this.data.padding,\n            minY = this.data.padding + titleOffset\n\n        let tooltipCell: TreeCell | undefined = undefined\n        let contextMenuData = undefined\n\n        const ctx = Canvas.getContext(this.canvas)\n\n        let isVertical = true\n        for (let i = 0; i < this.data.values.length; i++) {\n            const item = this.data.values[i]\n\n            const remainWidth = maxWidth - (x - this.data.padding),\n                remainHeight = maxHeight - (y - this.data.padding - titleOffset)\n\n            let cells: TreeCell[] = [\n                {\n                    color: item.color,\n                    label: item.label,\n                    s: item.value / sum * totalSquare,\n                    value: item.value,\n                    id: item.id,\n                    x: x,\n                    y: y\n                } as TreeCell\n            ]\n\n            if (i + 1 <= this.data.values.length - 1) {\n                const next = this.data.values[i + 1]\n\n                cells.push({\n                    color: next.color,\n                    label: next.label,\n                    s: next.value / sum * totalSquare,\n                    value: next.value,\n                    id: next.id,\n                    x: x,\n                    y: y\n                } as TreeCell)\n\n                i++\n            }\n\n            const isSingle = cells.length == 1,\n                isLast = i == this.data.values.length - 1\n\n            if (isVertical) {\n                for (let j = 1; j <= remainWidth + i * i; j++) {\n                    const w = remainWidth - j,\n                        h1 = cells[0].s / w,\n                        h2 = isSingle ? 0 : cells[1].s / w\n\n                    if (h1 + h2 >= remainHeight) {\n                        cells[0].w = Math.floor(w)\n                        cells[0].h = Math.floor(h1)\n\n                        if (!isSingle) {\n                            cells[1].w = Math.floor(w)\n                            cells[1].h = remainHeight - cells[0].h\n\n                            cells[1].y += cells[0].h\n                        }\n\n                        break\n                    }\n                }\n            } else {\n                for (let j = 1; j <= remainHeight + i * i; j++) {\n                    const h = remainHeight - j,\n                        w1 = cells[0].s / h,\n                        w2 = isSingle ? 0 : cells[1].s / h\n\n                    if (w1 + w2 >= remainWidth) {\n                        cells[0].h = Math.floor(h)\n                        cells[0].w = Math.floor(w1)\n\n                        if (!isSingle) {\n                            cells[1].h = Math.floor(h)\n                            cells[1].w = remainWidth - cells[0].w\n\n                            cells[1].x += cells[0].w\n                        }\n\n                        break\n                    }\n                }\n            }\n\n            for (const cell of cells) {\n                if (isLast) {\n                    if (isVertical) {\n                        cell.w = remainWidth\n                        if (isSingle)\n                            cell.h = remainHeight\n                    } else {\n                        cell.h = remainHeight\n                        if (isSingle)\n                            cell.w = remainWidth\n                    }\n                }\n\n                ctx.beginPath()\n\n                ctx.fillStyle = cell.color\n\n                const cellInit = this.state != RenderState.Init\n                    && !this.animations.contains(cell.id, AnimationType.Init)\n\n                const cellIndex = i + cells.indexOf(cell) + (isLast && isSingle ? 1 : 0),\n                    duration = 260\n\n                const getPrev = () => {\n                    let acc = 0\n                    for (let i = 0; i < cellIndex; i++)\n                        acc += duration - duration * (i / this.data.values.length) / Math.E\n\n                    return acc\n                }\n\n                const initAnimationDuration = duration - duration * cellIndex / (this.data.values.length + 1)\n\n                if (!cellInit) {\n                    this.animations.add(cell.id,\n                        AnimationType.Init,\n                        {\n                            duration: getPrev(),\n                            continuous: true,\n                            body: transition => {\n                                if (transition * getPrev() - getPrev() + initAnimationDuration < 0)\n                                    return ctx.fillStyle += '00'\n\n                                transition = (transition * getPrev() - getPrev() + initAnimationDuration) / initAnimationDuration\n\n                                const center = {\n                                    x: cell.x + cell.w / 2,\n                                    y: cell.y + cell.h / 2\n                                }\n\n                                const minSize = .7,\n                                    rest = 1 - minSize\n\n                                ctx.translate(center.x - center.x * (minSize + transition * rest),\n                                    center.y - center.y * (minSize + transition * rest))\n                                ctx.scale((minSize + transition * rest), (minSize + transition * rest))\n\n                                let opacity = Math.round(255 * transition).toString(16)\n\n                                if (opacity.length < 2)\n                                    opacity = 0 + opacity\n\n                                ctx.fillStyle = cell.color + opacity\n                            }\n                        })\n                } else {\n                    const translate = (transition: number, event: AnimationType) => {\n                        const center = {\n                            x: cell.x + cell.w / 2,\n                            y: cell.y + cell.h / 2\n                        }\n\n                        const margin = 12,\n                            minSize = cell.w > cell.h\n                                      ? 1 - margin / cell.w\n                                      : 1 - margin / cell.h,\n                            rest = 1 - minSize\n\n                        ctx.translate(center.x - center.x * (minSize + transition * rest),\n                            center.y - center.y * (minSize + transition * rest))\n                        ctx.scale(minSize + transition * rest, minSize + transition * rest)\n\n                        this.animations.reload(cell.id, event)\n                    }\n\n                    if (this.#isInCell(cell)\n                        && !tooltipCell) {\n                        tooltipCell = cell\n                        contextMenuData = cell.data\n\n                        this.animations.add(cell.id,\n                            AnimationType.MouseOver,\n                            {\n                                duration: Constants.Animations.tree,\n                                backward: true,\n                                body: transition => {\n                                    translate(transition, AnimationType.MouseLeave)\n                                }\n                            })\n                    } else {\n                        this.animations.add(cell.id,\n                            AnimationType.MouseLeave,\n                            {\n                                timer: Constants.Dates.minDate,\n                                duration: Constants.Animations.tree,\n                                body: transition => {\n                                    translate(transition, AnimationType.MouseOver)\n                                }\n                            })\n                    }\n                }\n\n                const gap = 4\n\n                ctx.roundRect(x + gap, y + gap, cell.w - gap, cell.h - gap, gap * 2)\n                ctx.fill()\n\n                if (cell.label\n                    && Helper.stringWidth(cell.label) < cell.w - gap\n                    && cell.h - gap > 16\n                    && !this.animations.contains(cell.id, AnimationType.Init)) {\n                    ctx.beginPath()\n                    TextStyles.large(ctx)\n                    ctx.fillStyle = !Helper.isColorVisible(cell.color, '#ffffff')\n                                    ? '#000000'\n                                    : '#ffffff'\n                    ctx.fillText(cell.label,\n                        x + 2 + cell.w / 2,\n                        y + 2 + cell.h / 2)\n                }\n\n                ctx.resetTransform()\n\n                if (isVertical)\n                    y += cell.h\n                else\n                    x += cell.w\n\n                totalSquare -= cell.w * cell.h\n                sum -= cell.value\n            }\n\n            if (isVertical) {\n                x += cells[0].w\n                y = minY\n            } else {\n                y += cells[0].h\n                x = minX\n            }\n\n            minX = x\n            minY = y\n\n            isVertical = !isVertical\n        }\n\n        this.tooltip.render(!!tooltipCell && !this.dropdown?.isActive,\n            this.onMouseMoveEvent,\n            [\n                new TooltipValue(`${ tooltipCell?.label }: ${ Formatter.number(tooltipCell?.value) }`)\n            ],\n            this.data.values.find(v => v.id == tooltipCell?.id))\n\n        if (!this.isDestroy)\n            requestAnimationFrame(this.render.bind(this))\n\n        this.state = RenderState.Idle\n\n        super.renderDropdown()\n\n        if (tooltipCell || this.contextMenu)\n            this.renderContextMenu(contextMenuData)\n        else\n            this.onContextMenuEvent = undefined\n    }\n\n    #isInCell(cell: TreeCell) {\n        if (!this.onMouseMoveEvent || !cell)\n            return false\n\n        const mouse = this.getMousePosition(this.onMouseMoveEvent)\n\n        return !(this.dropdown?.isActive ?? false)\n               && cell.x <= mouse.x && mouse.x <= cell.x + cell.w\n               && cell.y <= mouse.y && mouse.y <= cell.y + cell.h\n    }\n\n    #drawEmpty() {\n        const ctx = Canvas.getContext(this.canvas)\n\n        TextStyles.regular(ctx)\n        ctx.fillText(TextResources.treeMapIsEmpty,\n            this.canvas.width / 2,\n            this.canvas.height / 2)\n    }\n\n    refresh() {\n        super.refresh()\n    }\n\n    resize() {\n        super.resize()\n\n        this.initAnimations()\n        this.animations.clear()\n    }\n\n    prepareSettings() {\n        this.data.values = this.data.values.filter(v => v.value > 0)\n\n        this.data.values.sort((a, b) => (b.value ?? 0) - (a.value ?? 0))\n\n        super.prepareSettings()\n\n        for (let item of this.data.values) {\n            item.disabled = !item.value\n            item.value ??= 0\n        }\n    }\n\n    initDropdown() {\n        super.initDropdown()\n\n        this.dropdown = new Dropdown(this.canvas,\n            {\n                x: -10,\n                y: 10,\n                icon: Icon.ThreeLines,\n                items: [\n                    {\n                        text: TextResources.exportCSV,\n                        action: () => {\n                            Export.asCsv(Decomposition.toTable(TreeData.getRows(this.data)), this.settings.title)\n                        }\n                    },\n                    {\n                        isDivider: true\n                    } as DropdownItem,\n                    {\n                        text: TextResources.decomposeToTable,\n                        action: () => {\n                            new Modal(Decomposition.toTable(TreeData.getRows(this.data))).open()\n                        }\n                    }\n                ]\n            })\n    }\n}","import { TableData } from './types/TableData'\nimport { Helper } from './Helper'\nimport { Value } from './types/base/Value'\nimport { ChartSettings } from './types/ChartSettings'\nimport { Formatter } from './helpers/Formatter'\nimport { Styles } from './static/constants/Styles'\nimport { Tag } from './static/Enums'\n\nexport class Decomposition {\n    static toTable(values: TableData) {\n        let table = document.createElement(Tag.Table)\n\n        table.classList.add('o-table')\n\n        let totals = new Map<string, number>()\n        let rows = '',\n            headers = '',\n            index = 0\n\n        let valuesMap = new Map<string, Map<string, any>>()\n\n        for (const tableValue of values.values) {\n            let allColumns = new Map<string, any>()\n\n            for (const header of values.headers)\n                allColumns.set(header.value, 0)\n\n            for (const [key, value] of tableValue.values)\n                allColumns.set(key, value)\n\n            let indexSpaces = ''\n            for (let i = 0; i < index; i++)\n                indexSpaces += ' '\n\n            valuesMap.set(tableValue.name + indexSpaces, allColumns)\n\n            index++\n        }\n\n        for (const tableHeader of values.headers)\n            headers += `\n                <th>\n                    ${ tableHeader.display }\n                </th>\n            `\n\n        for (const [key, value] of valuesMap) {\n            let columns = ''\n\n            for (const [vKey, vValue] of value) {\n                columns += `\n                    <td>\n                        ${ vValue == undefined ? '' : Formatter.number(vValue) }\n                    </td>\n                `\n\n                if (totals.has(vKey)) {\n                    let totalValue = +(totals.get(vKey) ?? 0)\n                    totals.set(vKey, totalValue + +vValue)\n                } else {\n                    totals.set(vKey, vValue)\n                }\n            }\n\n            rows += `\n                <tr>\n                    <td class=\"o-table-label\">\n                        ${ key.trim() }\n                    </td>\n                    \n                    ${ columns } \n                </tr>\n            `\n        }\n\n        let totalColumns = ''\n\n        for (const [, value] of totals)\n            totalColumns += `\n                <td>\n                    ${ value == undefined ? '' : Formatter.number(value) }\n                </td>\n            `\n\n        table.innerHTML = `\n            <thead>\n                <tr>\n                    <th></th>\n                \n                    ${ headers }\n                </tr>\n            </thead>\n        \n            <tbody>\n                ${ rows }\n            </tbody>\n            \n            <tfoot>\n                <tr>\n                    <td></td>\n                \n                    ${ totalColumns }\n                </tr>\n            </tfoot>\n        `\n\n        return table\n    }\n\n    static toChart<T extends Value>(settings: ChartSettings, values: T[]) {\n        let container = document.createElement(Tag.Div),\n            div = document.createElement(Tag.Div),\n            script = document.createElement(Tag.Script),\n            id = Helper.guid()\n\n        container.style.display = Styles.Display.Flex\n        container.style.height = '100%'\n\n        div.id = id\n        div.style.flexGrow = '1'\n\n        let cloneSettings = JSON.parse(JSON.stringify(settings)) as ChartSettings\n\n        if (cloneSettings.title)\n            cloneSettings.title = cloneSettings.title + ' (Other)'\n        cloneSettings.data.values = values\n        cloneSettings.minWidth = undefined\n        cloneSettings.minHeight = undefined\n\n        script.innerHTML = `\n            new OCharts.chart(document.getElementById('${ id }'), ${ JSON.stringify(cloneSettings) })\n                .render()\n        `\n\n        container.append(div, script)\n\n        return container\n    }\n}","export { Animations } from './Animations'\nexport { Dates } from './Dates'\nexport { Values } from './Values'","import { Renderer } from '../types/base/Renderer'\nimport { GaugeData } from '../types/data/GaugeData'\nimport { Helper } from '../Helper'\nimport { Sector } from '../types/Sector'\nimport { Dropdown } from '../Dropdown'\nimport { Point } from '../types/Point'\nimport { Chart } from '../Chart'\nimport { Theme } from '../Theme'\nimport { TextStyles } from '../helpers/TextStyles'\nimport { TooltipValue } from '../types/TooltipValue'\nimport { Export } from '../Export'\nimport { Formatter } from '../helpers/Formatter'\nimport { Canvas } from '../helpers/Canvas'\nimport { TextResources } from '../static/TextResources'\nimport { AnimationType, Icon, RenderState } from '../static/Enums'\n\nexport class GaugeRenderer extends Renderer<GaugeData> {\n    #radius: number\n\n    #center: Point\n\n    constructor(chart: Chart) {\n        super(chart)\n\n        this.settings.enableLegend = false\n    }\n\n    render() {\n        super.render()\n\n        this.#draw()\n\n        const value = this.data.values[0]\n        this.tooltip.render(this.#isInsideSector(this.onMouseMoveEvent, value) && !this.dropdown?.isActive,\n            this.onMouseMoveEvent,\n            [\n                new TooltipValue(`${ value?.label }: ${ Formatter.number(value?.current) }`)\n            ],\n            value)\n\n        if (!this.isDestroy)\n            requestAnimationFrame(this.render.bind(this))\n\n        this.state = RenderState.Idle\n\n        super.renderDropdown()\n    }\n\n    #draw() {\n        const ctx = Canvas.getContext(this.canvas)\n\n        const value = this.data.values[0] ?? { id: Helper.guid() }\n\n        if (this.state == RenderState.Init || this.animations.contains(value.id, AnimationType.Init))\n            this.animations.add(value.id,\n                AnimationType.Init,\n                {\n                    duration: 450,\n                    continuous: true,\n                    body: transition => {\n                        value.current = value.value * transition\n                    }\n                })\n\n        ctx.beginPath()\n\n        ctx.strokeStyle = value.color\n        ctx.lineCap = 'round'\n        ctx.lineWidth = 40\n\n        const piece = value.current / this.data.max,\n            angle = (isNaN(piece) ? 1 : piece) * Math.PI\n\n        if (value.value) {\n            ctx.arc(this.#center.x, this.#center.y, this.#radius, Math.PI, angle - Math.PI)\n            ctx.stroke()\n        }\n\n        ctx.beginPath()\n\n        ctx.lineWidth = 1\n        ctx.lineCap = 'square'\n\n        let localAccumulator = 0,\n            localAngle = Math.PI\n\n        while (localAngle >= 0) {\n            let currentAngle = localAngle - Math.PI / 10 > 0\n                               ? Math.PI / 10\n                               : localAngle\n\n            const getPoint = (offset: number) => {\n                return {\n                    x: this.#center.x + (this.#radius + offset) * Math.cos(Math.PI + localAccumulator),\n                    y: this.#center.y + (this.#radius + offset) * Math.sin(Math.PI + localAccumulator)\n                }\n            }\n\n            let point1 = getPoint(50),\n                point2 = getPoint(90),\n                point3 = getPoint(115)\n\n            const opacity = Math.PI - localAngle > angle ? '66' : 'ff'\n\n            ctx.moveTo(point1.x, point1.y)\n            ctx.lineTo(point2.x, point2.y)\n            ctx.strokeStyle = Theme.text + opacity\n            ctx.stroke()\n\n            TextStyles.regular(ctx)\n            ctx.fillStyle = Theme.text + opacity\n            ctx.fillText(Formatter.number(this.data.max - localAngle / Math.PI * this.data.max), point3.x, point3.y)\n\n            localAccumulator += currentAngle\n\n            localAngle -= Math.PI / 10\n        }\n    }\n\n    #isInsideSector(event: MouseEvent, value: Sector): boolean {\n        if (!event)\n            return false\n\n        const isAngle = (point: Point) => {\n            let a = Math.atan2(point.y - this.#center.y, point.x - this.#center.x)\n            if (a < 0)\n                a += Math.PI * 2\n\n            const piece = value.current / this.data.max,\n                angle = (isNaN(piece) ? 1 : piece) * Math.PI\n\n            return a > Math.PI && Math.PI + angle >= a\n        }\n\n        const isWithinRadius = (v: Point) => {\n            const outerRadius = this.#radius + 20,\n                innerRadius = this.#radius - 20\n\n            return v.x * v.x + v.y * v.y <= outerRadius * outerRadius\n                   && v.x * v.x + v.y * v.y >= innerRadius * innerRadius\n        }\n\n        const point = this.getMousePosition(event),\n            inner = {\n                x: point.x - this.#center.x,\n                y: point.y - this.#center.y\n            }\n\n        return !(this.dropdown?.isActive ?? false)\n               && isAngle(point)\n               && isWithinRadius(inner)\n    }\n\n    #calculateSizes() {\n        const longSide = this.canvas.width < this.canvas.height\n                         ? this.canvas.height - 250\n                         : this.canvas.width\n\n        this.#radius = longSide / 3\n\n        this.#center = {\n            x: this.canvas.width / 2,\n            y: this.canvas.height - this.#radius / 5\n        }\n    }\n\n    refresh() {\n        super.refresh()\n    }\n\n    resize() {\n        super.resize()\n\n        this.initAnimations()\n        this.#calculateSizes()\n    }\n\n    prepareSettings() {\n        super.prepareSettings()\n\n        for (let item of this.data.values) {\n            item.disabled = !item.value\n            item.value ??= 0\n        }\n\n        if (this.data.values.length > 0 && this.data.values[0].value > this.data.max)\n            this.data.values[0].value = this.data.max\n    }\n\n    initDropdown() {\n        super.initDropdown()\n\n        this.dropdown = new Dropdown(this.canvas,\n            {\n                x: -10,\n                y: 10,\n                icon: Icon.ThreeLines,\n                items: [\n                    {\n                        text: TextResources.exportPNG,\n                        action: () => {\n                            Export.asPng(this.canvas, this.settings.title)\n                        }\n                    }\n                ]\n            })\n    }\n}","import { Theme } from './Theme'\nimport { Helper } from './Helper'\nimport { Canvas } from './helpers/Canvas'\nimport { Icon, Tag } from './static/Enums'\n\nexport class Export {\n    static asPng(canvas: HTMLCanvasElement, title: string) {\n        requestAnimationFrame(() => {\n            const ctx = Canvas.getContext(canvas)\n\n            let width = Helper.stringWidth(Icon.ThreeLines) + 20,\n                height = 64\n\n            ctx.fillStyle = Theme.canvasBackground\n            ctx.fillRect(canvas.width - width, 0, width, height)\n\n            let leftEmpty = 0,\n                rightEmpty = 0\n\n            const imageData = new Uint32Array(ctx.getImageData(0, 0, canvas.width, canvas.height).data.buffer)\n\n            let isBusy = false\n\n            for (let i = 0; i < canvas.width; i++) {\n                for (let j = 0; j < canvas.height; j++) {\n                    if (Canvas.isPixelBusy(imageData[i + j * canvas.width])) {\n                        isBusy = true\n                        break\n                    }\n                }\n\n                if (isBusy)\n                    break\n\n                leftEmpty++\n            }\n\n            isBusy = false\n\n            for (let i = canvas.width; i >= 0; i--) {\n                for (let j = 0; j < canvas.height; j++) {\n                    if (Canvas.isPixelBusy(imageData[i + j * canvas.width])) {\n                        isBusy = true\n                        break\n                    }\n                }\n\n                if (isBusy)\n                    break\n\n                rightEmpty++\n            }\n\n            if (leftEmpty > 4)\n                leftEmpty -= 4\n            if (rightEmpty > 4)\n                rightEmpty -= 4\n\n            if (leftEmpty > rightEmpty)\n                leftEmpty = rightEmpty\n            if (rightEmpty > leftEmpty)\n                rightEmpty = leftEmpty\n\n            let destinationCanvas = document.createElement(Tag.Canvas)\n            destinationCanvas.width = canvas.width - leftEmpty - rightEmpty\n            destinationCanvas.height = canvas.height\n\n            const destCtx = Canvas.getContext(destinationCanvas)\n\n            destCtx.fillStyle = Theme.background\n            destCtx.fillRect(0, 0, canvas.width, canvas.height)\n\n            destCtx.drawImage(canvas, -leftEmpty, 0)\n\n            Export.saveAs((title ?? 'chart') + '.png',\n                destinationCanvas.toDataURL('image/png'))\n        })\n    }\n\n    static asCsv(table: HTMLTableElement, title: string) {\n        let rows = table.querySelectorAll('tr'),\n            csv = []\n\n        for (let i = 0; i < rows.length; i++) {\n            let row = [],\n                cols = rows[i].querySelectorAll('td, th')\n\n            for (let j = 0; j < cols.length; j++) {\n                let data = cols[j].innerHTML\n                                  .replace(/(\\r\\n|\\n|\\r)/gm, '')\n                                  .replace(/(\\s\\s)/gm, ' ')\n\n                data = data.replace(/\"/g, '\"\"')\n                row.push('\"' + data + '\"')\n            }\n\n            csv.push(row.join(','))\n        }\n\n        Export.saveAs((title ?? 'table') + '.csv',\n            csv.join('\\n'),\n            'data:text/csv;charset=utf-8,' + encodeURIComponent(csv.join('\\n')),\n            true)\n    }\n\n    static saveAs(name: string, dataURL: string, href?: string | undefined, isText?: boolean) {\n        if (window.showSaveFilePicker != undefined) {\n            const accept = isText\n                           ? { 'text/csv': '.csv' } as FilePickerAcceptType\n                           : { 'image/*': '.png' } as FilePickerAcceptType\n\n            const options = {\n                suggestedName: name,\n                types: [\n                    {\n                        accept: accept\n                    }\n                ],\n                excludeAcceptAllOption: true\n            } as SaveFilePickerOptions\n\n            function toBlob(dataURI: string) {\n                const byteString = atob(dataURI.split(',')[1]),\n                    mimeString = dataURI.split(',')[0]\n                        .split(':')[1]\n                        .split(';')[0],\n                    buffer = new ArrayBuffer(byteString.length),\n                    imageArray = new Uint8Array(buffer)\n\n                for (let i = 0; i < byteString.length; i++)\n                    imageArray[i] = byteString.charCodeAt(i)\n\n                return new Blob([buffer], { type: mimeString })\n            }\n\n            window.showSaveFilePicker(options)\n                  .then(fileHandle => {\n                      fileHandle.createWritable()\n                                .then(writableStream => {\n                                    writableStream.write(isText ? dataURL : toBlob(dataURL))\n                                                  .then(() => writableStream.close())\n                                })\n                  })\n        } else {\n            let download = document.createElement(Tag.A)\n            download.href = href ?? dataURL\n            download.download = name\n            download.click()\n        }\n    }\n}","export abstract class Formatter {\n    static number = (value: number | undefined) =>\n        value?.toLocaleString(undefined, {\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2\n        }) ?? ''\n\n    static date = (value: Date) =>\n        value.toLocaleDateString()\n}","import { TextStyles } from './helpers/TextStyles'\nimport { Theme } from './Theme'\nimport { Animations } from './Animations'\nimport { Helper } from './Helper'\nimport { ButtonOptions } from './types/ButtonOptions'\nimport { Canvas } from './helpers/Canvas'\nimport { AnimationType } from './static/Enums'\nimport * as Constants from './static/constants/Index'\nimport { Styles } from './static/constants/Styles'\n\nexport class Button {\n    #canvas: HTMLCanvasElement\n\n    #options: ButtonOptions\n\n    #canvasPosition: DOMRect\n\n    animations: Animations\n\n    #isInit: boolean\n\n    #position: DOMRect\n\n    constructor(canvas: HTMLCanvasElement, options: ButtonOptions) {\n        this.#canvas = canvas\n        this.#options = options\n\n        this.animations = new Animations()\n\n        this.#initAnimations()\n\n        const width = Helper.stringWidth(this.#options.text) + 12,\n            height = 20\n\n        this.#position = <DOMRect>{\n            x: this.#options.x + width > this.#canvas.width\n               ? this.#canvas.width - width\n               : this.#options.x < 0\n                 ? this.#canvas.width + this.#options.x - width\n                 : this.#options.x,\n            y: this.#options.y + height > this.#canvas.height\n               ? this.#canvas.height - height\n               : this.#options.y < 0\n                 ? this.#canvas.height + this.#options.y - height\n                 : this.#options.y,\n            width: width,\n            height: height\n        }\n    }\n\n    render(moveEvent: MouseEvent, clickEvent: MouseEvent | undefined) {\n        if (!this.#isInit)\n            this.#initAnimations()\n\n        const ctx = Canvas.getContext(this.#canvas)\n\n        ctx.beginPath()\n\n        const translate = (transition: number, event: AnimationType) => {\n            this.animations.reload('animation-button', event)\n\n            ctx.fillStyle = Helper.adjustColor(Theme.canvasBackground, -Math.round(transition * 25))\n        }\n\n        if (this.#isOnButton(moveEvent)) {\n            this.#canvas.style.cursor = Styles.Cursor.Pointer\n\n            if (clickEvent && this.#isOnButton(clickEvent)) {\n                this.#options.action()\n                clickEvent = undefined\n            }\n\n            this.animations.add('animation-button',\n                AnimationType.MouseOver,\n                {\n                    duration: 300,\n                    body: transition => {\n                        translate(transition, AnimationType.MouseLeave)\n                    }\n                })\n        } else {\n            this.animations.add('animation-button',\n                AnimationType.MouseLeave,\n                {\n                    timer: Constants.Dates.minDate,\n                    duration: 300,\n                    backward: true,\n                    body: transition => {\n                        translate(transition, AnimationType.MouseOver)\n                    }\n                })\n        }\n\n        ctx.roundRect(this.#position.x, this.#position.y, this.#position.width, this.#position.height, 4)\n        ctx.fill()\n\n        TextStyles.regular(ctx)\n        ctx.fillText(this.#options.text,\n            this.#position.x + this.#position.width / 2,\n            this.#position.y + this.#position.height / 2)\n\n        this.#isInit = true\n\n        return clickEvent\n    }\n\n    resize() {\n        this.#initAnimations()\n    }\n\n    #initAnimations() {\n        this.#canvasPosition = this.#canvas.getBoundingClientRect()\n\n        this.#canvasPosition.x += scrollX\n        this.#canvasPosition.y += scrollY\n    }\n\n    #isOnButton(event: MouseEvent): boolean {\n        if (!event)\n            return false\n\n        let trueX = event.clientX - this.#canvasPosition.x + scrollX,\n            trueY = event.clientY - this.#canvasPosition.y + scrollY\n\n        return trueX >= this.#position.x && trueX <= this.#position.x + this.#position.width\n               && trueY >= this.#position.y && trueY <= this.#position.y + this.#position.height\n    }\n}","export enum AnimationType {\n    MouseOver,\n\n    MouseLeave,\n\n    Init,\n\n    Click,\n\n    AnotherItemOver,\n\n    AnotherItemLeave\n}\n\nexport enum Attribute {\n    Name = 'name'\n}\n\nexport enum ChartType {\n    Plot,\n\n    Circular,\n\n    Gauge,\n\n    TreeMap\n}\n\nexport enum ErrorType {\n    NullContext = 'Can\\'t find context',\n\n    ElementNotExist = 'Element does not exist'\n}\n\nexport enum Events {\n    VisibilityChanged = 'visibilitychange',\n\n    Blur = 'blur',\n\n    MouseMove = 'mousemove',\n\n    Click = 'click',\n\n    Change = 'change',\n\n    ContextMenu = 'contextmenu'\n}\n\nexport enum LegendPlace {\n    Bottom,\n\n    Left,\n\n    Top,\n\n    Right\n}\n\nexport enum LineType {\n    Solid,\n\n    Dash,\n\n    Dotted\n}\n\nexport enum PlotAxisType {\n    Date = 1\n}\n\nexport enum PlotType {\n    Line,\n\n    AttentionLine,\n\n    Column,\n\n    Bar,\n\n    StackingColumn\n}\n\nexport enum Tag {\n    Canvas = 'canvas',\n\n    A = 'a',\n\n    Div = 'div',\n\n    Dialog = 'dialog',\n\n    Table = 'table',\n\n    Script = 'script'\n}\n\nexport enum RenderState {\n    Idle,\n\n    Init\n}\n\nexport enum Icon {\n    ThreeLines = '☰'\n}","import { Errors } from './helpers/Errors'\nimport { ErrorType, Tag } from './static/Enums'\n\nexport class Modal {\n    modal: HTMLDialogElement | undefined\n\n    #content: HTMLDivElement | undefined\n\n    constructor(content?: HTMLElement, size?: DOMRect) {\n        this.modal = document.createElement(Tag.Dialog)\n\n        this.modal.classList.add('o-modal')\n\n        if (size) {\n            this.modal.style.width = `${size.width}px`\n            this.modal.style.height = `${size.height}px`\n        }\n\n        this.modal.oncancel = () => this.close()\n\n        document.body.appendChild(this.modal)\n\n        this.#setHeader()\n\n        this.#setContent(content)\n    }\n\n    open() {\n        Errors.throwIsUndefined(this.modal, ErrorType.ElementNotExist)\n\n        this.modal!.showModal()\n    }\n\n    close() {\n        Errors.throwIsUndefined(this.modal, ErrorType.ElementNotExist)\n\n        this.modal!.close()\n\n        this.modal!.remove()\n\n        this.modal = undefined\n    }\n\n    #setHeader() {\n        Errors.throwIsUndefined(this.modal, ErrorType.ElementNotExist)\n\n        let closeButton = document.createElement('button')\n\n        closeButton.classList.add('o-modal-close')\n        closeButton.innerHTML = 'x'\n\n        this.modal!.appendChild(closeButton)\n\n        closeButton.onclick = () => this.close()\n    }\n\n    #setContent(content: HTMLElement | undefined) {\n        if (this.#content == undefined) {\n            this.#content = document.createElement(Tag.Div)\n\n            this.#content.classList.add('o-modal-content')\n\n            this.modal?.appendChild(this.#content)\n        }\n\n        if (content != undefined)\n            this.#content.appendChild(content)\n    }\n}","import { Value } from './base/Value'\nimport { PlotPoint } from './PlotPoint'\nimport { LineType, PlotType } from '../static/Enums'\n\nexport class PlotSeries extends Value {\n    values: PlotPoint[]\n\n    type: PlotType\n\n    width: number\n\n    lineType: LineType = LineType.Solid\n\n    constructor(obj: object) {\n        super()\n\n        Object.assign(this, obj)\n    }\n\n    toggle(transition: number) {\n        super.toggle(transition)\n    }\n\n    checkCondition(): boolean {\n        super.checkCondition()\n\n        return true\n    }\n\n    reset() {\n        super.reset()\n    }\n}","import { Value } from './types/base/Value'\nimport { Renderable } from './types/base/Renderable'\nimport { Helper } from './Helper'\nimport { Sector } from './types/Sector'\nimport { Point } from './types/Point'\nimport { Theme } from './Theme'\nimport { Chart } from './Chart'\nimport { TextStyles } from './helpers/TextStyles'\nimport { Canvas } from './helpers/Canvas'\nimport { Button } from './Button'\nimport { TextResources } from './static/TextResources'\nimport * as Constants from './static/constants/Index'\nimport { Styles } from './static/constants/Styles'\nimport { AnimationType, Events, LegendPlace, RenderState } from './static/Enums'\n\nexport class Legend extends Renderable {\n    #button: Button\n\n    #offset: Point\n\n    #chart: Chart\n\n    #hoverCount: number\n\n    isDestroy: boolean = false\n\n    constructor(chart: Chart) {\n        super(chart)\n\n        this.#chart = chart\n\n        this.calculateSizes()\n\n        if (!this.settings.disableInteractions)\n            this.#button = new Button(this.canvas,\n                {\n                    x: -10,\n                    y: 12,\n                    text: TextResources.reset,\n                    action: () => {\n                        for (let value of this.settings.data.values)\n                            value.reset()\n                    }\n                })\n\n        this.#offset = {\n            x: Legend.getOffsetToCenter(this.settings.data.values, this.canvas.width),\n            y: (this.canvas.height - Legend.getLegendHeight(this.settings.data.values, this.canvas.width)) / 2\n        }\n    }\n\n    render() {\n        super.render()\n\n        const ctx = Canvas.getContext(this.canvas)\n\n        let nextPoint = { x: 20, y: 21 }\n\n        this.canvas.style.cursor = Styles.Cursor.Default\n\n        TextStyles.regular(ctx)\n        ctx.textAlign = 'start'\n        ctx.textBaseline = 'alphabetic'\n\n        ctx.translate(this.#offset.x, this.#offset.y)\n\n        this.#hoverCount = 0\n\n        for (const value of this.settings.data.values.filter(v => !v.hideInLegend))\n            nextPoint = this.#draw(value, nextPoint.x, nextPoint.y)\n\n        ctx.translate(-this.#offset.x, -this.#offset.y)\n\n        if (!this.isDestroy)\n            requestAnimationFrame(this.render.bind(this))\n\n        this.onClickEvent = this.#button?.render(this.onMouseMoveEvent, this.onClickEvent)\n\n        this.state = RenderState.Idle\n    }\n\n    #draw(value: Value, x: number, y: number): Point {\n        const ctx = Canvas.getContext(this.canvas)\n\n        const textWidth = Helper.stringWidth(value.label),\n            circleRadius = 6\n\n        if (x + 48 + textWidth >= this.canvas.width - 40 - this.#offset.x) {\n            x = 20\n            y += 26\n        }\n\n        let rectX = x - circleRadius - circleRadius,\n            rectY = y - circleRadius / 2 - circleRadius,\n            rectW = circleRadius + circleRadius + textWidth + 18,\n            rectH = 20\n\n        const isHover = (event: MouseEvent | undefined) => {\n            if (!event)\n                return false\n\n            const px = event.clientX - this.canvasPosition.x + scrollX - this.#offset.x,\n                py = event.clientY - this.canvasPosition.y + scrollY - this.#offset.y\n\n            return px >= rectX && px <= rectX + rectW\n                   && py >= rectY && py <= rectY + rectH\n        }\n\n        const translate = (transition: number, event: AnimationType) => {\n            this.animations.reload(value.id, event)\n\n            ctx.beginPath()\n\n            ctx.roundRect(rectX, rectY, rectW, rectH, circleRadius)\n\n            ctx.fillStyle = Helper.adjustColor(Theme.canvasBackground, Math.round(-25 * transition))\n            ctx.fill()\n        }\n\n        this.animations.add(value.id,\n            AnimationType.Click,\n            {\n                duration: Constants.Animations.legend,\n                continuous: true,\n                before: () => {\n                    return this.onClickEvent != undefined\n                           && (isHover(this.onClickEvent)\n                               || (value instanceof Sector\n                                   && value.current !== 0\n                                   && value.value !== value.current))\n                           && value.checkCondition()\n                },\n                body: transition => {\n                    value.toggle(transition)\n\n                    if (transition == 1)\n                        this.onClickEvent = new PointerEvent(Events.Click)\n                }\n            })\n\n        if (isHover(this.onMouseMoveEvent)) {\n            this.animations.add(value.id,\n                AnimationType.MouseOver,\n                {\n                    duration: Constants.Animations.button,\n                    body: transition => {\n                        translate(transition, AnimationType.MouseLeave)\n                    }\n                })\n\n            if (!value.disabled) {\n                this.#hoverCount++\n\n                this.#chart.highlight(value)\n            }\n\n            this.canvas.style.cursor = Styles.Cursor.Pointer\n        } else {\n            this.animations.add(value.id,\n                AnimationType.MouseLeave,\n                {\n                    timer: Constants.Dates.minDate,\n                    duration: Constants.Animations.button,\n                    backward: true,\n                    body: transition => {\n                        translate(transition, AnimationType.MouseOver)\n                    }\n                })\n\n            if (this.#hoverCount == 0)\n                this.#chart.highlight()\n        }\n\n        ctx.beginPath()\n\n        ctx.arc(x - 1, y + 1, 3, 0, 2 * Math.PI)\n        ctx.fillStyle = value.disabled ? Helper.grayScale(value.color) : value.color\n        ctx.fill()\n\n        ctx.fillStyle = Theme.text\n        if (value.disabled)\n            ctx.fillStyle += '7f'\n\n        ctx.fillText(value.label, x + circleRadius * 1.5 + 1, y + 6)\n\n        x += 20\n\n        if (value.disabled) {\n            ctx.moveTo(x - 10, y + 2)\n            ctx.lineTo(x + textWidth - 10, y + 2)\n            ctx.strokeStyle = Theme.text + '7f'\n            ctx.stroke()\n        }\n\n        x += textWidth + 22\n\n        return {\n            x: x,\n            y: y\n        }\n    }\n\n    destroy() {\n        this.isDestroy = true\n\n        this.canvas.remove()\n    }\n\n    refresh() {\n        this.state = RenderState.Init\n    }\n\n    resize() {\n        this.calculateSizes()\n        this.#button?.resize()\n        this.initAnimations()\n    }\n\n    calculateSizes() {\n        switch (this.settings.legendPlace) {\n            case LegendPlace.Bottom:\n            default:\n                this.canvas.width = this.settings.width\n                this.canvas.height = Legend.getLegendHeight(this.settings.data.values, this.canvas.width)\n\n                this.node.style.flexDirection = Styles.FlexDirection.Column\n\n                break\n\n            case LegendPlace.Top:\n                this.canvas.width = this.settings.width\n                this.canvas.height = Legend.getLegendHeight(this.settings.data.values, this.canvas.width)\n\n                this.node.style.flexDirection = Styles.FlexDirection.ColumnReverse\n\n                break\n\n            case LegendPlace.Left:\n                this.canvas.width = 500\n                this.canvas.height = this.settings.height\n\n                this.node.style.flexDirection = Styles.FlexDirection.Row\n\n                break\n\n            case LegendPlace.Right:\n                this.canvas.width = 500\n                this.canvas.height = this.settings.height\n\n                this.node.style.flexDirection = Styles.FlexDirection.RowReverse\n\n                break\n        }\n    }\n\n    static getOffsetToCenter(values: Value[], width: number): number {\n        let maxWidth = 20\n\n        for (const value of values.filter(v => !v.hideInLegend)) {\n            const labelWidth = Helper.stringWidth(value.label)\n\n            if (maxWidth + labelWidth + 47 >= width - 100)\n                break\n\n            maxWidth += labelWidth + 47\n        }\n\n        return width / 2 - maxWidth / 2\n    }\n\n    static getLegendHeight(values: Value[], width: number): number {\n        let count = 1,\n            acc = 20,\n            offset = Legend.getOffsetToCenter(values, width)\n\n        for (const value of values.filter(v => !v.hideInLegend)) {\n            const labelWidth = Helper.stringWidth(value.label)\n\n            if (acc + labelWidth + 48 >= width - 32 - offset) {\n                acc = 20\n                count++\n            }\n\n            acc += labelWidth + 48\n        }\n\n        return 24 + count * 20 + (count - 1) * 6\n    }\n}","export class Values {\n    static readonly titleOffset = 30\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","Number.prototype.isAnyEquals = function (...values) {\n    return values.includes(<number>this)\n}\n\nDate.prototype.addDays = function (days: number) {\n    let result = new Date(this)\n    result.setDate(result.getDate() + days)\n    return result\n}\n\nDate.prototype.addMilliseconds = function (milliseconds: number) {\n    let result = new Date(this)\n    result.setMilliseconds(result.getMilliseconds() + milliseconds)\n    return result\n}\n\nMap.prototype.trySet = function (key: any, value: any) {\n    if (!this.has(key))\n        this.set(key, value)\n}","import { Chart } from './Chart'\nimport { ChartSettings } from './types/ChartSettings'\n\nfunction OCharts() {\n}\n\nOCharts.chart = function(context: HTMLElement, settings: ChartSettings) {\n    return new Chart(context, settings)\n}\n\n// @ts-ignore\nwindow.OCharts = OCharts"],"names":["Animations","constructor","this","Map","add","id","type","value","key","has","set","contains","reload","get","timer","Date","clear","forEach","_value","AnimationType","Init","delete","initializeTransitions","i","t","x","Math","pow","y","transitionCurve","toFixed","getTransition","item","stamp","passed","getTime","transition","duration","before","body","backward","continuous","endsWith","Helper","adjustColor","color","amount","replace","min","max","parseInt","toString","slice","grayScale","Array","join","round","reduce","a","v","padStart","randomColor","floor","random","stringWidth","str","font","widths","from","acc","cur","charCodeAt","guid","S4","substring","toLowerCase","hexToRgb","hex","length","exec","r","g","b","Color","isColorVisible","background","foreground","backgroundAsRgb","foregroundAsRgb","isISOString","test","applyAlpha","opacity","result","componentToHex","c","rgb","bg","Theme","canvasBackground","alpha","text","Errors","error","Error","throwIsUndefined","object","undefined","throw","context","settings","node","enableLegend","Legend","document","addEventListener","Events","VisibilityChanged","resetMouse","window","Blur","Click","event","target","canvas","closeDropdowns","render","ResizeObserver","destroy","observe","disconnect","highlight","reset","enableTooltip","disableInteractions","ChartType","Plot","PlotRenderer","Circular","CircularRenderer","Gauge","GaugeRenderer","TreeMap","TreeRenderer","prepareSettings","initDropdown","initAnimations","resize","refresh","initialize","isDarkThemeFunction","style","display","Styles","Display","Flex","flexDirection","FlexDirection","Column","alignItems","AlignItems","Center","justifyContent","JustifyContent","height","circular","legend","tree","tooltip","button","Sector","Value","obj","super","Object","assign","toggle","disabled","current","checkCondition","TextResources","exportPNG","decomposeToTable","exportCSV","menu","allDataIsHidden","other","incorrectValues","ThousandShort","MillionShort","BillionShort","Show","NoLabel","treeMapIsEmpty","getContext","willReadFrequently","ErrorType","NullContext","isPixelBusy","pixel","canvasBackgroundInt","data","templateId","getElementById","condition","lines","opacityValue","getBoundingClientRect","scrollX","scrollY","ctx","Canvas","textWidth","map","line","clientX","clientY","width","beginPath","roundRect","baseOpacity","strokeStyle","dropdownBorder","lineWidth","fillStyle","stroke","fill","offset","arc","PI","TextStyles","fillText","padding","updateVisibility","visibility","Visibility","Visible","regex","content","cloneNode","createElement","Tag","Div","innerHTML","position","Position","Absolute","pointerEvents","PointerEvents","None","setAttribute","Attribute","Name","matches","matchAll","html","match","property","replaceAll","appendChild","Hidden","left","top","tooltips","querySelectorAll","Constants","ThemeOptions","colors","backgrounds","lineAxes","lineActives","dropdownBorders","canvasBackgrounds","getRows","headers","values","series","seriesValues","push","xType","PlotAxisType","Formatter","date","name","label","unique","Set","uniqueHeaders","filter","sort","Cursor","Default","Pointer","ColumnReverse","Row","RowReverse","ImageRendering","Pixelated","options","isActive","icon","animations","moveEvent","clickEvent","translate","cursor","MouseOver","MouseLeave","Dates","minDate","regular","iconOffset","navigator","platform","borderRadius","items","dividers","maxWidth","dropdownOpacity","itemOpacityDec","itemBackground","dropdownItemHoverColor","borderColor","rect","setLineDash","isDivider","moveTo","lineTo","animationKey","isReturn","action","textAlign","textBaseline","close","w","h","trueX","trueY","callback","isDark","function","matchMedia","setTheme","Change","index","currentTheme","lineAxis","lineActive","Number","Renderer","chart","enableOther","contextMenu","_other","Modal","Decomposition","toChart","innerWidth","innerHeight","open","onMouseMoveEvent","MouseEvent","MouseMove","state","RenderState","Idle","renderDropdown","renderContextMenu","find","onContextMenuEvent","dropdown","innerRadius","console","warn","splice","sum","Dropdown","Icon","ThreeLines","Export","asPng","title","asCsv","toTable","CircularData","anglesSum","flatMap","sector","angle","reverse","TooltipValue","number","isDestroy","requestAnimationFrame","bind","piece","isNaN","isSingle","s","onClickEvent","includes","PointerEvent","direction","cos","sin","lineJoin","lineCap","indexOf","centerOfSector","minSize","rest","scale","swap","point2","save","labelStartPoint","labelMidPoint","dir","endPoint","isBusy","imageDataX","imageData","Uint32Array","getImageData","buffer","quadraticCurveTo","circularLabel","restore","localAccumulator","localAngle","currentAngle","tangentIntersectionAngle","lengthToTangentIntersection","tangentIntersectionPoint","innerPoint2","changeColor","anyHighlight","highlightItems","AnotherItemOver","AnotherItemLeave","closePath","resetTransform","radius","isWithinRadius","point","getMousePosition","inner","outer","atan2","abs","findIndex","o","sumBefore","isAngle","innerTitle","titleOffset","Values","shortSide","longestLabel","large","Renderable","disableInitAnimation","renderTitle","remove","domRect","parentElement","minWidth","minHeight","baseColor","adjustStep","adjustAmount","dispatchEvent","CustomEvent","detail","clone","canvasPosition","isClick","legendPlace","LegendPlace","Top","Bottom","getLegendHeight","Left","Right","PlotSeries","PlotType","Bar","right","bottom","Tooltip","tooltipLines","axisLineHoverColor","yValue","yHeight","columnWidth","seriesToRender","columnsIndex","columnsCount","barsIndex","barsCount","stackingAccumulator","lineType","LineType","Dash","Dotted","Solid","xIndex","yIndex","getTooltipValue","step","Line","unit","pointDuration","now","addMilliseconds","next","prevValue","endPointX","endPointY","mouse","AttentionLine","yMax","minStep","seriesHeight","fillRect","StackingColumn","ceil","it","PlotData","skip","simple","clearRect","drawImage","isContainsBar","xTitle","yTitle","rotate","xYPos","xCounter","trySet","isFinite","count","maxLabelWidth","maxCount","renderStep","axisLabelOffset","yCount","yCounter","yStep","labelY","labelYAsKey","postfix","shortLabels","countOfTens","isBar","createImageBitmap","then","res","putImageData","axisLineColor","isAnyEquals","xValues","p","yValues","isDate","tempDate","addDays","yMin","stackingColumns","yMaxWidth","isRight","imageRendering","append","onmousemove","onclick","oncontextmenu","preventDefault","onmouseleave","maxHeight","tooltipCell","contextMenuData","totalSquare","minX","minY","isVertical","remainWidth","remainHeight","cells","isLast","j","h1","w1","cell","cellInit","cellIndex","getPrev","E","initAnimationDuration","center","gap","TreeData","table","Table","classList","totals","rows","valuesMap","tableValue","allColumns","header","indexSpaces","tableHeader","columns","vKey","vValue","totalValue","trim","totalColumns","container","div","script","Script","flexGrow","cloneSettings","JSON","parse","stringify","getPoint","point1","point3","outerRadius","longSide","leftEmpty","rightEmpty","destinationCanvas","destCtx","saveAs","toDataURL","csv","row","cols","encodeURIComponent","dataURL","href","isText","showSaveFilePicker","suggestedName","types","accept","excludeAcceptAllOption","toBlob","dataURI","byteString","atob","split","mimeString","ArrayBuffer","imageArray","Uint8Array","Blob","fileHandle","createWritable","writableStream","write","download","A","click","toLocaleString","minimumFractionDigits","maximumFractionDigits","toLocaleDateString","size","modal","Dialog","oncancel","ElementNotExist","showModal","closeButton","calculateSizes","Button","getOffsetToCenter","nextPoint","hideInLegend","labelWidth","rectX","rectY","circleRadius","rectW","isHover","px","py","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","prototype","days","setDate","getDate","milliseconds","setMilliseconds","getMilliseconds","OCharts","Chart"],"sourceRoot":""}