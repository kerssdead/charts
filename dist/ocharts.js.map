{"version":3,"file":"ocharts.js","mappings":"21BACA,eAEA,MAAaA,EAKT,WAAAC,G,YAJA,mBAKI,EAAAC,KAAI,EAAU,IAAIC,IAAK,IAC3B,CAEA,GAAAC,CAAIC,EAAYC,EAAqBC,GACjC,MAAMC,EAAM,EAAAN,KAAI,SAAQ,KAAZA,KAAaG,EAAIC,GACxB,EAAAJ,KAAI,OAAQO,IAAID,IACjB,EAAAN,KAAI,OAAQQ,IAAIF,EAAKD,GAEzB,EAAAL,KAAI,SAAS,KAAbA,KAAcM,EAClB,CAEA,QAAAG,CAASN,EAAYC,GACjB,OAAO,EAAAJ,KAAI,OAAQO,IAAI,EAAAP,KAAI,SAAQ,KAAZA,KAAaG,EAAIC,GAC5C,CAEA,MAAAM,CAAOP,EAAYC,GACXJ,KAAKS,SAASN,EAAIC,KACQ,EAAAJ,KAAI,OAAQW,IAAI,EAAAX,KAAI,SAAQ,KAAZA,KAAaG,EAAIC,IAEtDQ,MAAQ,IAAIC,KAEzB,CAEA,KAAAC,GACI,EAAAd,KAAI,OAAQe,QAAQ,CAACC,EAAQV,KAAS,EAAAN,KAAI,SAAI,KAARA,KAASM,EAAK,EAAAW,cAAcC,OAAS,EAAAlB,KAAI,OAAQmB,OAAOb,GAClG,CA2BA,4BAAOc,GAQH,IAAK,IAAIC,EAAI,EAAGA,EAPI,IAOaA,IAAK,CAClC,MAAMC,GAAKD,EAAI,GARC,IAUhB,IAAIE,EARM,EAQFC,KAAKC,IAAI,EAAIH,EAAG,GACd,EAAIE,KAAKC,IAAI,EAAIH,EAAG,GARpB,IAQgCA,EAChC,GAAK,EAAIA,GAAKE,KAAKC,IAAIH,EAAG,GAX3B,IAIC,EAQAE,KAAKC,IAAIH,EAAG,GAClBI,EAZY,EAYRF,KAAKC,IAAI,EAAIH,EAAG,GACd,EAAIE,KAAKC,IAAI,EAAIH,EAAG,GAdrB,IAciCA,EAChC,GAAK,EAAIA,GAAKE,KAAKC,IAAIH,EAAG,GAZf,IACL,EAYNE,KAAKC,IAAIH,EAAG,GAEtB,EAAWK,gBAAgBnB,KAAKe,EAAEK,QAAQ,GAAIF,EAClD,CAEA,EAAWC,gBAAgBnB,IAAI,EAAG,EACtC,CAEA,oBAAOqB,CAAcxB,GACjB,OAAO,EAAWsB,gBAAgBhB,KAAKN,EAAMuB,QAAQ,KAAO,CAChE,EAtFJ,e,2CAiCatB,GACL,MAAMwB,EAAsB,EAAA9B,KAAI,OAAQW,IAAIL,GACxCyB,EAAQ,IAAIlB,KACZmB,EAASD,EAAME,WAAaH,EAAKlB,OAASmB,GAAOE,UACjDC,EAAa,EAAWL,cAAcG,EAASF,EAAKK,SAAW,EAAIH,EAASF,EAAKK,UACjFC,GAASN,EAAKM,QAASN,EAAKM,UAE3BN,EAAKlB,OAASwB,IACfN,EAAKlB,MAAQmB,GAEbK,GACAN,EAAKO,KAAKP,EAAKQ,SAAW,EAAIJ,EAAaA,GAE7B,GAAdA,GAAqBE,IAAUN,EAAKS,YACpC,EAAAvC,KAAI,OAAQmB,OAAOb,EAC3B,EAAC,WAEOH,EAAYC,GAChB,OAAOD,EAAK,IAAMC,CACtB,EAAC,WAEGE,EAAaF,GACb,OAAOE,EAAIkC,SAAS,IAAMpC,EAC9B,EArDO,EAAAuB,gBAAuC,IAAI1B,G,gFCNtD,eAEA,MAAawC,EACT,kBAAOC,CAAYC,EAAeC,GAC9B,MAAO,IAAMD,EAAME,QAAQ,KAAM,IAAIA,QAAQ,MAAOF,IAAU,IAAMnB,KAAKsB,IAAI,IAAKtB,KAAKuB,IAAI,EAAGC,SAASL,EAAO,IAAMC,IAASK,SAAS,KAAKC,OAAO,GACtJ,CAEA,gBAAOC,CAAUR,GACb,MAAO,IAAMS,MAAM,GAAGC,KAAK7B,KAAK8B,MAAM,CAAC,GAAI,IAAK,KAAKC,OAAO,CAACC,EAAGC,EAAGpC,IAAMmC,EAAIC,EAAIT,SAASL,EAAM,EAAItB,EAAI,GAAKsB,EAAM,EAAItB,EAAI,GAAI,IAAK,GAAK,GAAG4B,SAAS,IAAIS,SAAS,EAAG,KACzK,CAEA,kBAAOC,GACH,IACIhB,EAAQ,IACZ,IAAK,IAAItB,EAAI,EAAGA,EAAI,EAAGA,IACnBsB,GAHU,mBAGOnB,KAAKoC,MAAsB,GAAhBpC,KAAKqC,WAErC,OAAOlB,CACX,CAEA,kBAAOmB,CAAYC,EAAaC,GAC5B,MAAMC,EAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,SAAW,SAAW,SAAW,SAAW,SAAW,SAAW,QAAU,QAAU,SAAW,SAAW,SAAW,SAAW,SAAW,SAAW,SAAW,SAAW,SAAW,SAAW,SAAW,SAAW,SAAW,SAAW,SAAW,SAAW,SAAW,SAAW,SAAW,SAAW,QAAU,SAAW,QAAU,SAAW,UAAW,QAAU,QAAU,QAAU,QAAU,QAAU,QAAU,SAAW,QAAU,SAAW,GAAK,QAAU,SAAW,SAAW,QAAU,SAAW,QAAU,SAAW,QAAU,QAAU,QAAU,QAAU,QAAU,OAAS,QAAU,QAAU,QAAU,SAAW,SAAW,SAAW,SAAW,SAAW,SAAW,SAAW,SAAW,GAAK,SAAW,SAAW,SAAW,SAAW,SAAW,QAAU,QAAU,GAAK,QAAU,SAAW,SAAW,SAAW,SAAW,SAAW,SAAW,GAAK,SAAW,SAAW,GAAK,QAAU,GAAK,GAAK,GAAK,SAAW,QAAU,QAAU,UAE5iC,OAAOb,MAAMc,KAAKH,GAAKR,OAAO,CAACY,EAAKC,IAAQD,GAAOF,EAAOG,EAAIC,WAAW,KAD7D,mBAC0E,IAAML,GAAQ,GACxG,CAEA,WAAOM,GACH,MAAMC,EAAK,KAA8B,OAArB,EAAI/C,KAAKqC,UAAuB,GAAGZ,SAAS,IAAIuB,UAAU,GAC9E,OAAQD,IAAOA,IAAO,IAAMA,IAAO,KAAOA,IAAKrB,MAAM,EAAG,GAAK,IAAMqB,IAAO,IAAMA,IAAOA,IAAOA,KAAME,aACxG,CAEA,eAAOC,CAASC,GACZ,GAAIA,EAAIC,OAAS,EAAG,CAChB,MAAMvE,EAAQ,4CAA4CwE,KAAKF,GAC/D,GAAItE,EACA,MAAO,CACHyE,EAAG9B,SAAS3C,EAAM,GAAI,IACtB0E,EAAG/B,SAAS3C,EAAM,GAAI,IACtB2E,EAAGhC,SAAS3C,EAAM,GAAI,IAElC,KAAO,CACH,MAAMA,EAAQ,mCAAmCwE,KAAKF,GACtD,GAAItE,EACA,MAAO,CACHyE,EAAG9B,SAAS3C,EAAM,GAAKA,EAAM,GAAI,IACjC0E,EAAG/B,SAAS3C,EAAM,GAAKA,EAAM,GAAI,IACjC2E,EAAGhC,SAAS3C,EAAM,GAAKA,EAAM,GAAI,IAE7C,CAEA,OAAO,IAAI,EAAA4E,KACf,CAEA,qBAAOC,CAAeC,EAAoBC,GACtC,MAAMC,EAAkB5C,EAAOiC,SAASS,GACpCG,EAAkB7C,EAAOiC,SAASU,GAGtC,OAAQC,EAAgBP,EAAIO,EAAgBN,EAAIM,EAAgBL,IAAMM,EAAgBR,EAAIQ,EAAgBP,EAAIO,EAAgBN,GAFlH,GAGhB,CAEA,kBAAOO,CAAYxB,GACf,MAAO,oDAAoDyB,KAAKzB,EACpE,EA7DJ,U,oFCFA,qBAKI,WAAAhE,CAAY0F,EAAe9C,GACvB3C,KAAKyF,KAAOA,EACZzF,KAAK2C,MAAQA,CACjB,E,8ECNJ,MAAsB+C,EAClB,YAAO,CAAMC,GACT,MAAM,IAAIC,MAAMD,EACpB,CAEA,uBAAOE,CAAiBC,EAAaH,GACnBI,MAAVD,GACAJ,EAAOM,MAAML,EACrB,EARJ,U,q5BCCA,eAEA,SACA,SACA,SACA,YACA,OACA,SACA,SACA,SAEA,cAWI,WAAA5F,CAAYkG,EAAsBC,G,YANlC,mBAEA,mBAEA,mBAGI,EAAAlG,KAAI,SAAY,KAAhBA,KAAiBkG,GAEjBlG,KAAKmG,KAAOF,EACZjG,KAAKkG,SAAWA,EAEhB,EAAAlG,KAAI,SAAa,KAAjBA,MACA,EAAAA,KAAI,SAAiB,KAArBA,MAEIkG,EAASE,cACT,EAAApG,KAAI,EAAW,IAAI,EAAAqG,OAAOrG,MAAK,KAEnCsG,SAASC,iBAAiB,EAAAC,OAAOC,kBAAmB,IAAM,EAAAzG,KAAI,OAAW0G,cACzEC,OAAOJ,iBAAiB,EAAAC,OAAOI,KAAM,IAAM,EAAA5G,KAAI,OAAW0G,aAC9D,CAEA,MAAAG,GACI,EAAA7G,KAAI,OAAW6G,SACf,EAAA7G,KAAI,QAAU6G,SAEd,EAAA7G,KAAI,EAAa,IAAI8G,eAAe,KAC5B,EAAA9G,KAAI,OAAW+G,OACf,EAAA/G,KAAI,SAAQ,KAAZA,MAEAA,KAAKgH,YACX,KACF,EAAAhH,KAAI,OAAWiH,QAAQjH,KAAKmG,MAE5B,EAAAnG,KAAI,SAAS,KAAbA,KACJ,CAEA,OAAAgH,GACI,EAAAhH,KAAI,OAAWgH,UACf,EAAAhH,KAAI,QAAUgH,UAEd,EAAAhH,KAAI,OAAWkH,YACnB,CAEA,SAAAC,CAAU9G,GACN,EAAAL,KAAI,OAAWmH,UAAU9G,EAC7B,CAEA,KAAA+G,GACI,EAAAC,MAAMD,QAEN,EAAApH,KAAI,SAAY,KAAhBA,KAAiBA,KAAKkG,SAC1B,G,qEAKI,OAFAlG,KAAKkG,SAASoB,eAAiBtH,KAAKkG,SAASqB,qBAAuBvH,KAAKkG,SAASoB,cAE1EtH,KAAKkG,SAAS9F,MAClB,KAAK,EAAAoH,UAAUC,KACX,EAAAzH,KAAI,EAAa,IAAI,EAAA0H,aAAa1H,MAAK,KACvC,MAEJ,KAAK,EAAAwH,UAAUG,SACX,EAAA3H,KAAI,EAAa,IAAI,EAAA4H,iBAAiB5H,MAAK,KAC3C,MAEJ,KAAK,EAAAwH,UAAUK,MACX,EAAA7H,KAAI,EAAa,IAAI,EAAA8H,cAAc9H,MAAK,KACxC,MAEJ,KAAK,EAAAwH,UAAUO,QACX,EAAA/H,KAAI,EAAa,IAAI,UAAaA,MAAK,KAI/C,EAAAA,KAAI,OAAWgI,kBAEVhI,KAAKkG,SAASqB,sBACf,EAAAvH,KAAI,OAAWiI,eACf,EAAAjI,KAAI,OAAWkI,kBAGnB,EAAAlI,KAAI,OAAWmI,QACnB,EAAC,aAGG,EAAAnI,KAAI,OAAWoI,UACf,EAAApI,KAAI,QAAUoI,SAClB,EAAC,aAGG,EAAApI,KAAI,OAAWmI,SACf,EAAAnI,KAAI,QAAUmI,QAClB,EAAC,WAEWjC,GACR,EAAAmB,MAAMgB,WACF,IAAM,EAAArI,KAAI,SAAQ,KAAZA,MACNkG,EAASoC,qBAEb,EAAAxI,WAAWsB,uBACf,EAAC,aAGGpB,KAAKmG,KAAKoC,MAAMC,QAAU,EAAAC,OAAOC,QAAQC,KACzC3I,KAAKmG,KAAKoC,MAAMK,cAAgB,EAAAH,OAAOI,cAAcC,OACrD9I,KAAKmG,KAAKoC,MAAMQ,WAAa,EAAAN,OAAOO,WAAWC,OAC/CjJ,KAAKmG,KAAKoC,MAAMW,eAAiB,EAAAT,OAAOU,eAAeF,OACvDjJ,KAAKmG,KAAKoC,MAAMa,OAAS,MAC7B,C,8EChIJ,e,mFCAA,MAAatJ,GAAb,eACW,EAAAuJ,SAAW,IAEX,EAAAC,OAAS,IAET,EAAAC,KAAO,IAEP,EAAAC,QAAU,IAEV,EAAAC,OAAS,G,iFCTpB,eAGA,MAAaC,UAAe,EAAAC,MAWxB,WAAA5J,CAAY6J,GACRC,QAEAC,OAAOC,OAAO/J,KAAM4J,EACxB,CAEA,MAAAI,CAAO9H,GACH2H,MAAMG,OAAO9H,GAETlC,KAAKiK,SACLjK,KAAKkK,QAAUlK,KAAKK,OAAS,EAAI6B,GAEjClC,KAAKkK,QAAUlK,KAAKK,MAAQ6B,CACpC,CAEA,cAAAiI,GAGI,OAFAN,MAAMM,iBAEkB,GAAhBnK,KAAKkK,UAAiBlK,KAAKiK,UAA2B,GAAdjK,KAAKK,KACzD,CAEA,KAAA+G,GACIyC,MAAMzC,QAENpH,KAAKkK,QAAUlK,KAAKK,KACxB,EApCJ,U,sFCHA,MAAa+J,GAAb,kBACW,EAAAC,UAAY,mBAEZ,EAAAC,iBAAmB,mBAEnB,EAAAlD,MAAQ,QAER,EAAAmD,UAAY,mBAEZ,EAAAC,KAAO,OAEP,EAAAC,gBAAkB,qBAElB,EAAAC,MAAQ,QAER,EAAAC,gBAAkB,mBAElB,EAAAC,cAAgB,IAEhB,EAAAC,aAAe,IAEf,EAAAC,aAAe,IAEf,EAAAC,KAAO,UAEP,EAAAC,QAAU,U,iFCzBrB,cACA,SAEA,eACI,iBAAOC,CAAWlE,GACd,OAAOA,EAAOkE,WAAW,KAAM,CAAEC,oBAAoB,KAC3C,EAAAxF,OAAOM,MAAM,EAAAmF,UAAUC,YACrC,CAEA,kBAAOC,CAAYC,GACf,OAAe,WAARA,CACX,E,wmDCVJ,eACA,SACA,QAIA,SACA,YACA,SAEA,SAEA,gBAqBI,WAAAvL,CAAYgH,EAA2Bb,G,YAhB9B,mBAEA,mBAET,mBAEA,mBAEA,mBAEA,mBAEA,mBAEA,mBAGIlG,KAAK+G,OAASA,EACd/G,KAAKuL,KAAOrF,EAASqF,KACrB,EAAAvL,KAAI,EAAYkG,EAASoB,cAAa,KACtC,EAAAtH,KAAI,IAAekG,EAASsF,WAAU,KAElC,EAAAxL,KAAI,QACJ,EAAAA,KAAI,EAAkCsG,SAASmF,eAAevF,EAASsF,YAAW,KAEtFxL,KAAKoI,SACT,CAEA,MAAAvB,CAAO6E,EAAoBC,EAAmBC,EAAuBvL,GAGjE,GAFA,EAAAL,KAAI,SAAS,KAAbA,MAEK,EAAAA,KAAI,QAAc2L,EAGvB,GAAID,GAAa,EAAA1L,KAAI,QAAgB,EAAAA,KAAI,OAAU,CAC3C0L,GACA,EAAA1L,KAAI,EAAU4L,EAAK,KAElB,EAAA5L,KAAI,QACL,EAAAA,KAAI,EAAU,IAAIa,KAAM,KAEvB,EAAAb,KAAI,OAEA,EAAAA,KAAI,QACT,EAAAA,KAAI,EAAU,IAAIa,KAAM,KAFxB,EAAAb,KAAI,GAAe,EAAI,KAIvB,EAAAA,KAAI,OACJ,EAAAA,KAAI,SAAc,KAAlBA,KAAmB2L,EAAOtL,GAE1B,EAAAL,KAAI,SAAe,KAAnBA,KAAoB2L,GAExB,MAAME,EAAe,EAAA7L,KAAI,SAAiB,KAArBA,MAEjB,EAAAA,KAAI,QAAY6L,GAAgB,IAChC,EAAA7L,KAAI,GAAe,EAAK,KACxB,EAAAA,KAAI,GAAW,EAAK,MAGpB,EAAAA,KAAI,QAAY6L,GAAgB,IAChC,EAAA7L,KAAI,GAAe,EAAK,KACxB,EAAAA,KAAI,GAAW,EAAK,KACpB,EAAAA,KAAI,OAAU+F,EAAS,MAGtB2F,GAA4B3F,MAAf,EAAA/F,KAAI,QAClB,EAAAA,KAAI,GAAW,EAAI,IAC3B,MACI,EAAAA,KAAI,OAAU+F,EAAS,IAE/B,CAqIA,OAAAqC,GACI,EAAApI,KAAI,EAAmBA,KAAK+G,OAAO+E,wBAAuB,KAC1D,EAAA9L,KAAI,OAAiBuB,GAAKwK,QAC1B,EAAA/L,KAAI,OAAiB0B,GAAKsK,OAC9B,G,yIAvIeL,GACX,MAAMM,EAAM,EAAAC,OAAOjB,WAAWjL,KAAK+G,QAE7BoF,EAAY3K,KAAKuB,OAAO,EAAA/C,KAAI,OAAQoM,IAAIC,GAAQ,EAAA5J,OAAOqB,YAAYuI,EAAK5G,MAAQ,KAAO4G,EAAK1J,MAAQ,EAAI,KAK9G,IAAIpB,EAAIoK,EAAMW,QAAU,EAAAtM,KAAI,OAAiBuB,EAAI,GAC7CG,EAAIiK,EAAMY,QAAU,EAAAvM,KAAI,OAAiB0B,EAAIsK,QAAU,GAEvDzK,EAAI4K,EAAY,GAAK,EAAAnM,KAAI,OAAiBwM,QAC1CjL,EAAI,EAAAvB,KAAI,OAAiBwM,OAASL,EAAY,KAE9CzK,EAAI,EAAyB,GAArB,EAAA1B,KAAI,OAAQ4E,OAAc,EAAA5E,KAAI,OAAiBoJ,SACvD1H,EAAI,EAAA1B,KAAI,OAAiBoJ,OAAS,EAAyB,GAArB,EAAApJ,KAAI,OAAQ4E,QAEtDqH,EAAIQ,YACJR,EAAIS,UAAUnL,EAAGG,EAAGyK,EAAY,GAAI,GAAK,GAAK,EAAAnM,KAAI,OAAQ4E,OAZvC,GAanB,IAAI+H,EAAUnL,KAAK8B,MAAgC,IAA1B,EAAAtD,KAAI,SAAiB,KAArBA,OAA+BiD,SAAS,IAC7D2J,EAAcpL,KAAK8B,MAAgC,IAA1B,EAAAtD,KAAI,SAAiB,KAArBA,OAA+BiD,SAAS,IAC/C,GAAlB0J,EAAQ/H,SACR+H,EAAU,IAAMA,GACM,GAAtBC,EAAYhI,SACZgI,EAAc,IAAMA,GAExBX,EAAIY,YAAc,EAAAxF,MAAMyF,eAAiBF,EACzCX,EAAIc,UAAY,EAChBd,EAAIe,UAAY,EAAA3F,MAAMlC,WAAayH,EACnCX,EAAIgB,SACJhB,EAAIiB,OAEJ,IAAK,IAAIb,KAAQ,EAAArM,KAAI,OAAS,CAC1B,IAAImN,EAAS,EAETd,EAAK1J,QACLwK,EAAS,GAETlB,EAAIQ,YACJR,EAAIe,UAAYX,EAAK1J,MAAQgK,EAC7BV,EAAImB,IAAI7L,EAAI,GAAIG,EAAI,GAAI,EAAG,EAAa,EAAVF,KAAK6L,IACnCpB,EAAIiB,QAGR,EAAAI,WAAW9D,QAAQyC,GACnBA,EAAIe,UAAY,EAAA3F,MAAM5B,KAAOkH,EAC7BV,EAAIsB,SAASlB,EAAK5G,MAAQ,GAAIlE,EAAI4L,EAASK,GAAa9L,EAAI,IAE5DA,GAAK,EACT,CACJ,EAAC,WAEaiK,EAAmBtL,GAC7B,GAAa0F,MAAT1F,EACA,OAEJ,MAAMF,EAAK,EAAAH,KAAI,OAAWG,GAAKE,EAAMF,GAErC,IAAIqJ,EAA8BlD,SAASmF,eAAetL,GAE1D,MAAMsN,EAAmB,KACrB,EAAAzN,KAAI,SAAS,KAAbA,MAEAwJ,EAAQjB,MAAMmF,WAAa,EAAAjF,OAAOkF,WAAWC,SAGjD,IAAKpE,EAAS,CACV,MAAMqE,EAAQ,cAEd,IAAIC,EAAuB,EAAA9N,KAAI,OAAW+N,WAAU,GAEpDvE,EAAUlD,SAAS0H,cAAc,EAAAC,IAAIC,KAErC1E,EAAQ2E,UAAYL,EAAQK,UAE5B3E,EAAQrJ,GAAKA,EACbqJ,EAAQjB,MAAM6F,SAAW,EAAA3F,OAAO4F,SAASC,SACzC9E,EAAQjB,MAAMgG,cAAgB,EAAA9F,OAAO+F,cAAcC,KACnDjF,EAAQjB,MAAMmF,WAAa,EAAAjF,OAAOkF,WAAWC,QAE7CpE,EAAQkF,aAAa,EAAAC,UAAUC,KAAM,EAAA5O,KAAI,OAAWG,IAEpD,MAAM0O,EAAU,IAAIrF,EAAQ2E,UAAUW,SAASjB,IAE/C,IAAIkB,EAAOvF,EAAQ2E,UAEnB,IAAK,MAAMa,KAASH,EAAS,CACzB,MAAMI,EAAWD,EAAM,GAAGnM,QAAQ,KAAM,IACdA,QAAQ,IAAK,IACbqM,WAAW,IAAK,IAE1CH,EAAOA,EAAKG,WAAWF,EAAM,GAAI3O,EAAMkL,KAAK0D,GAChD,CAEAzF,EAAQ2E,UAAYY,EAEpBzI,SAASjE,KAAK8M,YAAY3F,GAE1BA,EAAQ4E,SAAW5E,EAAQsC,wBAE3B2B,GACJ,CAEIjE,EAAQjB,MAAMmF,YAAc,EAAAjF,OAAOkF,WAAWyB,QAC9C3B,IAE2B,GAA3BjE,EAAQ4E,SAAShF,SACjBI,EAAQ4E,SAAW5E,EAAQsC,yBAE/B,MAAMqB,EAAS,GAEf,IAAIR,EAAU,IAEVpL,EAAIoK,EAAMW,QACV5K,EAAIiK,EAAMY,QAAUP,QAEpBzK,EAAIiI,EAAQ4E,SAAS5B,MAAQ,EAAAxM,KAAI,OAAiBuB,EAAI,EAAAvB,KAAI,OAAiBwM,MAAQW,IACnF5L,EAAI,EAAAvB,KAAI,OAAiBwM,MAAQhD,EAAQ4E,SAAS5B,MAAQ,EAAAxM,KAAI,OAAiBuB,EAAI4L,EACnFR,EAAU,OAGVjL,EAAI8H,EAAQ4E,SAAShF,OAAS,EAAApJ,KAAI,OAAiB0B,EAAI,EAAA1B,KAAI,OAAiBoJ,OAAS+D,IACrFzL,EAAI,EAAA1B,KAAI,OAAiBoJ,OAASI,EAAQ4E,SAAShF,OAAS,EAAApJ,KAAI,OAAiB0B,EAAIyL,EACrFR,EAAU,OAGdnD,EAAQjB,MAAM8G,KAAO9N,EAAI4L,EAAS,KAClC3D,EAAQjB,MAAM+G,IAAM5N,EAAIyL,EAAS,KACjC3D,EAAQjB,MAAMoE,QAAUA,CAC5B,EAAC,aASG,IAAK,EAAA3M,KAAI,OACL,OAEJ,MAAMuP,EAAoCjJ,SAASkJ,iBAAiB,UAAW,EAAAxP,KAAI,OAAWG,QAE9F,IAAK,IAAIgG,KAAQoJ,EACbpJ,EAAKoC,MAAMmF,WAAa,EAAAjF,OAAOkF,WAAWyB,MAClD,EAAC,aAGG,IAAK,EAAApP,KAAI,OACL,OAAO,EAEX,IAAI6L,EAAe,EAAA7L,KAAI,OACF,IAAK,IAAIa,MAAOoB,UAAY,EAAAjC,KAAI,OAAQiC,WAAawN,EAAU3P,WAAW0J,UACzE,IAAI3I,MAAOoB,UAAY,EAAAjC,KAAI,OAAQiC,WAAawN,EAAU3P,WAAW0J,QAM3F,OALIqC,EAAe,IACfA,EAAe,GACfA,EAAe,IACfA,EAAe,GAEZA,CACX,C,qFCzPJ,MAAa6D,GAAb,iBACoB,EAAAC,OAAS,CAAC,UAAW,WAErB,EAAAC,YAAc,CAAC,UAAW,WAE1B,EAAAhE,MAAQ,CAAC,UAAW,WAEpB,EAAAiE,SAAW,CAAC,UAAW,WAEvB,EAAAC,YAAc,CAAC,UAAW,WAE1B,EAAAC,gBAAkB,CAAC,UAAW,WAE9B,EAAAC,kBAAoB,CAAC,UAAW,U,mFCRpD,eACA,SAEA,iBAeI,cAAOC,CAAQ1E,GACX,IAAI2E,EAA8B,GAE9BC,EAAuB,GAE3B,IAAK,MAAMC,KAAU7E,EAAK4E,OAAQ,CAC9B,IAAIE,EAAe,IAAIpQ,IAEvB,IAAK,MAAMI,KAAS+P,EAAOD,OACvBE,EAAa7P,IAAIH,EAAMkB,EAAE0B,WAAY5C,EAAMqB,GAC3CwO,EAAQI,KAAK,CACTjQ,MAAOA,EAAMkB,EAAE0B,WACfuF,QAAS+C,EAAKgF,OAAS,EAAAC,aAAa3P,KACzB,EAAA4P,UAAUC,KAAK,IAAI7P,KAAKR,EAAMkB,IAC9BlB,EAAMkB,EAAE0B,aAI3BkN,EAAOG,KAAK,CACRK,KAAMP,EAAOQ,MACbT,OAAQE,GAEhB,CAEA,MAAMQ,EAAS,IAAIC,IACfC,EAAgBb,EAAQc,OAAOvN,IAAMoN,EAAOtQ,IAAIkD,EAAE+E,UAAYqI,EAAO3Q,IAAIuD,EAAE+E,UAK/E,OAHI+C,EAAKgF,OAAS,EAAAC,aAAa3P,MAC3BkQ,EAAcE,KAAK,CAACzN,EAAGwB,IAAM,IAAInE,KAAK2C,EAAEnD,OAAO4B,UAAY,IAAIpB,KAAKmE,EAAE3E,OAAO4B,WAE1E,CACHiO,QAASa,EACTZ,OAAQA,EAEhB,E,cCzDJ,IAAiB1H,E,iEAAjB,SAAiBA,GACb,MAAayI,GACF,EAAAC,QAAU,UAEV,EAAAC,QAAU,UAHR,EAAAF,OAAM,EAMnB,MAAaxI,GACF,EAAAC,KAAO,OADL,EAAAD,QAAO,EAIpB,MAAaG,GACF,EAAAC,OAAS,SAET,EAAAuI,cAAgB,iBAEhB,EAAAC,IAAM,MAEN,EAAAC,WAAa,cAPX,EAAA1I,cAAa,EAU1B,MAAaG,GACF,EAAAC,OAAS,SADP,EAAAD,WAAU,EAIvB,MAAa2E,GACF,EAAAC,QAAU,UAEV,EAAAwB,OAAS,SAHP,EAAAzB,WAAU,EAMvB,MAAaU,GACF,EAAAC,SAAW,WADT,EAAAD,SAAQ,EAIrB,MAAaG,GACF,EAAAC,KAAO,OADL,EAAAD,cAAa,EAI1B,MAAarF,GACF,EAAAF,OAAS,SADP,EAAAE,eAAc,EAI3B,MAAaqI,GACF,EAAAC,UAAY,YADV,EAAAD,eAAc,CAG9B,CA9CD,CAAiB/I,IAAM,SAANA,EAAM,I,mmDCAvB,eAEA,OACA,QACA,SACA,SACA,SACA,YACA,SAEA,iBAiBI,WAAA1I,CAAYgH,EAA2B2K,G,YAhBvC,mBAEA,mBAEA,mBAIA,KAAAC,UAAoB,EAEpB,mBAEA,mBAEA,mBAGI,EAAA3R,KAAI,EAAW+G,EAAM,KACrB,EAAA/G,KAAI,EAAY0R,EAAO,KAEvB,EAAA1R,KAAI,EAAqC+F,MAAtB,EAAA/F,KAAI,OAAUyF,KAAiB,KAElDzF,KAAK4R,WAAa,IAAI,EAAA9R,UAC1B,CAEA,MAAA+G,CAAOgL,EAAuBC,GACrB,EAAA9R,KAAI,QACL,EAAAA,KAAI,SAAgB,KAApBA,MAEA,EAAAA,KAAI,SACJA,KAAK2R,UAAW,GAEpB,MAAM1F,EAAM,EAAAC,OAAOjB,WAAW,EAAAjL,KAAI,QAElC,IAAIuB,EAAI,EAAAvB,KAAI,OAAWuB,EACnBG,EAAI,EAAA1B,KAAI,OAAW0B,EACnB8K,EAAQ,EAAAxM,KAAI,OAAWwM,MACvBpD,EAAS,EAAApJ,KAAI,OAAWoJ,OAI5B,GAFA6C,EAAIQ,aAEC,EAAAzM,KAAI,OAAc,CACnB,MAAM+R,EAAY,CAAC7P,EAAoByJ,KACnC3L,KAAK4R,WAAWlR,OAAO,qBAAsBiL,GAE7CM,EAAIe,UAAY,EAAAvK,OAAOC,YAAY,EAAA2E,MAAMlC,YAAa3D,KAAK8B,MAAM,GAAKpB,KAGtE,EAAAlC,KAAI,SAAY,KAAhBA,KAAiB6R,EAAWtQ,EAAGG,EAAG8K,EAAOpD,IACzC,EAAApJ,KAAI,OAASuI,MAAMyJ,OAAS,EAAAvJ,OAAOyI,OAAOE,QAEtCU,GAAcD,EAAUtQ,GAAKuQ,EAAWvQ,GAAKsQ,EAAUnQ,GAAKoQ,EAAWpQ,IACvE1B,KAAK2R,UAAY3R,KAAK2R,SACtBG,OAAa/L,GAGZ/F,KAAK2R,SAUN1F,EAAIe,UAAY,EAAAvK,OAAOC,YAAY,EAAA2E,MAAMlC,YAAa,IATtDnF,KAAK4R,WAAW1R,IAAI,qBAChB,EAAAe,cAAcgR,UACd,CACI9P,SAAU,IACVE,KAAMH,IACF6P,EAAU7P,EAAY,EAAAjB,cAAciR,iBAMpD,EAAAlS,KAAI,OAASuI,MAAMyJ,OAAS,EAAAvJ,OAAOyI,OAAOC,QAErCnR,KAAK2R,SAYN1F,EAAIe,UAAY,EAAAvK,OAAOC,YAAY,EAAA2E,MAAMlC,YAAa,IAXtDnF,KAAK4R,WAAW1R,IAAI,qBAChB,EAAAe,cAAciR,WACd,CACItR,MAAO6O,EAAU0C,MAAMC,QACvBjQ,SAAU,IACVG,UAAU,EACVD,KAAMH,IACF6P,EAAU7P,EAAY,EAAAjB,cAAcgR,eAOxDhG,EAAIY,YAAc,EAAAxF,MAAMlC,WACxB8G,EAAIS,UAAUnL,EAAGG,EAAG8K,EAAOpD,EAAQ,GACnC6C,EAAIiB,OAEJ,EAAAI,WAAW+E,QAAQpG,GACnBA,EAAIsB,SAAS,EAAAvN,KAAI,OAAUyF,MAAQ,GAAIlE,EAAIiL,EAAQ,EAAG9K,EAAI0H,EAAS,EACvE,CAEA,GAAIpJ,KAAK2R,SAAU,CACf,MAAMnE,EAAU,EACZ8E,EAAe,EAEnB5Q,GAAK0H,EAEL,MAAMmJ,EAAQ,EAAAvS,KAAI,OAAUuS,MAAMvB,OAAO3Q,GAASA,EAAMoF,MACpD+M,EAAW,EAAAxS,KAAI,OAAUuS,MAAMvB,OAAO3Q,IAAUA,EAAMoF,MAE1D,IAAIgN,EAAWjR,KAAKuB,OAAOwP,EAAMnG,IAAI/L,GAAS,EAAAoC,OAAOqB,YAAYzD,EAAMoF,QAC5C,EAAV+H,EAEbjM,EAAIkR,EAAW,EAAAzS,KAAI,OAASwM,MAAQ,IACpCjL,GAAKA,EAAIkR,EAAW,EAAAzS,KAAI,OAASwM,MAAQ,GAE7C,MAAMkG,EAAkB,KACpBC,EAAiB,IACjBC,EAAiB,EAAAvL,MAAMwL,uBACvBC,EAAc,EAAAzL,MAAMyF,eAExBb,EAAIQ,YAEJ,MAAMsG,EAAO,CACTxR,EAAGA,EACHG,EAAGA,EACH8K,MAAOiG,EACPrJ,OAAuB,GAAfmJ,EAAM3N,OACc,EAAlB4N,EAAS5N,QACQ,GAAhB2N,EAAM3N,OAAc4I,EAAU,IACd,GAAhB+E,EAAM3N,QAAkC,GAAnB4N,EAAS5N,OAAc4I,EAAU,IAGrEvB,EAAIS,UAAUqG,EAAKxR,EAAGwR,EAAKrR,EAAGqR,EAAKvG,MAAOuG,EAAK3J,OAAQkJ,GACvDrG,EAAIe,UAAY,EAAA3F,MAAMlC,WAAauN,EACnCzG,EAAI+G,YAAY,IAChB/G,EAAIc,UAAY,EAChBd,EAAIY,YAAciG,EAAcJ,EAChCzG,EAAIiB,OACJjB,EAAIgB,SAEJhB,EAAIQ,YAEJ/K,GAAK,EAEL,IAAK,MAAMI,KAAQ,EAAA9B,KAAI,OAAUuS,MAAO,CAGpC,GAFAtG,EAAIQ,YAEkB,GAAlB3K,EAAKmR,UAAmB,CACxBvR,GAAK,EAELuK,EAAIiH,OAAO3R,EAAIiM,EAAS9L,GACxBuK,EAAIkH,OAAO5R,EAAIkR,EAAWjF,EAAS9L,GAEnCuK,EAAIc,UAAY,GAChBd,EAAIgB,SAEJvL,GAAK,EAEL,QACJ,CAEAuK,EAAIe,UAAY,cAEhB,MAAMoG,EAAe,qBAAuBtR,EAAK2D,KAE3CsM,EAAY,CAAC7P,EAAoByJ,EAAsB0H,KAGzD,GAFArT,KAAK4R,WAAWlR,OAAO0S,EAAczH,GAEjC0H,GAA0B,GAAdnR,EACZ,OAEJ,IAAIyK,EAAUnL,KAAK8B,MAAMqP,EAAiBzQ,GAAYe,SAAS,IACzC,GAAlB0J,EAAQ/H,SACR+H,EAAU,IAAMA,GAEpBV,EAAIe,UAAY4F,EAAiBjG,GAGjC,EAAA3M,KAAI,SAAY,KAAhBA,KAAiB6R,EAAWtQ,EAAGG,EAAG+Q,EAAU,KAC5CzS,KAAK4R,WAAW1R,IAAIkT,EAChB,EAAAnS,cAAcgR,UACd,CACI9P,SAAU,IACVE,KAAMH,IACF6P,EAAU7P,EAAY,EAAAjB,cAAciR,eAIhD,EAAAlS,KAAI,OAASuI,MAAMyJ,OAAS,EAAAvJ,OAAOyI,OAAOE,QAEtCU,IACAhQ,EAAKwR,SAELxB,OAAa/L,EACb/F,KAAK2R,UAAW,IAGpB3R,KAAK4R,WAAW1R,IAAIkT,EAChB,EAAAnS,cAAciR,WACd,CACItR,MAAO6O,EAAU0C,MAAMC,QACvBjQ,SAAU,IACVG,UAAU,EACVD,KAAMH,IACF6P,EAAU7P,EAAY,EAAAjB,cAAcgR,WAAW,MAK/DhG,EAAIS,UAAUnL,EAAIiM,EAAS9L,EAAG+Q,EAAqB,EAAVjF,EAAa,GAAI8E,GAC1DrG,EAAIiB,OAEJjB,EAAIe,UAAY,EAAA3F,MAAM5B,KACtBwG,EAAIsH,UAAY,OAChBtH,EAAIuH,aAAe,UACnBvH,EAAIsB,SAASzL,EAAK2D,KAAMlE,EAAc,EAAViM,EAAa9L,EAAI,GAE7CA,GAAK,EACT,CACJ,CAgBA,OAdAuK,EAAIc,UAAY,GAEX,EAAA/M,KAAI,QAA8B+F,MAAd+L,GAA2B9R,KAAK2R,WACrD3R,KAAK2R,UAAW,EAChBG,OAAa/L,GAGjB,EAAA/F,KAAI,GAAW,EAAI,KAEf,EAAAA,KAAI,QAAgB8R,GAAcD,EAAUtQ,GAAKuQ,EAAWvQ,GAAKsQ,EAAUnQ,GAAKoQ,EAAWpQ,IAC3F1B,KAAK2R,UAAY3R,KAAK2R,SACtBG,OAAa/L,GAGV+L,CACX,CAoBA,OAAA1J,GACI,EAAApI,KAAI,GAAW,EAAK,IACxB,CAEA,MAAAmI,GACI,EAAAnI,KAAI,SAAgB,KAApBA,MACA,EAAAA,KAAI,SAAmB,KAAvBA,KACJ,G,+GAxBI,EAAAA,KAAI,EAAmB,EAAAA,KAAI,OAAS8L,wBAAuB,KAE3D,EAAA9L,KAAI,OAAiBuB,GAAKwK,QAC1B,EAAA/L,KAAI,OAAiB0B,GAAKsK,OAC9B,EAAC,WAEWL,EAAmBpK,EAAWG,EAAW+R,EAAWC,GAC5D,IAAK/H,EACD,OAAO,EAEX,IAAIgI,EAAQhI,EAAMW,QAAU,EAAAtM,KAAI,OAAiBuB,EAAIwK,QACjD6H,EAAQjI,EAAMY,QAAU,EAAAvM,KAAI,OAAiB0B,EAAIsK,QAErD,OAAO2H,GAASpS,GAAKoS,GAASpS,EAAIkS,GACxBG,GAASlS,GAAKkS,GAASlS,EAAIgS,CACzC,EAAC,aAYG,MAAMlH,EAAQ,EAAAxM,KAAI,OAAe,EAAI,EAAAyC,OAAOqB,YAAY,EAAA9D,KAAI,OAAUyF,MAAQ,IAAM,GAChF2D,EAAS,EAAApJ,KAAI,OAAe,EAAI,GAEpC,EAAAA,KAAI,EAAa,CACbuB,EAAG,EAAAvB,KAAI,OAAUuB,EAAIiL,EAAQ,EAAAxM,KAAI,OAASwM,MACrC,EAAAxM,KAAI,OAASwM,MAAQA,EACrB,EAAAxM,KAAI,OAAUuB,EAAI,EAChB,EAAAvB,KAAI,OAASwM,MAAQ,EAAAxM,KAAI,OAAUuB,EAAIiL,EACvC,EAAAxM,KAAI,OAAUuB,EACrBG,EAAG,EAAA1B,KAAI,OAAU0B,EAAI0H,EAAS,EAAApJ,KAAI,OAASoJ,OACtC,EAAApJ,KAAI,OAASoJ,OAASA,EACtB,EAAApJ,KAAI,OAAU0B,EAAI,EAChB,EAAA1B,KAAI,OAASoJ,OAAS,EAAApJ,KAAI,OAAU0B,EAAI0H,EACxC,EAAApJ,KAAI,OAAU0B,EACrB8K,MAAOA,EACPpD,OAAQA,GACA,IAChB,C,gFC/RJ,cACA,SACA,SAEA,MAAa/B,EAqBT,iBAAOgB,CAAWwL,EAAoBC,IAC7BzM,EAAM0M,UAAYD,IACnBzM,EAAM0M,SAAWD,GAEjBnN,OAAOqN,YACJrN,OAAOqN,WAAW,gCAAgCnF,WAChDxH,EAAM0M,UAAY1M,EAAM0M,YAC7B1M,EAAM4M,SAAS,GAEf5M,EAAM4M,SAAS,GAEnBtN,OAAOqN,WAAW,gCACXzN,iBAAiB,EAAAC,OAAO0N,OAAQvI,IAC7BtE,EAAM4M,UAAStI,EAAMkD,SAAaxH,EAAM0M,WAAY1M,EAAM0M,WAAkB,EAAJ,GACxEF,KAEd,CAEA,eAAOI,CAASE,GACZ9M,EAAM+M,aAAeD,EAErB9M,EAAM5B,KAAO,EAAAiK,aAAaC,OAAOwE,GACjC9M,EAAMlC,WAAa,EAAAuK,aAAaE,YAAYuE,GAC5C9M,EAAMgF,KAAO,EAAAqD,aAAa9D,MAAMuI,GAChC9M,EAAMgN,SAAW,EAAA3E,aAAaG,SAASsE,GACvC9M,EAAMiN,WAAa,EAAA5E,aAAaI,YAAYqE,GAC5C9M,EAAMwL,uBAAyB,EAAApQ,OAAOC,YAAY2E,EAAMlC,WAAqB,GAATgP,GAAc,GAAK,IACvF9M,EAAMyF,eAAiB,EAAA4C,aAAaK,gBAAgBoE,GACpD9M,EAAMkN,iBAAmB,EAAA7E,aAAaM,kBAAkBmE,EAC5D,CAEA,YAAO/M,GACHpH,KAAK+T,cAAWhO,CACpB,EAtDJ,UACW,EAAAqO,aAAe,C,qoDCL1B,eACA,SACA,SAIA,QACA,SACA,SACA,SAEA,QACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,YACA,SAEA,MAAaxM,UAAyB,EAAA4M,SA+BlC,WAAAzU,CAAY0U,GACR5K,MAAM4K,G,YA/BV,mBAEA,mBAEA,mBAEA,mBAEA,mBAEA,mBAEA,mBAEA,mBAEA,mBAEA,mBAEA,mBAEA,mBAEA,mBAEA,mBAES,mBAKLzU,KAAKuL,KAAK4E,OAASnQ,KAAKuL,KAAK4E,OAAO/D,IAAI3I,GAAK,IAAI,EAAAiG,OAAOjG,IAEpDzD,KAAKkG,SAASwO,cACT1U,KAAKkG,SAASyO,YAGf3U,KAAKkG,SAASyO,YAAYrE,KAAK,CAC3B2C,WAAW,IAHfjT,KAAKkG,SAASyO,YAAc,GAMhC3U,KAAKkG,SAASyO,YAAYrE,KAAK,CACvB7K,KAAM,EAAA2E,cAAcW,KACpBW,UAAWH,GAAQA,GAAMqJ,OACzBtB,OAAQ,KACJ,IAAI,EAAAuB,MAAM,EAAAC,cAAcC,QAAgB/U,KAAKkG,SAAU,EAAAlG,KAAI,QACvD,CACIwM,MAA2B,GAApB7F,OAAOqO,WACd5L,OAA6B,GAArBzC,OAAOsO,cAElBC,WAKrB,EAAAlV,KAAI,EAAewB,KAAKqC,UAAsB,EAAVrC,KAAK6L,IAAO,KAEhD,EAAArN,KAAI,EAAW,GAAE,KAEjBA,KAAKmV,iBAAmB,IAAIC,WAAW,EAAA5O,OAAO6O,UAClD,CAEA,MAAAxO,GACIgD,MAAMhD,SAEN,EAAA7G,KAAI,EAAgB,EAAAA,KAAI,OAAY,KACpC,EAAAA,KAAI,EAAe,EAAC,KAEoC,GAApDA,KAAKuL,KAAK4E,OAAOa,OAAOvN,IAAMA,EAAEwG,UAAUrF,OAC1C,EAAA5E,KAAI,SAAW,KAAfA,MAEA,EAAAA,KAAI,SAAM,KAAVA,MAEoB,GAApB,EAAAA,KAAI,QACJ,EAAAA,KAAI,OAAiB+F,EAAS,KAElC/F,KAAKsV,MAAQ,EAAAC,YAAYC,KAEzB3L,MAAM4L,iBAEF,EAAAzV,KAAI,QAAkBA,KAAK2U,YAC3B3U,KAAK0V,kBAAkB1V,KAAKuL,KAAK4E,OAAOwF,KAAKlS,GAAKA,EAAEtD,IAAM,EAAAH,KAAI,SAAiBuL,MAAQ,CAAC,GAExFvL,KAAK4V,wBAAqB7P,EAE9B8P,QAAQC,IAAI,UAER,EAAA9V,KAAI,SACJA,KAAK+G,OAAOwB,MAAMyJ,OAAS,EAAAvJ,OAAOyI,OAAOE,QACjD,CA4dA,OAAAhJ,GACIyB,MAAMzB,UAENpI,KAAK+V,UAAU3N,SACnB,CAEA,MAAAD,GACI0B,MAAM1B,SAENnI,KAAKkI,iBACL,EAAAlI,KAAI,SAAgB,KAApBA,MACAA,KAAK+V,UAAU5N,QACnB,CAEA,eAAAH,GACI6B,MAAM7B,kBAEN,EAAAhI,KAAI,EAA4C,IAA/BA,KAAKuL,KAAKyK,aAAe,GAAO,KAEjD,IAAK,IAAIlU,KAAQ9B,KAAKuL,KAAK4E,OACvBrO,EAAKmI,UAAYnI,EAAKzB,MACtByB,EAAKzB,QAAU,EACfyB,EAAKoI,QAAUpI,EAAKzB,MACpByB,EAAKkU,cAAgBhW,KAAKuL,KAAKyK,aAAe,EAE1ClU,EAAKzB,MAAQ,GACbwV,QAAQI,KAAK,IAAKnU,EAAK8O,8BAAgC9O,EAAKzB,iCAKpE,GAFAL,KAAKuL,KAAK4E,OAASnQ,KAAKuL,KAAK4E,OAAOa,OAAOvN,GAAKA,EAAEpD,OAAS,GAEvDL,KAAKkG,SAASwO,aAAe1U,KAAKuL,KAAK4E,OAAOvL,OAAS,GAAI,CAC3D,EAAA5E,KAAI,EAAUA,KAAKuL,KAAK4E,OAAO+F,OAAO,IAAG,KAEzC,MAAMC,EAAM,EAAAnW,KAAI,OAAQuD,OAAO,CAACY,EAAKV,IAAMU,EAAMV,EAAEyG,QAAS,GAE5DlK,KAAKuL,KAAK4E,OAASnQ,KAAKuL,KAAK4E,OAAOjN,MAAM,EAAG,IAE7ClD,KAAKuL,KAAK4E,OAAOG,KAAK,IAAI,EAAA5G,OAAO,CAC7BrJ,MAAO8V,EACPjM,QAASiM,EACTvF,MAAO,EAAAxG,cAAcM,MACrBvK,GAAI,EAAAsC,OAAO6B,OACX3B,MAAO,EAAA3C,KAAI,OAAQ,EAAAA,KAAI,OAAQ4E,OAAS,GAAGjC,MAC3CqT,YAAahW,KAAKuL,KAAKyK,YACvBzK,KAAM,CACFqJ,QAAQ,KAGpB,CACJ,CAEA,YAAA3M,GACI4B,MAAM5B,eAENjI,KAAK+V,SAAW,IAAI,EAAAK,SAASpW,KAAK+G,OAC9B,CACIxF,GAAI,GACJG,EAAG,GACH+D,KAAM,EAAA2E,cAAcI,KACpB+H,MAAO,CACH,CACI9M,KAAM,EAAA2E,cAAcC,UACpBiJ,OAAQ,KACJ,EAAA+C,OAAOC,MAAMtW,KAAK+G,OAAQ/G,KAAKkG,SAASqQ,SAGhD,CACI9Q,KAAM,EAAA2E,cAAcG,UACpB+I,OAAQ,KACJ,EAAA+C,OAAOG,MAAM,EAAA1B,cAAc2B,QAAQ,EAAAC,aAAazG,QAAQjQ,KAAKuL,OAAQvL,KAAKkG,SAASqQ,SAG3F,CACItD,WAAW,GAEf,CACIxN,KAAM,EAAA2E,cAAcE,iBACpBgJ,OAAQ,KACJ,IAAI,EAAAuB,MAAM,EAAAC,cAAc2B,QAAQ,EAAAC,aAAazG,QAAQjQ,KAAKuL,QAAQ2J,WAK1F,EA5oBJ,qB,6OA+FQ,GAAIlV,KAAKmV,kBAAoBnV,KAAKsV,OAAS,EAAAC,YAAYrU,KAAM,CACzD,EAAAlB,KAAI,EAAQA,KAAKuL,KAAK4E,OAAO5M,OAAO,CAACY,EAAKV,IAAMU,EAAMV,EAAEyG,QAAS,GAAE,KAEnE,IAAIyM,EAAY,EAAA3W,KAAI,OACpB,EAAAA,KAAI,EAAWA,KAAKuL,KAAK4E,OAAOyG,QAAQC,IACjB,MAAMC,EAAQD,EAAO3M,QAAU,EAAAlK,KAAI,OAAQ,EAAIwB,KAAK6L,GAEpD,MAAO,CACHlN,GAAI0W,EAAO1W,GACXE,MAAOyW,EACPX,KAAMQ,GAAaG,GAASA,KAGnCC,UAAS,KAE7B,EAAA/W,KAAI,EAAe,EAAAA,KAAI,SAAU,KAAdA,KAAe,EAAAA,KAAI,OAAU,GAAE,KAElD,IAAK,MAAMK,KAASL,KAAKuL,KAAK4E,OAC1B,EAAAnQ,KAAI,SAAY,KAAhBA,KAAiBK,GAErB,MAAMA,EAAQL,KAAKuL,KAAK4E,OAAOwF,KAAKlS,GAAKA,EAAEtD,IAAM,EAAAH,KAAI,QACrDA,KAAKwJ,QAAQ3C,SAASxG,IAAUL,KAAK+V,UAAUpE,SAC3C3R,KAAKmV,iBACL,CACI,IAAI,EAAA6B,aAAa,GAAI3W,GAAOuQ,UAAY,EAAAH,UAAUwG,OAAO5W,GAAO6J,aAEpE7J,GAEJ,EAAAL,KAAI,SAAgB,KAApBA,KACJ,CAEKA,KAAKkX,WACNC,sBAAsBnX,KAAK6G,OAAOuQ,KAAKpX,MAC/C,EAAC,WAEWK,G,MACR,MAAM4L,EAAM,EAAAC,OAAOjB,WAAWjL,KAAK+G,QAEnCkF,EAAIe,UAAY3M,EAAMsC,MACtBsJ,EAAIY,YAAcxM,EAAMsC,MAExB,MAAM0U,EAAQhX,EAAM6J,QAAU,EAAAlK,KAAI,OAC9B8W,EAAqC,GAA5BQ,MAAMD,GAAS,EAAIA,GAAa7V,KAAK6L,GAE5CkK,EAA+D,GAApDvX,KAAKuL,KAAK4E,OAAOa,OAAOwG,IAAMA,EAAEvN,UAAUrF,OAoD3D,IAlDO5E,KAAKyX,eAAgB,EAAAzX,KAAI,OAAS0X,SAASrX,EAAMF,KAChDH,KAAK4R,WAAWnR,SAASJ,EAAMF,GAAI,EAAAc,cAAcC,OACjDqW,GACJvX,KAAK4R,WAAW1R,IAAIG,EAAMF,GACtB,EAAAc,cAAc0W,MACd,CACIxV,SAAUsN,EAAU3P,WAAWuJ,SAC/BjH,OAAQ,KACEpC,KAAKyX,cACH,EAAAzX,KAAI,SAAgB,KAApBA,KAAqBA,KAAKyX,aAAcpX,KACpC,EAAAL,KAAI,OAAS0X,SAASrX,EAAMF,IAC5B,EAAAH,KAAI,EAAW,EAAAA,KAAI,OAASgR,OAAO7Q,GAAMA,GAAME,EAAMF,IAAG,KAExD,EAAAH,KAAI,OAASsQ,KAAKjQ,EAAMF,IAE5BH,KAAKyX,aAAe,IAAIG,aAAa,EAAApR,OAAOmR,SAI7C,GAEXtV,KAAM,KACF,IAAK,EAAArC,KAAI,OAAS0X,SAASrX,EAAMF,IAC7B,OAEJ,MAAMkX,EAAQhX,EAAM6J,QAAU,EAAAlK,KAAI,OAC9B8W,EAAqC,GAA5BQ,MAAMD,GAAS,EAAIA,GAAa7V,KAAK6L,GAC9CwK,EAAY,EAAA7X,KAAI,OAAgB8W,EAAQ,EAEtC5U,EAAa,CACfX,EAAG,EAAAvB,KAAI,OAAoBwB,KAAKsW,IAAID,GACpCnW,EAAG,EAAA1B,KAAI,OAAoBwB,KAAKuW,IAAIF,IAGxC5L,EAAI8F,UAAU7P,EAAWX,EAAGW,EAAWR,GAEvCuK,EAAIc,UAAY,EAChBd,EAAI+L,SAAW,QACf/L,EAAIgM,QAAU,QAEdhM,EAAIe,UAAY3M,EAAMsC,SAKlC3C,KAAKmV,kBAAoB,EAAAnV,KAAI,SAAgB,KAApBA,KAAqBA,KAAKmV,iBAAkB9U,KACrE,EAAAL,KAAI,EAAiBK,EAAMF,GAAE,KAC7B,EAAAH,KAAA,OAAAA,KAAA,YAAkB,MAGlBA,KAAKsV,OAAS,EAAAC,YAAYrU,MAAQlB,KAAK4R,WAAWnR,SAASJ,EAAMF,GAAI,EAAAc,cAAcC,MACnFlB,KAAK4R,WAAW1R,IAAIG,EAAMF,GACtB,EAAAc,cAAcC,KACd,CACIiB,SAAUsN,EAAU3P,WAAWuJ,UAAYrJ,KAAKuL,KAAK4E,OAAO+H,QAAQ7X,GAAS,GAAKL,KAAKuL,KAAK4E,OAAOvL,OAAS6K,EAAU3P,WAAWuJ,SACjI9G,YAAY,EACZF,KAAMH,IACF,MAAMiW,EACC,EAAAnY,KAAI,OAASuB,EAAI,EAAAvB,KAAI,OAAW,EAAIwB,KAAKsW,IAAI,EAAA9X,KAAI,OAAgB8W,EAAQ,GAD1EqB,EAEC,EAAAnY,KAAI,OAAS0B,EAAI,EAAA1B,KAAI,OAAW,EAAIwB,KAAKuW,IAAI,EAAA/X,KAAI,OAAgB8W,EAAQ,GAG1EsB,EAAU,GACZC,EAAO,EAAID,EAEfnM,EAAI8F,UAAUoG,EAAmBA,GAAoBC,EAAUlW,EAAamW,GACxEF,EAAmBA,GAAoBC,EAAUlW,EAAamW,IAClEpM,EAAIqM,MAAOF,EAAUlW,EAAamW,EAAQD,EAAUlW,EAAamW,GAEjE,IAAI1L,EAAUnL,KAAK8B,MAAM,IAAMpB,GAAYe,SAAS,IAEhD0J,EAAQ/H,OAAS,IACjB+H,EAAU,EAAIA,GAElBV,EAAIe,UAAY3M,EAAMsC,MAAQgK,EAC9BV,EAAIY,YAAcxM,EAAMsC,MAAQgK,UAGzC,GAAI3M,KAAKmV,mBACDnV,KAAK4R,WAAWnR,SAASJ,EAAMF,GAAI,EAAAc,cAAcC,QACjD,EAAAlB,KAAI,OAAS0X,SAASrX,EAAMF,MAC5BoX,EAAU,CACrB,MAAMxF,EAAY,CAAC7P,EAAoByJ,EAAsB4M,KAOzD,GANAvY,KAAK4R,WAAWlR,OAAOL,EAAMF,GAAIwL,GAEjCM,EAAIc,UAAY,EAChBd,EAAI+L,SAAW,QACf/L,EAAIgM,QAAU,OAEI,GAAd/V,EACA,OAEAqW,IACArW,EAAa7B,EAAM6B,YAEvB,MAAMmV,EAAQhX,EAAM6J,QAAU,EAAAlK,KAAI,OAC9B8W,EAAqC,GAA5BQ,MAAMD,GAAS,EAAIA,GAAa7V,KAAK6L,GAC9CwK,EAAY,EAAA7X,KAAI,OAAgB8W,EAAQ,EACxC/E,EAAY,CACRxQ,EAAG,EAAAvB,KAAI,OAAoBwB,KAAKsW,IAAID,GAAa3V,EACjDR,EAAG,EAAA1B,KAAI,OAAoBwB,KAAKuW,IAAIF,GAAa3V,GAGzD+J,EAAI8F,UAAUA,EAAUxQ,EAAGwQ,EAAUrQ,GAErCuK,EAAIc,UAAyB,EAAb7K,EAChB+J,EAAI+L,SAAW,QACf/L,EAAIgM,QAAU,QAEd5X,EAAM0R,UAAYA,EAClB1R,EAAM6B,WAAaA,GAGlB,EAAAlC,KAAI,SAAgB,KAApBA,KAAqBA,KAAKmV,iBAAkB9U,IACzCL,KAAK4R,WAAWnR,SAASJ,EAAMF,GAAI,EAAAc,cAAciR,YAcrDlS,KAAK4R,WAAW1R,IAAIG,EAAMF,GACtB,EAAAc,cAAcgR,UACd,CACI9P,SAAUsN,EAAU3P,WAAWuJ,SAC/BhH,KAAMH,IACF6P,EAAU7P,EACN,EAAAjB,cAAciR,WACd7R,EAAM6B,WAAaA,MApBnClC,KAAK4R,WAAW1R,IAAIG,EAAMF,GACtB,EAAAc,cAAciR,WACd,CACItR,MAAO6O,EAAU0C,MAAMC,QACvBjQ,SAAUsN,EAAU3P,WAAWuJ,SAC/B/G,UAAU,EACVD,KAAMH,IACF6P,EAAU7P,EACN,EAAAjB,cAAcgR,UACd5R,EAAM6B,WAAaA,KAc3C,CAEA,IAAIsW,EAAS,EAAAxY,KAAI,SAAU,KAAdA,KAAe,EAAAA,KAAI,OAAU8W,GAE1C,GAAIA,EAAQ,EAAG,CAGX,GAFA7K,EAAIwM,OAEApY,EAAM6J,QAAU,EAAG,CACnB,IAAIwO,EAAkB,EAAA1Y,KAAI,SAAU,KAAdA,KAAe,EAAAA,KAAI,OAAW,GAAI8W,EAAQ,GAC5D6B,EAAgB,EAAA3Y,KAAI,SAAU,KAAdA,KAAe,EAAAA,KAAI,OAAW,GAAI8W,EAAQ,GAE9D,MAAM8B,EAAMF,EAAgBnX,EAAI,EAAAvB,KAAI,OAASuB,EAAI,GAAK,EAEtD,IAAIsX,EAAW,CACXtX,EAAGoX,EAAcpX,EAAI,GAAKqX,EAC1BlX,EAAGiX,EAAcjX,GAGjBoX,GAAS,EAEb,MAAM3M,EAAY,EAAA1J,OAAOqB,YAAYzD,EAAMuQ,OACvCmI,EAAoB,GAAPH,EAAWC,EAAStX,EAAI,GAAKsX,EAAStX,EAAI4K,EAAY,GACnE6M,EAAY,IAAIC,YAAYhN,EAAIiN,aAAaH,EAAYF,EAASnX,EAAI,GAAIyK,EAAY,GAAI,IAAIZ,KAAK4N,QAMvG,IAJIJ,EAAa,GAAKA,EAAa5M,EAAYnM,KAAK+G,OAAOyF,OACpDqM,EAASnX,EAAI,GAAK,GAAKmX,EAASnX,EAAI,GAAK1B,KAAK+G,OAAOqC,UACxD0P,GAAS,IAERA,EACD,IAAK,IAAIzX,EAAI,EAAGA,EAAI2X,EAAUpU,OAAQvD,IAClC,GAAI,EAAA6K,OAAOb,YAAY2N,EAAU3X,IAAK,CAClCyX,GAAS,EACT,KACJ,CAER,IAAKA,EAAQ,CACT7M,EAAIQ,YACJR,EAAIiH,OAAOwF,EAAgBnX,EAAGmX,EAAgBhX,GAE9CuK,EAAImN,iBAAiBT,EAAcpX,EAAGoX,EAAcjX,EAAGmX,EAAStX,EAAGsX,EAASnX,GAE5E,IAAIiL,EAAUnL,KAAK8B,MAAajD,EAAM6J,QAAU7J,EAAMA,MAA7B,KAAqC4C,SAAS,IAEnE0J,EAAQ/H,OAAS,IACjB+H,EAAU,EAAIA,GAElBV,EAAIY,YAAc,EAAAxF,MAAM5B,KAAOkH,EAC/BV,EAAIgM,QAAU,OACdhM,EAAI+L,SAAW,QACf/L,EAAIc,UAAY,EAChBd,EAAIgB,SAEJhB,EAAIe,UAAY,EAAA3F,MAAM5B,KAAOkH,EAC7B,EAAAW,WAAW+L,cAAcpN,EAAY,GAAP2M,GAC9B3M,EAAIsB,SAASlN,EAAMuQ,MAAOiI,EAAStX,EAAI,EAAIqX,EAAKC,EAASnX,EAAI,EACjE,CACJ,CAEAuK,EAAIqN,UAEJrN,EAAIQ,YAEC,EAAAzM,KAAI,QACLiM,EAAIiH,OAAO,EAAAlT,KAAI,OAASuB,EAAG,EAAAvB,KAAI,OAAS0B,GAE5CuK,EAAIkH,OAAO,EAAAnT,KAAI,OAAauB,EAAG,EAAAvB,KAAI,OAAa0B,GAEhD,IAAI6X,EAAmB,EACnBC,EAAa1C,EAEjB,KAAO0C,EAAa,GAAG,CACnB,IAAIC,EAAeD,EAAahY,KAAK6L,GAAK,EAAI,EACzB7L,KAAK6L,GAAK,EACVmM,EAErBhB,EAAS,EAAAxY,KAAI,SAAU,KAAdA,KAAe,EAAAA,KAAI,OAAUuZ,EAAmBE,GAEzD,MAAMC,EAA2BlY,KAAK6L,GAAKoM,EACvCE,EAA8B,EAAA3Z,KAAI,OAAWwB,KAAKuW,IAAI2B,EAA2B,GACjFE,EAA2B,EAAA5Z,KAAI,SAAU,KAAdA,KAAe2Z,EAA6BJ,EAAmBE,EAAe,GAE7GxN,EAAImN,iBAAiBQ,EAAyBrY,EAAGqY,EAAyBlY,EAAG8W,EAAOjX,EAAGiX,EAAO9W,GAE9F6X,GAAoBE,EAEpBD,GAAchY,KAAK6L,GAAK,CAC5B,CAEA,GAAI,EAAArN,KAAI,QAAkC,GAArBK,EAAM2V,YAAkB,CACzC,MAAMA,EAAc,EAAAhW,KAAI,QAAYK,EAAM2V,YAAc,KAElD6D,EAAc,CAChBtY,EAAGiX,EAAOjX,GAAO,EAAAvB,KAAI,OAAWgW,IAAgBwC,EAAOjX,EAAI,EAAAvB,KAAI,OAASuB,GAAM,EAAAvB,KAAI,OAClF0B,EAAG8W,EAAO9W,GAAO,EAAA1B,KAAI,OAAWgW,IAAgBwC,EAAO9W,EAAI,EAAA1B,KAAI,OAAS0B,GAAM,EAAA1B,KAAI,QAQtF,IALAiM,EAAIkH,OAAO0G,EAAYtY,EAAGsY,EAAYnY,GAEtC8X,EAAa,EACbD,EAAmBzC,EAEZ0C,EAAa1C,GAAO,CACvB,IAAI2C,EAAeD,EAAahY,KAAK6L,GAAK,EAAIyJ,EACzBtV,KAAK6L,GAAK,EACVyJ,EAAQ0C,EAE7BhB,EAAS,EAAAxY,KAAI,SAAU,KAAdA,KAAegW,EAAauD,EAAmBE,GAExD,MAAMC,EAA2BlY,KAAK6L,GAAKoM,EACvCE,EAA8B3D,EAAcxU,KAAKuW,IAAI2B,EAA2B,GAChFE,EAA2B,EAAA5Z,KAAI,SAAU,KAAdA,KAAe2Z,EAA6BJ,EAAmBE,EAAe,GAE7GxN,EAAImN,iBAAiBQ,EAAyBrY,EAAGqY,EAAyBlY,EAAG8W,EAAOjX,EAAGiX,EAAO9W,GAE9F6X,GAAoBE,EAEpBD,GAAchY,KAAK6L,GAAK,CAC5B,CAEAmL,EAAS,EAAAxY,KAAI,SAAU,KAAdA,KAAe,EAAAA,KAAI,OAAU8W,EAC1C,CAEA,IAAK9W,KAAK4R,WAAWnR,SAASJ,EAAMF,GAAI,EAAAc,cAAcC,MAAO,CACzD,MAAM4Y,EAAc,CAAC5X,EAAoByJ,KAGrC,GAFA3L,KAAK4R,WAAWlR,OAAOL,EAAMF,GAAIwL,GAEf,GAAdzJ,EACA,OAEJ,IAAIyK,EAAUnL,KAAK8B,MAAM,IAAM,GAAKpB,GAAYe,SAAS,IACrD0J,EAAQ/H,OAAS,IACjB+H,EAAU,EAAIA,GAElBV,EAAIe,UAAY3M,EAAMsC,MAAQgK,EAC9BV,EAAIY,YAAcxM,EAAMsC,MAAQgK,GAG9BoN,EAA6C,GAA9B/Z,KAAKga,eAAepV,OAEpC,EAAA5E,KAAI,QAAkB,EAAAA,KAAI,QAAkBK,EAAMF,IAC/C4Z,IAAiB/Z,KAAKga,eAAetC,SAASrX,EAAMF,IACxDH,KAAK4R,WAAW1R,IACZG,EAAMF,GACN,EAAAc,cAAcgZ,gBACd,CACI9X,SAAUsN,EAAU3P,WAAWuJ,SAC/BhH,KAAMH,IACF4X,EAAY5X,EAAY,EAAAjB,cAAciZ,qBAIrBnU,MAAtB,EAAA/F,KAAI,QAAgC+Z,GAC3C/Z,KAAK4R,WAAW1R,IACZG,EAAMF,GACN,EAAAc,cAAciZ,iBACd,CACItZ,MAAO6O,EAAU0C,MAAMC,QACvBjQ,SAAUsN,EAAU3P,WAAWuJ,SAC/B/G,UAAU,EACVD,KAAMH,IACF4X,EAAY5X,EAAY,EAAAjB,cAAcgZ,mBAK1D,CAEAhO,EAAIkO,YAEJlO,EAAIiB,OACJjB,EAAIgB,SAEJ,EAAAjN,KAAA,IAAAA,KAAA,OAAqB8W,EAAK,IAC9B,CAEA7K,EAAImO,iBAEJ,EAAApa,KAAI,EAAewY,EAAM,IAC7B,EAAC,WAES6B,EAAgBvD,GACtB,MAAO,CACHvV,EAAG,EAAAvB,KAAI,OAASuB,EAAI8Y,EAAS7Y,KAAKsW,IAAI,EAAA9X,KAAI,OAAgB8W,GAC1DpV,EAAG,EAAA1B,KAAI,OAAS0B,EAAI2Y,EAAS7Y,KAAKuW,IAAI,EAAA/X,KAAI,OAAgB8W,GAElE,EAAC,WAEenL,EAAmBtL,GAC/B,MAeMia,EAAkB7W,GACbA,EAAElC,EAAIkC,EAAElC,EAAIkC,EAAE/B,EAAI+B,EAAE/B,GAAK,EAAA1B,KAAI,OAAW,EAAAA,KAAI,UACvC,EAAAA,KAAI,QAAayD,EAAElC,EAAIkC,EAAElC,EAAIkC,EAAE/B,EAAI+B,EAAE/B,GACnC,EAAA1B,KAAI,QAAYK,EAAM2V,YAAc,KAAO,EAAAhW,KAAI,QAAYK,EAAM2V,YAAc,MAG3FuE,EAAQva,KAAKwa,iBAAiB7O,GAChC8O,EAAQ,CACJlZ,EAAGgZ,EAAMhZ,EAAI,EAAAvB,KAAI,OAASuB,EAC1BG,EAAG6Y,EAAM7Y,EAAI,EAAA1B,KAAI,OAAS0B,GAE9BgZ,EAAQ,CACJnZ,EAAGgZ,EAAMhZ,EAAI,EAAAvB,KAAI,OAASuB,EAAIlB,EAAM0R,WAAWxQ,EAC/CG,EAAG6Y,EAAM7Y,EAAI,EAAA1B,KAAI,OAAS0B,EAAIrB,EAAM0R,WAAWrQ,GAGvD,MA/BgB,CAAC6Y,IACb,IAAI/W,EAAIhC,KAAKmZ,MAAMJ,EAAM7Y,EAAI,EAAA1B,KAAI,OAAS0B,EAAG6Y,EAAMhZ,EAAI,EAAAvB,KAAI,OAASuB,GAChEiC,EAAI,IACJA,GAAe,EAAVhC,KAAK6L,IACV7J,EAAI,EAAAxD,KAAI,SACRwD,EAAc,EAAVhC,KAAK6L,GAAS7L,KAAKoZ,IAAI,EAAA5a,KAAI,OAAewD,GAAK,EAAAxD,KAAI,QAE3D,IAAImU,EAAQ,EAAAnU,KAAI,OAAS6a,UAAUC,GAAKA,EAAE3a,IAAME,EAAMF,IAClD4a,EAAY,EAAA/a,KAAI,OAASmU,GAAOgC,IAEpC,OAASnW,KAAK+V,UAAUpE,UACdoJ,GAAavX,GACbuX,EAAY,EAAA/a,KAAI,OAASmU,GAAO9T,MAAQmD,GAAK,GAmBpDwX,CAAQT,KAAWD,EAAeG,IAAUH,EAAeI,GACtE,EAAC,aAGG,MAAMzO,EAAM,EAAAC,OAAOjB,WAAWjL,KAAK+G,QAEnCkF,EAAIQ,YAEJR,EAAImB,IAAI,EAAApN,KAAI,OAASuB,EAAG,EAAAvB,KAAI,OAAS0B,EAAG,EAAA1B,KAAI,OAAU,EAAG,EAAIwB,KAAK6L,IAClEpB,EAAIY,YAAc,EAAAxF,MAAM5B,KACxBwG,EAAIgB,SAEJ,EAAAK,WAAW+E,QAAQpG,GACnBA,EAAIsB,SAAS,EAAAnD,cAAcK,gBAAiB,EAAAzK,KAAI,OAASuB,EAAG,EAAAvB,KAAI,OAAS0B,GAEzEyV,sBAAsBnX,KAAK6G,OAAOuQ,KAAKpX,MAC3C,EAAC,aAGG,GAAI,EAAAA,KAAI,OAAuB,CAC3B,MAAMiM,EAAM,EAAAC,OAAOjB,WAAWjL,KAAK+G,QAEnC,EAAA/G,KAAI,OAAiB,KAArBA,KAAsBiM,GACtBA,EAAIsB,SAASvN,KAAKuL,KAAK0P,WAAY,EAAAjb,KAAI,OAASuB,EAAG,EAAAvB,KAAI,OAAS0B,EACpE,CACJ,EAAC,aAGG,MAAMwZ,EAAclb,KAAKkG,SAASqQ,MACZ9G,EAAU0L,OAAOD,YACjB,EAEhBE,EAAYpb,KAAK+G,OAAOyF,MAAQxM,KAAK+G,OAAOqC,OAAuB,EAAd8R,EACvClb,KAAK+G,OAAOqC,OAAuB,EAAd8R,EACrBlb,KAAK+G,OAAOyF,MAEhC,EAAAxM,KAAI,EAAW,CACXuB,EAAGvB,KAAK+G,OAAOyF,MAAQ,EACvB9K,EAAGwZ,EAAclb,KAAK+G,OAAOqC,OAAS,GACzC,KAED,IAAIiS,EAAe,EAEnB,IAAK,MAAMhb,KAASL,KAAKuL,KAAK4E,OAAQ,CAClC,MAAM3D,EAAQ,EAAA/J,OAAOqB,YAAYzD,EAAMuQ,OAEnCpE,EAAQ6O,IACRA,EAAe7O,EACvB,CAEA,EAAAxM,KAAI,EAAWob,EAAY,GAAKC,EAAe,IAAG,KAEtBtV,MAAxB/F,KAAKuL,KAAK0P,YAAmD,IAAxBjb,KAAKuL,KAAK0P,aAC/C,EAAAjb,KAAI,EAAoB,EAAAsN,WAAWgO,MAAK,KACxC,EAAAtb,KAAI,EAAwB,EAAAyC,OAAOqB,YAAY9D,KAAKuL,KAAK0P,WAAY,IACtCjb,KAAKuL,KAAKyK,YAAc,IAAO,EAAAhW,KAAI,OAAW,EAAC,KAEzE,EAAAA,KAAI,SACL,EAAAA,KAAI,EAAoB,EAAAsN,WAAW+E,QAAO,KAC1C,EAAArS,KAAI,EAAwB,EAAAyC,OAAOqB,YAAY9D,KAAKuL,KAAK0P,WAAY,IACtCjb,KAAKuL,KAAKyK,YAAc,IAAO,EAAAhW,KAAI,OAAW,EAAC,MAG7E,EAAAA,KAAI,QACL6V,QAAQI,KAAK,mDAGrB,EAAAjW,KAAI,EAAmC,GAAf,EAAAA,KAAI,OAAa,IAC7C,C,ssCC3kBJ,eACA,QAEA,SACA,SAGA,SAEA,SACA,SACA,SACA,YAEA,MAAawU,UAAiC,EAAA+G,WAS1C,WAAAxb,CAAY0U,GACR5K,MAAM4K,G,YALA,KAAAyC,WAAqB,EAO3BlX,KAAKuL,KAAUvL,KAAKkG,SAASqF,KAE7BvL,KAAKga,eAAiB,GAEtBha,KAAKsV,MAAQtV,KAAKkG,SAASsV,qBAAuB,EAAAjG,YAAYC,KAAO,EAAAD,YAAYrU,IACrF,CAEA,MAAA2F,GACIgD,MAAMhD,SAEN,MAAMoF,EAAM,EAAAC,OAAOjB,WAAWjL,KAAK+G,QAE/B/G,KAAKkG,SAASqQ,QACd,EAAAjJ,WAAWiJ,MAAMtK,GACjBA,EAAIsB,SAASvN,KAAKkG,SAASqQ,MAAOvW,KAAK+G,OAAOyF,MAAQ,EAAGiD,EAAU0L,OAAOD,aAElF,CAEA,OAAAlU,GACIhH,KAAKkX,WAAY,EAEjBlX,KAAK+G,OAAO0U,QAChB,CAEA,cAAAhG,GACIzV,KAAKyX,aAAezX,KAAK+V,UAAUlP,OAAO7G,KAAKmV,iBAAkBnV,KAAKyX,aAC1E,CAEA,MAAAtP,GACI,EAAAnI,KAAI,SAAgB,KAApBA,MACAA,KAAKwJ,QAAQpB,UACbpI,KAAK+V,UAAU5N,QACnB,CAEA,eAAAH,GACI,MAAM0T,EAAU1b,KAAKmG,KAAKwV,cAAe7P,wBAEzC9L,KAAKkG,SAAS0V,SAAWtE,OAAOtX,KAAKkG,SAASsG,OACnB,GACCxM,KAAKkG,SAASsG,MAC1CxM,KAAKkG,SAAS2V,UAAYvE,OAAOtX,KAAKkG,SAASkD,QACnB,GACCpJ,KAAKkG,SAASkD,OAE3CpJ,KAAKkG,SAASsG,MAAkC,GAA1BxM,KAAKkG,SAAS0V,UAAiBF,EAAQlP,MAAQxM,KAAKkG,SAAS0V,SAC3D5b,KAAKkG,SAAS0V,SACdF,EAAQlP,MAEhCxM,KAAKkG,SAASkD,OAAoC,GAA3BpJ,KAAKkG,SAAS2V,WAAkBH,EAAQtS,OAASpJ,KAAKkG,SAAS2V,UAC7D7b,KAAKkG,SAAS2V,UACdH,EAAQtS,OAEjCpJ,KAAK+G,OAAOyF,MAAQxM,KAAKkG,SAASsG,MAClCxM,KAAK+G,OAAOqC,OAASpJ,KAAKkG,SAASkD,OAEnC,MAAM0S,EAAY9b,KAAKkG,SAAS4V,WAAa,EAAArZ,OAAOkB,cACpD,IAAIoY,EAAava,KAAK8B,MAAM,IAAMtD,KAAKkG,SAASqF,KAAK4E,OAAOvL,QACxDoX,GAAgB,GAEhBD,GAAc,IACdA,EAAa,GAEjB,IAAK,IAAIja,KAAQ9B,KAAKkG,SAASqF,KAAK4E,OAChCrO,EAAK3B,GAAK,EAAAsC,OAAO6B,OACjBxC,EAAKa,QAAU,EAAAF,OAAOC,YAAYoZ,EAAWE,GAAgBD,GAC7Dja,EAAK8O,QAAU,EAAAxG,cAAcY,QAGjC,IAAK,IAAIlJ,KAAQ9B,KAAKkG,SAASyO,aAAe,GAC3B5O,MAAXjE,EAAK3B,KACL2B,EAAKwR,OAAS/H,GAAQvL,KAAKmG,KAAK8V,cAAc,IAAIC,YAAYpa,EAAK3B,IAAM,GAAI,CAAEgc,OAAQ5Q,KACnG,CAEA,YAAAtD,GACA,CAEA,iBAAAyN,CAAkBnK,GACd,GAAIvL,KAAK+V,UAAUpE,SAGf,OAFA3R,KAAK4V,wBAAqB7P,GAEnB,EAGX,GAA+BA,MAA3B/F,KAAK4V,oBAAwE,GAArC5V,KAAKkG,SAASyO,aAAa/P,OAAa,CAChF,GAAwBmB,MAApB/F,KAAK2U,aAAyD5O,MAA7B/F,KAAKkG,SAASyO,YAA0B,CACzE,IAAIyH,EAAwB,GAE5B,IAAK,MAAMta,KAAQ9B,KAAKkG,SAASyO,YACxB7S,EAAK4J,YAAa5J,EAAK4J,UAAUH,IAClC6Q,EAAM9L,KAAK,CACPnQ,GAAI2B,EAAK3B,GACTsF,KAAM3D,EAAK2D,KACXwN,UAAWnR,EAAKmR,UAChBK,OAAQ,KACJxR,EAAKwR,OAAO/H,GAEZvL,KAAK4V,wBAAqB7P,EAC1B/F,KAAK2U,iBAAc5O,KAInC/F,KAAK2U,YAAc,IAAI,EAAAyB,SAASpW,KAAK+G,OAAQ,CACzCxF,EAAGvB,KAAK4V,mBAAmBrU,EAAIvB,KAAKqc,eAAe9a,EACnDG,EAAG1B,KAAK4V,mBAAmBlU,EAAI1B,KAAKqc,eAAe3a,EACnD6Q,MAAO6J,EACP7Q,KAAMA,IAGVvL,KAAK2U,YAAYxM,SAEjBnI,KAAKyX,kBAAe1R,CACxB,CAEA,MAAMuW,EAA+BvW,MAArB/F,KAAKyX,aAIrB,GAFAzX,KAAKyX,aAAezX,KAAK2U,aAAa9N,OAAO7G,KAAKmV,iBAAkBnV,KAAKyX,cAEhD1R,MAArB/F,KAAKyX,cAA6B6E,EAIlC,OAHAtc,KAAK2U,iBAAc5O,EACnB/F,KAAK4V,wBAAqB7P,GAEnB,CAEf,CAEA,OAAO,CACX,CAEA,SAAAoB,CAAU9G,GAEFL,KAAKga,eADL3Z,EACsB,CAACA,EAAMF,IAEP,EAC9B,CA2BU,gBAAAqa,CAAiB7O,GACvB,MAAO,CACHpK,EAAGoK,EAAMW,QAAUtM,KAAKqc,eAAe9a,EAAIwK,QAC3CrK,EAAGiK,EAAMY,QAAUvM,KAAKqc,eAAe3a,EAAIsK,QAEnD,EAjLJ,a,2BAoJQ,IAAI0P,EAAU1b,KAAKmG,KAAK2F,wBAExB9L,KAAKkG,SAASsG,MAAQxM,KAAKkG,SAAS0V,UAAYF,EAAQlP,MAAQxM,KAAKkG,SAAS0V,SACtD5b,KAAKkG,SAAS0V,SACdF,EAAQlP,MAChCxM,KAAKkG,SAASkD,OAASpJ,KAAKkG,SAAS2V,WAAaH,EAAQtS,OAASpJ,KAAKkG,SAAS2V,UACxD7b,KAAKkG,SAAS2V,UACdH,EAAQtS,OAEjCpJ,KAAK+G,OAAOyF,MAAQxM,KAAKkG,SAASsG,MAClCxM,KAAK+G,OAAOqC,OAASpJ,KAAKkG,SAASkD,OAE/BpJ,KAAKkG,SAASE,eACmBL,MAA7B/F,KAAKkG,SAASqW,aACXvc,KAAKkG,SAASqW,aAAe,EAAAC,YAAYC,KACzCzc,KAAKkG,SAASqW,aAAe,EAAAC,YAAYE,SAC5C1c,KAAK+G,OAAOqC,QAAU,EAAA/C,OAAOsW,gBAAgB3c,KAAKkG,SAASqF,KAAK4E,OAAQnQ,KAAK+G,OAAOyF,QAEpFxM,KAAKkG,SAASqW,aAAe,EAAAC,YAAYI,MACtC5c,KAAKkG,SAASqW,aAAe,EAAAC,YAAYK,QAC5C7c,KAAK+G,OAAOyF,OAAS,KAEjC,C,iFCpLJ,iBAKI,cAAOyD,CAAQ1E,GACX,MAAMjL,EAAM,QAEZ,IAAI6P,EAAuB,GAE3B,IAAK,MAAM9P,KAASkL,EAAK4E,OACrBA,EAAOG,KAAK,CACRK,KAAMtQ,EAAMuQ,MACZT,OAAQ,IAAIlQ,IAAI,CAAC,CAACK,EAAKD,EAAMA,WAGrC,MAAO,CACH6P,QAAS,CACL,CACI7P,MAAOC,EACPkI,QAASlI,IAGjB6P,OAAQA,EAEhB,E,qFCzBJ,qBAOI,cAAOF,CAAQ1E,GACX,MAAMjL,EAAM,QAEZ,IAAI6P,EAAuB,GAE3B,IAAK,MAAM9P,KAASkL,EAAK4E,OACrBA,EAAOG,KAAK,CACRK,KAAMtQ,EAAMuQ,MACZT,OAAQ,IAAIlQ,IAAI,CAAC,CAACK,EAAKD,EAAMA,WAGrC,MAAO,CACH6P,QAAS,CACL,CACI7P,MAAOC,EACPkI,QAASlI,IAGjB6P,OAAQA,EAEhB,E,8EChCJ,cAeI,MAAAnG,CAAO9H,GACe,GAAdA,IACAlC,KAAKiK,UAAYjK,KAAKiK,SAC9B,CAEA,cAAAE,GACI,OAAO,CACX,CAEA,KAAA/C,GACIpH,KAAKiK,UAAW,CACpB,E,2nDC1BJ,eACA,SACA,QAIA,SAEA,SACA,SACA,SAEA,SACA,QACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,YAEA,MAAavC,UAAqB,EAAA8M,SA6B9B,WAAAzU,CAAY0U,GAKR,GAJA5K,MAAM4K,G,YA7BV,mBAEA,mBAEA,mBAEA,mBAEA,mBAEA,mBAEA,mBAEA,mBAEA,mBAEA,mBAEA,mBAEA,mBAEA,mBAEA,mBAKIzU,KAAKuL,KAAK4E,OAASnQ,KAAKuL,KAAK4E,OAAO/D,IAAI3I,GAAK,IAAI,EAAAqZ,WAAWrZ,IAExDzD,KAAKuL,KAAK4E,OAAOa,OAAOvN,GAAKA,EAAErD,MAAQ,EAAA2c,SAASC,KAAKpY,OAAS,EAC9D,IAAK,IAAIwL,KAAUpQ,KAAKuL,KAAK4E,OAAQ,CACjC,IAAK,IAAIrO,KAAQsO,EAAOD,OAAQ,CAC5B,MAAM5O,EAAIO,EAAKP,EACfO,EAAQ,EAAIA,EAAKJ,EACjBI,EAAQ,EAAIP,CAChB,CAEA6O,EAAOD,OAAOc,KAAK,CAACzN,EAAGwB,IAAMA,EAAEzD,EAAIiC,EAAEjC,EAAI,GAAK,EAClD,CAGJ,EAAAvB,KAAI,EAAa,CACbsP,IAAK,GACL2N,MAAO,GACPC,OAAQ,GACR7N,KAAM,IACT,KAEGrP,KAAKkG,SAASqQ,QACd,EAAAvW,KAAI,OAAWsP,KAAOG,EAAU0L,OAAOD,aAE3Clb,KAAKwJ,QAAU,IAAI,EAAA2T,QAAQnd,KAAK+G,OAAQ/G,KAAKkG,UAE7C,EAAAlG,KAAI,EAAY,IAAIC,IAAK,KACzB,EAAAD,KAAI,EAAY,IAAIC,IAAK,IAC7B,CAEA,MAAA4G,GACIgD,MAAMhD,SAEN,IAAIuW,EAAe,CACf,IAAI,EAAApG,aAAa,EAAAhX,KAAI,OAAUW,IAAIa,KAAK8B,MAAM,EAAAtD,KAAI,UAC9B,EAAAA,KAAI,OAAUW,IAAIa,KAAK8B,MAAM,EAAAtD,KAAI,WAGzD,MAAMiM,EAAM,EAAAC,OAAOjB,WAAWjL,KAAK+G,QAEnC,EAAAuG,WAAW+E,QAAQpG,GACnBA,EAAI+L,SAAW,QAEf,MAAMqF,EAAqB,EAAAhW,MAAMiN,WAEjC,EAAAtU,KAAI,SAAiB,KAArBA,MACA,EAAAA,KAAI,SAAY,KAAhBA,MAAiB,GAEjB,IAAIuB,EAAI,EACJG,EAAI,EACJ4b,EAAS,EACTC,EAAU,EACVC,EAAc,EAEdC,EAAe,EACfC,EAAe1d,KAAKuL,KAAK4E,OAAOa,OAAOwG,GAAKA,EAAEpX,MAAQ,EAAA2c,SAASjU,QAAQlE,OAEvE+Y,EAAY,EACZC,EAAY5d,KAAKuL,KAAK4E,OAAOa,OAAOwG,GAAKA,EAAEpX,MAAQ,EAAA2c,SAASC,KAAKpY,OACjEiZ,EAAY,EAAA7d,KAAI,OAAI8d,MAAQ,EAAIF,GAEhCG,EAAsB,GAC1B,IAAK,IAAI1c,EAAI,EAAGA,EAAI,EAAArB,KAAI,OAAa4E,OAAQvD,IACzC0c,EAAoBzN,KAAK,GAE7B,IAAK,MAAMF,KAAUpQ,KAAKuL,KAAK4E,OAAOa,OAAOwG,IAAMA,EAAEvN,UAAW,CAC5DgC,EAAIQ,YAEJR,EAAIY,YAAcuD,EAAOzN,MACzBsJ,EAAIe,UAAYoD,EAAOzN,MACvBsJ,EAAIc,UAAYqD,EAAO5D,MACvBP,EAAIgM,QAAU,QAEd,MAAM8B,EAA6C,GAA9B/Z,KAAKga,eAAepV,OAEzC,IAAK5E,KAAK4R,WAAWnR,SAAS2P,EAAOjQ,GAAI,EAAAc,cAAcC,MAAO,CAC1D,MAAM4Y,EAAc,CAAC5X,EAAoByJ,KAGrC,GAFA3L,KAAK4R,WAAWlR,OAAO0P,EAAOjQ,GAAIwL,GAEhB,GAAdzJ,EACA,OAEJ,IAAIyK,EAAUnL,KAAK8B,MAAM,IAAM,GAAKpB,GAAYe,SAAS,IACrD0J,EAAQ/H,OAAS,IACjB+H,EAAU,EAAIA,GAElBV,EAAIe,UAAYoD,EAAOzN,MAAQgK,EAC/BV,EAAIY,YAAcuD,EAAOzN,MAAQgK,GAGjCoN,IAAiB/Z,KAAKga,eAAetC,SAAStH,EAAOjQ,IACrDH,KAAK4R,WAAW1R,IACZkQ,EAAOjQ,GACP,EAAAc,cAAcgZ,gBACd,CACI9X,SAAUsN,EAAU3P,WAAWuJ,SAC/BhH,KAAMH,IACF4X,EAAY5X,EAAY,EAAAjB,cAAciZ,qBAI1CH,GACR/Z,KAAK4R,WAAW1R,IACZkQ,EAAOjQ,GACP,EAAAc,cAAciZ,iBACd,CACItZ,MAAO6O,EAAU0C,MAAMC,QACvBjQ,SAAUsN,EAAU3P,WAAWuJ,SAC/B/G,UAAU,EACVD,KAAMH,IACF4X,EAAY5X,EAAY,EAAAjB,cAAcgZ,mBAK1D,CAEA,OAAQ7J,EAAO4N,UACX,KAAK,EAAAC,SAASC,KACVjS,EAAI+G,YAAY,CAAgB,EAAf5C,EAAO5D,MAA0B,EAAf4D,EAAO5D,QAE1C,MAEJ,KAAK,EAAAyR,SAASE,OACVlS,EAAI+G,YAAY,CAAC5C,EAAO5D,MAAO4D,EAAO5D,QAI1C,KAAK,EAAAyR,SAASG,OAKlB,IAAK,MAAM/d,KAAS+P,EAAOD,OAAQ,CAC/B,IAAIgE,EAAQ/D,EAAOD,OAAO+H,QAAQ7X,GAC9Bge,EAAS,EAAAre,KAAI,OAAakY,QAAQlY,KAAKuL,KAAKgF,OAAS,EAAAC,aAAa3P,KAAOR,EAAMkB,EAAE0B,WAAa5C,EAAMkB,GACpG+c,EAAS,EAAAte,KAAI,OAAakY,QAAQ7X,EAAMqB,GAE5C,MAAM6c,EAAkB,KACb,CACHhd,EAAGlB,EAAMkB,EACJvB,KAAKuL,KAAKgF,OAAS,EAAAC,aAAa3P,KAC9B,EAAAb,KAAI,OAAaqe,GACjB,EAAA5N,UAAUwG,OAAO,EAAAjX,KAAI,OAAaqe,IACpC,IACL3c,EAAGrB,EAAMqB,EACJ,EAAA+O,UAAUwG,OAAO,EAAAjX,KAAI,OAAase,IAClC,MAUb,OANA/c,EAAI,EAAAvB,KAAI,OAAWqP,KACfe,EAAOhQ,MAAQ,EAAA2c,SAASC,MACxBzb,GAAK8c,EAAS,EAAAre,KAAI,OAAI8d,MACtB1N,EAAOhQ,MAAQ,EAAA2c,SAASyB,OACxBjd,GAAK,EAAAvB,KAAI,OAAI8d,KAAO,EAAI,EAAA9d,KAAI,OAAI8d,MAE5B1N,EAAOhQ,MACX,KAAK,EAAA2c,SAASyB,KACV9c,EAAI,EAAA1B,KAAI,OAAWsP,IAAM,EAAAtP,KAAI,OAAOoJ,OAAiB/I,EAAMqB,EAAI,EAAA1B,KAAI,OAAIye,KAAO,EAAAze,KAAI,OAAI8d,KAChFtc,KAAKoZ,IAAI,EAAA5a,KAAI,OAAI8C,IAAM,EAAA9C,KAAI,OAAIye,KAAO,EAAAze,KAAI,OAAI8d,MAEpD,MAAMY,EAAgB,KAAOtO,EAAOD,OAAOvL,OAAS,IAEpD,GAAI5E,KAAKsV,OAAS,EAAAC,YAAYrU,MAAQlB,KAAK4R,WAAWnR,SAASJ,EAAMF,GAAI,EAAAc,cAAcC,MACnFlB,KAAK4R,WAAW1R,IAAIG,EAAMF,GACtB,EAAAc,cAAcC,KACd,CACIN,MAAO,IAAIC,KAAKA,KAAK8d,OAAOC,gBAAgBF,GAAiBvK,EAAQ,IACrEhS,SAAUuc,EACVnc,YAAY,EACZF,KAAMH,IACF,GAAa,GAATiS,EACA,OAEJ5S,EAAI,EAAAvB,KAAI,OAAWqP,KAAOgP,EAAS,EAAAre,KAAI,OAAI8d,KAAO,EAAA9d,KAAI,OAAI8d,KAAO,EACjEpc,EAAI,EAAA1B,KAAI,OAAWsP,IAAM,EAAAtP,KAAI,OAAOoJ,OAAiB/I,EAAMqB,EAAI,EAAA1B,KAAI,OAAIye,KAAO,EAAAze,KAAI,OAAI8d,KAChFtc,KAAKoZ,IAAI,EAAA5a,KAAI,OAAI8C,IAAM,EAAA9C,KAAI,OAAIye,KAAO,EAAAze,KAAI,OAAI8d,MAEpD,MAAMe,EAAOzO,EAAOD,OAAOgE,EAAQ,GAEnC,IAAI2K,EAAY,CACZvd,EAAG,EAAAvB,KAAI,OAAWqP,KAAOgP,EAAS,EAAAre,KAAI,OAAI8d,KAAO,EAAA9d,KAAI,OAAI8d,KAAO,EAChEpc,EAAG,EAAA1B,KAAI,OAAWsP,IAAM,EAAAtP,KAAI,OAAOoJ,OAAiByV,EAAKnd,EAAI,EAAA1B,KAAI,OAAIye,KAAO,EAAAze,KAAI,OAAI8d,KAC/Etc,KAAKoZ,IAAI,EAAA5a,KAAI,OAAI8C,IAAM,EAAA9C,KAAI,OAAIye,KAAO,EAAAze,KAAI,OAAI8d,OAGvD,MAAMiB,EAAYD,EAAUvd,GAAK,EAAAvB,KAAI,OAAI8d,MAAQvc,EAAIud,EAAUvd,IAAMW,EACjE8c,EAAYF,EAAUpd,GAAKA,EAAIod,EAAUpd,GAAKQ,EAE9C4c,EAAUvd,GAAKwd,GAAaD,EAAUpd,GAAKsd,IAC3C/S,EAAIiH,OAAO4L,EAAUvd,EAAGud,EAAUpd,GAClCuK,EAAIkH,OAAO4L,EAAWC,YAOtC,GAFA/S,EAAIkH,OAAO5R,EAAGG,GAEV,EAAA1B,KAAI,SAAO,KAAXA,KAAYuB,GAAI,CAChB,MAAM0d,EAAQjf,KAAKwa,iBAAiBxa,KAAKmV,kBAErC3T,KAAKoZ,IAAIqE,EAAMvd,EAAIA,GAAK,IACxB,EAAA1B,KAAI,EAAW,CACXuB,EAAGA,EACHG,EAAGA,EACHyS,MAAOA,EACP5I,KAAMlL,EAAMkL,KACZ6E,OAAQA,GACX,KAEDgN,EAAa9M,KAAK,IAAI,EAAA0G,aAAa,GAAI5G,EAAOQ,UAAY2N,IAAkB7c,IAAM0O,EAAOzN,QACzF,EAAA3C,KAAI,EAAauB,EAAI,EAAAvB,KAAI,OAAI8d,KAAO,EAAC,KAE7C,CAGJ,MAEJ,KAAK,EAAAf,SAASmC,cACV5B,EAAStd,KAAK+G,OAAOqC,OAAS,EAAApJ,KAAI,OAAWkd,OAAiB7c,EAAMqB,EAAI,EAAA1B,KAAI,OAAIye,KAAO,EAAAze,KAAI,OAAI8d,KAE/F7R,EAAIiH,OAAO,EAAAlT,KAAI,OAAWqP,KAAMiO,GAE5Btd,KAAKsV,OAAS,EAAAC,YAAYrU,MAAQlB,KAAK4R,WAAWnR,SAASJ,EAAMF,GAAI,EAAAc,cAAcC,MACnFlB,KAAK4R,WAAW1R,IAAIG,EAAMF,GACtB,EAAAc,cAAcC,KACd,CACIiB,SAAU,KACVI,YAAY,EACZF,KAAMH,IACF+J,EAAIkH,OAAO,EAAAnT,KAAI,OAAWqP,MAAQrP,KAAK+G,OAAOyF,MAAQ,EAAAxM,KAAI,OAAWqP,KAAO,EAAArP,KAAI,OAAWid,OAAS/a,EAChGlC,KAAK+G,OAAOqC,OAAS,EAAApJ,KAAI,OAAWkd,OAAiB7c,EAAMqB,EAAI,EAAA1B,KAAI,OAAIye,KAAO,EAAAze,KAAI,OAAI8d,SAItG7R,EAAIkH,OAAOnT,KAAK+G,OAAOyF,MAAQ,EAAAxM,KAAI,OAAWid,MAAOK,GAEzD,MAEJ,KAAK,EAAAP,SAASjU,OACVwU,EAAiBjd,EAAMqB,EAAI1B,KAAKuL,KAAK4T,KAAOnf,KAAKuL,KAAK4T,KAAe9e,EAAMqB,EAE3EA,EAAI,EAAA1B,KAAI,OAAOoJ,OAASkU,EAAS,EAAAtd,KAAI,OAAI+C,IACrCrB,EAAI,EAAA1B,KAAI,OAAIof,UACZ1d,EAAI,EAAA1B,KAAI,OAAIof,SAEhB5B,EAAc,EAAAxd,KAAI,OAAI8d,MAAQ1N,EAAO5D,MAAQ4D,EAAO5D,MAAQ,IAAM,IAAMkR,EAEpE1d,KAAKsV,OAAS,EAAAC,YAAYrU,MAAQlB,KAAK4R,WAAWnR,SAASJ,EAAMF,GAAKsd,EAAc,EAAAxc,cAAcC,MAClGlB,KAAK4R,WAAW1R,IAAIG,EAAMF,GAAKsd,EAC3B,EAAAxc,cAAcC,KACd,CACIiB,SAAU,IACVI,YAAY,EACZF,KAAMH,IACFob,EAAiBjd,EAAMqB,EAAI1B,KAAKuL,KAAK4T,KAAOnf,KAAKuL,KAAK4T,KAAe9e,EAAMqB,EAE3EH,EAAI,EAAAvB,KAAI,OAAWqP,KAAOgP,EAAS,EAAAre,KAAI,OAAI8d,KAC3Cpc,EAAI,EAAA1B,KAAI,OAAOoJ,OAASkU,EAAS,EAAAtd,KAAI,OAAI+C,IAAMb,EAE3CR,EAAI,EAAA1B,KAAI,OAAIof,UACZ1d,EAAI,EAAA1B,KAAI,OAAIof,QAAUld,GAE1Bub,EAAezd,KAAKuL,KAAK4E,OAAOa,OAAOwG,GAAKA,EAAEpX,MAAQ,EAAA2c,SAASjU,QAC3CoP,QAAQ9H,GAE5BnE,EAAIoT,SAAS9d,EAAIkc,EAAeD,GAAe,EAAAxd,KAAI,OAAI8d,KAAOJ,EAAeF,GAAe,EACxFxd,KAAK+G,OAAOqC,OAAS,EAAApJ,KAAI,OAAWkd,OAASxb,EAC7C8b,EACA9b,OAIXqY,KACG,EAAA/Z,KAAI,SAAU,KAAdA,KAAeuB,EAAIkc,EAAeD,GAAe,EAAAxd,KAAI,OAAI8d,KAAOJ,EAAeF,GAAe,EAC1Fxd,KAAK+G,OAAOqC,OAAS,EAAApJ,KAAI,OAAWkd,OAASxb,EAC7C8b,EACA9b,IAC8BqE,MAA9B/F,KAAK2U,aAAahD,UACe,GAA9B3R,KAAK2U,aAAahD,SAczB1F,EAAIe,UAAYoD,EAAOzN,OAbvB,EAAA3C,KAAI,EAAW,CACXuB,EAAGA,EACHG,EAAGA,EACHyS,MAAOA,EACP5I,KAAMlL,EAAMkL,KACZ6E,OAAQA,GACX,KAEDgN,EAAa9M,KAAK,IAAI,EAAA0G,aAAa,GAAI5G,EAAOQ,UAAY2N,IAAkB7c,IAAM0O,EAAOzN,QACzF,EAAA3C,KAAI,EAAauB,EAAC,KAElB0K,EAAIe,WAAa,OAMzBf,EAAIoT,SAAS9d,EAAIkc,EAAeD,GAAe,EAAAxd,KAAI,OAAI8d,KAAOJ,EAAeF,GAAe,EACxFxd,KAAK+G,OAAOqC,OAAS,EAAApJ,KAAI,OAAWkd,OAASxb,EAC7C8b,EACA9b,IAGR,MAEJ,KAAK,EAAAqb,SAASC,IACVtb,EAAI,EAAA1B,KAAI,OAAWsP,IAAMgP,EAAS,EAAAte,KAAI,OAAI8d,KAAO,EAAA9d,KAAI,OAAI8d,KAAO,EAEhE,MAAMwB,EAAelP,EAAO5D,OAASqR,EAEjC7d,KAAKsV,OAAS,EAAAC,YAAYrU,MAAQlB,KAAK4R,WAAWnR,SAASJ,EAAMF,GAAKwd,EAAW,EAAA1c,cAAcC,MAC/FlB,KAAK4R,WAAW1R,IAAIG,EAAMF,GAAKwd,EAC3B,EAAA1c,cAAcC,KACd,CACIiB,SAAU,IACVI,YAAY,EACZF,KAAMH,IACFR,EAAI,EAAA1B,KAAI,OAAWsP,IAAMgP,EAAS,EAAAte,KAAI,OAAI8d,KAAO,EAAA9d,KAAI,OAAI8d,KAAO,EAEhEH,EAAY3d,KAAKuL,KAAK4E,OAAOa,OAAOwG,GAAKA,EAAEpX,MAAQ,EAAA2c,SAASC,KAC3C9E,QAAQ9H,GAEzBnE,EAAIoT,SAAS9d,EACTG,EAAI,EAAA1B,KAAI,OAAI8d,KAAO,EAAIH,EAAY2B,EAC3Bjf,EAAMkB,EAAI,EAAAvB,KAAI,OAAIye,KAAO,EAAAze,KAAI,OAAI8d,KAAO5b,EAChDod,OAIXvF,IACG,EAAA/Z,KAAI,SAAU,KAAdA,KAAeuB,EACfG,EAAI,EAAA1B,KAAI,OAAI8d,KAAO,EAAIH,EAAY2B,EAC3Bjf,EAAMkB,EAAI,EAAAvB,KAAI,OAAIye,KAAO,EAAAze,KAAI,OAAI8d,KACzCwB,IACA,EAAAtf,KAAI,EAAW,CACXuB,EAAGA,EACHG,EAAGA,EACHyS,MAAOA,EACP5I,KAAMlL,EAAMkL,KACZ6E,OAAQA,GACX,KAEDnE,EAAIe,WAAa,KAEjBoQ,EAAa9M,KAAK,IAAI,EAAA0G,aAAa,GAAI5G,EAAOQ,UAAY2N,IAAkBhd,IAAM6O,EAAOzN,QACzF,EAAA3C,KAAI,EAAa0B,EAAI,EAAA1B,KAAI,OAAI8d,KAAO,EAAC,MAErC7R,EAAIe,UAAYoD,EAAOzN,OAI/BsJ,EAAIoT,SAAS9d,EACTG,EAAI,EAAA1B,KAAI,OAAI8d,KAAO,EAAIH,EAAY2B,EAC3Bjf,EAAMkB,EAAI,EAAAvB,KAAI,OAAIye,KAAO,EAAAze,KAAI,OAAI8d,KACzCwB,IAGR,MAEJ,KAAK,EAAAvC,SAASwC,eAKV,GAJA7d,EAAI1B,KAAK+G,OAAOqC,OAAS,EAAApJ,KAAI,OAAWkd,OAAiB7c,EAAMqB,EAAI,EAAA1B,KAAI,OAAIye,KAAO,EAAAze,KAAI,OAAI8d,KAE1FN,EAAc,EAAAxd,KAAI,OAAI8d,MAAQ1N,EAAO5D,MAAQ4D,EAAO5D,MAAQ,IAAM,IAE9DxM,KAAKsV,OAAS,EAAAC,YAAYrU,MAAQlB,KAAK4R,WAAWnR,SAASJ,EAAMF,GAAKgU,EAAO,EAAAlT,cAAcC,MAC3FlB,KAAK4R,WAAW1R,IAAIG,EAAMF,GAAKgU,EAC3B,EAAAlT,cAAcC,KACd,CACIiB,SAAU,IACVI,YAAY,EACZF,KAAMH,IACFub,EAAezd,KAAKuL,KAAK4E,OAAOa,OAAOwG,GAAKA,EAAEpX,MAAQ,EAAA2c,SAASwC,gBAAkB/H,EAAErH,OAAOa,OAAOvN,GAAKA,EAAElC,GAAKlB,EAAMkB,GAAGqD,OAAS,GAC3GsT,QAAQ9H,GAE5B7O,EAAI,EAAAvB,KAAI,OAAWqP,KAAOgP,EAAS,EAAAre,KAAI,OAAI8d,KAC3Cpc,EAAI1B,KAAK+G,OAAOqC,OAAS,EAAApJ,KAAI,OAAWkd,OAAiB7c,EAAMqB,EAAI,EAAA1B,KAAI,OAAIye,KAAO,EAAAze,KAAI,OAAI8d,KAEtE,GAAhBL,IACAM,EAAoBM,GAAU,GAElC,IAAIlR,EAAwCpH,MAA/BgY,EAAoBM,GAClBN,EAAoBM,GACpB,EAEff,EAAStd,KAAK+G,OAAOqC,OAAS,EAAApJ,KAAI,OAAWkd,OAAS/P,EACtDoQ,GAAW7b,EAAI1B,KAAK+G,OAAOqC,OAAS,EAAApJ,KAAI,OAAWkd,QAAUhb,EAEzDob,EAAS,EAAAtd,KAAI,OAAWsP,MACpBgO,EAASC,EAAU,EAAAvd,KAAI,OAAWsP,MAClCiO,GAAWD,EAASC,EAAU,EAAAvd,KAAI,OAAWsP,KAEjDrD,EAAIoT,SAAS9d,GAAK,EAAAvB,KAAI,OAAI8d,KAAON,GAAe,EAC5CF,EACAE,EACAD,IAGRQ,EAAoBM,KAAY3c,EAAI1B,KAAK+G,OAAOqC,OAAS,EAAApJ,KAAI,OAAWkd,QAAUhb,SAG3F,CACiB,GAAhBub,IACAM,EAAoBM,GAAU,GAElC,IAAIlR,EAAwCpH,MAA/BgY,EAAoBM,GAClBN,EAAoBM,GACpB,EAEff,EAAStd,KAAK+G,OAAOqC,OAAS,EAAApJ,KAAI,OAAWkd,OAAS/P,EACtDoQ,EAAU7b,EAAI1B,KAAK+G,OAAOqC,OAAS,EAAApJ,KAAI,OAAWkd,OAE9CI,EAAS,EAAAtd,KAAI,OAAWsP,MACpBgO,EAASC,EAAU,EAAAvd,KAAI,OAAWsP,MAClCiO,GAAWD,EAASC,EAAU,EAAAvd,KAAI,OAAWsP,KAE5CyK,IACG,EAAA/Z,KAAI,SAAU,KAAdA,KAAeuB,GAAK,EAAAvB,KAAI,OAAI8d,KAAON,GAAe,EAClDF,EAASC,EACTC,EACAhc,KAAKoZ,IAAI2C,KACT,EAAAvd,KAAI,EAAW,CACXuB,EAAGA,EACHG,EAAGA,EACHyS,MAAOkK,EACP9S,KAAMlL,EAAMkL,KACZ6E,OAAQA,GACX,KAEDgN,EAAa9M,KAAK,IAAI,EAAA0G,aAAa,GAAI5G,EAAOQ,UAAY2N,IAAkB7c,IAAM0O,EAAOzN,QACzF,EAAA3C,KAAI,EAAauB,EAAC,KAElB0K,EAAIe,WAAa,MAEjBf,EAAIe,UAAYoD,EAAOzN,OAI/BsJ,EAAIoT,SAAS9d,GAAK,EAAAvB,KAAI,OAAI8d,KAAON,GAAe,EAC5CF,EACAE,EACAD,IAGRQ,EAAoBM,IAAY3c,EAAI1B,KAAK+G,OAAOqC,OAAS,EAAApJ,KAAI,OAAWkd,MAC5E,EAIZ,CAIA,OAFAjR,EAAI+G,YAAY,IAER5C,EAAOhQ,MACX,KAAK,EAAA2c,SAASyB,KAGV,GAFAvS,EAAIgB,SAEA,EAAAjN,KAAI,QAAY,EAAAA,KAAI,OAASoQ,QAAUA,EAAQ,CAC/CnE,EAAIQ,YACJR,EAAIc,UAAY,EAChBd,EAAIY,YAAcwQ,EAClBpR,EAAIiH,OAAO,EAAAlT,KAAI,OAAWqP,KAAM,EAAArP,KAAI,OAAS0B,GAC7CuK,EAAIkH,OAAOnT,KAAK+G,OAAOyF,MAAQ,EAAAxM,KAAI,OAAWid,MAAO,EAAAjd,KAAI,OAAS0B,GAClEuK,EAAIgB,SAEJ,IAAIoN,EAAS7Y,KAAK8B,MAAqB,IAAf8M,EAAO5D,OAC3B6N,EAAS,IACTA,EAAS,GAEbpO,EAAIQ,YACJR,EAAImB,IAAI,EAAApN,KAAI,OAASuB,EAAG,EAAAvB,KAAI,OAAS0B,EAAG2Y,EAAQ,EAAG,EAAI7Y,KAAK6L,IAC5DpB,EAAIiB,OACJjB,EAAIc,UAAYvL,KAAKge,KAAKnF,EAAS,GACnCpO,EAAIY,YAAc,EAAApK,OAAOC,YAAY0N,EAAOzN,MAAO,IACnDsJ,EAAIgB,QACR,CAEA,MAEJ,KAAK,EAAA8P,SAASmC,cACVjT,EAAIgB,SAEJ,EAAAK,WAAW+E,QAAQpG,GACnBA,EAAIsB,SAAS6C,EAAOQ,MAChB,EAAA5Q,KAAI,OAAWqP,MAAQrP,KAAK+G,OAAOyF,MAAQ,EAAAxM,KAAI,OAAWqP,KAAO,EAAArP,KAAI,OAAWid,OAAS,EACzFjd,KAAK+G,OAAOqC,OAAS,EAAApJ,KAAI,OAAWkd,OAAiB9M,EAAOD,OAAO,GAAGzO,EAAI,EAAA1B,KAAI,OAAIye,KAAO,EAAAze,KAAI,OAAI8d,KAAO,IAE5G,MAEJ,KAAK,EAAAf,SAASjU,OACd,KAAK,EAAAiU,SAASwC,eACV,GAAI,EAAAvf,KAAI,OAAU,CACd,IAAImN,EAAoDpH,MAA3CgY,EAAoB,EAAA/d,KAAI,OAASmU,OAC/B4J,EAAoB,EAAA/d,KAAI,OAASmU,OACjC,EAEXnU,KAAK+G,OAAOqC,OAAS,EAAApJ,KAAI,OAAWkd,OAAS/P,EAAS,EAAAnN,KAAI,OAAWsP,MACrErD,EAAIc,UAAY,EAChBd,EAAIY,YAAcwQ,EAClBpR,EAAIiH,OAAO,EAAAlT,KAAI,OAAa,EAAAA,KAAI,OAAI8d,KAAO,EACvC,EAAA9d,KAAI,OAAWsP,KACnBrD,EAAIkH,OAAO,EAAAnT,KAAI,OAAa,EAAAA,KAAI,OAAI8d,KAAO,EACvC9d,KAAK+G,OAAOqC,OAAS,EAAApJ,KAAI,OAAWkd,OAAS/P,GACjDlB,EAAIgB,SAEZ,CAEAwQ,IAEA,MAEJ,KAAK,EAAAV,SAASC,IACN,EAAAhd,KAAI,SACJiM,EAAIc,UAAY,EAChBd,EAAIY,YAAcwQ,EAClBpR,EAAIiH,OAAO,EAAAlT,KAAI,OAAWqP,KACtB,EAAArP,KAAI,OAAa,EAAAA,KAAI,OAAI8d,KAAO,GACpC7R,EAAIkH,OAAOnT,KAAK+G,OAAOyF,MAAQ,EAAAxM,KAAI,OAAWid,MAC1C,EAAAjd,KAAI,OAAa,EAAAA,KAAI,OAAI8d,KAAO,GACpC7R,EAAIgB,UAGR0Q,IAIZ,CAEA,EAAA3d,KAAI,SAAY,KAAhBA,MAEAA,KAAKwJ,QAAQ3C,OAAOuW,EAAaxY,OAAS,IAAM5E,KAAK+V,UAAUpE,SAC3D3R,KAAKmV,iBACLiI,EACA,EAAApd,KAAI,OACF,EAAAA,KAAI,OAASoQ,OAAQD,OAAO,EAAAnQ,KAAI,OAASmU,YACzCpO,GAED/F,KAAKkX,WACNC,sBAAsBnX,KAAK6G,OAAOuQ,KAAKpX,OAE3CA,KAAKsV,MAAQ,EAAAC,YAAYC,KAEzB3L,MAAM4L,iBAEFzV,KAAK4V,qBAAuB,EAAA5V,KAAI,SAChCA,KAAK4V,wBAAqB7P,IAE1B,EAAA/F,KAAI,SACAA,KAAK0V,kBAAkB,EAAA1V,KAAI,OAASuL,OAChCvL,KAAK4V,oBACb,EAAA5V,KAAI,OAAW+F,EAAS,IAChC,CAEA,OAAAqC,GACIyB,MAAMzB,SACV,CAEA,MAAAD,GACI0B,MAAM1B,SAEN,EAAAnI,KAAI,OAAS+F,EAAS,KAEtB,EAAA/F,KAAI,SAAgB,KAApBA,KACJ,CAsZA,eAAAgI,GACI6B,MAAM7B,kBAEN,IAAK,IAAIlG,KAAQ9B,KAAKuL,KAAK4E,OAAQ,CAC/BrO,EAAKmI,UAAYnI,EAAKqO,OACtBrO,EAAK1B,OAAS,EAAA2c,SAASyB,KAEvB,IAAK,IAAIiB,KAAM3d,EAAKqO,OAChBsP,EAAGtf,GAAK,EAAAsC,OAAO6B,OAEXtE,KAAKuL,KAAKgF,OAAS,EAAAC,aAAa3P,OAC5B,EAAA4B,OAAO8C,YAAYka,EAAGle,GACtBke,EAAGle,EAAI,IAAIV,KAAK4e,EAAGle,GAEnBsU,QAAQI,KAAK,GAAIwJ,EAAGle,kCAGpC,CACJ,CAEA,YAAA0G,GACI4B,MAAM5B,eAENjI,KAAK+V,SAAW,IAAI,EAAAK,SAASpW,KAAK+G,OAC9B,CACIxF,GAAI,GACJG,EAAG,GACH+D,KAAM,EAAA2E,cAAcI,KACpB+H,MAAO,CACH,CACI9M,KAAM,EAAA2E,cAAcC,UACpBiJ,OAAQ,KACJ,EAAA+C,OAAOC,MAAMtW,KAAK+G,OAAQ/G,KAAKkG,SAASqQ,SAGhD,CACI9Q,KAAM,EAAA2E,cAAcG,UACpB+I,OAAQ,KACJ,EAAA+C,OAAOG,MAAM,EAAA1B,cAAc2B,QAAQ,EAAAiJ,SAASzP,QAAQjQ,KAAKuL,OAAQvL,KAAKkG,SAASqQ,SAGvF,CACItD,WAAW,GAEf,CACIxN,KAAM,EAAA2E,cAAcE,iBACpBgJ,OAAQ,KACJ,IAAI,EAAAuB,MAAM,EAAAC,cAAc2B,QAAQ,EAAAiJ,SAASzP,QAAQjQ,KAAKuL,QAAQ2J,WAKtF,EA7hCJ,iB,6NAqlBW3T,GACH,IAAKvB,KAAKmV,iBACN,OAAO,EAEX,MAAM8J,EAAQjf,KAAKwa,iBAAiBxa,KAAKmV,kBAEzC,OAASnV,KAAK+V,UAAUpE,UACdpQ,EAAI,EAAAvB,KAAI,OAAI8d,KAAO,GAAKmB,EAAM1d,GAAK0d,EAAM1d,EAAIA,EAAI,EAAAvB,KAAI,OAAI8d,KAAO,GAChE,EAAA9d,KAAI,OAAWsP,KAAO2P,EAAMvd,GAAKud,EAAMvd,GAAK1B,KAAK+G,OAAOqC,OAAS,EAAApJ,KAAI,OAAWkd,QAChF,EAAAld,KAAI,OAAWqP,KAAO4P,EAAM1d,CAC1C,EAAC,WAESA,EAAWG,EAAW+R,EAAWC,GACvC,IAAK1T,KAAKmV,iBACN,OAAO,EAEX,MAAM8J,EAAQjf,KAAKwa,iBAAiBxa,KAAKmV,kBAEzC,OAASnV,KAAK+V,UAAUpE,UACdsN,EAAM1d,GAAKA,GAAK0d,EAAM1d,GAAKA,EAAIkS,GAC/BwL,EAAMvd,GAAKA,GAAKud,EAAMvd,GAAKA,EAAIgS,CAC7C,EAAC,WAEWiM,GAAgB,GACxB,GAAI,EAAA3f,KAAI,QAAU2f,EACd,OAEJ,GAAI3f,KAAKuL,KAAKqU,OACV,OAEJ,MAAM3T,EAAM,EAAAC,OAAOjB,WAAWjL,KAAK+G,QAKnC,GAHI4Y,GACA1T,EAAI4T,UAAU,EAAG,EAAG7f,KAAK+G,OAAOyF,MAAOxM,KAAK+G,OAAOqC,QAEnD,EAAApJ,KAAI,OAEJ,YADAiM,EAAI6T,UAAU,EAAA9f,KAAI,OAAQ,EAAG,GAIjC,IAAK2f,EACD,OAIJ1T,EAAIe,UAAY,EAAA3F,MAAMkN,iBAEtBtI,EAAIoT,SAAS,EAAG,EAAG,EAAArf,KAAI,OAAWqP,KAAMrP,KAAK+G,OAAOqC,QACpD6C,EAAIoT,SAAS,EAAG,EAAGrf,KAAK+G,OAAOyF,MAAO,EAAAxM,KAAI,OAAWsP,KACrDrD,EAAIoT,SAASrf,KAAK+G,OAAOyF,MAAQ,EAAAxM,KAAI,OAAWid,MAAO,EAAGjd,KAAK+G,OAAOyF,MAAOxM,KAAK+G,OAAOqC,QACzF6C,EAAIoT,SAAS,EAAGrf,KAAK+G,OAAOqC,OAAS,EAAApJ,KAAI,OAAWkd,OAAQld,KAAK+G,OAAOyF,MAAOxM,KAAK+G,OAAOqC,QAE3F,MAAM2W,EAAgB/f,KAAKuL,KAAK4E,OAAOa,OAAOwG,GAAKA,EAAEpX,MAAQ,EAAA2c,SAASC,KAAKpY,OAAS,GAEhF5E,KAAKuL,KAAKyU,QAAUhgB,KAAKuL,KAAK0U,UAC9BhU,EAAIsH,UAAY,SAChBtH,EAAIuH,aAAe,SACnBvH,EAAIe,UAAY,EAAA3F,MAAM5B,KAElBzF,KAAKuL,KAAKyU,QACV/T,EAAIsB,SAASvN,KAAKuL,KAAKyU,OACnB,EAAAhgB,KAAI,OAAWqP,MAAQrP,KAAK+G,OAAOyF,MAAQ,EAAAxM,KAAI,OAAWqP,KAAO,EAAArP,KAAI,OAAWid,OAAS,EACzFjd,KAAK+G,OAAOqC,OAAS,GAEzBpJ,KAAKuL,KAAK0U,SACVhU,EAAIiU,QAAQ1e,KAAK6L,GAAK,GAEtBpB,EAAIuH,aAAe,MAEnBvH,EAAIsB,SAASvN,KAAKuL,KAAK0U,SACjB,EAAAjgB,KAAI,OAAWsP,KAAOtP,KAAK+G,OAAOqC,OAAS,EAAApJ,KAAI,OAAWsP,IAAM,EAAAtP,KAAI,OAAWkd,QAAU,GAC3F,GAEJjR,EAAImO,mBAIZnO,EAAIsH,UAAY,SAChBtH,EAAIuH,aAAe,MAEnB,MAAMsK,EAAO,EAAA9d,KAAI,OAAI8d,KACjBqC,EAAQngB,KAAK+G,OAAOqC,OAAS,EAAApJ,KAAI,OAAWkd,OAEhD,IAAIkD,EAAW,EACXjc,EAAM,EAAAnE,KAAI,OAAWqP,KAAOyO,EAAO,EAEvC,IAAK,IAAIzc,EAAI,EAAGA,EAAI,EAAArB,KAAI,OAAa4E,OAAS,EAAGvD,IAC7C,EAAArB,KAAI,OAAUqgB,OACV7e,KAAK8B,MAAM,EAAAtD,KAAI,OAAWqP,KAAOhO,EAAI,EAAArB,KAAI,OAAI8d,MAC7C9d,KAAKuL,KAAKgF,OAAS,EAAAC,aAAa3P,KAC9B,EAAA4P,UAAUC,KAAK,IAAI7P,KAAK,EAAAb,KAAI,OAAaqB,EAAI,KAC7CiW,OAAO,EAAAtX,KAAI,OAAI8C,OAASwd,UAAU,EAAAtgB,KAAI,OAAI8C,KACxC,EAAA9C,KAAI,OAAaqB,EAAI,GACrB,EAAAoP,UAAUwG,OACN,EAAAjX,KAAI,OAAI8C,IAAMzB,GAAK,EAAArB,KAAI,OAAI+C,IAAM,EAAA/C,KAAI,OAAI8C,MAAQ,EAAA9C,KAAI,OAAIugB,MAAQ,KAIjF,MAAMC,EAAgBhf,KAAKuB,OACpB,IAAI,EAAA/C,KAAI,OAAUmQ,UAAU/D,IAAIwE,GAASpP,KAAKge,KAAK,EAAA/c,OAAOqB,YAAY8M,MACzE,GACE6P,EAAWjf,KAAKoC,OACjB5D,KAAK+G,OAAOyF,MAAQ,EAAAxM,KAAI,OAAWqP,KAAO,EAAArP,KAAI,OAAWid,OAASuD,GAEjEE,EAAalf,KAAKge,KAAK,GAAKiB,EAAW,EAAAzgB,KAAI,OAAa4E,SAE9D,KAAOT,EAAMnE,KAAK+G,OAAOyF,MAAQ,EAAAxM,KAAI,OAAWid,OACxCmD,EAAWM,GAAc,IACzBzU,EAAIe,UAAY,EAAA3F,MAAM5B,KAAO,KAE7BwG,EAAIsB,SACA,EAAAvN,KAAI,OAAUW,IAAIa,KAAK8B,MAAMa,EAAM,EAAAnE,KAAI,OAAI8d,KAAO,KAAO,GACzD3Z,EACAgc,EAAQQ,IAIhBxc,GAAO2Z,EACPsC,IAGJnU,EAAIsH,UAAY,QAChBtH,EAAIuH,aAAe,SAEnB,MAAMoN,EAAS,EAAA5gB,KAAI,OAAIugB,MAAQ,GAAK,GAAK,EAAAvgB,KAAI,OAAIugB,MAEjD,IAAIM,EAAWd,EAAgB,EAAI,EAC/Be,EAAQ,EAAA9gB,KAAI,OAAa4E,OAASgc,EAEtC,IAAK,IAAIvf,EAAI0e,EAAgB,EAAI,EAAG1e,EAAI,EAAArB,KAAI,OAAa4E,OAAS,EAAGvD,IAAK,CACtE,MAAM0f,EAAS/gB,KAAK+G,OAAOqC,OAASyX,EAAWC,EAAQ,EAAA9gB,KAAI,OAAI8d,KAAO,EAAA9d,KAAI,OAAWkd,OACjF8D,EAAcxf,KAAK8B,MAAMtD,KAAK+G,OAAOqC,OAAS/H,EAAI,EAAArB,KAAI,OAAI8d,KAAO,EAAA9d,KAAI,OAAWkd,QAMpF,GAJK,EAAAld,KAAI,OAAUW,IAAIqgB,IACnB,EAAAhhB,KAAI,OAAUQ,IAAIwgB,EACd,EAAAvQ,UAAUwG,OAAO,EAAAjX,KAAI,OAAI8C,KAAOzB,GAAK0e,GAAiB,EAAI,KAAO,EAAA/f,KAAI,OAAI+C,IAAM,EAAA/C,KAAI,OAAI8C,KAAO,EAAA9C,KAAI,OAAIugB,QAE1Glf,GAAKwf,EAAWC,EAAO,CACvB,MAAMlQ,EAAQ,CACVrP,EAAG,EAAAvB,KAAI,OAAWqP,KAClB3N,EAAGqf,EACHnQ,MAAO,EAAA5Q,KAAI,QAAe,EACjBwB,KAAK8B,OAAO,EAAAtD,KAAI,OAAI8C,KAAO+d,EAAWC,GAASf,GAAiB,EAAI,KAAO,EAAA/f,KAAI,OAAI+C,IAAM,EAAA/C,KAAI,OAAI8C,KAAO,EAAA9C,KAAI,OAAIugB,OAAS,EAAAvgB,KAAI,QAAe,EAAAA,KAAI,OAChJwB,KAAK8B,MAAM,EAAAtD,KAAI,OAAI8C,KAAO+d,EAAWC,GAASf,GAAiB,EAAI,KAAO,EAAA/f,KAAI,OAAI+C,IAAM,EAAA/C,KAAI,OAAI8C,KAAO,EAAA9C,KAAI,OAAIugB,MAAQ,EAAAvgB,KAAI,QAAe,EAAAA,KAAI,QAG3J,IAAIihB,EAAU,GAEd,GAAIjhB,KAAKuL,KAAK2V,YAAa,CACvB,MAAMC,EAAc3f,KAAKoC,MAAMgN,EAAMA,MAAM3N,WAAW2B,OAAS,GAE3Duc,EAAc,IACdvQ,EAAMA,OAASpP,KAAKC,IAAI,IAAM0f,GAE9BF,EAAU,CACN,EAAA7W,cAAcQ,cACd,EAAAR,cAAcS,aACd,EAAAT,cAAcU,cAChBqW,EAAc,GAExB,CAEAlV,EAAIsB,SAAS,EAAAkD,UAAUwG,OAAOrG,EAAMA,OAASqQ,EACzCrQ,EAAMrP,EAxHM,GAyHZqP,EAAMlP,GAAKqe,EAAgB,EAAA/f,KAAI,OAAI8d,KAAO,EAAI,IAElD+C,GACJ,CACJ,CAEA5U,EAAIQ,YAEJR,EAAIY,YAAc,EAAAxF,MAAMgF,KACxBJ,EAAIc,UAAY,EAEhB,MAAMI,EAAS,GACXiU,EAAQphB,KAAKuL,KAAK4E,OAAOa,OAAOvN,GAAKA,EAAErD,MAAQ,EAAA2c,SAASC,KAAKpY,OAAS,EAE1EqH,EAAIiH,OAAO,EAAAlT,KAAI,OAAWqP,KAAOlC,EAC7BnN,KAAK+G,OAAOqC,OAAS,EAAApJ,KAAI,OAAWkd,QAAUkE,GAAQ,GAAUjU,IAEhEiU,EACAnV,EAAIkH,OAAO,EAAAnT,KAAI,OAAWqP,KAAOlC,EAAQ,EAAAnN,KAAI,OAAWsP,KAExDrD,EAAIkH,OAAOnT,KAAK+G,OAAOyF,MAAQ,EAAAxM,KAAI,OAAWid,MAAOjd,KAAK+G,OAAOqC,OAAS,EAAApJ,KAAI,OAAWkd,OAAS/P,GAEtGlB,EAAIgB,SAEAjN,KAAK+G,OAAOyF,MAAQ,GAAKxM,KAAK+G,OAAOqC,OAAS,GAC9CiY,kBAAkBpV,EAAIiN,aAAa,EAAG,EAAGlZ,KAAK+G,OAAOyF,MAAOxM,KAAK+G,OAAOqC,SACnEkY,KAAKC,GAAO,EAAAvhB,KAAI,EAASuhB,EAAG,KACzC,EAAC,aAGG,GAAIvhB,KAAKuL,KAAKqU,OACV,OAEJ,MAAM3T,EAAM,EAAAC,OAAOjB,WAAWjL,KAAK+G,QAEnC,GAAI,EAAA/G,KAAI,OAEJ,YADAiM,EAAIuV,aAAa,EAAAxhB,KAAI,OAAa,EAAG,GAIzCiM,EAAI4T,UAAU,EAAG,EAAG7f,KAAK+G,OAAOyF,MAAOxM,KAAK+G,OAAOqC,QAEnD,MAAMqY,EAAgB,EAAApa,MAAMgN,SAEtB0L,EAAgB/f,KAAKuL,KAAK4E,OAAOa,OAAOwG,GAAKA,EAAEpX,MAAQ,EAAA2c,SAASC,KAAKpY,OAAS,EAEpF,GAAImb,EAAe,CACf,MAAMjC,EAAO,EAAA9d,KAAI,OAAI8d,KACjBqC,EAAQngB,KAAK+G,OAAOqC,OAAS,EAAApJ,KAAI,OAAWkd,OAEhD,IAAIkD,EAAW,EACXjc,EAAM,EAAAnE,KAAI,OAAWqP,KAAOyO,EAAO,EAEvC,IAAK,IAAIzc,EAAI,EAAGA,EAAI,EAAArB,KAAI,OAAa4E,OAAS,EAAGvD,IAC7C,EAAArB,KAAI,OAAUqgB,OACV7e,KAAK8B,MAAM,EAAAtD,KAAI,OAAWqP,KAAOhO,EAAI,EAAArB,KAAI,OAAI8d,MAC7C9d,KAAKuL,KAAKgF,OAAS,EAAAC,aAAa3P,KAC9B,EAAA4P,UAAUC,KAAK,IAAI7P,KAAK,EAAAb,KAAI,OAAaqB,EAAI,KAC7CiW,OAAO,EAAAtX,KAAI,OAAI8C,OAASwd,UAAU,EAAAtgB,KAAI,OAAI8C,KACxC,EAAA9C,KAAI,OAAaqB,EAAI,GACrB,EAAAoP,UAAUwG,OACN,EAAAjX,KAAI,OAAI8C,IAAMzB,GAAK,EAAArB,KAAI,OAAI+C,IAAM,EAAA/C,KAAI,OAAI8C,MAAQ,EAAA9C,KAAI,OAAIugB,MAAQ,KAIjF,MAAMC,EAAgBhf,KAAKuB,OACpB,IAAI,EAAA/C,KAAI,OAAUmQ,UAAU/D,IAAIwE,GAASpP,KAAKge,KAAK,EAAA/c,OAAOqB,YAAY8M,MACzE,GACE6P,EAAWjf,KAAKoC,OACjB5D,KAAK+G,OAAOyF,MAAQ,EAAAxM,KAAI,OAAWqP,KAAO,EAAArP,KAAI,OAAWid,OAASuD,GAEjEE,EAAalf,KAAKge,KAAK,GAAKiB,EAAW,EAAAzgB,KAAI,OAAa4E,SAE9D,KAAOT,EAAMnE,KAAK+G,OAAOyF,MAAQ,EAAAxM,KAAI,OAAWid,OACxCmD,EAAWM,GAAc,IACzBzU,EAAIQ,YAEJR,EAAIiH,OAAO/O,EAAKgc,GAChBlU,EAAIkH,OAAOhP,EAAK,EAAAnE,KAAI,OAAWsP,KAE/BrD,EAAIc,UAAY,EAChBd,EAAIY,YAAc4U,EAClBxV,EAAIgB,UAGR9I,GAAO2Z,EACPsC,GAER,CAEAnU,EAAIsH,UAAY,QAChBtH,EAAIuH,aAAe,SAEnB,MAAMoN,EAAS,EAAA5gB,KAAI,OAAIugB,MAAQ,GAAK,GAAK,EAAAvgB,KAAI,OAAIugB,MAEjD,IAAIM,EAAWd,EAAgB,EAAI,EAC/Be,EAAQ,EAAA9gB,KAAI,OAAa4E,OAASgc,EAEtC,IAAK,IAAIvf,EAAI0e,EAAgB,EAAI,EAAG1e,EAAI,EAAArB,KAAI,OAAa4E,OAAS,EAAGvD,IAAK,CACtE,MAAM0f,EAAS/gB,KAAK+G,OAAOqC,OAASyX,EAAWC,EAAQ,EAAA9gB,KAAI,OAAI8d,KAAO,EAAA9d,KAAI,OAAWkd,OAErF,GAAI7b,GAAKwf,EAAWC,EAAO,CACvB,MAAMlQ,EAAQ,CACVrP,EAAG,EAAAvB,KAAI,OAAWqP,KAClB3N,EAAGqf,GAGH/gB,KAAKuL,KAAK4E,OAAOa,OAAOwG,GAAKA,EAAEpX,KAAKshB,YAAY,EAAA3E,SAASjU,OAAQ,EAAAiU,SAASwC,eAAgB,EAAAxC,SAASyB,OAAO5Z,OAAS,IACnHqH,EAAIQ,YAEJR,EAAIiH,OAAOtC,EAAMrP,EAAGqP,EAAMlP,GAC1BuK,EAAIkH,OAAOnT,KAAK+G,OAAOyF,MAAQ,EAAAxM,KAAI,OAAWid,MAAOrM,EAAMlP,GAE3DuK,EAAIc,UAAY,EAChBd,EAAIY,YAAc4U,EAClBxV,EAAIgB,UAGR4T,GACJ,CACJ,CAEI7gB,KAAK+G,OAAOyF,MAAQ,GAAKxM,KAAK+G,OAAOqC,OAAS,GAC9C,EAAApJ,KAAI,EAAciM,EAAIiN,aAAa,EAAG,EAAGlZ,KAAK+G,OAAOyF,MAAOxM,KAAK+G,OAAOqC,QAAO,IACvF,EAAC,aAGG,IAAIuY,EAAU3hB,KAAKuL,KAAK4E,OAAOyG,QAAQY,GAAKA,EAAErH,OAAO/D,IAAIwV,GAAKA,EAAErgB,IAC5DsgB,EAAU7hB,KAAKuL,KAAK4E,OAAOyG,QAAQY,GAAKA,EAAErH,OAAO/D,IAAIwV,GAAKA,EAAElgB,IAEhE,MAAMogB,EAAS9hB,KAAKuL,KAAKgF,OAAS,EAAAC,aAAa3P,KAE/C,GAAIihB,EAAQ,CACR,IAAIC,EAAW,IAAIlhB,KAAKW,KAAKsB,OAAkB6e,IAE/C,KAAOI,EAAS9f,UAAYT,KAAKuB,OAAkB4e,IAC1CA,EAAQjK,SAASqK,EAAS9f,YAC3B0f,EAAQrR,KAAK,IAAIzP,KAAKkhB,EAAS9f,YAEnC8f,EAAWA,EAASC,QAAQ,GAGhCL,EAAQ1Q,KAAK,CAACzN,EAAGwB,IAAMxB,EAAIwB,GAAK,EAAI,EACxC,CAEA6c,EAAQ5Q,KAAK,CAACzN,EAAGwB,IAAMA,EAAIxB,GAAK,EAAI,GAEpC,EAAAxD,KAAI,EAAe,IAAI,IAAI8Q,IAAI6Q,EAAQ3Q,OAAOzP,GAAUwE,MAALxE,GAAgB6K,IAAI7K,GAAKugB,EAASvgB,EAAE0B,WAAa1B,KAAI,KACxG,EAAAvB,KAAI,EAAe,IAAI,IAAI8Q,IAAI+Q,EAAQ7Q,OAAOtP,GAAUqE,MAALrE,KAAiB,KAEpE,EAAA1B,KAAI,EAAM,CACN8C,IAAKtB,KAAKsB,OAAkB6e,GAC5B5e,IAAKvB,KAAKuB,OAAkB4e,GAC5BlD,MAAOjd,KAAKoZ,IAAIpZ,KAAKsB,OAAkB6e,IAAangB,KAAKoZ,IAAIpZ,KAAKuB,OAAkB4e,MAAe,EAAA3hB,KAAI,OAAa4E,OAAS,GAC7HkZ,MAAO9d,KAAK+G,OAAOyF,MAAQ,EAAAxM,KAAI,OAAWqP,KAAO,EAAArP,KAAI,OAAWid,OAAS,EAAAjd,KAAI,OAAa4E,OAC1Fwa,QAAS,EACTmB,MAAO,EAAAvgB,KAAI,OAAa4E,QAC3B,KAED,IAAIqd,EAAOzgB,KAAKsB,OAAkB+e,GAC9BI,EAAO,IACPA,EAAO,GAEX,EAAAjiB,KAAI,EAAM,CACN8C,IAAKmf,EACLlf,IAAK/C,KAAKuL,KAAK4T,MAAQ3d,KAAKuB,OAAkB8e,GAC9CpD,MAAOjd,KAAKoZ,IAAIqH,GAAQzgB,KAAKoZ,IAAI5a,KAAKuL,KAAK4T,MAAQ3d,KAAKuB,OAAkB8e,MAAe,EAAA7hB,KAAI,OAAa4E,OAAS,GACnHkZ,MAAO9d,KAAK+G,OAAOqC,OAAS,EAAApJ,KAAI,OAAWsP,IAAM,EAAAtP,KAAI,OAAWkd,QAAU,EAAAld,KAAI,OAAa4E,OAC3Fwa,QAAS,EACTmB,MAAO,EAAAvgB,KAAI,OAAa4E,QAC3B,KAED,IAEI7B,EAFAmf,EAAkBliB,KAAKuL,KAAK4E,OAAOa,OAAOwG,GAAKA,EAAEpX,MAAQ,EAAA2c,SAASwC,gBAItE,GAAI2C,EAAgBtd,OAAS,EAAG,CAC5B,IAAIuL,EAAS+R,EAAgB9V,IAAIoL,GAAKA,EAAErH,OAAOyG,QAAQnT,IAAMA,EAAE/B,IAE/DqB,EAAM,EAAA/C,KAAI,OAAI+C,IAEd,IAAK,IAAI1B,EAAI,EAAGA,EAAI8O,EAAO,GAAGvL,OAAQvD,IAAK,CACvC,IAAI8U,EAAM,EAEV,IAAK,MAAM1S,KAAK0M,EACZgG,GAAO1S,EAAEpC,GAET8U,EAAMpT,IACNA,EAAMoT,EACd,CAEA,EAAAnW,KAAI,OAAI+C,IAAMA,EAAM/C,KAAKuL,KAAK4T,KAAOnf,KAAKuL,KAAK4T,KAAOpc,EACtD,EAAA/C,KAAI,OAAIye,MAAQjd,KAAKoZ,IAAI,EAAA5a,KAAI,OAAI8C,KAAOtB,KAAKoZ,IAAI,EAAA5a,KAAI,OAAI+C,OAAS,EAAA/C,KAAI,OAAa4E,OAAS,EAChG,CAEA,MAAMud,EAAY,EAAA1f,OAAOqB,YAAY,EAAA2M,UAAUwG,OAAO,EAAAjX,KAAI,OAAI+C,MAC1Dof,EAAY,EAAAniB,KAAI,OAAWqP,KAAO,KAClC,EAAArP,KAAI,OAAWqP,MAAQ8S,EAAY,EAAAniB,KAAI,OAAWqP,KAAO,GACzD,EAAArP,KAAI,OAAI8d,MAAQ9d,KAAK+G,OAAOyF,MAAQ,EAAAxM,KAAI,OAAWqP,KAAO,EAAArP,KAAI,OAAWid,OAAS,EAAAjd,KAAI,OAAa4E,QAGvG,EAAA5E,KAAI,EAAcwB,KAAKoZ,IAAI,EAAA5a,KAAI,OAAI8C,KAAOtB,KAAKoZ,IAAI,EAAA5a,KAAI,OAAI+C,KAAI,KAE3D,IAAM,EAAA/C,KAAI,QAAe,EAAAA,KAAI,OAAc,EAC3C,EAAAA,KAAI,EAAc,IAAG,KAChB,GAAK,EAAAA,KAAI,QAAe,EAAAA,KAAI,OAAc,GAC/C,EAAAA,KAAI,EAAc,GAAE,KACf,IAAM,EAAAA,KAAI,QAAe,EAAAA,KAAI,OAAc,IAChD,EAAAA,KAAI,EAAc,EAAC,KACd,KAAO,EAAAA,KAAI,QAAe,EAAAA,KAAI,OAAc,IACjD,EAAAA,KAAI,EAAc,GAAE,KACf,KAAQ,EAAAA,KAAI,QAAe,EAAAA,KAAI,OAAc,IAClD,EAAAA,KAAI,EAAc,GAAE,KACf,KAAS,EAAAA,KAAI,QAAe,EAAAA,KAAI,OAAc,IACnD,EAAAA,KAAI,EAAc,IAAI,KACjB,KAAU,EAAAA,KAAI,QAAe,EAAAA,KAAI,OAAc,IACpD,EAAAA,KAAI,EAAc,IAAK,KAClB,KAAW,EAAAA,KAAI,QAAe,EAAAA,KAAI,OAAc,IACrD,EAAAA,KAAI,EAAc,IAAK,KAEvB,EAAAA,KAAI,EAAc,EAAC,KAEA,GAAnB,EAAAA,KAAI,SACJ+C,EAAM8e,EAAQjd,OAAS,GAC+D,IAA7E,EAAA5E,KAAI,OAAI+C,IAAM,GAAK,EAAA/C,KAAI,OAAe,EAAAA,KAAI,OAAI+C,IAAM,GAAM,EAAA/C,KAAI,QAC/DwB,KAAKge,KAAK,EAAAxf,KAAI,OAAI+C,IAAM,EAAA/C,KAAI,QAAe,EAAAA,KAAI,OAEvD,EAAAA,KAAI,OAAI+C,IAAMA,EAAM/C,KAAKuL,KAAK4T,KAAOnf,KAAKuL,KAAK4T,KAAOpc,EACtD,EAAA/C,KAAI,OAAIye,MAAQjd,KAAKoZ,IAAI,EAAA5a,KAAI,OAAI8C,KAAOtB,KAAKoZ,IAAI,EAAA5a,KAAI,OAAI+C,MAAQ,EAAA/C,KAAI,OAAa4E,QAGtF,EAAA5E,KAAI,EAAS,CACTwM,MAAOxM,KAAK+G,OAAOyF,MAAQ,EAAAxM,KAAI,OAAWqP,KAAO,EAAArP,KAAI,OAAWid,MAChE7T,OAAQpJ,KAAK+G,OAAOqC,OAAS,EAAApJ,KAAI,OAAWsP,IAAM,EAAAtP,KAAI,OAAWkd,QACzD,KAEZ,EAAAld,KAAI,OAAIof,QAA6B,KAAnB,EAAApf,KAAI,OAAOwM,MAC7B,EAAAxM,KAAI,OAAIof,QAA8B,KAApB,EAAApf,KAAI,OAAOoJ,MACjC,C,8EC9/BJ,MAAa+I,GAAb,UACW,EAAAC,QAAU,IAAIvR,KAAK,IAAM,EAAG,E,qFCDvC,eAEA,mBACI,YAAO0V,CAAMtQ,GACTA,EAAQ+G,UAAY,EAAA3F,MAAM5B,KAC1BQ,EAAQsN,UAAY,SACpBtN,EAAQuN,aAAe,SACvBvN,EAAQjC,KAAO,iBACnB,CAEA,cAAOqO,CAAQpM,GACXA,EAAQ+G,UAAY,EAAA3F,MAAM5B,KAC1BQ,EAAQsN,UAAY,SACpBtN,EAAQuN,aAAe,SACvBvN,EAAQjC,KAAO,iBACnB,CAEA,YAAOsX,CAAMrV,GACTA,EAAQ+G,UAAY,EAAA3F,MAAM5B,KAC1BQ,EAAQsN,UAAY,SACpBtN,EAAQuN,aAAe,SACvBvN,EAAQjC,KAAO,iBACnB,CAEA,cAAOwF,CAAQvD,GACXA,EAAQjC,KAAO,kBACfiC,EAAQsN,UAAY,QACpBtN,EAAQuN,aAAe,YAC3B,CAEA,oBAAO6F,CAAcpT,EAAmCmc,GACpDnc,EAAQsN,UAAY6O,EAAU,QAAU,MACxCnc,EAAQuN,aAAe,aACvBvN,EAAQjC,KAAO,iBACnB,E,qFCjCJ,aACA,SAGA,SACA,SACA,SAEA,mBAuBI,WAAAjE,CAAY0U,GAZF,KAAAa,MAAqB,EAAAC,YAAYrU,KAavClB,KAAKmG,KAAOsO,EAAMtO,KAClBnG,KAAKkG,SAAWuO,EAAMvO,SACtBlG,KAAK4R,WAAa,IAAI,EAAA9R,WAEtBE,KAAK+G,OAAST,SAAS0H,cAAc,EAAAC,IAAI/B,QAEzClM,KAAK+G,OAAOwB,MAAM8Z,eAAiB,EAAA5Z,OAAO+I,eAAeC,UAEzDzR,KAAKmG,KAAKmc,OAAOtiB,KAAK+G,QAEtB/G,KAAKwJ,QAAU,IAAI,EAAA2T,QAAQnd,KAAK+G,OAAQ/G,KAAKkG,UAE7ClG,KAAKkI,gBACT,CAEA,MAAArB,GACgB,EAAAqF,OAAOjB,WAAWjL,KAAK+G,QAE/B8Y,UAAU,EAAG,EAAG7f,KAAK+G,OAAOyF,MAAOxM,KAAK+G,OAAOqC,OACvD,CAEA,OAAAhB,GACIpI,KAAKwJ,QAAQpB,UACbpI,KAAKsV,MAAQtV,KAAKkG,SAASsV,qBAAuB,EAAAjG,YAAYC,KAAO,EAAAD,YAAYrU,IACrF,CAEA,UAAAwF,GACI1G,KAAKmV,iBAAmB,IAAIC,WAAW,EAAA5O,OAAO6O,WAC9CrV,KAAKyX,aAAe,IAAIrC,WAAW,EAAA5O,OAAOmR,OAC1C3X,KAAK4V,wBAAqB7P,CAC9B,CAEA,cAAAmC,GACIlI,KAAKqc,eAAiBrc,KAAK+G,OAAO+E,wBAElC9L,KAAKqc,eAAe9a,GAAKwK,QACzB/L,KAAKqc,eAAe3a,GAAKsK,QAErBhM,KAAKsV,OAAS,EAAAC,YAAYrU,MAASlB,KAAKkG,SAASqB,sBACjDvH,KAAK+G,OAAOwb,YAAc5W,GAAS3L,KAAKmV,iBAAmBxJ,EAC3D3L,KAAK+G,OAAOyb,QAAU7W,GAAS3L,KAAKyX,aAAe9L,EACnD3L,KAAK+G,OAAO0b,cAAgB9W,IACxBA,EAAM+W,iBACN1iB,KAAK2U,iBAAc5O,EACf/F,KAAK4V,mBACL5V,KAAK4V,wBAAqB7P,EAE1B/F,KAAK4V,mBAAqBjK,GAElC3L,KAAK+G,OAAO4b,aAAe,IAAM3iB,KAAKmV,iBAAmB,IAAIC,WAAW,EAAA5O,OAAO6O,WAEvF,E,srCCpFJ,eACA,SACA,SACA,QAEA,SAEA,SACA,QACA,SACA,SACA,SACA,SACA,SAEA,SACA,SACA,YAEA,MAAMuN,UAAqB,EAAApO,SACvB,WAAAzU,CAAY0U,GACR5K,MAAM4K,G,YAENzU,KAAKkG,SAASE,cAAe,EAE7BpG,KAAKuL,KAAK4E,OAASnQ,KAAKuL,KAAK4E,OAAO/D,IAAI3I,GAAK,IAAI,EAAAiG,OAAOjG,GAC5D,CAEA,MAAAoD,GAGI,GAFAgD,MAAMhD,SAEkD,GAApD7G,KAAKuL,KAAK4E,OAAOa,OAAOvN,GAAKA,EAAEpD,MAAQ,GAAGuE,OAE1C,YADA,EAAA5E,KAAI,SAAW,KAAfA,MAIJ,MAAMkb,EAAclb,KAAKkG,SAASqQ,MAAQ9G,EAAU0L,OAAOD,YAAc,EAEnEzI,EAAWzS,KAAK+G,OAAOyF,MAA4B,EAApBxM,KAAKuL,KAAKiC,QAC3CqV,EAAY7iB,KAAK+G,OAAOqC,OAA6B,EAApBpJ,KAAKuL,KAAKiC,QAAc0N,EAE7D,IASI4H,EACAC,EAVA5M,EAAMnW,KAAKuL,KAAK4E,OAAO5M,OAAO,CAACY,EAAKC,IAAQD,EAAMC,EAAI/D,MAAO,GAC7D2iB,EAAcvQ,EAAWoQ,EAEzBthB,EAAIvB,KAAKuL,KAAKiC,QACd9L,EAAI1B,KAAKuL,KAAKiC,QAAU0N,EAExB+H,EAAOjjB,KAAKuL,KAAKiC,QACjB0V,EAAOljB,KAAKuL,KAAKiC,QAAU0N,EAK/B,MAAMjP,EAAM,EAAAC,OAAOjB,WAAWjL,KAAK+G,QAEnC,IAAIoc,GAAa,EACjB,IAAK,IAAI9hB,EAAI,EAAGA,EAAIrB,KAAKuL,KAAK4E,OAAOvL,OAAQvD,IAAK,CAC9C,MAAMS,EAAO9B,KAAKuL,KAAK4E,OAAO9O,GAExB+hB,EAAc3Q,GAAYlR,EAAIvB,KAAKuL,KAAKiC,SAC1C6V,EAAeR,GAAanhB,EAAI1B,KAAKuL,KAAKiC,QAAU0N,GAExD,IAAIoI,EAAoB,CACpB,CACI3gB,MAAOb,EAAKa,MACZiO,MAAO9O,EAAK8O,MACZ4G,EAAG1V,EAAKzB,MAAQ8V,EAAM6M,EACtB3iB,MAAOyB,EAAKzB,MACZF,GAAI2B,EAAK3B,GACToB,EAAGA,EACHG,EAAGA,IAIX,GAAIL,EAAI,GAAKrB,KAAKuL,KAAK4E,OAAOvL,OAAS,EAAG,CACtC,MAAMia,EAAO7e,KAAKuL,KAAK4E,OAAO9O,EAAI,GAElCiiB,EAAMhT,KAAK,CACP3N,MAAOkc,EAAKlc,MACZiO,MAAOiO,EAAKjO,MACZ4G,EAAGqH,EAAKxe,MAAQ8V,EAAM6M,EACtB3iB,MAAOwe,EAAKxe,MACZF,GAAI0e,EAAK1e,GACToB,EAAGA,EACHG,EAAGA,IAGPL,GACJ,CAEA,MAAMkW,EAA2B,GAAhB+L,EAAM1e,OACnB2e,EAASliB,GAAKrB,KAAKuL,KAAK4E,OAAOvL,OAAS,EAE5C,GAAIue,EACA,IAAK,IAAIK,EAAI,EAAGA,GAAKJ,EAAc/hB,EAAIA,EAAGmiB,IAAK,CAC3C,MAAM/P,EAAI2P,EAAcI,EACpBC,EAAKH,EAAM,GAAG9L,EAAI/D,EAGtB,GAAIgQ,GAFKlM,EAAW,EAAI+L,EAAM,GAAG9L,EAAI/D,IAEtB4P,EAAc,CACzBC,EAAM,GAAG7P,EAAIjS,KAAKoC,MAAM6P,GACxB6P,EAAM,GAAG5P,EAAIlS,KAAKoC,MAAM6f,GAEnBlM,IACD+L,EAAM,GAAG7P,EAAIjS,KAAKoC,MAAM6P,GACxB6P,EAAM,GAAG5P,EAAI2P,EAAeC,EAAM,GAAG5P,EAErC4P,EAAM,GAAG5hB,GAAK4hB,EAAM,GAAG5P,GAG3B,KACJ,CACJ,MAEA,IAAK,IAAI8P,EAAI,EAAGA,GAAKH,EAAehiB,EAAIA,EAAGmiB,IAAK,CAC5C,MAAM9P,EAAI2P,EAAeG,EACrBE,EAAKJ,EAAM,GAAG9L,EAAI9D,EAGtB,GAAIgQ,GAFKnM,EAAW,EAAI+L,EAAM,GAAG9L,EAAI9D,IAEtB0P,EAAa,CACxBE,EAAM,GAAG5P,EAAIlS,KAAKoC,MAAM8P,GACxB4P,EAAM,GAAG7P,EAAIjS,KAAKoC,MAAM8f,GAEnBnM,IACD+L,EAAM,GAAG5P,EAAIlS,KAAKoC,MAAM8P,GACxB4P,EAAM,GAAG7P,EAAI2P,EAAcE,EAAM,GAAG7P,EAEpC6P,EAAM,GAAG/hB,GAAK+hB,EAAM,GAAG7P,GAG3B,KACJ,CACJ,CAGJ,IAAK,MAAMkQ,KAAQL,EAAO,CAClBC,IACIJ,GACAQ,EAAKlQ,EAAI2P,EACL7L,IACAoM,EAAKjQ,EAAI2P,KAEbM,EAAKjQ,EAAI2P,EACL9L,IACAoM,EAAKlQ,EAAI2P,KAIrBnX,EAAIQ,YAEJR,EAAIe,UAAY2W,EAAKhhB,MAErB,MAAMihB,EAAW5jB,KAAKsV,OAAS,EAAAC,YAAYrU,OACnClB,KAAK4R,WAAWnR,SAASkjB,EAAKxjB,GAAI,EAAAc,cAAcC,MAElD2iB,EAAYxiB,EAAIiiB,EAAMpL,QAAQyL,IAASJ,GAAUhM,EAAW,EAAI,GAClEpV,EAAW,IAET2hB,EAAU,KACZ,IAAI3f,EAAM,EACV,IAAK,IAAI9C,EAAI,EAAGA,EAAIwiB,EAAWxiB,IAC3B8C,GAAOhC,EAAWA,GAAYd,EAAIrB,KAAKuL,KAAK4E,OAAOvL,QAAUpD,KAAKuiB,EAEtE,OAAO5f,GAGL6f,EAAwB7hB,EAAWA,EAAW0hB,GAAa7jB,KAAKuL,KAAK4E,OAAOvL,OAAS,GAE3F,GAAKgf,EAgCE,CACH,MAAM7R,EAAY,CAAC7P,EAAoByJ,KACnC,MAAMsY,EACCN,EAAKpiB,EAAIoiB,EAAKlQ,EAAI,EADnBwQ,EAECN,EAAKjiB,EAAIiiB,EAAKjQ,EAAI,EAIrB0E,EAAUuL,EAAKlQ,EAAIkQ,EAAKjQ,EACZ,EAFD,GAEciQ,EAAKlQ,EAClB,EAHD,GAGckQ,EAAKjQ,EAC9B2E,EAAO,EAAID,EAEfnM,EAAI8F,UAAUkS,EAAWA,GAAY7L,EAAUlW,EAAamW,GACxD4L,EAAWA,GAAY7L,EAAUlW,EAAamW,IAClDpM,EAAIqM,MAAMF,EAAUlW,EAAamW,EAAMD,EAAUlW,EAAamW,GAE9DrY,KAAK4R,WAAWlR,OAAOijB,EAAKxjB,GAAIwL,IAGhC,EAAA3L,KAAI,SAAU,KAAdA,KAAe2jB,KACXb,GACJA,EAAca,EACdZ,EAAkBY,EAAKpY,KAEvBvL,KAAK4R,WAAW1R,IAAIyjB,EAAKxjB,GACrB,EAAAc,cAAcgR,UACd,CACI9P,SAAUsN,EAAU3P,WAAWyJ,KAC/BjH,UAAU,EACVD,KAAMH,IACF6P,EAAU7P,EAAY,EAAAjB,cAAciR,gBAIhDlS,KAAK4R,WAAW1R,IAAIyjB,EAAKxjB,GACrB,EAAAc,cAAciR,WACd,CACItR,MAAO6O,EAAU0C,MAAMC,QACvBjQ,SAAUsN,EAAU3P,WAAWyJ,KAC/BlH,KAAMH,IACF6P,EAAU7P,EAAY,EAAAjB,cAAcgR,aAIxD,MA5EIjS,KAAK4R,WAAW1R,IAAIyjB,EAAKxjB,GACrB,EAAAc,cAAcC,KACd,CACIiB,SAAU2hB,IACVvhB,YAAY,EACZF,KAAMH,IACF,GAAIA,EAAa4hB,IAAYA,IAAYE,EAAwB,EAC7D,OAAO/X,EAAIe,WAAa,KAE5B9K,GAAcA,EAAa4hB,IAAYA,IAAYE,GAAyBA,EAE5E,MAAMC,EACCN,EAAKpiB,EAAIoiB,EAAKlQ,EAAI,EADnBwQ,EAECN,EAAKjiB,EAAIiiB,EAAKjQ,EAAI,EAGnB0E,EAAU,GACZC,EAAO,EAAID,EAEfnM,EAAI8F,UAAUkS,EAAWA,GAAY7L,EAAUlW,EAAamW,GACxD4L,EAAWA,GAAY7L,EAAUlW,EAAamW,IAClDpM,EAAIqM,MAAOF,EAAUlW,EAAamW,EAAQD,EAAUlW,EAAamW,GAEjE,IAAI1L,EAAUnL,KAAK8B,MAAM,IAAMpB,GAAYe,SAAS,IAEhD0J,EAAQ/H,OAAS,IACjB+H,EAAU,EAAIA,GAElBV,EAAIe,UAAY2W,EAAKhhB,MAAQgK,KAkD7C,MAAMuX,EAAM,EAEZjY,EAAIS,UAAUnL,EAAI2iB,EAAKxiB,EAAIwiB,EAAKP,EAAKlQ,EAAIyQ,EAAKP,EAAKjQ,EAAIwQ,EAAW,EAANA,GAC5DjY,EAAIiB,OAEAyW,EAAK/S,OACF,EAAAnO,OAAOqB,YAAY6f,EAAK/S,OAAS+S,EAAKlQ,EAAIyQ,GAC1CP,EAAKjQ,EAAIwQ,EAAM,KACdlkB,KAAK4R,WAAWnR,SAASkjB,EAAKxjB,GAAI,EAAAc,cAAcC,QACpD+K,EAAIQ,YACJ,EAAAa,WAAWgO,MAAMrP,GACjBA,EAAIe,UAAa,EAAAvK,OAAOyC,eAAeye,EAAKhhB,MAAO,WAEjC,UADA,UAElBsJ,EAAIsB,SAASoW,EAAK/S,MACdrP,EAAI,EAAIoiB,EAAKlQ,EAAI,EACjB/R,EAAI,EAAIiiB,EAAKjQ,EAAI,IAGzBzH,EAAImO,iBAEA+I,EACAzhB,GAAKiiB,EAAKjQ,EAEVnS,GAAKoiB,EAAKlQ,EAEduP,GAAeW,EAAKlQ,EAAIkQ,EAAKjQ,EAC7ByC,GAAOwN,EAAKtjB,KAChB,CAEI8iB,GACA5hB,GAAK+hB,EAAM,GAAG7P,EACd/R,EAAIwhB,IAEJxhB,GAAK4hB,EAAM,GAAG5P,EACdnS,EAAI0hB,GAGRA,EAAO1hB,EACP2hB,EAAOxhB,EAEPyhB,GAAcA,CAClB,CAEAnjB,KAAKwJ,QAAQ3C,SAASic,IAAgB9iB,KAAK+V,UAAUpE,SACjD3R,KAAKmV,iBACL,CACI,IAAI,EAAA6B,aAAa,GAAI8L,GAAalS,UAAY,EAAAH,UAAUwG,OAAO6L,GAAaziB,WAEhFL,KAAKuL,KAAK4E,OAAOwF,KAAKlS,GAAKA,EAAEtD,IAAM2iB,GAAa3iB,KAE/CH,KAAKkX,WACNC,sBAAsBnX,KAAK6G,OAAOuQ,KAAKpX,OAE3CA,KAAKsV,MAAQ,EAAAC,YAAYC,KAEzB3L,MAAM4L,iBAEFqN,GAAe9iB,KAAK2U,YACpB3U,KAAK0V,kBAAkBqN,GAEvB/iB,KAAK4V,wBAAqB7P,CAClC,CAsBA,OAAAqC,GACIyB,MAAMzB,SACV,CAEA,MAAAD,GACI0B,MAAM1B,SAENnI,KAAKkI,iBACLlI,KAAK4R,WAAW9Q,OACpB,CAEA,eAAAkH,GACIhI,KAAKuL,KAAK4E,OAASnQ,KAAKuL,KAAK4E,OAAOa,OAAOvN,GAAKA,EAAEpD,MAAQ,GAE1DL,KAAKuL,KAAK4E,OAAOc,KAAK,CAACzN,EAAGwB,KAAOA,EAAE3E,OAAS,IAAMmD,EAAEnD,OAAS,IAE7DwJ,MAAM7B,kBAEN,IAAK,IAAIlG,KAAQ9B,KAAKuL,KAAK4E,OACvBrO,EAAKmI,UAAYnI,EAAKzB,MACtByB,EAAKzB,QAAU,CAEvB,CAEA,YAAA4H,GACI4B,MAAM5B,eAENjI,KAAK+V,SAAW,IAAI,EAAAK,SAASpW,KAAK+G,OAC9B,CACIxF,GAAI,GACJG,EAAG,GACH+D,KAAM,EAAA2E,cAAcI,KACpB+H,MAAO,CACH,CACI9M,KAAM,EAAA2E,cAAcG,UACpB+I,OAAQ,KACJ,EAAA+C,OAAOG,MAAM,EAAA1B,cAAc2B,QAAQ,EAAA0N,SAASlU,QAAQjQ,KAAKuL,OAAQvL,KAAKkG,SAASqQ,SAGvF,CACItD,WAAW,GAEf,CACIxN,KAAM,EAAA2E,cAAcE,iBACpBgJ,OAAQ,KACJ,IAAI,EAAAuB,MAAM,EAAAC,cAAc2B,QAAQ,EAAA0N,SAASlU,QAAQjQ,KAAKuL,QAAQ2J,WAKtF,E,yBAtEUyO,GACN,IAAK3jB,KAAKmV,mBAAqBwO,EAC3B,OAAO,EAEX,MAAM1E,EAAQjf,KAAKwa,iBAAiBxa,KAAKmV,kBAEzC,OAASnV,KAAK+V,UAAUpE,UACdgS,EAAKpiB,GAAK0d,EAAM1d,GAAK0d,EAAM1d,GAAKoiB,EAAKpiB,EAAIoiB,EAAKlQ,GAC9CkQ,EAAKjiB,GAAKud,EAAMvd,GAAKud,EAAMvd,GAAKiiB,EAAKjiB,EAAIiiB,EAAKjQ,CAC5D,EAAC,aAGG,MAAMzH,EAAM,EAAAC,OAAOjB,WAAWjL,KAAK+G,QAEnC,EAAAuG,WAAW+E,QAAQpG,GACnBA,EAAIsB,SAAS,EAAAnD,cAAcO,gBACvB3K,KAAK+G,OAAOyF,MAAQ,EACpBxM,KAAK+G,OAAOqC,OAAS,EAC7B,EAuDJ,UAAewZ,C,wFC/Xf,cAGA,SACA,SACA,SAEA,sBACI,cAAOnM,CAAQtG,GACX,IAAIiU,EAAQ9d,SAAS0H,cAAc,EAAAC,IAAIoW,OAEvCD,EAAME,UAAUpkB,IAAI,WAEpB,IAAIqkB,EAAS,IAAItkB,IACbukB,EAAO,GACPtU,EAAU,GAEVuU,EAAY,IAAIxkB,IAEpB,IAAK,MAAMykB,KAAcvU,EAAOA,OAAQ,CACpC,IAAIwU,EAAa,IAAI1kB,IAErB,IAAK,MAAM2kB,KAAUzU,EAAOD,QACxByU,EAAWnkB,IAAIokB,EAAOvkB,MAAO,GAEjC,IAAK,MAAOC,EAAKD,KAAUqkB,EAAWvU,OAClCwU,EAAWnkB,IAAIF,EAAKD,GAExBokB,EAAUjkB,IAAIkkB,EAAW/T,KAAMgU,EACnC,CAEA,IAAK,MAAME,KAAe1U,EAAOD,QAC7BA,GAAW,+CAEA2U,EAAYrc,+CAI3B,IAAK,MAAOlI,EAAKD,KAAUokB,EAAW,CAClC,IAAIK,EAAU,GAEd,IAAK,MAAOC,EAAMC,KAAW3kB,EAOzB,GANAykB,GAAW,uDAEU/e,MAAVif,EAAsB,GAAK,EAAAvU,UAAUwG,OAAO+N,kDAInDT,EAAOhkB,IAAIwkB,GAAO,CAClB,IAAIE,IAAeV,EAAO5jB,IAAIokB,IAAS,GACvCR,EAAO/jB,IAAIukB,EAAME,IAAcD,EACnC,MACIT,EAAO/jB,IAAIukB,EAAMC,GAIzBR,GAAQ,mGAGOlkB,2EAGJwkB,yCAGf,CAEA,IAAII,EAAe,GAEnB,IAAK,MAAO,CAAE7kB,KAAUkkB,EACpBW,GAAgB,+CAEInf,MAAT1F,EAAqB,GAAK,EAAAoQ,UAAUwG,OAAO5W,0CA0B1D,OAtBA+jB,EAAMjW,UAAY,qHAKH+B,kGAKJsU,0JAOIU,2DAKRd,CACX,CAEA,cAAOrP,CAAyB7O,EAAyBiK,GACrD,IAAIgV,EAAY7e,SAAS0H,cAAc,EAAAC,IAAIC,KACvCkX,EAAM9e,SAAS0H,cAAc,EAAAC,IAAIC,KACjCmX,EAAS/e,SAAS0H,cAAc,EAAAC,IAAIqX,QACpCnlB,EAAK,EAAAsC,OAAO6B,OAEhB6gB,EAAU5c,MAAMC,QAAU,EAAAC,OAAOC,QAAQC,KACzCwc,EAAU5c,MAAMa,OAAS,OAEzBgc,EAAIjlB,GAAKA,EACTilB,EAAI7c,MAAMgd,SAAW,IAErB,IAAIC,EAAgBC,KAAKC,MAAMD,KAAKE,UAAUzf,IAe9C,OAbIsf,EAAcjP,QACdiP,EAAcjP,MAAQiP,EAAcjP,MAAQ,YAChDiP,EAAcja,KAAK4E,OAASA,EAC5BqV,EAAc5J,cAAW7V,EACzByf,EAAc3J,eAAY9V,EAE1Bsf,EAAOlX,UAAY,4DAC+BhO,QAAWslB,KAAKE,UAAUH,2CAI5EL,EAAU7C,OAAO8C,EAAKC,GAEfF,CACX,E,sGClIJ,aAAS,4EAAArlB,UAAU,IACnB,aAAS,uEAAAqS,KAAK,IACd,aAAS,wEAAAgJ,MAAM,G,w0BCFf,eAEA,QAEA,SAGA,SACA,SACA,QACA,SACA,SACA,SACA,SACA,SAEA,MAAarT,UAAsB,EAAA0M,SAK/B,WAAAzU,CAAY0U,GACR5K,MAAM4K,G,YALV,mBAEA,mBAKIzU,KAAKkG,SAASE,cAAe,CACjC,CAEA,MAAAS,GACIgD,MAAMhD,SAEN,EAAA7G,KAAI,SAAM,KAAVA,MAEA,MAAMK,EAAQL,KAAKuL,KAAK4E,OAAO,GAC/BnQ,KAAKwJ,QAAQ3C,OAAO,EAAA7G,KAAI,SAAgB,KAApBA,KAAqBA,KAAKmV,iBAAkB9U,KAAWL,KAAK+V,UAAUpE,SACtF3R,KAAKmV,iBACL,CACI,IAAI,EAAA6B,aAAa,GAAI3W,GAAOuQ,UAAY,EAAAH,UAAUwG,OAAO5W,GAAO6J,aAEpE7J,GAECL,KAAKkX,WACNC,sBAAsBnX,KAAK6G,OAAOuQ,KAAKpX,OAE3CA,KAAKsV,MAAQ,EAAAC,YAAYC,KAEzB3L,MAAM4L,gBACV,CAwHA,OAAArN,GACIyB,MAAMzB,SACV,CAEA,MAAAD,GACI0B,MAAM1B,SAENnI,KAAKkI,iBACL,EAAAlI,KAAI,SAAgB,KAApBA,KACJ,CAEA,eAAAgI,GACI6B,MAAM7B,kBAEN,IAAK,IAAIlG,KAAQ9B,KAAKuL,KAAK4E,OACvBrO,EAAKmI,UAAYnI,EAAKzB,MACtByB,EAAKzB,QAAU,EAGfL,KAAKuL,KAAK4E,OAAOvL,OAAS,GAAK5E,KAAKuL,KAAK4E,OAAO,GAAG9P,MAAQL,KAAKuL,KAAKxI,MACrE/C,KAAKuL,KAAK4E,OAAO,GAAG9P,MAAQL,KAAKuL,KAAKxI,IAC9C,CAEA,YAAAkF,GACI4B,MAAM5B,eAENjI,KAAK+V,SAAW,IAAI,EAAAK,SAASpW,KAAK+G,OAC9B,CACIxF,GAAI,GACJG,EAAG,GACH+D,KAAM,EAAA2E,cAAcI,KACpB+H,MAAO,CACH,CACI9M,KAAM,EAAA2E,cAAcC,UACpBiJ,OAAQ,KACJ,EAAA+C,OAAOC,MAAMtW,KAAK+G,OAAQ/G,KAAKkG,SAASqQ,WAKhE,EA9LJ,kB,uDAiCQ,MAAMtK,EAAM,EAAAC,OAAOjB,WAAWjL,KAAK+G,QAE7B1G,EAAQL,KAAKuL,KAAK4E,OAAO,IAAM,CAAEhQ,GAAI,EAAAsC,OAAO6B,SAE9CtE,KAAKsV,OAAS,EAAAC,YAAYrU,MAAQlB,KAAK4R,WAAWnR,SAASJ,EAAMF,GAAI,EAAAc,cAAcC,QACnFlB,KAAK4R,WAAW1R,IAAIG,EAAMF,GACtB,EAAAc,cAAcC,KACd,CACIiB,SAAU,IACVI,YAAY,EACZF,KAAMH,IACF7B,EAAM6J,QAAU7J,EAAMA,MAAQ6B,KAI9C+J,EAAIQ,YAEJR,EAAIY,YAAcxM,EAAMsC,MACxBsJ,EAAIgM,QAAU,QACdhM,EAAIc,UAAY,GAEhB,MAAMsK,EAAQhX,EAAM6J,QAAUlK,KAAKuL,KAAKxI,IACpC+T,GAASQ,MAAMD,GAAS,EAAIA,GAAS7V,KAAK6L,GAE1ChN,EAAMA,QACN4L,EAAImB,IAAI,EAAApN,KAAI,OAASuB,EAAG,EAAAvB,KAAI,OAAS0B,EAAG,EAAA1B,KAAI,OAAUwB,KAAK6L,GAAIyJ,EAAQtV,KAAK6L,IAC5EpB,EAAIgB,UAGRhB,EAAIQ,YAEJR,EAAIc,UAAY,EAChBd,EAAIgM,QAAU,SAEd,IAAIsB,EAAmB,EACnBC,EAAahY,KAAK6L,GAEtB,KAAOmM,GAAc,GAAG,CACpB,IAAIC,EAAeD,EAAahY,KAAK6L,GAAK,GAAK,EAC1B7L,KAAK6L,GAAK,GACVmM,EAErB,MAAMoM,EAAYzY,IACP,CACH5L,EAAG,EAAAvB,KAAI,OAASuB,GAAK,EAAAvB,KAAI,OAAWmN,GAAU3L,KAAKsW,IAAItW,KAAK6L,GAAKkM,GACjE7X,EAAG,EAAA1B,KAAI,OAAS0B,GAAK,EAAA1B,KAAI,OAAWmN,GAAU3L,KAAKuW,IAAIvW,KAAK6L,GAAKkM,KAIzE,IAAIsM,EAASD,EAAS,IAClBpN,EAASoN,EAAS,IAClBE,EAASF,EAAS,KAEtB,MAAMjZ,EAAUnL,KAAK6L,GAAKmM,EAAa1C,EAAQ,KAAO,KAEtD7K,EAAIiH,OAAO2S,EAAOtkB,EAAGskB,EAAOnkB,GAC5BuK,EAAIkH,OAAOqF,EAAOjX,EAAGiX,EAAO9W,GAC5BuK,EAAIY,YAAc,EAAAxF,MAAM5B,KAAOkH,EAC/BV,EAAIgB,SAEJ,EAAAK,WAAW+E,QAAQpG,GACnBA,EAAIe,UAAY,EAAA3F,MAAM5B,KAAOkH,EAC7BV,EAAIsB,UAAUvN,KAAKuL,KAAKxI,IAAMyW,EAAahY,KAAK6L,GAAKrN,KAAKuL,KAAKxI,KAAKE,WAAY6iB,EAAOvkB,EAAGukB,EAAOpkB,GAEjG6X,GAAoBE,EAEpBD,GAAchY,KAAK6L,GAAK,EAC5B,CACJ,EAAC,WAEe1B,EAAmBtL,GAC/B,IAAKsL,EACD,OAAO,EAEX,MAmBM4O,EAAQva,KAAKwa,iBAAiB7O,GAChC8O,EAAQ,CACJlZ,EAAGgZ,EAAMhZ,EAAI,EAAAvB,KAAI,OAASuB,EAC1BG,EAAG6Y,EAAM7Y,EAAI,EAAA1B,KAAI,OAAS0B,GAGlC,OAAS1B,KAAK+V,UAAUpE,UAzBR,CAAC4I,IACb,IAAI/W,EAAIhC,KAAKmZ,MAAMJ,EAAM7Y,EAAI,EAAA1B,KAAI,OAAS0B,EAAG6Y,EAAMhZ,EAAI,EAAAvB,KAAI,OAASuB,GAChEiC,EAAI,IACJA,GAAe,EAAVhC,KAAK6L,IAEd,MAAMgK,EAAQhX,EAAM6J,QAAUlK,KAAKuL,KAAKxI,IACpC+T,GAASQ,MAAMD,GAAS,EAAIA,GAAS7V,KAAK6L,GAE9C,OAAO7J,EAAIhC,KAAK6L,IAAM7L,KAAK6L,GAAKyJ,GAAStT,GAkBnCwX,CAAQT,IAfK,CAAC9W,IACpB,MAAMsiB,EAAc,EAAA/lB,KAAI,OAAW,GAC/BgW,EAAc,EAAAhW,KAAI,OAAW,GAEjC,OAAOyD,EAAElC,EAAIkC,EAAElC,EAAIkC,EAAE/B,EAAI+B,EAAE/B,GAAKqkB,EAAcA,GACpCtiB,EAAElC,EAAIkC,EAAElC,EAAIkC,EAAE/B,EAAI+B,EAAE/B,GAAKsU,EAAcA,GAW3CsE,CAAeG,EAC7B,EAAC,aAGG,MAAMuL,EAAWhmB,KAAK+G,OAAOyF,MAAQxM,KAAK+G,OAAOqC,OAC9BpJ,KAAK+G,OAAOqC,OAAS,IACrBpJ,KAAK+G,OAAOyF,MAE/B,EAAAxM,KAAI,EAAWgmB,EAAW,EAAC,KAE3B,EAAAhmB,KAAI,EAAW,CACXuB,EAAGvB,KAAK+G,OAAOyF,MAAQ,EACvB9K,EAAG1B,KAAK+G,OAAOqC,OAAS,EAAApJ,KAAI,OAAW,GAC1C,IACL,C,iFCpKJ,eACA,QACA,SACA,SACA,SAEA,MAAaqW,EACT,YAAOC,CAAMvP,EAA2BwP,GACpCY,sBAAsB,KAClB,MAAMlL,EAAM,EAAAC,OAAOjB,WAAWlE,GAE9B,IAAIyF,EAAQ,EAAA/J,OAAOqB,YAAY,EAAAsG,cAAcC,WAAa,GAGtDmC,EAAQ,KACRA,EAAQ,IAEZP,EAAI4T,UAAU9Y,EAAOyF,MAAQA,EAAO,EAAGA,EAL1B,IAOb,IAAIyZ,EAAY,EACZC,EAAa,EAEjB,MAAMlN,EAAY,IAAIC,YAAYhN,EAAIiN,aAAa,EAAG,EAAGnS,EAAOyF,MAAOzF,EAAOqC,QAAQmC,KAAK4N,QAE3F,IAAIL,GAAS,EAEb,IAAK,IAAIzX,EAAI,EAAGA,EAAI0F,EAAOyF,MAAOnL,IAAK,CACnC,IAAK,IAAImiB,EAAI,EAAGA,EAAIzc,EAAOqC,OAAQoa,IAC/B,GAAI,EAAAtX,OAAOb,YAAY2N,EAAU3X,EAAImiB,EAAIzc,EAAOyF,QAAS,CACrDsM,GAAS,EACT,KACJ,CAGJ,GAAIA,EACA,MAEJmN,GACJ,CAEAnN,GAAS,EAET,IAAK,IAAIzX,EAAI0F,EAAOyF,MAAOnL,GAAK,EAAGA,IAAK,CACpC,IAAK,IAAImiB,EAAI,EAAGA,EAAIzc,EAAOqC,OAAQoa,IAC/B,GAAI,EAAAtX,OAAOb,YAAY2N,EAAU3X,EAAImiB,EAAIzc,EAAOyF,QAAS,CACrDsM,GAAS,EACT,KACJ,CAGJ,GAAIA,EACA,MAEJoN,GACJ,CAEID,EAAY,IACZA,GAAa,GACbC,EAAa,IACbA,GAAc,GAEdD,EAAYC,IACZD,EAAYC,GACZA,EAAaD,IACbC,EAAaD,GAEjB,IAAIE,EAAoB7f,SAAS0H,cAAc,EAAAC,IAAI/B,QACnDia,EAAkB3Z,MAAQzF,EAAOyF,MAAQyZ,EAAYC,EACrDC,EAAkB/c,OAASrC,EAAOqC,OAElC,MAAMgd,EAAU,EAAAla,OAAOjB,WAAWkb,GAElCC,EAAQpZ,UAAY,EAAA3F,MAAMlC,WAC1BihB,EAAQ/G,SAAS,EAAG,EAAGtY,EAAOyF,MAAOzF,EAAOqC,QAE5Cgd,EAAQtG,UAAU/Y,GAASkf,EAAW,GAEtC5P,EAAOgQ,QAAQ9P,GAAS,SAAW,OAC/B4P,EAAkBG,UAAU,eAExC,CAEA,YAAO9P,CAAM4N,EAAyB7N,GAClC,IAAIiO,EAAOJ,EAAM5U,iBAAiB,MAC9B+W,EAAM,GAEV,IAAK,IAAIllB,EAAI,EAAGA,EAAImjB,EAAK5f,OAAQvD,IAAK,CAClC,IAAImlB,EAAM,GACNC,EAAOjC,EAAKnjB,GAAGmO,iBAAiB,UAEpC,IAAK,IAAIgU,EAAI,EAAGA,EAAIiD,EAAK7hB,OAAQ4e,IAAK,CAClC,IAAIjY,EAAOkb,EAAKjD,GAAGrV,UACAtL,QAAQ,iBAAkB,IAC1BA,QAAQ,WAAY,KAEvC0I,EAAOA,EAAK1I,QAAQ,KAAM,MAC1B2jB,EAAIlW,KAAK,IAAM/E,EAAO,IAC1B,CAEAgb,EAAIjW,KAAKkW,EAAInjB,KAAK,KACtB,CAEAgT,EAAOgQ,QAAQ9P,GAAS,SAAW,OAC/BgQ,EAAIljB,KAAK,MACT,+BAAiCqjB,mBAAmBH,EAAIljB,KAAK,QAC7D,EACR,CAEA,aAAOgjB,CAAO1V,EAAcgW,EAAiBC,EAA2BC,GACpE,GAAiC9gB,MAA7BY,OAAOmgB,mBAAiC,CACxC,MAIMpV,EAAU,CACZqV,cAAepW,EACfqW,MAAO,CACH,CACIC,OARGJ,EACE,CAAE,WAAY,QACd,CAAE,UAAW,UAS1BK,wBAAwB,GAG5B,SAASC,EAAOC,GACZ,MAAMC,EAAaC,KAAKF,EAAQG,MAAM,KAAK,IACvCC,EAAaJ,EAAQG,MAAM,KAAK,GAC3BA,MAAM,KAAK,GACXA,MAAM,KAAK,GAChBpO,EAAS,IAAIsO,YAAYJ,EAAWziB,QACpC8iB,EAAa,IAAIC,WAAWxO,GAEhC,IAAK,IAAI9X,EAAI,EAAGA,EAAIgmB,EAAWziB,OAAQvD,IACnCqmB,EAAWrmB,GAAKgmB,EAAWhjB,WAAWhD,GAE1C,OAAO,IAAIumB,KAAK,CAACzO,GAAS,CAAE/Y,KAAMonB,GACtC,CAEA7gB,OAAOmgB,mBAAmBpV,GACnB4P,KAAKuG,IACFA,EAAWC,iBACAxG,KAAKyG,IACFA,EAAeC,MAAMnB,EAASF,EAAUQ,EAAOR,IAChCrF,KAAK,IAAMyG,EAAeE,YAGrE,KAAO,CACH,IAAIC,EAAW5hB,SAAS0H,cAAc,EAAAC,IAAIka,GAC1CD,EAAStB,KAAOA,GAAQD,EACxBuB,EAASA,SAAWvX,EACpBuX,EAASE,OACb,CACJ,EAlJJ,U,kFCNA,MAAsB3X,GAAtB,cACW,EAAAwG,OAAU5W,GACbA,GAAOgoB,oBAAetiB,EAAW,CAC7BuiB,sBAAuB,EACvBC,sBAAuB,KACrB,GAEH,EAAA7X,KAAQrQ,GACXA,EAAMmoB,oB,6lDCRd,eACA,SACA,OACA,QAEA,SACA,SACA,YACA,SAEA,eAaI,WAAAzoB,CAAYgH,EAA2B2K,G,YAZvC,mBAEA,mBAEA,mBAIA,mBAEA,mBAGI,EAAA1R,KAAI,EAAW+G,EAAM,KACrB,EAAA/G,KAAI,EAAY0R,EAAO,KAEvB1R,KAAK4R,WAAa,IAAI,EAAA9R,WAEtB,EAAAE,KAAI,SAAgB,KAApBA,MAEA,MAAMwM,EAAQ,EAAA/J,OAAOqB,YAAY,EAAA9D,KAAI,OAAUyF,MAAQ,GAGvD,EAAAzF,KAAI,EAAsB,CACtBuB,EAAG,EAAAvB,KAAI,OAAUuB,EAAIiL,EAAQ,EAAAxM,KAAI,OAASwM,MACrC,EAAAxM,KAAI,OAASwM,MAAQA,EACrB,EAAAxM,KAAI,OAAUuB,EAAI,EAChB,EAAAvB,KAAI,OAASwM,MAAQ,EAAAxM,KAAI,OAAUuB,EAAIiL,EACvC,EAAAxM,KAAI,OAAUuB,EACrBG,EAAG,EAAA1B,KAAI,OAAU0B,EARR,GAQqB,EAAA1B,KAAI,OAASoJ,OACtC,EAAApJ,KAAI,OAASoJ,OATT,GAUJ,EAAApJ,KAAI,OAAU0B,EAAI,EAChB,EAAA1B,KAAI,OAASoJ,OAAS,EAAApJ,KAAI,OAAU0B,EAXlC,GAYF,EAAA1B,KAAI,OAAU0B,EACrB8K,MAAOA,EACPpD,OAdS,IAeZ,IACL,CAEA,MAAAvC,CAAOgL,EAAuBC,GACrB,EAAA9R,KAAI,QACL,EAAAA,KAAI,SAAgB,KAApBA,MAEJ,MAAMiM,EAAM,EAAAC,OAAOjB,WAAW,EAAAjL,KAAI,QAElCiM,EAAIQ,YAEJ,MAAMsF,EAAY,CAAC7P,EAAoByJ,KACnC3L,KAAK4R,WAAWlR,OAAO,mBAAoBiL,GAE3CM,EAAIe,UAAY,EAAAvK,OAAOC,YAAY,EAAA2E,MAAMlC,YAAa3D,KAAK8B,MAAmB,GAAbpB,KA2CrE,OAxCI,EAAAlC,KAAI,SAAY,KAAhBA,KAAiB6R,IACjB,EAAA7R,KAAI,OAASuI,MAAMyJ,OAAS,EAAAvJ,OAAOyI,OAAOE,QAEtCU,GAAc,EAAA9R,KAAI,SAAY,KAAhBA,KAAiB8R,KAC/B,EAAA9R,KAAI,OAAUsT,SACdxB,OAAa/L,GAGjB/F,KAAK4R,WAAW1R,IAAI,mBAChB,EAAAe,cAAcgR,UACd,CACI9P,SAAU,IACVE,KAAMH,IACF6P,EAAU7P,EAAY,EAAAjB,cAAciR,gBAIhDlS,KAAK4R,WAAW1R,IAAI,mBAChB,EAAAe,cAAciR,WACd,CACItR,MAAO6O,EAAU0C,MAAMC,QACvBjQ,SAAU,IACVG,UAAU,EACVD,KAAMH,IACF6P,EAAU7P,EAAY,EAAAjB,cAAcgR,cAKpDhG,EAAIY,YAAc,EAAAxF,MAAMlC,WACxB8G,EAAIS,UAAU,EAAA1M,KAAI,OAAWuB,EAAG,EAAAvB,KAAI,OAAW0B,EAAG,EAAA1B,KAAI,OAAWwM,MAAO,EAAAxM,KAAI,OAAWoJ,OAAQ,GAC/F6C,EAAIiB,OAEJ,EAAAI,WAAW+E,QAAQpG,GACnBA,EAAIsB,SAAS,EAAAvN,KAAI,OAAUyF,KACvB,EAAAzF,KAAI,OAAWuB,EAAI,EAAAvB,KAAI,OAAWwM,MAAQ,EAC1C,EAAAxM,KAAI,OAAW0B,EAAI,EAAA1B,KAAI,OAAWoJ,OAAS,GAE/C,EAAApJ,KAAI,GAAW,EAAI,KAEZ8R,CACX,CAEA,MAAA3J,GACI,EAAAnI,KAAI,SAAgB,KAApBA,KACJ,G,iGAGI,EAAAA,KAAI,EAAmB,EAAAA,KAAI,OAAS8L,wBAAuB,KAE3D,EAAA9L,KAAI,OAAiBuB,GAAKwK,QAC1B,EAAA/L,KAAI,OAAiB0B,GAAKsK,OAC9B,EAAC,WAEWL,GACR,IAAKA,EACD,OAAO,EAEX,IAAIgI,EAAQhI,EAAMW,QAAU,EAAAtM,KAAI,OAAiBuB,EAAIwK,QACjD6H,EAAQjI,EAAMY,QAAU,EAAAvM,KAAI,OAAiB0B,EAAIsK,QAErD,OAAO2H,GAAS,EAAA3T,KAAI,OAAWuB,GAAKoS,GAAS,EAAA3T,KAAI,OAAWuB,EAAI,EAAAvB,KAAI,OAAWwM,OACrEoH,GAAS,EAAA5T,KAAI,OAAW0B,GAAKkS,GAAS,EAAA5T,KAAI,OAAW0B,EAAI,EAAA1B,KAAI,OAAWoJ,MACtF,C,cC/HJ,IAAYnI,EAcA0N,EAIAnH,EAUA2D,EAMA3E,EAcAgW,EAUAyB,EAQAzN,EAIAuM,EAYA9O,EAcAsH,E,4LAhGZ,SAAYtU,GACR,6BAEA,+BAEA,mBAEA,qBAEA,yCAEA,0CACH,CAZD,CAAYA,IAAa,gBAAbA,EAAa,KAczB,SAAY0N,GACR,aACH,CAFD,CAAYA,IAAS,YAATA,EAAS,KAIrB,SAAYnH,GACR,mBAEA,2BAEA,qBAEA,wBACH,CARD,CAAYA,IAAS,YAATA,EAAS,KAUrB,SAAY2D,GACR,mCAEA,0CACH,CAJD,CAAYA,IAAS,YAATA,EAAS,KAMrB,SAAY3E,GACR,uCAEA,cAEA,wBAEA,gBAEA,kBAEA,2BACH,CAZD,CAAYA,IAAM,SAANA,EAAM,KAclB,SAAYgW,GACR,uBAEA,mBAEA,iBAEA,oBACH,CARD,CAAYA,IAAW,cAAXA,EAAW,KAUvB,SAAYyB,GACR,qBAEA,mBAEA,sBACH,CAND,CAAYA,IAAQ,WAARA,EAAQ,KAQpB,SAAYzN,GACR,kBACH,CAFD,CAAYA,IAAY,eAAZA,EAAY,KAIxB,SAAYuM,GACR,mBAEA,qCAEA,uBAEA,iBAEA,sCACH,CAVD,CAAYA,IAAQ,WAARA,EAAQ,KAYpB,SAAY9O,GACR,kBAEA,QAEA,YAEA,kBAEA,gBAEA,iBACH,CAZD,CAAYA,IAAG,MAAHA,EAAG,KAcf,SAAYsH,GACR,mBAEA,kBACH,CAJD,CAAYA,IAAW,cAAXA,EAAW,I,4zBChGvB,cACA,SAEA,cAKI,WAAAxV,CAAY+N,EAAuB2a,G,YAFnC,mBAGIzoB,KAAK0oB,MAAQpiB,SAAS0H,cAAc,EAAAC,IAAI0a,QAExC3oB,KAAK0oB,MAAMpE,UAAUpkB,IAAI,WAErBuoB,IACAzoB,KAAK0oB,MAAMngB,MAAMiE,MAAQ,GAAGic,EAAKjc,UACjCxM,KAAK0oB,MAAMngB,MAAMa,OAAS,GAAGqf,EAAKrf,YAGtCpJ,KAAK0oB,MAAME,SAAW,IAAM5oB,KAAKioB,QAEjC3hB,SAASjE,KAAK8M,YAAYnP,KAAK0oB,OAE/B,EAAA1oB,KAAI,SAAW,KAAfA,MAEA,EAAAA,KAAI,SAAY,KAAhBA,KAAiB8N,EACrB,CAEA,IAAAoH,GACI,EAAAxP,OAAOG,iBAAiB7F,KAAK0oB,MAAO,EAAAvd,UAAU0d,iBAE9C7oB,KAAK0oB,MAAOI,WAChB,CAEA,KAAAb,GACI,EAAAviB,OAAOG,iBAAiB7F,KAAK0oB,MAAO,EAAAvd,UAAU0d,iBAE9C7oB,KAAK0oB,MAAOT,QAEZjoB,KAAK0oB,MAAOjN,SAEZzb,KAAK0oB,WAAQ3iB,CACjB,G,yCAGI,EAAAL,OAAOG,iBAAiB7F,KAAK0oB,MAAO,EAAAvd,UAAU0d,iBAE9C,IAAIE,EAAcziB,SAAS0H,cAAc,UAEzC+a,EAAYzE,UAAUpkB,IAAI,iBAC1B6oB,EAAY5a,UAAY,IAExBnO,KAAK0oB,MAAOvZ,YAAY4Z,GAExBA,EAAYvG,QAAU,IAAMxiB,KAAKioB,OACrC,EAAC,WAEWna,GACa/H,MAAjB,EAAA/F,KAAI,SACJ,EAAAA,KAAI,EAAYsG,SAAS0H,cAAc,EAAAC,IAAIC,KAAI,KAE/C,EAAAlO,KAAI,OAAUskB,UAAUpkB,IAAI,mBAE5BF,KAAK0oB,OAAOvZ,YAAY,EAAAnP,KAAI,SAGjB+F,MAAX+H,GACA,EAAA9N,KAAI,OAAUmP,YAAYrB,EAClC,C,qFCnEJ,eAEA,SAEA,MAAagP,UAAmB,EAAAnT,MAS5B,WAAA5J,CAAY6J,GACRC,QAHJ,KAAAmU,SAAqB,EAAAC,SAASG,MAK1BtU,OAAOC,OAAO/J,KAAM4J,EACxB,CAEA,MAAAI,CAAO9H,GACH2H,MAAMG,OAAO9H,EACjB,CAEA,cAAAiI,GAGI,OAFAN,MAAMM,kBAEC,CACX,CAEA,KAAA/C,GACIyC,MAAMzC,OACV,EA3BJ,c,ylDCHA,eACA,QACA,SAEA,SAEA,SACA,SACA,SACA,SACA,YACA,SACA,SAEA,MAAaf,UAAe,EAAAkV,WAWxB,WAAAxb,CAAY0U,GACR5K,MAAM4K,G,YAXV,mBAEA,mBAEA,mBAEA,mBAEA,KAAAyC,WAAqB,EAKjB,EAAAlX,KAAI,EAAUyU,EAAK,KAEnBzU,KAAKgpB,iBAEAhpB,KAAKkG,SAASqB,qBACf,EAAAvH,KAAI,EAAW,IAAI,EAAAipB,OAAOjpB,KAAK+G,OAC3B,CACIxF,GAAI,GACJG,EAAG,GACH+D,KAAM,EAAA2E,cAAchD,MACpBkM,OAAQ,KACJ,IAAK,IAAIjT,KAASL,KAAKkG,SAASqF,KAAK4E,OACjC9P,EAAM+G,WAEhB,KAEV,EAAApH,KAAI,EAAW,CACXuB,EAAG8E,EAAO6iB,kBAAkBlpB,KAAKkG,SAASqF,KAAK4E,OAAQnQ,KAAK+G,OAAOyF,OACnE9K,GAAI1B,KAAK+G,OAAOqC,OAAS/C,EAAOsW,gBAAgB3c,KAAKkG,SAASqF,KAAK4E,OAAQnQ,KAAK+G,OAAOyF,QAAU,GACpG,IACL,CAEA,MAAA3F,GACIgD,MAAMhD,SAEN,MAAMoF,EAAM,EAAAC,OAAOjB,WAAWjL,KAAK+G,QAEnC,IAAIoiB,EAAY,CAAE5nB,EAAG,GAAIG,EAAG,IAE5B1B,KAAK+G,OAAOwB,MAAMyJ,OAAS,EAAAvJ,OAAOyI,OAAOC,QAEzC,EAAA7D,WAAW+E,QAAQpG,GACnBA,EAAIsH,UAAY,QAChBtH,EAAIuH,aAAe,aAEnBvH,EAAI8F,UAAU,EAAA/R,KAAI,OAASuB,EAAG,EAAAvB,KAAI,OAAS0B,GAE3C,EAAA1B,KAAI,EAAe,EAAC,KAEpB,IAAK,MAAMK,KAASL,KAAKkG,SAASqF,KAAK4E,OAAOa,OAAOvN,IAAMA,EAAE2lB,cACzDD,EAAY,EAAAnpB,KAAI,SAAM,KAAVA,KAAWK,EAAO8oB,EAAU5nB,EAAG4nB,EAAUznB,GAEzDuK,EAAI8F,WAAW,EAAA/R,KAAI,OAASuB,GAAI,EAAAvB,KAAI,OAAS0B,GAExC1B,KAAKkX,WACNC,sBAAsBnX,KAAK6G,OAAOuQ,KAAKpX,OAE3CA,KAAKyX,aAAe,EAAAzX,KAAI,QAAU6G,OAAO7G,KAAKmV,iBAAkBnV,KAAKyX,cAErEzX,KAAKsV,MAAQ,EAAAC,YAAYC,IAC7B,CA2HA,OAAAxO,GACIhH,KAAKkX,WAAY,EAEjBlX,KAAK+G,OAAO0U,QAChB,CAEA,OAAArT,GACIpI,KAAKsV,MAAQ,EAAAC,YAAYrU,IAC7B,CAEA,MAAAiH,GACInI,KAAKgpB,iBACL,EAAAhpB,KAAI,QAAUmI,SACdnI,KAAKkI,gBACT,CAEA,cAAA8gB,GACI,OAAQhpB,KAAKkG,SAASqW,aAClB,KAAK,EAAAC,YAAYE,OACjB,QACI1c,KAAK+G,OAAOyF,MAAQxM,KAAKkG,SAASsG,MAClCxM,KAAK+G,OAAOqC,OAAS/C,EAAOsW,gBAAgB3c,KAAKkG,SAASqF,KAAK4E,OAAQnQ,KAAK+G,OAAOyF,OAEnFxM,KAAKmG,KAAKoC,MAAMK,cAAgB,EAAAH,OAAOI,cAAcC,OAErD,MAEJ,KAAK,EAAA0T,YAAYC,IACbzc,KAAK+G,OAAOyF,MAAQxM,KAAKkG,SAASsG,MAClCxM,KAAK+G,OAAOqC,OAAS/C,EAAOsW,gBAAgB3c,KAAKkG,SAASqF,KAAK4E,OAAQnQ,KAAK+G,OAAOyF,OAEnFxM,KAAKmG,KAAKoC,MAAMK,cAAgB,EAAAH,OAAOI,cAAcwI,cAErD,MAEJ,KAAK,EAAAmL,YAAYI,KACb5c,KAAK+G,OAAOyF,MAAQ,IACpBxM,KAAK+G,OAAOqC,OAASpJ,KAAKkG,SAASkD,OAEnCpJ,KAAKmG,KAAKoC,MAAMK,cAAgB,EAAAH,OAAOI,cAAcyI,IAErD,MAEJ,KAAK,EAAAkL,YAAYK,MACb7c,KAAK+G,OAAOyF,MAAQ,IACpBxM,KAAK+G,OAAOqC,OAASpJ,KAAKkG,SAASkD,OAEnCpJ,KAAKmG,KAAKoC,MAAMK,cAAgB,EAAAH,OAAOI,cAAc0I,WAIjE,CAEA,wBAAO2X,CAAkB/Y,EAAiB3D,GACtC,IAAIiG,EAAW,GAEf,IAAK,MAAMpS,KAAS8P,EAAOa,OAAOvN,IAAMA,EAAE2lB,cAAe,CACrD,MAAMC,EAAa,EAAA5mB,OAAOqB,YAAYzD,EAAMuQ,OAE5C,GAAI6B,EAAW4W,EAAa,IAAM7c,EAAQ,IACtC,MAEJiG,GAAY4W,EAAa,EAC7B,CAEA,OAAO7c,EAAQ,EAAIiG,EAAW,CAClC,CAEA,sBAAOkK,CAAgBxM,EAAiB3D,GACpC,IAAI+T,EAAQ,EACRpc,EAAM,GACNgJ,EAAS9G,EAAO6iB,kBAAkB/Y,EAAQ3D,GAE9C,IAAK,MAAMnM,KAAS8P,EAAOa,OAAOvN,IAAMA,EAAE2lB,cAAe,CACrD,MAAMC,EAAa,EAAA5mB,OAAOqB,YAAYzD,EAAMuQ,OAExCzM,EAAMklB,EAAa,IAAM7c,EAAQ,GAAKW,IACtChJ,EAAM,GACNoc,KAGJpc,GAAOklB,EAAa,EACxB,CAEA,OAAO,GAAa,GAAR9I,EAA2B,GAAbA,EAAQ,EACtC,EAhRJ,W,iFAkEUlgB,EAAckB,EAAWG,G,MAC3B,MAAMuK,EAAM,EAAAC,OAAOjB,WAAWjL,KAAK+G,QAE7BoF,EAAY,EAAA1J,OAAOqB,YAAYzD,EAAMuQ,OAGvCrP,EAAI,GAAK4K,GAAanM,KAAK+G,OAAOyF,MAAQ,GAAK,EAAAxM,KAAI,OAASuB,IAC5DA,EAAI,GACJG,GAAK,IAGT,IAAI4nB,EAAQ/nB,EAPO,IAQfgoB,EAAQ7nB,EAAI8nB,EARG,EASfC,EAAQD,GAA8Brd,EAAY,GAGtD,MAAMud,EAAW/d,IACb,IAAKA,EACD,OAAO,EAEX,MAAMge,EAAKhe,EAAMW,QAAUtM,KAAKqc,eAAe9a,EAAIwK,QAAU,EAAA/L,KAAI,OAASuB,EACtEqoB,EAAKje,EAAMY,QAAUvM,KAAKqc,eAAe3a,EAAIsK,QAAU,EAAAhM,KAAI,OAAS0B,EAExE,OAAOioB,GAAML,GAASK,GAAML,EAAQG,GAC1BG,GAAML,GAASK,GAAML,EAVvB,IAaNxX,EAAY,CAAC7P,EAAoByJ,KACnC3L,KAAK4R,WAAWlR,OAAOL,EAAMF,GAAIwL,GAEjCM,EAAIQ,YAEJR,EAAIS,UAAU4c,EAAOC,EAAOE,EAlBpB,GAVO,GA8Bfxd,EAAIe,UAAY,EAAAvK,OAAOC,YAAY,EAAA2E,MAAMkN,iBAAkB/S,KAAK8B,OAAO,GAAKpB,IAC5E+J,EAAIiB,QAgFR,OA7EAlN,KAAK4R,WAAW1R,IAAIG,EAAMF,GACtB,EAAAc,cAAc0W,MACd,CACIxV,SAAUsN,EAAU3P,WAAWwJ,OAC/B/G,YAAY,EACZH,OAAQ,IACwB2D,MAArB/F,KAAKyX,eACDiS,EAAQ1pB,KAAKyX,eACTpX,aAAiB,EAAAqJ,QACI,IAAlBrJ,EAAM6J,SACN7J,EAAMA,QAAUA,EAAM6J,UAC9B7J,EAAM8J,iBAEpB9H,KAAMH,IACF7B,EAAM2J,OAAO9H,GAEK,GAAdA,IACAlC,KAAKyX,aAAe,IAAIG,aAAa,EAAApR,OAAOmR,WAIxD+R,EAAQ1pB,KAAKmV,mBACbnV,KAAK4R,WAAW1R,IAAIG,EAAMF,GACtB,EAAAc,cAAcgR,UACd,CACI9P,SAAUsN,EAAU3P,WAAW2J,OAC/BpH,KAAMH,IACF6P,EAAU7P,EAAY,EAAAjB,cAAciR,eAI3C7R,EAAM4J,WACP,EAAAjK,KAAA,OAAAA,KAAA,YAAkB,KAElB,EAAAA,KAAI,OAAQmH,UAAU9G,IAG1BL,KAAK+G,OAAOwB,MAAMyJ,OAAS,EAAAvJ,OAAOyI,OAAOE,UAEzCpR,KAAK4R,WAAW1R,IAAIG,EAAMF,GACtB,EAAAc,cAAciR,WACd,CACItR,MAAO6O,EAAU0C,MAAMC,QACvBjQ,SAAUsN,EAAU3P,WAAW2J,OAC/BnH,UAAU,EACVD,KAAMH,IACF6P,EAAU7P,EAAY,EAAAjB,cAAcgR,cAIxB,GAApB,EAAAjS,KAAI,QACJ,EAAAA,KAAI,OAAQmH,aAGpB8E,EAAIQ,YAEJR,EAAImB,IAAI7L,EAAI,EAAGG,EAAI,EAAG,EAAG,EAAG,EAAIF,KAAK6L,IACrCpB,EAAIe,UAAY3M,EAAM4J,SAAW,EAAAxH,OAAOU,UAAU9C,EAAMsC,OAAStC,EAAMsC,MACvEsJ,EAAIiB,OAEJjB,EAAIe,UAAY,EAAA3F,MAAM5B,KAClBpF,EAAM4J,WACNgC,EAAIe,WAAa,MAErBf,EAAIsB,SAASlN,EAAMuQ,MAAOrP,EAAIioB,EAAqB,EAAG9nB,EAAI,GAE1DH,GAAK,GAEDlB,EAAM4J,WACNgC,EAAIiH,OAAO3R,EAAI,GAAIG,EAAI,GACvBuK,EAAIkH,OAAO5R,EAAI4K,EAAY,GAAIzK,EAAI,GACnCuK,EAAIY,YAAc,EAAAxF,MAAM5B,KAAO,KAC/BwG,EAAIgB,UAKD,CACH1L,EAHJA,GAAK4K,EAAY,GAIbzK,EAAGA,EAEX,C,+ECxMJ,MAAayZ,GAAb,WACoB,EAAAD,YAAc,E,GCA9B2O,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBhkB,IAAjBikB,EACH,OAAOA,EAAaC,QAGrB,IAAIC,EAASL,EAAyBE,GAAY,CAGjDE,QAAS,CAAC,GAOX,OAHAE,EAAoBJ,GAAUK,KAAKF,EAAOD,QAASC,EAAQA,EAAOD,QAASH,GAGpEI,EAAOD,OACf,C,MCtBA,cAGA,SAASI,IACT,CAEAA,EAAQ5V,MAAQ,SAASxO,EAAsBC,GAC3C,OAAO,IAAI,EAAAokB,MAAMrkB,EAASC,EAC9B,EAGAS,OAAO0jB,QAAUA,C","sources":["webpack://charts/./src/Animations.ts","webpack://charts/./src/Helper.ts","webpack://charts/./src/types/TooltipValue.ts","webpack://charts/./src/helpers/Errors.ts","webpack://charts/./src/Chart.ts","webpack://charts/./src/types/Color.ts","webpack://charts/./src/static/constants/Animations.ts","webpack://charts/./src/types/Sector.ts","webpack://charts/./src/static/TextResources.ts","webpack://charts/./src/helpers/Canvas.ts","webpack://charts/./src/Tooltip.ts","webpack://charts/./src/static/ThemeOptions.ts","webpack://charts/./src/types/data/PlotData.ts","webpack://charts/./src/static/constants/Styles.ts","webpack://charts/./src/Dropdown.ts","webpack://charts/./src/Theme.ts","webpack://charts/./src/render/CircularRenderer.ts","webpack://charts/./src/types/base/Renderer.ts","webpack://charts/./src/types/data/TreeData.ts","webpack://charts/./src/types/data/CircularData.ts","webpack://charts/./src/types/base/Value.ts","webpack://charts/./src/render/PlotRenderer.ts","webpack://charts/./src/static/constants/Dates.ts","webpack://charts/./src/helpers/TextStyles.ts","webpack://charts/./src/types/base/Renderable.ts","webpack://charts/./src/render/TreeRenderer.ts","webpack://charts/./src/Decomposition.ts","webpack://charts/./src/static/constants/Index.ts","webpack://charts/./src/render/GaugeRenderer.ts","webpack://charts/./src/Export.ts","webpack://charts/./src/helpers/Formatter.ts","webpack://charts/./src/Button.ts","webpack://charts/./src/static/Enums.ts","webpack://charts/./src/Modal.ts","webpack://charts/./src/types/PlotSeries.ts","webpack://charts/./src/Legend.ts","webpack://charts/./src/static/constants/Values.ts","webpack://charts/webpack/bootstrap","webpack://charts/./src/OCharts.ts"],"sourcesContent":["import { AnimationItem } from './types/AnimationItem'\nimport { AnimationType } from './static/Enums'\n\nexport class Animations {\n    #queue: Map<string, AnimationItem>\n\n    static transitionCurve: Map<number, number> = new Map()\n\n    constructor() {\n        this.#queue = new Map()\n    }\n\n    add(id: string, type: AnimationType, value: AnimationItem) {\n        const key = this.#getKey(id, type)\n        if (!this.#queue.has(key))\n            this.#queue.set(key, value)\n\n        this.#process(key)\n    }\n\n    contains(id: string, type: AnimationType): boolean {\n        return this.#queue.has(this.#getKey(id, type))\n    }\n\n    reload(id: string, type: AnimationType) {\n        if (this.contains(id, type)) {\n            let item = <AnimationItem>this.#queue.get(this.#getKey(id, type))\n\n            item.timer = new Date()\n        }\n    }\n\n    clear() {\n        this.#queue.forEach((_value, key) => !this.#is(key, AnimationType.Init) && this.#queue.delete(key))\n    }\n\n    #process(key: string) {\n        const item = <AnimationItem>this.#queue.get(key),\n            stamp = new Date(),\n            passed = stamp.getTime() - (item.timer ?? stamp).getTime(),\n            transition = Animations.getTransition(passed > item.duration ? 1 : passed / item.duration),\n            before = item.before ? item.before() : true\n\n        if (!item.timer && before)\n            item.timer = stamp\n\n        if (before)\n            item.body(item.backward ? 1 - transition : transition)\n\n        if (transition == 1 && (!before || item.continuous))\n            this.#queue.delete(key)\n    }\n\n    #getKey(id: string, type: number) {\n        return id + '_' + type\n    }\n\n    #is(key: string, type: number) {\n        return key.endsWith('_' + type)\n    }\n\n    static initializeTransitions() {\n        const valuesCount = 30000,\n            offset = .23,\n            p0 = { x: 0, y: 0 },\n            p1 = { x: 1 - offset, y: offset },\n            p2 = { x: offset, y: 1 - offset },\n            p3 = { x: 1, y: 1 }\n\n        for (let i = 0; i < valuesCount; i++) {\n            const t = (i + 1) / valuesCount\n\n            let x = Math.pow(1 - t, 3) * p0.x\n                    + 3 * Math.pow(1 - t, 2) * p1.x * t\n                    + 3 * (1 - t) * Math.pow(t, 2) * p2.x\n                    + Math.pow(t, 3) * p3.x,\n                y = Math.pow(1 - t, 3) * p0.y\n                    + 3 * Math.pow(1 - t, 2) * p1.y * t\n                    + 3 * (1 - t) * Math.pow(t, 2) * p2.y\n                    + Math.pow(t, 3) * p3.y\n\n            Animations.transitionCurve.set(+x.toFixed(4), y)\n        }\n\n        Animations.transitionCurve.set(0, 0)\n    }\n\n    static getTransition(value: number): number {\n        return Animations.transitionCurve.get(+value.toFixed(4)) ?? 0\n    }\n}","import { Color } from './types/Color'\n\nexport class Helper {\n    static adjustColor(color: string, amount: number) {\n        return '#' + color.replace(/^#/, '').replace(/../g, color => ('0' + Math.min(255, Math.max(0, parseInt(color, 16) + amount)).toString(16)).slice(-2))\n    }\n\n    static grayScale(color: string) {\n        return '#' + Array(4).join(Math.round([.3, .59, .11].reduce((a, v, i) => a + v * parseInt(color[2 * i + 1] + color[2 * i + 2], 16), 0) / 3).toString(16).padStart(2, '0'))\n    }\n\n    static randomColor() {\n        let letters = '0123456789ABCDEF',\n            color = '#'\n        for (let i = 0; i < 6; i++)\n            color += letters[Math.floor(Math.random() * 16)]\n\n        return color\n    }\n\n    static stringWidth(str: string, font?: number) {\n        const widths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2796875, 0.2765625, 0.3546875, 0.5546875, 0.5546875, 0.8890625, 0.665625, 0.190625, 0.3328125, 0.3328125, 0.3890625, 0.5828125, 0.2765625, 0.3328125, 0.2765625, 0.3015625, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.2765625, 0.2765625, 0.584375, 0.5828125, 0.584375, 0.5546875, 1.0140625, 0.665625, 0.665625, 0.721875, 0.721875, 0.665625, 0.609375, 0.7765625, 0.721875, 0.2765625, 0.5, 0.665625, 0.5546875, 0.8328125, 0.721875, 0.7765625, 0.665625, 0.7765625, 0.721875, 0.665625, 0.609375, 0.721875, 0.665625, 0.94375, 0.665625, 0.665625, 0.609375, 0.2765625, 0.3546875, 0.2765625, 0.4765625, 0.5546875, 0.3328125, 0.5546875, 0.5546875, 0.5, 0.5546875, 0.5546875, 0.2765625, 0.5546875, 0.5546875, 0.221875, 0.240625, 0.5, 0.221875, 0.8328125, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.3328125, 0.5, 0.2765625, 0.5546875, 0.5, 0.721875, 0.5, 0.5, 0.5, 0.3546875, 0.259375, 0.353125, 0.5890625]\n        const avg = 0.5279276315789471\n        return Array.from(str).reduce((acc, cur) => acc + (widths[cur.charCodeAt(0)] ?? avg), 0) * (font || 14)\n    }\n\n    static guid() {\n        const S4 = () => (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1)\n        return (S4() + S4() + '-' + S4() + '-4' + S4().slice(0, 3) + '-' + S4() + '-' + S4() + S4() + S4()).toLowerCase()\n    }\n\n    static hexToRgb(hex: string): Color {\n        if (hex.length > 4) {\n            const value = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n            if (value)\n                return {\n                    r: parseInt(value[1], 16),\n                    g: parseInt(value[2], 16),\n                    b: parseInt(value[3], 16)\n                }\n        } else {\n            const value = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i.exec(hex)\n            if (value)\n                return {\n                    r: parseInt(value[1] + value[1], 16),\n                    g: parseInt(value[2] + value[2], 16),\n                    b: parseInt(value[3] + value[3], 16)\n                }\n        }\n\n        return new Color()\n    }\n\n    static isColorVisible(background: string, foreground: string) {\n        const backgroundAsRgb = Helper.hexToRgb(background),\n            foregroundAsRgb = Helper.hexToRgb(foreground),\n            value = .77\n\n        return (backgroundAsRgb.r + backgroundAsRgb.g + backgroundAsRgb.b) / (foregroundAsRgb.r + foregroundAsRgb.g + foregroundAsRgb.b) < value\n    }\n\n    static isISOString(str: string) {\n        return /\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+/.test(str)\n    }\n}","export class TooltipValue {\n    text: string | undefined\n\n    color: string | undefined\n\n    constructor(text?: string, color?: string) {\n        this.text = text\n        this.color = color\n    }\n}","import { ErrorType } from '../static/Enums'\n\nexport abstract class Errors {\n    static throw(error: ErrorType): never {\n        throw new Error(error)\n    }\n\n    static throwIsUndefined(object: any, error: ErrorType) {\n        if (object == undefined)\n            Errors.throw(error)\n    }\n}","import { ChartSettings } from './types/ChartSettings'\nimport { Renderer } from './types/base/Renderer'\nimport { Data } from './types/interfaces/Data'\nimport { Legend } from './Legend'\nimport { Value } from './types/base/Value'\nimport { PlotRenderer } from './render/PlotRenderer'\nimport { CircularRenderer } from './render/CircularRenderer'\nimport { GaugeRenderer } from './render/GaugeRenderer'\nimport TreeRenderer from './render/TreeRenderer'\nimport { Animations } from './Animations'\nimport { Theme } from './Theme'\nimport { Styles } from './static/constants/Styles'\nimport { ChartType, Events } from './static/Enums'\n\nexport class Chart {\n    node: HTMLElement\n\n    settings: ChartSettings\n\n    #renderer: Renderer<Data>\n\n    #legend: Legend\n\n    #observer: ResizeObserver\n\n    constructor(context: HTMLElement, settings: ChartSettings) {\n        this.#initialize(settings)\n\n        this.node = context\n        this.settings = settings\n\n        this.#applyStyles()\n        this.#prepareSettings()\n\n        if (settings.enableLegend)\n            this.#legend = new Legend(this)\n\n        document.addEventListener(Events.VisibilityChanged, () => this.#renderer.resetMouse())\n        window.addEventListener(Events.Blur, () => this.#renderer.resetMouse())\n    }\n\n    render() {\n        this.#renderer.render()\n        this.#legend?.render()\n\n        this.#observer = new ResizeObserver(() => {\n            if (this.#renderer.canvas)\n                this.#resize()\n            else\n                this.destroy()\n        })\n        this.#observer.observe(this.node)\n\n        this.#refresh()\n    }\n\n    destroy() {\n        this.#renderer.destroy()\n        this.#legend?.destroy()\n\n        this.#observer.disconnect()\n    }\n\n    highlight(value?: Value) {\n        this.#renderer.highlight(value)\n    }\n\n    reset() {\n        Theme.reset()\n\n        this.#initialize(this.settings)\n    }\n\n    #prepareSettings() {\n        this.settings.enableTooltip = !this.settings.disableInteractions && this.settings.enableTooltip\n\n        switch (this.settings.type) {\n            case ChartType.Plot:\n                this.#renderer = new PlotRenderer(this)\n                break\n\n            case ChartType.Circular:\n                this.#renderer = new CircularRenderer(this)\n                break\n\n            case ChartType.Gauge:\n                this.#renderer = new GaugeRenderer(this)\n                break\n\n            case ChartType.TreeMap:\n                this.#renderer = new TreeRenderer(this)\n                break\n        }\n\n        this.#renderer.prepareSettings()\n\n        if (!this.settings.disableInteractions) {\n            this.#renderer.initDropdown()\n            this.#renderer.initAnimations()\n        }\n\n        this.#renderer.resize()\n    }\n\n    #refresh() {\n        this.#renderer.refresh()\n        this.#legend?.refresh()\n    }\n\n    #resize() {\n        this.#renderer.resize()\n        this.#legend?.resize()\n    }\n\n    #initialize(settings: ChartSettings) {\n        Theme.initialize(\n            () => this.#resize(),\n            settings.isDarkThemeFunction\n        )\n        Animations.initializeTransitions()\n    }\n\n    #applyStyles() {\n        this.node.style.display = Styles.Display.Flex\n        this.node.style.flexDirection = Styles.FlexDirection.Column\n        this.node.style.alignItems = Styles.AlignItems.Center\n        this.node.style.justifyContent = Styles.JustifyContent.Center\n        this.node.style.height = '100%'\n    }\n}","export class Color {\n    r: number\n\n    g: number\n\n    b: number\n}","export class Animations {\n    static circular = 335\n\n    static legend = 500\n\n    static tree = 250\n\n    static tooltip = 120\n\n    static button = 200\n}","import { Value } from './base/Value'\nimport { Point } from './Point'\n\nexport class Sector extends Value {\n    value: number\n\n    current: number\n\n    transition: number\n\n    translate: Point\n\n    innerRadius: number\n\n    constructor(obj: object) {\n        super()\n\n        Object.assign(this, obj)\n    }\n\n    toggle(transition: number) {\n        super.toggle(transition)\n\n        if (this.disabled)\n            this.current = this.value * (1 - transition)\n        else\n            this.current = this.value * transition\n    }\n\n    checkCondition(): boolean {\n        super.checkCondition()\n\n        return (this.current == 0 && !this.disabled) || this.value != 0\n    }\n\n    reset() {\n        super.reset()\n\n        this.current = this.value\n    }\n}","export class TextResources {\n    static exportPNG = 'Save as image...'\n\n    static decomposeToTable = 'Show as table...'\n\n    static reset = 'Reset'\n\n    static exportCSV = 'Save as table...'\n\n    static menu = 'Menu'\n\n    static allDataIsHidden = 'All data is hidden'\n\n    static other = 'Other'\n\n    static incorrectValues = 'Incorrect values'\n\n    static ThousandShort = 'K'\n\n    static MillionShort = 'M'\n\n    static BillionShort = 'B'\n\n    static Show = 'Show...'\n\n    static NoLabel = 'No Label'\n}","import { Errors } from './Errors'\nimport { ErrorType } from '../static/Enums'\n\nexport abstract class Canvas {\n    static getContext(canvas: HTMLCanvasElement): CanvasRenderingContext2D {\n        return canvas.getContext('2d', { willReadFrequently: true })\n               ?? Errors.throw(ErrorType.NullContext)\n    }\n\n    static isPixelBusy(pixel: number) {\n        return pixel & 0xff000000\n    }\n}","import { Value } from './types/base/Value'\nimport { Theme } from './Theme'\nimport { TextStyles } from './helpers/TextStyles'\nimport { Helper } from './Helper'\nimport { ChartSettings } from './types/ChartSettings'\nimport { TooltipValue } from './types/TooltipValue'\nimport { Data } from './types/interfaces/Data'\nimport { Canvas } from './helpers/Canvas'\nimport * as Constants from './static/constants/Index'\nimport { Styles } from './static/constants/Styles'\nimport { HTMLTooltipElement } from './types/extends/HTMLTooltipElement'\nimport { Attribute, Tag } from './static/Enums'\n\nexport class Tooltip {\n    canvas: HTMLCanvasElement\n\n    data: Data\n\n    readonly #enabled: boolean\n\n    readonly #isCustom: boolean\n\n    #canvasPosition: DOMRect\n\n    #template: HTMLTemplateElement\n\n    #inProgress: boolean\n\n    #toHide: boolean\n\n    #timer: Date | undefined\n\n    #lines: TooltipValue[]\n\n    constructor(canvas: HTMLCanvasElement, settings: ChartSettings) {\n        this.canvas = canvas\n        this.data = settings.data\n        this.#enabled = settings.enableTooltip\n        this.#isCustom = !!settings.templateId\n\n        if (this.#isCustom)\n            this.#template = <HTMLTemplateElement>document.getElementById(settings.templateId)\n\n        this.refresh()\n    }\n\n    render(condition: boolean, event: MouseEvent, lines: TooltipValue[], value?: Value) {\n        this.#hideAll()\n\n        if (!this.#enabled || !event)\n            return\n\n        if (condition || this.#inProgress || this.#toHide) {\n            if (condition)\n                this.#lines = lines\n\n            if (!this.#timer)\n                this.#timer = new Date()\n\n            if (!this.#toHide)\n                this.#inProgress = true\n            else if (this.#inProgress)\n                this.#timer = new Date()\n\n            if (this.#isCustom)\n                this.#renderCustom(event, value)\n            else\n                this.#renderRegular(event)\n\n            const opacityValue = this.#getOpacityValue()\n\n            if (this.#toHide && opacityValue >= 1) {\n                this.#inProgress = false\n                this.#toHide = false\n            }\n\n            if (this.#toHide && opacityValue <= 0) {\n                this.#inProgress = false\n                this.#toHide = false\n                this.#timer = undefined\n            }\n\n            if (!condition && this.#timer != undefined)\n                this.#toHide = true\n        } else {\n            this.#timer = undefined\n        }\n    }\n\n    #renderRegular(event: MouseEvent) {\n        const ctx = Canvas.getContext(this.canvas)\n\n        const textWidth = Math.max(...this.#lines.map(line => Helper.stringWidth(line.text ?? '') + (line.color ? 8 : 0)))\n\n        const padding = 6,\n            borderRadius = 6\n\n        let x = event.clientX - this.#canvasPosition.x + 10,\n            y = event.clientY - this.#canvasPosition.y + scrollY + 10\n\n        if (x + textWidth + 25 > this.#canvasPosition.width)\n            x = this.#canvasPosition.width - (textWidth + 25)\n\n        if (y + 4 + this.#lines.length * 18 > this.#canvasPosition.height)\n            y = this.#canvasPosition.height - 4 - this.#lines.length * 18\n\n        ctx.beginPath()\n        ctx.roundRect(x, y, textWidth + 24, 16 + 16 * this.#lines.length, borderRadius)\n        let opacity = Math.round(this.#getOpacityValue() * 255).toString(16),\n            baseOpacity = Math.round(this.#getOpacityValue() * 207).toString(16)\n        if (opacity.length == 1)\n            opacity = '0' + opacity\n        if (baseOpacity.length == 1)\n            baseOpacity = '0' + baseOpacity\n\n        ctx.strokeStyle = Theme.dropdownBorder + baseOpacity\n        ctx.lineWidth = 1\n        ctx.fillStyle = Theme.background + baseOpacity\n        ctx.stroke()\n        ctx.fill()\n\n        for (let line of this.#lines) {\n            let offset = 0\n\n            if (line.color) {\n                offset = 12\n\n                ctx.beginPath()\n                ctx.fillStyle = line.color + opacity\n                ctx.arc(x + 16, y + 17, 5, 0, Math.PI * 2)\n                ctx.fill()\n            }\n\n            TextStyles.tooltip(ctx)\n            ctx.fillStyle = Theme.text + opacity\n            ctx.fillText(line.text ?? '', x + offset + padding * 2, y + 21)\n\n            y += 16\n        }\n    }\n\n    #renderCustom(event: MouseEvent, value?: Value) {\n        if (value == undefined)\n            return\n\n        const id = this.#template.id + value.id\n\n        let tooltip = <HTMLTooltipElement>document.getElementById(id)\n\n        const updateVisibility = () => {\n            this.#hideAll()\n\n            tooltip.style.visibility = Styles.Visibility.Visible\n        }\n\n        if (!tooltip) {\n            const regex = /\\${[^}]*}/gm\n\n            let content = <HTMLElement>this.#template.cloneNode(true)\n\n            tooltip = document.createElement(Tag.Div) as HTMLTooltipElement\n\n            tooltip.innerHTML = content.innerHTML\n\n            tooltip.id = id\n            tooltip.style.position = Styles.Position.Absolute\n            tooltip.style.pointerEvents = Styles.PointerEvents.None\n            tooltip.style.visibility = Styles.Visibility.Visible\n\n            tooltip.setAttribute(Attribute.Name, this.#template.id)\n\n            const matches = [...tooltip.innerHTML.matchAll(regex)]\n\n            let html = tooltip.innerHTML\n\n            for (const match of matches) {\n                const property = match[0].replace('${', '')\n                                         .replace('}', '')\n                                         .replaceAll(' ', '')\n\n                html = html.replaceAll(match[0], value.data[property])\n            }\n\n            tooltip.innerHTML = html\n\n            document.body.appendChild(tooltip)\n\n            tooltip.position = tooltip.getBoundingClientRect()\n\n            updateVisibility()\n        }\n\n        if (tooltip.style.visibility == Styles.Visibility.Hidden)\n            updateVisibility()\n\n        if (tooltip.position.height == 0)\n            tooltip.position = tooltip.getBoundingClientRect()\n\n        const offset = 10\n\n        let opacity = '1'\n\n        let x = event.clientX,\n            y = event.clientY + scrollY\n\n        if (x + tooltip.position.width - this.#canvasPosition.x > this.#canvasPosition.width - offset) {\n            x = this.#canvasPosition.width - tooltip.position.width + this.#canvasPosition.x - offset\n            opacity = '.67'\n        }\n\n        if (y + tooltip.position.height - this.#canvasPosition.y > this.#canvasPosition.height - offset) {\n            y = this.#canvasPosition.height - tooltip.position.height + this.#canvasPosition.y - offset\n            opacity = '.67'\n        }\n\n        tooltip.style.left = x + offset + 'px'\n        tooltip.style.top = y + offset + 'px'\n        tooltip.style.opacity = opacity\n    }\n\n    refresh() {\n        this.#canvasPosition = this.canvas.getBoundingClientRect()\n        this.#canvasPosition.x += scrollX\n        this.#canvasPosition.y += scrollY\n    }\n\n    #hideAll() {\n        if (!this.#isCustom)\n            return\n\n        const tooltips = <NodeListOf<HTMLElement>>document.querySelectorAll(`[name=\"${ this.#template.id }\"]`)\n\n        for (let node of tooltips)\n            node.style.visibility = Styles.Visibility.Hidden\n    }\n\n    #getOpacityValue(): number {\n        if (!this.#timer)\n            return 0\n\n        let opacityValue = this.#toHide\n                           ? 1 - (new Date().getTime() - this.#timer.getTime()) / Constants.Animations.tooltip\n                           : (new Date().getTime() - this.#timer.getTime()) / Constants.Animations.tooltip\n        if (opacityValue > 1)\n            opacityValue = 1\n        if (opacityValue < 0)\n            opacityValue = 0\n\n        return opacityValue\n    }\n}","export class ThemeOptions {\n    static readonly colors = ['#000000', '#ffffff']\n\n    static readonly backgrounds = ['#f7f7f7', '#222222']\n\n    static readonly lines = ['#000000', '#eeeeee']\n\n    static readonly lineAxes = ['#dedede', '#212121']\n\n    static readonly lineActives = ['#898989', '#898989']\n\n    static readonly dropdownBorders = ['#bcbcbc', '#7e7e7e']\n\n    static readonly canvasBackgrounds = ['#ffffff', '#222222']\n}","import { TableValue } from '../TableValue'\nimport { PlotSeries } from '../PlotSeries'\nimport { TableHeaderValue } from '../TableHeaderValue'\nimport { TableData } from '../TableData'\nimport { Data } from '../interfaces/Data'\nimport { Formatter } from '../../helpers/Formatter'\nimport { PlotAxisType } from '../../static/Enums'\n\nexport class PlotData implements Data {\n    shortLabels: boolean\n\n    simple: boolean\n\n    yMax: number\n\n    xTitle: string\n\n    yTitle: string\n\n    xType: PlotAxisType\n\n    values: PlotSeries[]\n\n    static getRows(data: PlotData): TableData {\n        let headers: TableHeaderValue[] = []\n\n        let values: TableValue[] = []\n\n        for (const series of data.values) {\n            let seriesValues = new Map<string, any>()\n\n            for (const value of series.values) {\n                seriesValues.set(value.x.toString(), value.y)\n                headers.push({\n                    value: value.x.toString(),\n                    display: data.xType == PlotAxisType.Date\n                             ? Formatter.date(new Date(value.x))\n                             : value.x.toString()\n                })\n            }\n\n            values.push({\n                name: series.label,\n                values: seriesValues\n            })\n        }\n\n        const unique = new Set(),\n            uniqueHeaders = headers.filter(v => !unique.has(v.display) && unique.add(v.display))\n\n        if (data.xType == PlotAxisType.Date)\n            uniqueHeaders.sort((a, b) => new Date(a.value).getTime() - new Date(b.value).getTime())\n\n        return {\n            headers: uniqueHeaders,\n            values: values\n        }\n    }\n}","export namespace Styles {\n    export class Cursor {\n        static Default = 'default'\n\n        static Pointer = 'pointer'\n    }\n\n    export class Display {\n        static Flex = 'flex'\n    }\n\n    export class FlexDirection {\n        static Column = 'column'\n\n        static ColumnReverse = 'column-reverse'\n\n        static Row = 'row'\n\n        static RowReverse = 'row-reverse'\n    }\n\n    export class AlignItems {\n        static Center = 'center'\n    }\n\n    export class Visibility {\n        static Visible = 'visible'\n\n        static Hidden = 'hidden'\n    }\n\n    export class Position {\n        static Absolute = 'absolute'\n    }\n\n    export class PointerEvents {\n        static None = 'none'\n    }\n\n    export class JustifyContent {\n        static Center = 'center'\n    }\n\n    export class ImageRendering {\n        static Pixelated = 'pixelated'\n    }\n}","import { Theme } from './Theme'\nimport { DropdownOptions } from './types/DropdownOptions'\nimport { Animations } from './Animations'\nimport { Helper } from './Helper'\nimport { TextStyles } from './helpers/TextStyles'\nimport { Canvas } from './helpers/Canvas'\nimport { AnimationType } from './static/Enums'\nimport * as Constants from './static/constants/Index'\nimport { Styles } from './static/constants/Styles'\n\nexport class Dropdown {\n    #canvas: HTMLCanvasElement\n\n    #options: DropdownOptions\n\n    #canvasPosition: DOMRect\n\n    animations: Animations\n\n    isActive: boolean = false\n\n    #isInit: boolean\n\n    #position: DOMRect\n\n    #isOnlyMenu: boolean\n\n    constructor(canvas: HTMLCanvasElement, options: DropdownOptions) {\n        this.#canvas = canvas\n        this.#options = options\n\n        this.#isOnlyMenu = this.#options.text == undefined\n\n        this.animations = new Animations()\n    }\n\n    render(moveEvent: MouseEvent, clickEvent: MouseEvent | undefined) {\n        if (!this.#isInit)\n            this.#initAnimations()\n\n        if (this.#isOnlyMenu)\n            this.isActive = true\n\n        const ctx = Canvas.getContext(this.#canvas)\n\n        let x = this.#position.x,\n            y = this.#position.y,\n            width = this.#position.width,\n            height = this.#position.height\n\n        ctx.beginPath()\n\n        if (!this.#isOnlyMenu) {\n            const translate = (transition: number, event: AnimationType) => {\n                this.animations.reload('animation-dropdown', event)\n\n                ctx.fillStyle = Helper.adjustColor(Theme.background, -Math.round(40 * transition))\n            }\n\n            if (this.#isOnButton(moveEvent, x, y, width, height)) {\n                this.#canvas.style.cursor = Styles.Cursor.Pointer\n\n                if (clickEvent && moveEvent.x == clickEvent.x && moveEvent.y == clickEvent.y) {\n                    this.isActive = !this.isActive\n                    clickEvent = undefined\n                }\n\n                if (!this.isActive)\n                    this.animations.add('animation-dropdown',\n                        AnimationType.MouseOver,\n                        {\n                            duration: 300,\n                            body: transition => {\n                                translate(transition, AnimationType.MouseLeave)\n                            }\n                        })\n                else\n                    ctx.fillStyle = Helper.adjustColor(Theme.background, -40)\n            } else {\n                this.#canvas.style.cursor = Styles.Cursor.Default\n\n                if (!this.isActive)\n                    this.animations.add('animation-dropdown',\n                        AnimationType.MouseLeave,\n                        {\n                            timer: Constants.Dates.minDate,\n                            duration: 300,\n                            backward: true,\n                            body: transition => {\n                                translate(transition, AnimationType.MouseOver)\n                            }\n                        })\n                else\n                    ctx.fillStyle = Helper.adjustColor(Theme.background, -40)\n            }\n\n            ctx.strokeStyle = Theme.background\n            ctx.roundRect(x, y, width, height, 4)\n            ctx.fill()\n\n            TextStyles.regular(ctx)\n            ctx.fillText(this.#options.text ?? '', x + width / 2, y + height / 2)\n        }\n\n        if (this.isActive) {\n            const padding = 6,\n                borderRadius = 6\n\n            y += height\n\n            const items = this.#options.items.filter(value => value.text),\n                dividers = this.#options.items.filter(value => !value.text)\n\n            let maxWidth = Math.max(...items.map(value => Helper.stringWidth(value.text)))\n                           + padding * 4\n\n            if (x + maxWidth > this.#canvas.width - 4)\n                x -= x + maxWidth - this.#canvas.width + 4\n\n            const dropdownOpacity = 'bb',\n                itemOpacityDec = 127,\n                itemBackground = Theme.dropdownItemHoverColor,\n                borderColor = Theme.dropdownBorder\n\n            ctx.beginPath()\n\n            const rect = {\n                x: x,\n                y: y,\n                width: maxWidth,\n                height: items.length * 26\n                        + dividers.length * 4\n                        + (items.length == 1 ? padding : 0)\n                        + (items.length == 2 && dividers.length == 1 ? padding : 0)\n            }\n\n            ctx.roundRect(rect.x, rect.y, rect.width, rect.height, borderRadius)\n            ctx.fillStyle = Theme.background + dropdownOpacity\n            ctx.setLineDash([])\n            ctx.lineWidth = 1\n            ctx.strokeStyle = borderColor + dropdownOpacity\n            ctx.fill()\n            ctx.stroke()\n\n            ctx.beginPath()\n\n            y += 6\n\n            for (const item of this.#options.items) {\n                ctx.beginPath()\n\n                if (item.isDivider == true) {\n                    y += 2\n\n                    ctx.moveTo(x + padding, y)\n                    ctx.lineTo(x + maxWidth - padding, y)\n\n                    ctx.lineWidth = .5\n                    ctx.stroke()\n\n                    y += 4\n\n                    continue\n                }\n\n                ctx.fillStyle = 'transparent'\n\n                const animationKey = 'animation-dropdown' + item.text\n\n                const translate = (transition: number, event: AnimationType, isReturn?: boolean) => {\n                    this.animations.reload(animationKey, event)\n\n                    if (isReturn && transition == 1)\n                        return\n\n                    let opacity = Math.round(itemOpacityDec * transition).toString(16)\n                    if (opacity.length == 1)\n                        opacity = '0' + opacity\n\n                    ctx.fillStyle = itemBackground + opacity\n                }\n\n                if (this.#isOnButton(moveEvent, x, y, maxWidth, 20)) {\n                    this.animations.add(animationKey,\n                        AnimationType.MouseOver,\n                        {\n                            duration: 300,\n                            body: transition => {\n                                translate(transition, AnimationType.MouseLeave)\n                            }\n                        })\n\n                    this.#canvas.style.cursor = Styles.Cursor.Pointer\n\n                    if (clickEvent) {\n                        item.action()\n\n                        clickEvent = undefined\n                        this.isActive = false\n                    }\n                } else {\n                    this.animations.add(animationKey,\n                        AnimationType.MouseLeave,\n                        {\n                            timer: Constants.Dates.minDate,\n                            duration: 300,\n                            backward: true,\n                            body: transition => {\n                                translate(transition, AnimationType.MouseOver, true)\n                            }\n                        })\n                }\n\n                ctx.roundRect(x + padding, y, maxWidth - padding * 2, 20, borderRadius)\n                ctx.fill()\n\n                ctx.fillStyle = Theme.text\n                ctx.textAlign = 'left'\n                ctx.textBaseline = 'hanging'\n                ctx.fillText(item.text, x + padding * 2, y + 5)\n\n                y += 22\n            }\n        }\n\n        ctx.lineWidth = 1\n\n        if (!this.#isOnlyMenu && clickEvent != undefined && this.isActive) {\n            this.isActive = false\n            clickEvent = undefined\n        }\n\n        this.#isInit = true\n\n        if (this.#isOnlyMenu && clickEvent && moveEvent.x == clickEvent.x && moveEvent.y == clickEvent.y) {\n            this.isActive = !this.isActive\n            clickEvent = undefined\n        }\n\n        return clickEvent\n    }\n\n    #initAnimations() {\n        this.#canvasPosition = this.#canvas.getBoundingClientRect()\n\n        this.#canvasPosition.x += scrollX\n        this.#canvasPosition.y += scrollY\n    }\n\n    #isOnButton(event: MouseEvent, x: number, y: number, w: number, h: number): boolean {\n        if (!event)\n            return false\n\n        let trueX = event.clientX - this.#canvasPosition.x + scrollX,\n            trueY = event.clientY - this.#canvasPosition.y + scrollY\n\n        return trueX >= x && trueX <= x + w\n               && trueY >= y && trueY <= y + h\n    }\n\n    refresh() {\n        this.#isInit = false\n    }\n\n    resize() {\n        this.#initAnimations()\n        this.#calculatePosition()\n    }\n\n    #calculatePosition() {\n        const width = this.#isOnlyMenu ? 0 : Helper.stringWidth(this.#options.text ?? '') + 20,\n            height = this.#isOnlyMenu ? 0 : 24\n\n        this.#position = {\n            x: this.#options.x + width > this.#canvas.width\n               ? this.#canvas.width - width\n               : this.#options.x < 0\n                 ? this.#canvas.width + this.#options.x - width\n                 : this.#options.x,\n            y: this.#options.y + height > this.#canvas.height\n               ? this.#canvas.height - height\n               : this.#options.y < 0\n                 ? this.#canvas.height + this.#options.y - height\n                 : this.#options.y,\n            width: width,\n            height: height\n        } as DOMRect\n    }\n}","import { Helper } from './Helper'\nimport { ThemeOptions } from './static/ThemeOptions'\nimport { Events } from './static/Enums'\n\nexport class Theme {\n    static currentTheme = 0\n\n    static text: string\n\n    static background: string\n\n    static line: string\n\n    static lineAxis: string\n\n    static lineActive: string\n\n    static dropdownItemHoverColor: string\n\n    static dropdownBorder: string\n\n    static canvasBackground: string\n\n    static function: Function | undefined\n\n    static initialize(callback: Function, isDark?: Function) {\n        if (!Theme.function && isDark)\n            Theme.function = isDark\n\n        if (window.matchMedia\n            && window.matchMedia('(prefers-color-scheme: dark)').matches\n            && (!Theme.function || Theme.function()))\n            Theme.setTheme(1)\n        else\n            Theme.setTheme(0)\n\n        window.matchMedia('(prefers-color-scheme: dark)')\n              .addEventListener(Events.Change, event => {\n                  Theme.setTheme(event.matches && (!Theme.function || Theme.function()) ? 1 : 0)\n                  callback()\n              })\n    }\n\n    static setTheme(index: number) {\n        Theme.currentTheme = index\n\n        Theme.text = ThemeOptions.colors[index]\n        Theme.background = ThemeOptions.backgrounds[index]\n        Theme.line = ThemeOptions.lines[index]\n        Theme.lineAxis = ThemeOptions.lineAxes[index]\n        Theme.lineActive = ThemeOptions.lineActives[index]\n        Theme.dropdownItemHoverColor = Helper.adjustColor(Theme.background, index == 0 ? -50 : 50)\n        Theme.dropdownBorder = ThemeOptions.dropdownBorders[index]\n        Theme.canvasBackground = ThemeOptions.canvasBackgrounds[index]\n    }\n\n    static reset() {\n        this.function = undefined\n    }\n}","import { Renderer } from '../types/base/Renderer'\nimport { CircularData } from '../types/data/CircularData'\nimport { Sector } from '../types/Sector'\nimport { CircularAngle } from '../types/CircularAngle'\nimport { Point } from '../types/Point'\nimport { DropdownItem } from '../types/DropdownItem'\nimport { Helper } from '../Helper'\nimport { Dropdown } from '../Dropdown'\nimport { Theme } from '../Theme'\nimport { TextStyles } from '../helpers/TextStyles'\nimport { Chart } from '../Chart'\nimport { TooltipValue } from '../types/TooltipValue'\nimport { Decomposition } from '../Decomposition'\nimport { Export } from '../Export'\nimport { TextResources } from '../static/TextResources'\nimport { Modal } from '../Modal'\nimport { Canvas } from '../helpers/Canvas'\nimport { Formatter } from '../helpers/Formatter'\nimport { AnimationType, Events, RenderState } from '../static/Enums'\nimport * as Constants from '../static/constants/Index'\nimport { Styles } from '../static/constants/Styles'\n\nexport class CircularRenderer extends Renderer<CircularData> {\n    #canRenderInnerTitle: boolean\n\n    #isDonut: boolean\n\n    #radius: number\n\n    #sum: number\n\n    #accumulator: number\n\n    #animationOffset: number\n\n    #hoverCount: number\n\n    #currentHover: string | undefined\n\n    #pinned: string[]\n\n    #center: Point\n\n    #startPoint: Point\n\n    #angles: CircularAngle[]\n\n    #other: Sector[]\n\n    #innerTitleStyle: Function\n\n    readonly #startAngle: number\n\n    constructor(chart: Chart) {\n        super(chart)\n\n        this.data.values = this.data.values.map(v => new Sector(v))\n\n        if (this.settings.enableOther) {\n            if (!this.settings.contextMenu)\n                this.settings.contextMenu = [] as DropdownItem[]\n            else\n                this.settings.contextMenu.push({\n                    isDivider: true\n                } as DropdownItem)\n\n            this.settings.contextMenu.push({\n                    text: TextResources.Show,\n                    condition: data => data?._other,\n                    action: () => {\n                        new Modal(Decomposition.toChart<Sector>(this.settings, this.#other),\n                            {\n                                width: window.innerWidth * .8,\n                                height: window.innerHeight * .8\n                            } as DOMRect)\n                            .open()\n                    }\n                })\n        }\n\n        this.#startAngle = Math.random() % (Math.PI * 2)\n\n        this.#pinned = []\n\n        this.onMouseMoveEvent = new MouseEvent(Events.MouseMove)\n    }\n\n    render() {\n        super.render()\n\n        this.#accumulator = this.#startAngle\n        this.#hoverCount = 0\n\n        if (this.data.values.filter(v => !v.disabled).length == 0)\n            this.#drawEmpty()\n        else\n            this.#draw()\n\n        if (this.#hoverCount == 0)\n            this.#currentHover = undefined\n\n        this.state = RenderState.Idle\n\n        super.renderDropdown()\n\n        if (this.#currentHover || this.contextMenu)\n            this.renderContextMenu(this.data.values.find(v => v.id == this.#currentHover)?.data ?? {})\n        else\n            this.onContextMenuEvent = undefined\n\n        console.log('qwerty')\n\n        if (this.#currentHover)\n            this.canvas.style.cursor = Styles.Cursor.Pointer\n    }\n\n    #draw() {\n        if (this.onMouseMoveEvent || this.state == RenderState.Init) {\n            this.#sum = this.data.values.reduce((acc, v) => acc + v.current, 0)\n\n            let anglesSum = this.#startAngle\n            this.#angles = this.data.values.flatMap(sector => {\n                                   const angle = sector.current / this.#sum * 2 * Math.PI\n\n                                   return {\n                                       id: sector.id,\n                                       value: angle,\n                                       sum: (anglesSum += angle) - angle\n                                   }\n                               })\n                               .reverse()\n\n            this.#startPoint = this.#getPoint(this.#radius, 0)\n\n            for (const value of this.data.values)\n                this.#drawSector(value)\n\n            const value = this.data.values.find(v => v.id == this.#currentHover)\n            this.tooltip.render(!!value && !this.dropdown?.isActive,\n                this.onMouseMoveEvent,\n                [\n                    new TooltipValue(`${ value?.label }: ${ Formatter.number(value?.current) }`)\n                ],\n                value)\n\n            this.#drawInnerTitle()\n        }\n\n        if (!this.isDestroy)\n            requestAnimationFrame(this.render.bind(this))\n    }\n\n    #drawSector(value: Sector) {\n        const ctx = Canvas.getContext(this.canvas)\n\n        ctx.fillStyle = value.color\n        ctx.strokeStyle = value.color\n\n        const piece = value.current / this.#sum,\n            angle = (isNaN(piece) ? 1 : piece) * 2 * Math.PI\n\n        const isSingle = this.data.values.filter(s => !s.disabled).length == 1\n\n        if ((!!this.onClickEvent || this.#pinned.includes(value.id))\n            && !this.animations.contains(value.id, AnimationType.Init)\n            && !isSingle) {\n            this.animations.add(value.id,\n                AnimationType.Click,\n                {\n                    duration: Constants.Animations.circular,\n                    before: () => {\n                        if (!!this.onClickEvent) {\n                            if (this.#isInsideSector(this.onClickEvent, value)) {\n                                if (this.#pinned.includes(value.id))\n                                    this.#pinned = this.#pinned.filter(id => id != value.id)\n                                else\n                                    this.#pinned.push(value.id)\n\n                                this.onClickEvent = new PointerEvent(Events.Click)\n                            }\n                        }\n\n                        return true\n                    },\n                    body: () => {\n                        if (!this.#pinned.includes(value.id))\n                            return\n\n                        const piece = value.current / this.#sum,\n                            angle = (isNaN(piece) ? 1 : piece) * 2 * Math.PI,\n                            direction = this.#accumulator + angle / 2\n\n                        const transition = {\n                            x: this.#animationOffset * Math.cos(direction),\n                            y: this.#animationOffset * Math.sin(direction)\n                        }\n\n                        ctx.translate(transition.x, transition.y)\n\n                        ctx.lineWidth = 8\n                        ctx.lineJoin = 'round'\n                        ctx.lineCap = 'round'\n\n                        ctx.fillStyle = value.color\n                    }\n                })\n        }\n\n        if (this.onMouseMoveEvent && this.#isInsideSector(this.onMouseMoveEvent, value)) {\n            this.#currentHover = value.id\n            this.#hoverCount++\n        }\n\n        if (this.state == RenderState.Init || this.animations.contains(value.id, AnimationType.Init)) {\n            this.animations.add(value.id,\n                AnimationType.Init,\n                {\n                    duration: Constants.Animations.circular + (this.data.values.indexOf(value) + 1) / this.data.values.length * Constants.Animations.circular,\n                    continuous: true,\n                    body: transition => {\n                        const centerOfSector = {\n                            x: this.#center.x + this.#radius / 2 * Math.cos(this.#accumulator + angle / 2),\n                            y: this.#center.y + this.#radius / 2 * Math.sin(this.#accumulator + angle / 2)\n                        }\n\n                        const minSize = .7,\n                            rest = 1 - minSize\n\n                        ctx.translate(centerOfSector.x - centerOfSector.x * (minSize + transition * rest),\n                            centerOfSector.y - centerOfSector.y * (minSize + transition * rest))\n                        ctx.scale((minSize + transition * rest), (minSize + transition * rest))\n\n                        let opacity = Math.round(255 * transition).toString(16)\n\n                        if (opacity.length < 2)\n                            opacity = 0 + opacity\n\n                        ctx.fillStyle = value.color + opacity\n                        ctx.strokeStyle = value.color + opacity\n                    }\n                })\n        } else if (this.onMouseMoveEvent\n                   && !this.animations.contains(value.id, AnimationType.Init)\n                   && !this.#pinned.includes(value.id)\n                   && !isSingle) {\n            const translate = (transition: number, event: AnimationType, swap: boolean) => {\n                this.animations.reload(value.id, event)\n\n                ctx.lineWidth = 1\n                ctx.lineJoin = 'miter'\n                ctx.lineCap = 'butt'\n\n                if (transition == 0)\n                    return\n\n                if (swap)\n                    transition = value.transition\n\n                const piece = value.current / this.#sum,\n                    angle = (isNaN(piece) ? 1 : piece) * 2 * Math.PI,\n                    direction = this.#accumulator + angle / 2,\n                    translate = {\n                        x: this.#animationOffset * Math.cos(direction) * transition,\n                        y: this.#animationOffset * Math.sin(direction) * transition\n                    }\n\n                ctx.translate(translate.x, translate.y)\n\n                ctx.lineWidth = transition * 8\n                ctx.lineJoin = 'round'\n                ctx.lineCap = 'round'\n\n                value.translate = translate\n                value.transition = transition\n            }\n\n            if (!this.#isInsideSector(this.onMouseMoveEvent, value)\n                || !this.animations.contains(value.id, AnimationType.MouseLeave))\n                this.animations.add(value.id,\n                    AnimationType.MouseLeave,\n                    {\n                        timer: Constants.Dates.minDate,\n                        duration: Constants.Animations.circular,\n                        backward: true,\n                        body: transition => {\n                            translate(transition,\n                                AnimationType.MouseOver,\n                                value.transition < transition)\n                        }\n                    })\n            else\n                this.animations.add(value.id,\n                    AnimationType.MouseOver,\n                    {\n                        duration: Constants.Animations.circular,\n                        body: transition => {\n                            translate(transition,\n                                AnimationType.MouseLeave,\n                                value.transition > transition)\n                        }\n                    })\n        }\n\n        let point2 = this.#getPoint(this.#radius, angle)\n\n        if (angle > 0) {\n            ctx.save()\n\n            if (value.current > 0) {\n                let labelStartPoint = this.#getPoint(this.#radius + 10, angle / 2),\n                    labelMidPoint = this.#getPoint(this.#radius + 20, angle / 2)\n\n                const dir = labelStartPoint.x > this.#center.x ? 1 : -1\n\n                let endPoint = {\n                    x: labelMidPoint.x + 10 * dir,\n                    y: labelMidPoint.y\n                }\n\n                let isBusy = false\n\n                const textWidth = Helper.stringWidth(value.label),\n                    imageDataX = dir == 1 ? endPoint.x + 12 : endPoint.x - textWidth - 12,\n                    imageData = new Uint32Array(ctx.getImageData(imageDataX, endPoint.y - 12, textWidth + 12, 28).data.buffer)\n\n                if (imageDataX < 0 || imageDataX + textWidth > this.canvas.width\n                    || endPoint.y - 12 < 0 || endPoint.y + 12 > this.canvas.height)\n                    isBusy = true\n\n                if (!isBusy)\n                    for (let i = 0; i < imageData.length; i++)\n                        if (Canvas.isPixelBusy(imageData[i])) {\n                            isBusy = true\n                            break\n                        }\n\n                if (!isBusy) {\n                    ctx.beginPath()\n                    ctx.moveTo(labelStartPoint.x, labelStartPoint.y)\n\n                    ctx.quadraticCurveTo(labelMidPoint.x, labelMidPoint.y, endPoint.x, endPoint.y)\n\n                    let opacity = Math.round(255 * (value.current / value.value)).toString(16)\n\n                    if (opacity.length < 2)\n                        opacity = 0 + opacity\n\n                    ctx.strokeStyle = Theme.text + opacity\n                    ctx.lineCap = 'butt'\n                    ctx.lineJoin = 'miter'\n                    ctx.lineWidth = 1\n                    ctx.stroke()\n\n                    ctx.fillStyle = Theme.text + opacity\n                    TextStyles.circularLabel(ctx, dir == 1)\n                    ctx.fillText(value.label, endPoint.x + 8 * dir, endPoint.y + 4)\n                }\n            }\n\n            ctx.restore()\n\n            ctx.beginPath()\n\n            if (!this.#isDonut)\n                ctx.moveTo(this.#center.x, this.#center.y)\n\n            ctx.lineTo(this.#startPoint.x, this.#startPoint.y)\n\n            let localAccumulator = 0,\n                localAngle = angle\n\n            while (localAngle > 0) {\n                let currentAngle = localAngle - Math.PI / 6 > 0\n                                   ? Math.PI / 6\n                                   : localAngle\n\n                point2 = this.#getPoint(this.#radius, localAccumulator + currentAngle)\n\n                const tangentIntersectionAngle = Math.PI - currentAngle,\n                    lengthToTangentIntersection = this.#radius / Math.sin(tangentIntersectionAngle / 2),\n                    tangentIntersectionPoint = this.#getPoint(lengthToTangentIntersection, localAccumulator + currentAngle / 2)\n\n                ctx.quadraticCurveTo(tangentIntersectionPoint.x, tangentIntersectionPoint.y, point2.x, point2.y)\n\n                localAccumulator += currentAngle\n\n                localAngle -= Math.PI / 6\n            }\n\n            if (this.#isDonut || value.innerRadius != 0) {\n                const innerRadius = this.#radius * (value.innerRadius / 100)\n\n                const innerPoint2 = {\n                    x: point2.x - (((this.#radius - innerRadius) * (point2.x - this.#center.x)) / this.#radius),\n                    y: point2.y - (((this.#radius - innerRadius) * (point2.y - this.#center.y)) / this.#radius)\n                }\n\n                ctx.lineTo(innerPoint2.x, innerPoint2.y)\n\n                localAngle = 0\n                localAccumulator = angle\n\n                while (localAngle < angle) {\n                    let currentAngle = localAngle + Math.PI / 6 < angle\n                                       ? Math.PI / 6\n                                       : angle - localAngle\n\n                    point2 = this.#getPoint(innerRadius, localAccumulator - currentAngle)\n\n                    const tangentIntersectionAngle = Math.PI - currentAngle,\n                        lengthToTangentIntersection = innerRadius / Math.sin(tangentIntersectionAngle / 2),\n                        tangentIntersectionPoint = this.#getPoint(lengthToTangentIntersection, localAccumulator - currentAngle / 2)\n\n                    ctx.quadraticCurveTo(tangentIntersectionPoint.x, tangentIntersectionPoint.y, point2.x, point2.y)\n\n                    localAccumulator -= currentAngle\n\n                    localAngle += Math.PI / 6\n                }\n\n                point2 = this.#getPoint(this.#radius, angle)\n            }\n\n            if (!this.animations.contains(value.id, AnimationType.Init)) {\n                const changeColor = (transition: number, event: AnimationType) => {\n                    this.animations.reload(value.id, event)\n\n                    if (transition == 0)\n                        return\n\n                    let opacity = Math.round(255 - 95 * transition).toString(16)\n                    if (opacity.length < 2)\n                        opacity = 0 + opacity\n\n                    ctx.fillStyle = value.color + opacity\n                    ctx.strokeStyle = value.color + opacity\n                }\n\n                const anyHighlight = this.highlightItems.length != 0\n\n                if ((this.#currentHover && this.#currentHover != value.id)\n                    || (anyHighlight && !this.highlightItems.includes(value.id))) {\n                    this.animations.add(\n                        value.id,\n                        AnimationType.AnotherItemOver,\n                        {\n                            duration: Constants.Animations.circular,\n                            body: transition => {\n                                changeColor(transition, AnimationType.AnotherItemLeave)\n                            }\n                        }\n                    )\n                } else if (this.#currentHover == undefined || !anyHighlight) {\n                    this.animations.add(\n                        value.id,\n                        AnimationType.AnotherItemLeave,\n                        {\n                            timer: Constants.Dates.minDate,\n                            duration: Constants.Animations.circular,\n                            backward: true,\n                            body: transition => {\n                                changeColor(transition, AnimationType.AnotherItemOver)\n                            }\n                        }\n                    )\n                }\n            }\n\n            ctx.closePath()\n\n            ctx.fill()\n            ctx.stroke()\n\n            this.#accumulator += angle\n        }\n\n        ctx.resetTransform()\n\n        this.#startPoint = point2\n    }\n\n    #getPoint(radius: number, angle: number): Point {\n        return {\n            x: this.#center.x + radius * Math.cos(this.#accumulator + angle),\n            y: this.#center.y + radius * Math.sin(this.#accumulator + angle)\n        }\n    }\n\n    #isInsideSector(event: MouseEvent, value: Sector): boolean {\n        const isAngle = (point: Point) => {\n            let a = Math.atan2(point.y - this.#center.y, point.x - this.#center.x)\n            if (a < 0)\n                a += Math.PI * 2\n            if (a < this.#startAngle)\n                a = Math.PI * 2 - Math.abs(this.#startAngle - a) + this.#startAngle\n\n            let index = this.#angles.findIndex(o => o.id == value.id),\n                sumBefore = this.#angles[index].sum\n\n            return !(this.dropdown?.isActive ?? false)\n                   && sumBefore <= a\n                   && sumBefore + this.#angles[index].value - a >= 0\n        }\n\n        const isWithinRadius = (v: Point) => {\n            return v.x * v.x + v.y * v.y <= this.#radius * this.#radius\n                   && (!this.#isDonut || v.x * v.x + v.y * v.y\n                       >= this.#radius * (value.innerRadius / 100) * this.#radius * (value.innerRadius / 100))\n        }\n\n        const point = this.getMousePosition(event),\n            inner = {\n                x: point.x - this.#center.x,\n                y: point.y - this.#center.y\n            },\n            outer = {\n                x: point.x - this.#center.x - value.translate?.x,\n                y: point.y - this.#center.y - value.translate?.y\n            }\n\n        return isAngle(point) && (isWithinRadius(inner) || isWithinRadius(outer))\n    }\n\n    #drawEmpty() {\n        const ctx = Canvas.getContext(this.canvas)\n\n        ctx.beginPath()\n\n        ctx.arc(this.#center.x, this.#center.y, this.#radius, 0, 2 * Math.PI)\n        ctx.strokeStyle = Theme.text\n        ctx.stroke()\n\n        TextStyles.regular(ctx)\n        ctx.fillText(TextResources.allDataIsHidden, this.#center.x, this.#center.y)\n\n        requestAnimationFrame(this.render.bind(this))\n    }\n\n    #drawInnerTitle() {\n        if (this.#canRenderInnerTitle) {\n            const ctx = Canvas.getContext(this.canvas)\n\n            this.#innerTitleStyle(ctx)\n            ctx.fillText(this.data.innerTitle, this.#center.x, this.#center.y)\n        }\n    }\n\n    #calculateSizes() {\n        const titleOffset = this.settings.title\n                            ? Constants.Values.titleOffset\n                            : 0\n\n        const shortSide = this.canvas.width > this.canvas.height - titleOffset * 2\n                          ? this.canvas.height - titleOffset * 2\n                          : this.canvas.width\n\n        this.#center = {\n            x: this.canvas.width / 2,\n            y: titleOffset + this.canvas.height / 2\n        }\n\n        let longestLabel = 0\n\n        for (const value of this.data.values) {\n            const width = Helper.stringWidth(value.label)\n\n            if (width > longestLabel)\n                longestLabel = width\n        }\n\n        this.#radius = shortSide / 2 - (longestLabel + 50)\n\n        if (this.data.innerTitle != undefined && this.data.innerTitle != '') {\n            this.#innerTitleStyle = TextStyles.large\n            this.#canRenderInnerTitle = Helper.stringWidth(this.data.innerTitle, 16)\n                                        < (this.data.innerRadius / 100) * this.#radius * 2\n\n            if (!this.#canRenderInnerTitle) {\n                this.#innerTitleStyle = TextStyles.regular\n                this.#canRenderInnerTitle = Helper.stringWidth(this.data.innerTitle, 14)\n                                            < (this.data.innerRadius / 100) * this.#radius * 2\n            }\n\n            if (!this.#canRenderInnerTitle)\n                console.warn(`Inner title is declared, but can't be rendered`)\n        }\n\n        this.#animationOffset = this.#radius * .1\n    }\n\n    refresh() {\n        super.refresh()\n\n        this.dropdown?.refresh()\n    }\n\n    resize() {\n        super.resize()\n\n        this.initAnimations()\n        this.#calculateSizes()\n        this.dropdown?.resize()\n    }\n\n    prepareSettings() {\n        super.prepareSettings()\n\n        this.#isDonut = (this.data.innerRadius ?? 0) != 0\n\n        for (let item of this.data.values) {\n            item.disabled = !item.value\n            item.value ??= 0\n            item.current = item.value\n            item.innerRadius ??= this.data.innerRadius ?? 0\n\n            if (item.value < 0)\n                console.warn(`\"${ item.label }\" has negative value (${ item.value }) and will not be render`)\n        }\n\n        this.data.values = this.data.values.filter(v => v.value >= 0)\n\n        if (this.settings.enableOther && this.data.values.length > 20) {\n            this.#other = this.data.values.splice(20)\n\n            const sum = this.#other.reduce((acc, v) => acc + v.current, 0)\n\n            this.data.values = this.data.values.slice(0, 20)\n\n            this.data.values.push(new Sector({\n                value: sum,\n                current: sum,\n                label: TextResources.other,\n                id: Helper.guid(),\n                color: this.#other[this.#other.length - 1].color,\n                innerRadius: this.data.innerRadius,\n                data: {\n                    _other: true\n                }\n            }))\n        }\n    }\n\n    initDropdown() {\n        super.initDropdown()\n\n        this.dropdown = new Dropdown(this.canvas,\n            {\n                x: -10,\n                y: 10,\n                text: TextResources.menu,\n                items: [\n                    {\n                        text: TextResources.exportPNG,\n                        action: () => {\n                            Export.asPng(this.canvas, this.settings.title)\n                        }\n                    },\n                    {\n                        text: TextResources.exportCSV,\n                        action: () => {\n                            Export.asCsv(Decomposition.toTable(CircularData.getRows(this.data)), this.settings.title)\n                        }\n                    },\n                    {\n                        isDivider: true\n                    } as DropdownItem,\n                    {\n                        text: TextResources.decomposeToTable,\n                        action: () => {\n                            new Modal(Decomposition.toTable(CircularData.getRows(this.data))).open()\n                        }\n                    }\n                ]\n            })\n    }\n}","import { Data } from '../interfaces/Data'\nimport { Renderable } from './Renderable'\nimport { Helper } from '../../Helper'\nimport { Value } from './Value'\nimport { Legend } from '../../Legend'\nimport { Dropdown } from '../../Dropdown'\nimport { DropdownItem } from '../DropdownItem'\nimport { Point } from '../Point'\nimport { TextResources } from '../../static/TextResources'\nimport { Chart } from '../../Chart'\nimport { Canvas } from '../../helpers/Canvas'\nimport { TextStyles } from '../../helpers/TextStyles'\nimport { LegendPlace, RenderState } from '../../static/Enums'\nimport * as Constants from '../../static/constants/Index'\n\nexport class Renderer<T extends Data> extends Renderable {\n    dropdown: Dropdown\n\n    data: T\n\n    protected isDestroy: boolean = false\n\n    protected highlightItems: string[]\n\n    constructor(chart: Chart) {\n        super(chart)\n\n        this.data = <T>this.settings.data\n\n        this.highlightItems = []\n\n        this.state = this.settings.disableInitAnimation ? RenderState.Idle : RenderState.Init\n    }\n\n    render() {\n        super.render()\n\n        const ctx = Canvas.getContext(this.canvas)\n\n        if (this.settings.title) {\n            TextStyles.title(ctx)\n            ctx.fillText(this.settings.title, this.canvas.width / 2, Constants.Values.titleOffset)\n        }\n    }\n\n    destroy() {\n        this.isDestroy = true\n\n        this.canvas.remove()\n    }\n\n    renderDropdown() {\n        this.onClickEvent = this.dropdown?.render(this.onMouseMoveEvent, this.onClickEvent)\n    }\n\n    resize() {\n        this.#calculateSizes()\n        this.tooltip.refresh()\n        this.dropdown?.resize()\n    }\n\n    prepareSettings() {\n        const domRect = this.node.parentElement!.getBoundingClientRect()\n\n        this.settings.minWidth = isNaN(+this.settings.width)\n                                 ? 0\n                                 : +this.settings.width\n        this.settings.minHeight = isNaN(+this.settings.height)\n                                  ? 0\n                                  : +this.settings.height\n\n        this.settings.width = this.settings.minWidth != 0 && domRect.width < this.settings.minWidth\n                              ? this.settings.minWidth\n                              : domRect.width\n\n        this.settings.height = this.settings.minHeight != 0 && domRect.height < this.settings.minHeight\n                               ? this.settings.minHeight\n                               : domRect.height\n\n        this.canvas.width = this.settings.width\n        this.canvas.height = this.settings.height\n\n        const baseColor = this.settings.baseColor ?? Helper.randomColor()\n        let adjustStep = Math.round(100 / this.settings.data.values.length),\n            adjustAmount = -50\n\n        if (adjustStep <= 1)\n            adjustStep = 1\n\n        for (let item of this.settings.data.values) {\n            item.id = Helper.guid()\n            item.color ??= Helper.adjustColor(baseColor, adjustAmount += adjustStep)\n            item.label ??= TextResources.NoLabel\n        }\n\n        for (let item of this.settings.contextMenu ?? [])\n            if (item.id != undefined)\n                item.action = data => this.node.dispatchEvent(new CustomEvent(item.id ?? '', { detail: data }))\n    }\n\n    initDropdown() {\n    }\n\n    renderContextMenu(data: any) {\n        if (this.dropdown?.isActive) {\n            this.onContextMenuEvent = undefined\n\n            return false\n        }\n\n        if (this.onContextMenuEvent != undefined && this.settings.contextMenu?.length != 0) {\n            if (this.contextMenu == undefined && this.settings.contextMenu != undefined) {\n                let clone: DropdownItem[] = []\n\n                for (const item of this.settings.contextMenu)\n                    if (!item.condition || item.condition(data))\n                        clone.push({\n                            id: item.id,\n                            text: item.text,\n                            isDivider: item.isDivider,\n                            action: () => {\n                                item.action(data)\n\n                                this.onContextMenuEvent = undefined\n                                this.contextMenu = undefined\n                            }\n                        })\n\n                this.contextMenu = new Dropdown(this.canvas, {\n                    x: this.onContextMenuEvent.x - this.canvasPosition.x,\n                    y: this.onContextMenuEvent.y - this.canvasPosition.y,\n                    items: clone,\n                    data: data\n                })\n\n                this.contextMenu.resize()\n\n                this.onClickEvent = undefined\n            }\n\n            const isClick = this.onClickEvent != undefined\n\n            this.onClickEvent = this.contextMenu?.render(this.onMouseMoveEvent, this.onClickEvent)\n\n            if (this.onClickEvent == undefined && isClick) {\n                this.contextMenu = undefined\n                this.onContextMenuEvent = undefined\n\n                return true\n            }\n        }\n\n        return false\n    }\n\n    highlight(value?: Value) {\n        if (value)\n            this.highlightItems = [value.id]\n        else\n            this.highlightItems = []\n    }\n\n    #calculateSizes() {\n        let domRect = this.node.getBoundingClientRect()\n\n        this.settings.width = this.settings.minWidth && domRect.width < this.settings.minWidth\n                              ? this.settings.minWidth\n                              : domRect.width\n        this.settings.height = this.settings.minHeight && domRect.height < this.settings.minHeight\n                               ? this.settings.minHeight\n                               : domRect.height\n\n        this.canvas.width = this.settings.width\n        this.canvas.height = this.settings.height\n\n        if (this.settings.enableLegend) {\n            if (this.settings.legendPlace == undefined\n                || this.settings.legendPlace == LegendPlace.Top\n                || this.settings.legendPlace == LegendPlace.Bottom)\n                this.canvas.height -= Legend.getLegendHeight(this.settings.data.values, this.canvas.width)\n\n            if (this.settings.legendPlace == LegendPlace.Left\n                || this.settings.legendPlace == LegendPlace.Right)\n                this.canvas.width -= 500\n        }\n    }\n\n    protected getMousePosition(event: MouseEvent): Point {\n        return {\n            x: event.clientX - this.canvasPosition.x + scrollX,\n            y: event.clientY - this.canvasPosition.y + scrollY\n        }\n    }\n}","import { Value } from '../base/Value'\nimport { TableValue } from '../TableValue'\nimport { TableData } from '../TableData'\nimport { Data } from '../interfaces/Data'\n\nexport class TreeData implements Data {\n    values: Value[]\n\n    padding: number\n\n    static getRows(data: TreeData): TableData {\n        const key = 'Value'\n\n        let values: TableValue[] = []\n\n        for (const value of data.values)\n            values.push({\n                name: value.label,\n                values: new Map([[key, value.value]])\n            })\n\n        return {\n            headers: [\n                {\n                    value: key,\n                    display: key\n                }\n            ],\n            values: values\n        }\n    }\n}","import { TableValue } from '../TableValue'\nimport { Sector } from '../Sector'\nimport { TableData } from '../TableData'\nimport { Data } from '../interfaces/Data'\n\nexport class CircularData implements Data {\n    values: Sector[]\n\n    innerRadius: number\n\n    innerTitle: string\n\n    static getRows(data: CircularData): TableData {\n        const key = 'Value'\n\n        let values: TableValue[] = []\n\n        for (const value of data.values)\n            values.push({\n                name: value.label,\n                values: new Map([[key, value.value]])\n            })\n\n        return {\n            headers: [\n                {\n                    value: key,\n                    display: key\n                }\n            ],\n            values: values\n        }\n    }\n}","export class Value {\n    id: string\n\n    color: string\n\n    label: string\n\n    disabled: boolean\n\n    hideInLegend: boolean\n\n    data: { [key: string]: string }\n\n    value: number\n\n    toggle(transition: number) {\n        if (transition == 0)\n            this.disabled = !this.disabled\n    }\n\n    checkCondition(): boolean {\n        return false\n    }\n\n    reset() {\n        this.disabled = false\n    }\n}","import { PlotData } from '../types/data/PlotData'\nimport { Renderer } from '../types/base/Renderer'\nimport { Helper } from '../Helper'\nimport { DropdownItem } from '../types/DropdownItem'\nimport { PlotAxis } from '../types/PlotAxis'\nimport { Paddings } from '../types/Paddings'\nimport { Dropdown } from '../Dropdown'\nimport { HoverItem } from '../types/HoverItem'\nimport { PlotSeries } from '../types/PlotSeries'\nimport { Tooltip } from '../Tooltip'\nimport { Theme } from '../Theme'\nimport { Chart } from '../Chart'\nimport { TextStyles } from '../helpers/TextStyles'\nimport { TooltipValue } from '../types/TooltipValue'\nimport { Export } from '../Export'\nimport { Decomposition } from '../Decomposition'\nimport { Modal } from '../Modal'\nimport { TextResources } from '../static/TextResources'\nimport { Formatter } from '../helpers/Formatter'\nimport { Canvas } from '../helpers/Canvas'\nimport { AnimationType, LineType, PlotAxisType, PlotType, RenderState } from '../static/Enums'\nimport * as Constants from '../static/constants/Index'\n\nexport class PlotRenderer extends Renderer<PlotData> {\n    #x: PlotAxis\n\n    #y: PlotAxis\n\n    #paddings: Paddings\n\n    #tooltipX: number\n\n    #tooltipY: number\n\n    #labelsX: Map<number, string>\n\n    #labelsY: Map<number, string>\n\n    #allValuesX: any[]\n\n    #allValuesY: any[]\n\n    #base: ImageBitmap | undefined\n\n    #backLines: ImageData | undefined\n\n    #yAxisStep: number\n\n    #plot: DOMRect\n\n    #hoverX: HoverItem | undefined\n\n    constructor(chart: Chart) {\n        super(chart)\n\n        this.data.values = this.data.values.map(v => new PlotSeries(v))\n\n        if (this.data.values.filter(v => v.type == PlotType.Bar).length > 0) {\n            for (let series of this.data.values) {\n                for (let item of series.values) {\n                    const x = item.x\n                    item['x'] = item.y\n                    item['y'] = x\n                }\n\n                series.values.sort((a, b) => b.x > a.x ? 1 : -1)\n            }\n        }\n\n        this.#paddings = {\n            top: 30,\n            right: 40,\n            bottom: 50,\n            left: 80\n        }\n\n        if (this.settings.title)\n            this.#paddings.top += Constants.Values.titleOffset\n\n        this.tooltip = new Tooltip(this.canvas, this.settings)\n\n        this.#labelsX = new Map()\n        this.#labelsY = new Map()\n    }\n\n    render() {\n        super.render()\n\n        let tooltipLines = [\n            new TooltipValue(this.#labelsX.get(Math.round(this.#tooltipX))\n                             ?? this.#labelsY.get(Math.round(this.#tooltipY)))\n        ]\n\n        const ctx = Canvas.getContext(this.canvas)\n\n        TextStyles.regular(ctx)\n        ctx.lineJoin = 'round'\n\n        const axisLineHoverColor = Theme.lineActive\n\n        this.#renderBackLines()\n        this.#renderBase(true)\n\n        let x = 0,\n            y = 0,\n            yValue = 0,\n            yHeight = 0,\n            columnWidth = 0\n\n        let columnsIndex = 0,\n            columnsCount = this.data.values.filter(s => s.type == PlotType.Column).length\n\n        let barsIndex = 0,\n            barsCount = this.data.values.filter(s => s.type == PlotType.Bar).length,\n            barHeight = this.#y.step / (2 * barsCount)\n\n        let stackingAccumulator = []\n        for (let i = 0; i < this.#allValuesY.length; i++)\n            stackingAccumulator.push(0)\n\n        for (const series of this.data.values.filter(s => !s.disabled)) {\n            ctx.beginPath()\n\n            ctx.strokeStyle = series.color\n            ctx.fillStyle = series.color\n            ctx.lineWidth = series.width\n            ctx.lineCap = 'round'\n\n            const anyHighlight = this.highlightItems.length != 0\n\n            if (!this.animations.contains(series.id, AnimationType.Init)) {\n                const changeColor = (transition: number, event: AnimationType) => {\n                    this.animations.reload(series.id, event)\n\n                    if (transition == 0)\n                        return\n\n                    let opacity = Math.round(255 - 95 * transition).toString(16)\n                    if (opacity.length < 2)\n                        opacity = 0 + opacity\n\n                    ctx.fillStyle = series.color + opacity\n                    ctx.strokeStyle = series.color + opacity\n                }\n\n                if (anyHighlight && !this.highlightItems.includes(series.id)) {\n                    this.animations.add(\n                        series.id,\n                        AnimationType.AnotherItemOver,\n                        {\n                            duration: Constants.Animations.circular,\n                            body: transition => {\n                                changeColor(transition, AnimationType.AnotherItemLeave)\n                            }\n                        }\n                    )\n                } else if (!anyHighlight) {\n                    this.animations.add(\n                        series.id,\n                        AnimationType.AnotherItemLeave,\n                        {\n                            timer: Constants.Dates.minDate,\n                            duration: Constants.Animations.circular,\n                            backward: true,\n                            body: transition => {\n                                changeColor(transition, AnimationType.AnotherItemOver)\n                            }\n                        }\n                    )\n                }\n            }\n\n            switch (series.lineType) {\n                case LineType.Dash:\n                    ctx.setLineDash([series.width * 3, series.width * 2])\n\n                    break\n\n                case LineType.Dotted:\n                    ctx.setLineDash([series.width, series.width])\n\n                    break\n\n                case LineType.Solid:\n                default:\n                    break\n            }\n\n            for (const value of series.values) {\n                let index = series.values.indexOf(value),\n                    xIndex = this.#allValuesX.indexOf(this.data.xType == PlotAxisType.Date ? value.x.toString() : value.x),\n                    yIndex = this.#allValuesY.indexOf(value.y)\n\n                const getTooltipValue = () => {\n                    return {\n                        x: value.x\n                           ? this.data.xType == PlotAxisType.Date\n                             ? this.#allValuesX[xIndex]\n                             : Formatter.number(this.#allValuesX[xIndex])\n                           : '0',\n                        y: value.y\n                           ? Formatter.number(this.#allValuesY[yIndex])\n                           : '0'\n                    }\n                }\n\n                x = this.#paddings.left\n                if (series.type != PlotType.Bar)\n                    x += xIndex * this.#x.step\n                if (series.type == PlotType.Line)\n                    x -= this.#x.step / 2 - this.#x.step\n\n                switch (series.type) {\n                    case PlotType.Line:\n                        y = this.#paddings.top + this.#plot.height - <number>value.y / this.#y.unit * this.#y.step\n                            - Math.abs(this.#y.min / this.#y.unit * this.#y.step)\n\n                        const pointDuration = 1500 / series.values.length * 1.2\n\n                        if (this.state == RenderState.Init || this.animations.contains(value.id, AnimationType.Init)) {\n                            this.animations.add(value.id,\n                                AnimationType.Init,\n                                {\n                                    timer: new Date(Date.now()).addMilliseconds(pointDuration * (index - 1)),\n                                    duration: pointDuration,\n                                    continuous: true,\n                                    body: transition => {\n                                        if (index == 0)\n                                            return\n\n                                        x = this.#paddings.left + xIndex * this.#x.step - this.#x.step / 2\n                                        y = this.#paddings.top + this.#plot.height - <number>value.y / this.#y.unit * this.#y.step\n                                            - Math.abs(this.#y.min / this.#y.unit * this.#y.step)\n\n                                        const next = series.values[index - 1]\n\n                                        let prevValue = {\n                                            x: this.#paddings.left + xIndex * this.#x.step - this.#x.step / 2,\n                                            y: this.#paddings.top + this.#plot.height - <number>next.y / this.#y.unit * this.#y.step\n                                               - Math.abs(this.#y.min / this.#y.unit * this.#y.step)\n                                        }\n\n                                        const endPointX = prevValue.x + (this.#x.step + (x - prevValue.x)) * transition,\n                                            endPointY = prevValue.y + (y - prevValue.y) * transition\n\n                                        if (prevValue.x != endPointX && prevValue.y != endPointY) {\n                                            ctx.moveTo(prevValue.x, prevValue.y)\n                                            ctx.lineTo(endPointX, endPointY)\n                                        }\n                                    }\n                                })\n                        } else {\n                            ctx.lineTo(x, y)\n\n                            if (this.#isOnX(x)) {\n                                const mouse = this.getMousePosition(this.onMouseMoveEvent)\n\n                                if (Math.abs(mouse.y - y) < 5) {\n                                    this.#hoverX = {\n                                        x: x,\n                                        y: y,\n                                        index: index,\n                                        data: value.data,\n                                        series: series\n                                    }\n\n                                    tooltipLines.push(new TooltipValue(`${ series.label }: ${ getTooltipValue().y }`, series.color))\n                                    this.#tooltipX = x - this.#x.step / 2\n                                }\n                            }\n                        }\n\n                        break\n\n                    case PlotType.AttentionLine:\n                        yValue = this.canvas.height - this.#paddings.bottom - <number>value.y / this.#y.unit * this.#y.step\n\n                        ctx.moveTo(this.#paddings.left, yValue)\n\n                        if (this.state == RenderState.Init || this.animations.contains(value.id, AnimationType.Init))\n                            this.animations.add(value.id,\n                                AnimationType.Init,\n                                {\n                                    duration: 1500,\n                                    continuous: true,\n                                    body: transition => {\n                                        ctx.lineTo(this.#paddings.left + (this.canvas.width - this.#paddings.left - this.#paddings.right) * transition,\n                                            this.canvas.height - this.#paddings.bottom - <number>value.y / this.#y.unit * this.#y.step)\n                                    }\n                                })\n                        else\n                            ctx.lineTo(this.canvas.width - this.#paddings.right, yValue)\n\n                        break\n\n                    case PlotType.Column:\n                        yValue = <number>value.y > this.data.yMax ? this.data.yMax : <number>value.y\n\n                        y = this.#plot.height * yValue / this.#y.max\n                        if (y < this.#y.minStep)\n                            y = this.#y.minStep\n\n                        columnWidth = this.#x.step * (series.width ? series.width / 100 : .5) / columnsCount\n\n                        if (this.state == RenderState.Init || this.animations.contains(value.id + columnsIndex, AnimationType.Init)) {\n                            this.animations.add(value.id + columnsIndex,\n                                AnimationType.Init,\n                                {\n                                    duration: 800,\n                                    continuous: true,\n                                    body: transition => {\n                                        yValue = <number>value.y > this.data.yMax ? this.data.yMax : <number>value.y\n\n                                        x = this.#paddings.left + xIndex * this.#x.step\n                                        y = this.#plot.height * yValue / this.#y.max * transition\n\n                                        if (y < this.#y.minStep)\n                                            y = this.#y.minStep * transition\n\n                                        columnsIndex = this.data.values.filter(s => s.type == PlotType.Column)\n                                                           .indexOf(series)\n\n                                        ctx.fillRect(x + columnsIndex * columnWidth + (this.#x.step - columnsCount * columnWidth) / 2,\n                                            this.canvas.height - this.#paddings.bottom - y,\n                                            columnWidth,\n                                            y)\n                                    }\n                                })\n                        } else {\n                            if (!anyHighlight) {\n                                if (this.#isInArea(x + columnsIndex * columnWidth + (this.#x.step - columnsCount * columnWidth) / 2,\n                                        this.canvas.height - this.#paddings.bottom - y,\n                                        columnWidth,\n                                        y)\n                                    && (this.contextMenu?.isActive == undefined\n                                        || this.contextMenu?.isActive == false)) {\n                                    this.#hoverX = {\n                                        x: x,\n                                        y: y,\n                                        index: index,\n                                        data: value.data,\n                                        series: series\n                                    }\n\n                                    tooltipLines.push(new TooltipValue(`${ series.label }: ${ getTooltipValue().y }`, series.color))\n                                    this.#tooltipX = x\n\n                                    ctx.fillStyle += '88'\n                                } else {\n                                    ctx.fillStyle = series.color\n                                }\n                            }\n\n                            ctx.fillRect(x + columnsIndex * columnWidth + (this.#x.step - columnsCount * columnWidth) / 2,\n                                this.canvas.height - this.#paddings.bottom - y,\n                                columnWidth,\n                                y)\n                        }\n\n                        break\n\n                    case PlotType.Bar:\n                        y = this.#paddings.top + yIndex * this.#y.step + this.#y.step / 2\n\n                        const seriesHeight = series.width ?? barHeight\n\n                        if (this.state == RenderState.Init || this.animations.contains(value.id + barsIndex, AnimationType.Init)) {\n                            this.animations.add(value.id + barsIndex,\n                                AnimationType.Init,\n                                {\n                                    duration: 800,\n                                    continuous: true,\n                                    body: transition => {\n                                        y = this.#paddings.top + yIndex * this.#y.step + this.#y.step / 2\n\n                                        barsIndex = this.data.values.filter(s => s.type == PlotType.Bar)\n                                                        .indexOf(series)\n\n                                        ctx.fillRect(x,\n                                            y - this.#y.step / 4 + barsIndex * seriesHeight,\n                                            <number>value.x / this.#x.unit * this.#x.step * transition,\n                                            seriesHeight)\n                                    }\n                                })\n                        } else {\n                            if (!anyHighlight) {\n                                if (this.#isInArea(x,\n                                    y - this.#y.step / 4 + barsIndex * seriesHeight,\n                                    <number>value.x / this.#x.unit * this.#x.step,\n                                    seriesHeight)) {\n                                    this.#hoverX = {\n                                        x: x,\n                                        y: y,\n                                        index: index,\n                                        data: value.data,\n                                        series: series\n                                    }\n\n                                    ctx.fillStyle += '88'\n\n                                    tooltipLines.push(new TooltipValue(`${ series.label }: ${ getTooltipValue().x }`, series.color))\n                                    this.#tooltipY = y - this.#y.step / 2\n                                } else {\n                                    ctx.fillStyle = series.color\n                                }\n                            }\n\n                            ctx.fillRect(x,\n                                y - this.#y.step / 4 + barsIndex * seriesHeight,\n                                <number>value.x / this.#x.unit * this.#x.step,\n                                seriesHeight)\n                        }\n\n                        break\n\n                    case PlotType.StackingColumn:\n                        y = this.canvas.height - this.#paddings.bottom - <number>value.y / this.#y.unit * this.#y.step\n\n                        columnWidth = this.#x.step * (series.width ? series.width / 100 : .5)\n\n                        if (this.state == RenderState.Init || this.animations.contains(value.id + index, AnimationType.Init)) {\n                            this.animations.add(value.id + index,\n                                AnimationType.Init,\n                                {\n                                    duration: 800,\n                                    continuous: true,\n                                    body: transition => {\n                                        columnsIndex = this.data.values.filter(s => s.type == PlotType.StackingColumn && s.values.filter(v => v.x == value.x).length > 0)\n                                                           .indexOf(series)\n\n                                        x = this.#paddings.left + xIndex * this.#x.step\n                                        y = this.canvas.height - this.#paddings.bottom - <number>value.y / this.#y.unit * this.#y.step\n\n                                        if (columnsIndex == 0)\n                                            stackingAccumulator[xIndex] = 0\n\n                                        let offset = stackingAccumulator[xIndex] != undefined\n                                                     ? stackingAccumulator[xIndex]\n                                                     : 0\n\n                                        yValue = this.canvas.height - this.#paddings.bottom + offset\n                                        yHeight = (y - this.canvas.height + this.#paddings.bottom) * transition\n\n                                        if (yValue > this.#paddings.top) {\n                                            if (yValue + yHeight < this.#paddings.top)\n                                                yHeight -= yValue + yHeight - this.#paddings.top\n\n                                            ctx.fillRect(x + (this.#x.step - columnWidth) / 2,\n                                                yValue,\n                                                columnWidth,\n                                                yHeight)\n                                        }\n\n                                        stackingAccumulator[xIndex] += (y - this.canvas.height + this.#paddings.bottom) * transition\n                                    }\n                                })\n                        } else {\n                            if (columnsIndex == 0)\n                                stackingAccumulator[xIndex] = 0\n\n                            let offset = stackingAccumulator[xIndex] != undefined\n                                         ? stackingAccumulator[xIndex]\n                                         : 0\n\n                            yValue = this.canvas.height - this.#paddings.bottom + offset\n                            yHeight = y - this.canvas.height + this.#paddings.bottom\n\n                            if (yValue > this.#paddings.top) {\n                                if (yValue + yHeight < this.#paddings.top)\n                                    yHeight -= yValue + yHeight - this.#paddings.top\n\n                                if (!anyHighlight) {\n                                    if (this.#isInArea(x + (this.#x.step - columnWidth) / 2,\n                                        yValue + yHeight,\n                                        columnWidth,\n                                        Math.abs(yHeight))) {\n                                        this.#hoverX = {\n                                            x: x,\n                                            y: y,\n                                            index: xIndex,\n                                            data: value.data,\n                                            series: series\n                                        }\n\n                                        tooltipLines.push(new TooltipValue(`${ series.label }: ${ getTooltipValue().y }`, series.color))\n                                        this.#tooltipX = x\n\n                                        ctx.fillStyle += '88'\n                                    } else {\n                                        ctx.fillStyle = series.color\n                                    }\n                                }\n\n                                ctx.fillRect(x + (this.#x.step - columnWidth) / 2,\n                                    yValue,\n                                    columnWidth,\n                                    yHeight)\n                            }\n\n                            stackingAccumulator[xIndex] += (y - this.canvas.height + this.#paddings.bottom)\n                        }\n\n                        break\n                }\n            }\n\n            ctx.setLineDash([])\n\n            switch (series.type) {\n                case PlotType.Line:\n                    ctx.stroke()\n\n                    if (this.#hoverX && this.#hoverX.series == series) {\n                        ctx.beginPath()\n                        ctx.lineWidth = 1\n                        ctx.strokeStyle = axisLineHoverColor\n                        ctx.moveTo(this.#paddings.left, this.#hoverX.y)\n                        ctx.lineTo(this.canvas.width - this.#paddings.right, this.#hoverX.y)\n                        ctx.stroke()\n\n                        let radius = Math.round(series.width * 1.1)\n                        if (radius < 5)\n                            radius = 5\n\n                        ctx.beginPath()\n                        ctx.arc(this.#hoverX.x, this.#hoverX.y, radius, 0, 2 * Math.PI)\n                        ctx.fill()\n                        ctx.lineWidth = Math.ceil(radius / 2)\n                        ctx.strokeStyle = Helper.adjustColor(series.color, 50)\n                        ctx.stroke()\n                    }\n\n                    break\n\n                case PlotType.AttentionLine:\n                    ctx.stroke()\n\n                    TextStyles.regular(ctx)\n                    ctx.fillText(series.label,\n                        this.#paddings.left + (this.canvas.width - this.#paddings.left - this.#paddings.right) / 2,\n                        this.canvas.height - this.#paddings.bottom - <number>series.values[0].y / this.#y.unit * this.#y.step + 16)\n\n                    break\n\n                case PlotType.Column:\n                case PlotType.StackingColumn:\n                    if (this.#hoverX) {\n                        let offset = stackingAccumulator[this.#hoverX.index] != undefined\n                                     ? stackingAccumulator[this.#hoverX.index]\n                                     : 0\n\n                        if (this.canvas.height - this.#paddings.bottom + offset > this.#paddings.top) {\n                            ctx.lineWidth = 1\n                            ctx.strokeStyle = axisLineHoverColor\n                            ctx.moveTo(this.#tooltipX + this.#x.step / 2,\n                                this.#paddings.top)\n                            ctx.lineTo(this.#tooltipX + this.#x.step / 2,\n                                this.canvas.height - this.#paddings.bottom + offset)\n                            ctx.stroke()\n                        }\n                    }\n\n                    columnsIndex++\n\n                    break\n\n                case PlotType.Bar:\n                    if (this.#hoverX) {\n                        ctx.lineWidth = 1\n                        ctx.strokeStyle = axisLineHoverColor\n                        ctx.moveTo(this.#paddings.left,\n                            this.#tooltipY + this.#y.step / 2)\n                        ctx.lineTo(this.canvas.width - this.#paddings.right,\n                            this.#tooltipY + this.#y.step / 2)\n                        ctx.stroke()\n                    }\n\n                    barsIndex++\n\n                    break\n            }\n        }\n\n        this.#renderBase()\n\n        this.tooltip.render(tooltipLines.length > 1 && !this.dropdown?.isActive,\n            this.onMouseMoveEvent,\n            tooltipLines,\n            this.#hoverX\n            ? this.#hoverX.series!.values[this.#hoverX.index]\n            : undefined)\n\n        if (!this.isDestroy)\n            requestAnimationFrame(this.render.bind(this))\n\n        this.state = RenderState.Idle\n\n        super.renderDropdown()\n\n        if (this.onContextMenuEvent && !this.#hoverX)\n            this.onContextMenuEvent = undefined\n\n        if (this.#hoverX\n            && (this.renderContextMenu(this.#hoverX.data)\n                || !this.onContextMenuEvent))\n            this.#hoverX = undefined\n    }\n\n    refresh() {\n        super.refresh()\n    }\n\n    resize() {\n        super.resize()\n\n        this.#base = undefined\n\n        this.#calculateSizes()\n    }\n\n    #isOnX(x: number): boolean {\n        if (!this.onMouseMoveEvent)\n            return false\n\n        const mouse = this.getMousePosition(this.onMouseMoveEvent)\n\n        return !(this.dropdown?.isActive ?? false)\n               && x - this.#x.step / 2 <= mouse.x && mouse.x < x + this.#x.step / 2\n               && this.#paddings.top <= mouse.y && mouse.y <= this.canvas.height - this.#paddings.bottom\n               && this.#paddings.left < mouse.x\n    }\n\n    #isInArea(x: number, y: number, w: number, h: number): boolean {\n        if (!this.onMouseMoveEvent)\n            return false\n\n        const mouse = this.getMousePosition(this.onMouseMoveEvent)\n\n        return !(this.dropdown?.isActive ?? false)\n               && mouse.x >= x && mouse.x <= x + w\n               && mouse.y >= y && mouse.y <= y + h\n    }\n\n    #renderBase(skip: boolean = false) {\n        if (this.#base && skip)\n            return\n\n        if (this.data.simple)\n            return\n\n        const ctx = Canvas.getContext(this.canvas)\n\n        if (skip)\n            ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\n\n        if (this.#base) {\n            ctx.drawImage(this.#base, 0, 0)\n            return\n        }\n\n        if (!skip)\n            return\n\n        const axisLabelOffset = 12\n\n        ctx.fillStyle = Theme.canvasBackground\n\n        ctx.fillRect(0, 0, this.#paddings.left, this.canvas.height)\n        ctx.fillRect(0, 0, this.canvas.width, this.#paddings.top)\n        ctx.fillRect(this.canvas.width - this.#paddings.right, 0, this.canvas.width, this.canvas.height)\n        ctx.fillRect(0, this.canvas.height - this.#paddings.bottom, this.canvas.width, this.canvas.height)\n\n        const isContainsBar = this.data.values.filter(s => s.type == PlotType.Bar).length > 0\n\n        if (this.data.xTitle || this.data.yTitle) {\n            ctx.textAlign = 'center'\n            ctx.textBaseline = 'bottom'\n            ctx.fillStyle = Theme.text\n\n            if (this.data.xTitle)\n                ctx.fillText(this.data.xTitle,\n                    this.#paddings.left + (this.canvas.width - this.#paddings.left - this.#paddings.right) / 2,\n                    this.canvas.height - 4)\n\n            if (this.data.yTitle) {\n                ctx.rotate(-Math.PI / 2)\n\n                ctx.textBaseline = 'top'\n\n                ctx.fillText(this.data.yTitle,\n                    -(this.#paddings.top + (this.canvas.height - this.#paddings.top - this.#paddings.bottom) / 2),\n                    8)\n\n                ctx.resetTransform()\n            }\n        }\n\n        ctx.textAlign = 'center'\n        ctx.textBaseline = 'top'\n\n        const step = this.#x.step,\n            xYPos = this.canvas.height - this.#paddings.bottom\n\n        let xCounter = 0,\n            acc = this.#paddings.left + step / 2\n\n        for (let i = 0; i < this.#allValuesX.length + 1; i++)\n            this.#labelsX.trySet(\n                Math.round(this.#paddings.left + i * this.#x.step),\n                this.data.xType == PlotAxisType.Date\n                ? Formatter.date(new Date(this.#allValuesX[i - 1]))\n                : isNaN(+this.#x.min) || !isFinite(+this.#x.min)\n                  ? this.#allValuesX[i - 1]\n                  : Formatter.number(\n                        this.#x.min + i * (this.#x.max - this.#x.min) / (this.#x.count - 1)\n                    )\n            )\n\n        const maxLabelWidth = Math.max(\n            ...[...this.#labelsX.values()].map(label => Math.ceil(Helper.stringWidth(label)))\n        ) + 10\n        const maxCount = Math.floor(\n            (this.canvas.width - this.#paddings.left - this.#paddings.right) / maxLabelWidth\n        )\n        const renderStep = Math.ceil(1 / (maxCount / this.#allValuesX.length))\n\n        while (acc < this.canvas.width - this.#paddings.right) {\n            if (xCounter % renderStep == 0) {\n                ctx.fillStyle = Theme.text + 'b7'\n\n                ctx.fillText(\n                    this.#labelsX.get(Math.round(acc - this.#x.step / 2)) ?? '',\n                    acc,\n                    xYPos + axisLabelOffset / 2\n                )\n            }\n\n            acc += step\n            xCounter++\n        }\n\n        ctx.textAlign = 'right'\n        ctx.textBaseline = 'middle'\n\n        const yCount = this.#y.count > 10 ? 10 : this.#y.count\n\n        let yCounter = isContainsBar ? 1 : 0,\n            yStep = this.#allValuesY.length / yCount\n\n        for (let i = isContainsBar ? 1 : 0; i < this.#allValuesY.length + 1; i++) {\n            const labelY = this.canvas.height - yCounter * yStep * this.#y.step - this.#paddings.bottom,\n                labelYAsKey = Math.round(this.canvas.height - i * this.#y.step - this.#paddings.bottom)\n\n            if (!this.#labelsY.get(labelYAsKey))\n                this.#labelsY.set(labelYAsKey,\n                    Formatter.number(this.#y.min + (i + (isContainsBar ? -1 : 0)) * (this.#y.max - this.#y.min) / this.#y.count))\n\n            if (i >= yCounter * yStep) {\n                const label = {\n                    x: this.#paddings.left,\n                    y: labelY,\n                    label: this.#yAxisStep >= 1\n                           ? Math.round((this.#y.min + (yCounter * yStep + (isContainsBar ? -1 : 0)) * (this.#y.max - this.#y.min) / this.#y.count) / this.#yAxisStep) * this.#yAxisStep\n                           : Math.round(this.#y.min + (yCounter * yStep + (isContainsBar ? -1 : 0)) * (this.#y.max - this.#y.min) / this.#y.count / this.#yAxisStep) * this.#yAxisStep\n                }\n\n                let postfix = ''\n\n                if (this.data.shortLabels) {\n                    const countOfTens = Math.floor(label.label.toString().length / 4)\n\n                    if (countOfTens > 0) {\n                        label.label /= Math.pow(1000, countOfTens)\n\n                        postfix = [\n                            TextResources.ThousandShort,\n                            TextResources.MillionShort,\n                            TextResources.BillionShort\n                        ][countOfTens - 1]\n                    }\n                }\n\n                ctx.fillText(Formatter.number(label.label) + postfix,\n                    label.x - axisLabelOffset,\n                    label.y + (isContainsBar ? this.#y.step / 2 : 0))\n\n                yCounter++\n            }\n        }\n\n        ctx.beginPath()\n\n        ctx.strokeStyle = Theme.line\n        ctx.lineWidth = 1\n\n        const offset = .5,\n            isBar = this.data.values.filter(v => v.type == PlotType.Bar).length > 0\n\n        ctx.moveTo(this.#paddings.left - offset,\n            this.canvas.height - this.#paddings.bottom + (isBar ? -offset : offset))\n\n        if (isBar)\n            ctx.lineTo(this.#paddings.left - offset, this.#paddings.top)\n        else\n            ctx.lineTo(this.canvas.width - this.#paddings.right, this.canvas.height - this.#paddings.bottom + offset)\n\n        ctx.stroke()\n\n        if (this.canvas.width > 0 && this.canvas.height > 0)\n            createImageBitmap(ctx.getImageData(0, 0, this.canvas.width, this.canvas.height))\n                .then(res => this.#base = res)\n    }\n\n    #renderBackLines() {\n        if (this.data.simple)\n            return\n\n        const ctx = Canvas.getContext(this.canvas)\n\n        if (this.#backLines) {\n            ctx.putImageData(this.#backLines, 0, 0)\n            return\n        }\n\n        ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\n\n        const axisLineColor = Theme.lineAxis\n\n        const isContainsBar = this.data.values.filter(s => s.type == PlotType.Bar).length > 0\n\n        if (isContainsBar) {\n            const step = this.#x.step,\n                xYPos = this.canvas.height - this.#paddings.bottom\n\n            let xCounter = 0,\n                acc = this.#paddings.left + step / 2\n\n            for (let i = 0; i < this.#allValuesX.length + 1; i++)\n                this.#labelsX.trySet(\n                    Math.round(this.#paddings.left + i * this.#x.step),\n                    this.data.xType == PlotAxisType.Date\n                    ? Formatter.date(new Date(this.#allValuesX[i - 1]))\n                    : isNaN(+this.#x.min) || !isFinite(+this.#x.min)\n                      ? this.#allValuesX[i - 1]\n                      : Formatter.number(\n                            this.#x.min + i * (this.#x.max - this.#x.min) / (this.#x.count - 1)\n                        )\n                )\n\n            const maxLabelWidth = Math.max(\n                ...[...this.#labelsX.values()].map(label => Math.ceil(Helper.stringWidth(label)))\n            ) + 10\n            const maxCount = Math.floor(\n                (this.canvas.width - this.#paddings.left - this.#paddings.right) / maxLabelWidth\n            )\n            const renderStep = Math.ceil(1 / (maxCount / this.#allValuesX.length))\n\n            while (acc < this.canvas.width - this.#paddings.right) {\n                if (xCounter % renderStep == 0) {\n                    ctx.beginPath()\n\n                    ctx.moveTo(acc, xYPos)\n                    ctx.lineTo(acc, this.#paddings.top)\n\n                    ctx.lineWidth = 1\n                    ctx.strokeStyle = axisLineColor\n                    ctx.stroke()\n                }\n\n                acc += step\n                xCounter++\n            }\n        }\n\n        ctx.textAlign = 'right'\n        ctx.textBaseline = 'middle'\n\n        const yCount = this.#y.count > 10 ? 10 : this.#y.count\n\n        let yCounter = isContainsBar ? 1 : 0,\n            yStep = this.#allValuesY.length / yCount\n\n        for (let i = isContainsBar ? 1 : 0; i < this.#allValuesY.length + 1; i++) {\n            const labelY = this.canvas.height - yCounter * yStep * this.#y.step - this.#paddings.bottom\n\n            if (i >= yCounter * yStep) {\n                const label = {\n                    x: this.#paddings.left,\n                    y: labelY\n                }\n\n                if (this.data.values.filter(s => s.type.isAnyEquals(PlotType.Column, PlotType.StackingColumn, PlotType.Line)).length > 0) {\n                    ctx.beginPath()\n\n                    ctx.moveTo(label.x, label.y)\n                    ctx.lineTo(this.canvas.width - this.#paddings.right, label.y)\n\n                    ctx.lineWidth = 1\n                    ctx.strokeStyle = axisLineColor\n                    ctx.stroke()\n                }\n\n                yCounter++\n            }\n        }\n\n        if (this.canvas.width > 0 && this.canvas.height > 0)\n            this.#backLines = ctx.getImageData(0, 0, this.canvas.width, this.canvas.height)\n    }\n\n    #calculateSizes() {\n        let xValues = this.data.values.flatMap(s => s.values.map(p => p.x)),\n            yValues = this.data.values.flatMap(s => s.values.map(p => p.y))\n\n        const isDate = this.data.xType == PlotAxisType.Date\n\n        if (isDate) {\n            let tempDate = new Date(Math.min(...(<number[]>xValues)))\n\n            while (tempDate.getTime() < Math.max(...(<number[]>xValues))) {\n                if (!xValues.includes(tempDate.getTime()))\n                    xValues.push(new Date(tempDate.getTime()))\n\n                tempDate = tempDate.addDays(1)\n            }\n\n            xValues.sort((a, b) => a < b ? -1 : 1)\n        }\n\n        yValues.sort((a, b) => b > a ? -1 : 1)\n\n        this.#allValuesX = [...new Set(xValues.filter(x => x != undefined).map(x => isDate ? x.toString() : x))]\n        this.#allValuesY = [...new Set(yValues.filter(y => y != undefined))]\n\n        this.#x = {\n            min: Math.min(...(<number[]>xValues)),\n            max: Math.max(...(<number[]>xValues)),\n            unit: (Math.abs(Math.min(...(<number[]>xValues))) + Math.abs(Math.max(...(<number[]>xValues)))) / (this.#allValuesX.length - 1),\n            step: (this.canvas.width - this.#paddings.left - this.#paddings.right) / this.#allValuesX.length,\n            minStep: 0,\n            count: this.#allValuesX.length\n        }\n\n        let yMin = Math.min(...(<number[]>yValues))\n        if (yMin > 0)\n            yMin = 0\n\n        this.#y = {\n            min: yMin,\n            max: this.data.yMax ?? Math.max(...(<number[]>yValues)),\n            unit: (Math.abs(yMin) + Math.abs(this.data.yMax ?? Math.max(...(<number[]>yValues)))) / (this.#allValuesY.length - 1),\n            step: (this.canvas.height - this.#paddings.top - this.#paddings.bottom) / this.#allValuesY.length,\n            minStep: 0,\n            count: this.#allValuesY.length\n        }\n\n        let stackingColumns = this.data.values.filter(s => s.type == PlotType.StackingColumn)\n\n        let max\n\n        if (stackingColumns.length > 0) {\n            let values = stackingColumns.map(s => s.values.flatMap(v => +v.y))\n\n            max = this.#y.max\n\n            for (let i = 0; i < values[0].length; i++) {\n                let sum = 0\n\n                for (const v of values)\n                    sum += v[i]\n\n                if (sum > max)\n                    max = sum\n            }\n\n            this.#y.max = max > this.data.yMax ? this.data.yMax : max\n            this.#y.unit = (Math.abs(this.#y.min) + Math.abs(this.#y.max)) / (this.#allValuesY.length - 1)\n        }\n\n        const yMaxWidth = Helper.stringWidth(Formatter.number(this.#y.max))\n        if (yMaxWidth > this.#paddings.left - 40) {\n            this.#paddings.left += yMaxWidth - this.#paddings.left + 40\n            this.#x.step = (this.canvas.width - this.#paddings.left - this.#paddings.right) / this.#allValuesX.length\n        }\n\n        this.#yAxisStep = Math.abs(this.#y.min) + Math.abs(this.#y.max)\n\n        if (.5 <= this.#yAxisStep && this.#yAxisStep < 1)\n            this.#yAxisStep = .05\n        else if (1 <= this.#yAxisStep && this.#yAxisStep < 10)\n            this.#yAxisStep = .1\n        else if (10 <= this.#yAxisStep && this.#yAxisStep < 100)\n            this.#yAxisStep = 2\n        else if (100 <= this.#yAxisStep && this.#yAxisStep < 1000)\n            this.#yAxisStep = 20\n        else if (1000 <= this.#yAxisStep && this.#yAxisStep < 10000)\n            this.#yAxisStep = 50\n        else if (10000 <= this.#yAxisStep && this.#yAxisStep < 100000)\n            this.#yAxisStep = 1000\n        else if (100000 <= this.#yAxisStep && this.#yAxisStep < 1000000)\n            this.#yAxisStep = 10000\n        else if (1000000 <= this.#yAxisStep && this.#yAxisStep < 10000000)\n            this.#yAxisStep = 50000\n        else\n            this.#yAxisStep = 1\n\n        if (this.#yAxisStep != 1) {\n            max = yValues.length > 10\n                  ? (this.#y.max / 10 + this.#yAxisStep - (this.#y.max / 10) % this.#yAxisStep) * 10\n                  : Math.ceil(this.#y.max / this.#yAxisStep) * this.#yAxisStep\n\n            this.#y.max = max > this.data.yMax ? this.data.yMax : max\n            this.#y.unit = (Math.abs(this.#y.min) + Math.abs(this.#y.max)) / this.#allValuesY.length\n        }\n\n        this.#plot = {\n            width: this.canvas.width - this.#paddings.left - this.#paddings.right,\n            height: this.canvas.height - this.#paddings.top - this.#paddings.bottom\n        } as DOMRect\n\n        this.#x.minStep = this.#plot.width * 0.002\n        this.#y.minStep = this.#plot.height * 0.002\n    }\n\n    prepareSettings() {\n        super.prepareSettings()\n\n        for (let item of this.data.values) {\n            item.disabled = !item.values\n            item.type ??= PlotType.Line\n\n            for (let it of item.values) {\n                it.id = Helper.guid()\n\n                if (this.data.xType == PlotAxisType.Date) {\n                    if (Helper.isISOString(it.x as string))\n                        it.x = new Date(it.x)\n                    else\n                        console.warn(`${ it.x } is not a date in ISO format.`)\n                }\n            }\n        }\n    }\n\n    initDropdown() {\n        super.initDropdown()\n\n        this.dropdown = new Dropdown(this.canvas,\n            {\n                x: -10,\n                y: 10,\n                text: TextResources.menu,\n                items: [\n                    {\n                        text: TextResources.exportPNG,\n                        action: () => {\n                            Export.asPng(this.canvas, this.settings.title)\n                        }\n                    },\n                    {\n                        text: TextResources.exportCSV,\n                        action: () => {\n                            Export.asCsv(Decomposition.toTable(PlotData.getRows(this.data)), this.settings.title)\n                        }\n                    },\n                    {\n                        isDivider: true\n                    } as DropdownItem,\n                    {\n                        text: TextResources.decomposeToTable,\n                        action: () => {\n                            new Modal(Decomposition.toTable(PlotData.getRows(this.data))).open()\n                        }\n                    }\n                ]\n            })\n    }\n}","export class Dates {\n    static minDate = new Date(2000, 1, 1)\n}","import { Theme } from '../Theme'\n\nexport abstract class TextStyles {\n    static title(context: CanvasRenderingContext2D) {\n        context.fillStyle = Theme.text\n        context.textAlign = 'center'\n        context.textBaseline = 'middle'\n        context.font = '20px sans-serif'\n    }\n\n    static regular(context: CanvasRenderingContext2D) {\n        context.fillStyle = Theme.text\n        context.textAlign = 'center'\n        context.textBaseline = 'middle'\n        context.font = '14px sans-serif'\n    }\n\n    static large(context: CanvasRenderingContext2D) {\n        context.fillStyle = Theme.text\n        context.textAlign = 'center'\n        context.textBaseline = 'middle'\n        context.font = '16px sans-serif'\n    }\n\n    static tooltip(context: CanvasRenderingContext2D) {\n        context.font = '14px sans-serif'\n        context.textAlign = 'start'\n        context.textBaseline = 'alphabetic'\n    }\n\n    static circularLabel(context: CanvasRenderingContext2D, isRight: boolean) {\n        context.textAlign = isRight ? 'start' : 'end'\n        context.textBaseline = 'alphabetic'\n        context.font = '14px sans-serif'\n    }\n}","import { ChartSettings } from '../ChartSettings'\nimport { Animations } from '../../Animations'\nimport { Tooltip } from '../../Tooltip'\nimport { Dropdown } from '../../Dropdown'\nimport { Chart } from '../../Chart'\nimport { Canvas } from '../../helpers/Canvas'\nimport { Events, RenderState, Tag } from '../../static/Enums'\nimport { Styles } from '../../static/constants/Styles'\n\nexport class Renderable {\n    node: HTMLElement\n\n    canvas: HTMLCanvasElement\n\n    settings: ChartSettings\n\n    animations: Animations\n\n    tooltip: Tooltip\n\n    protected state: RenderState = RenderState.Init\n\n    protected canvasPosition: DOMRect\n\n    protected onMouseMoveEvent: MouseEvent\n\n    protected onClickEvent: MouseEvent | undefined\n\n    protected onContextMenuEvent: MouseEvent | undefined\n\n    protected contextMenu: Dropdown | undefined\n\n    constructor(chart: Chart) {\n        this.node = chart.node\n        this.settings = chart.settings\n        this.animations = new Animations()\n\n        this.canvas = document.createElement(Tag.Canvas)\n\n        this.canvas.style.imageRendering = Styles.ImageRendering.Pixelated\n\n        this.node.append(this.canvas)\n\n        this.tooltip = new Tooltip(this.canvas, this.settings)\n\n        this.initAnimations()\n    }\n\n    render() {\n        const ctx = Canvas.getContext(this.canvas)\n\n        ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\n    }\n\n    refresh() {\n        this.tooltip.refresh()\n        this.state = this.settings.disableInitAnimation ? RenderState.Idle : RenderState.Init\n    }\n\n    resetMouse() {\n        this.onMouseMoveEvent = new MouseEvent(Events.MouseMove)\n        this.onClickEvent = new MouseEvent(Events.Click)\n        this.onContextMenuEvent = undefined\n    }\n\n    initAnimations() {\n        this.canvasPosition = this.canvas.getBoundingClientRect()\n\n        this.canvasPosition.x += scrollX\n        this.canvasPosition.y += scrollY\n\n        if (this.state == RenderState.Init && !this.settings.disableInteractions) {\n            this.canvas.onmousemove = event => this.onMouseMoveEvent = event\n            this.canvas.onclick = event => this.onClickEvent = event\n            this.canvas.oncontextmenu = event => {\n                event.preventDefault()\n                this.contextMenu = undefined\n                if (this.onContextMenuEvent)\n                    this.onContextMenuEvent = undefined\n                else\n                    this.onContextMenuEvent = event\n            }\n            this.canvas.onmouseleave = () => this.onMouseMoveEvent = new MouseEvent(Events.MouseMove)\n        }\n    }\n}","import { TreeData } from '../types/data/TreeData'\nimport { Renderer } from '../types/base/Renderer'\nimport { Sector } from '../types/Sector'\nimport { Helper } from '../Helper'\nimport { DropdownItem } from '../types/DropdownItem'\nimport { Dropdown } from '../Dropdown'\nimport { Chart } from '../Chart'\nimport { TextStyles } from '../helpers/TextStyles'\nimport { TooltipValue } from '../types/TooltipValue'\nimport { Export } from '../Export'\nimport { Decomposition } from '../Decomposition'\nimport { Modal } from '../Modal'\nimport { TextResources } from '../static/TextResources'\nimport { Canvas } from '../helpers/Canvas'\nimport { TreeCell } from '../types/TreeCell'\nimport { Formatter } from '../helpers/Formatter'\nimport { AnimationType, RenderState } from '../static/Enums'\nimport * as Constants from '../static/constants/Index'\n\nclass TreeRenderer extends Renderer<TreeData> {\n    constructor(chart: Chart) {\n        super(chart)\n\n        this.settings.enableLegend = false\n\n        this.data.values = this.data.values.map(v => new Sector(v))\n    }\n\n    render() {\n        super.render()\n\n        if (this.data.values.filter(v => v.value > 0).length == 0) {\n            this.#drawEmpty()\n            return\n        }\n\n        const titleOffset = this.settings.title ? Constants.Values.titleOffset : 0\n\n        const maxWidth = this.canvas.width - this.data.padding * 2,\n            maxHeight = this.canvas.height - this.data.padding * 2 - titleOffset\n\n        let sum = this.data.values.reduce((acc, cur) => acc + cur.value, 0),\n            totalSquare = maxWidth * maxHeight\n\n        let x = this.data.padding,\n            y = this.data.padding + titleOffset\n\n        let minX = this.data.padding,\n            minY = this.data.padding + titleOffset\n\n        let tooltipCell: TreeCell | undefined = undefined\n        let contextMenuData = undefined\n\n        const ctx = Canvas.getContext(this.canvas)\n\n        let isVertical = true\n        for (let i = 0; i < this.data.values.length; i++) {\n            const item = this.data.values[i]\n\n            const remainWidth = maxWidth - (x - this.data.padding),\n                remainHeight = maxHeight - (y - this.data.padding - titleOffset)\n\n            let cells: TreeCell[] = [\n                {\n                    color: item.color,\n                    label: item.label,\n                    s: item.value / sum * totalSquare,\n                    value: item.value,\n                    id: item.id,\n                    x: x,\n                    y: y\n                } as TreeCell\n            ]\n\n            if (i + 1 <= this.data.values.length - 1) {\n                const next = this.data.values[i + 1]\n\n                cells.push({\n                    color: next.color,\n                    label: next.label,\n                    s: next.value / sum * totalSquare,\n                    value: next.value,\n                    id: next.id,\n                    x: x,\n                    y: y\n                } as TreeCell)\n\n                i++\n            }\n\n            const isSingle = cells.length == 1,\n                isLast = i == this.data.values.length - 1\n\n            if (isVertical) {\n                for (let j = 1; j <= remainWidth + i * i; j++) {\n                    const w = remainWidth - j,\n                        h1 = cells[0].s / w,\n                        h2 = isSingle ? 0 : cells[1].s / w\n\n                    if (h1 + h2 >= remainHeight) {\n                        cells[0].w = Math.floor(w)\n                        cells[0].h = Math.floor(h1)\n\n                        if (!isSingle) {\n                            cells[1].w = Math.floor(w)\n                            cells[1].h = remainHeight - cells[0].h\n\n                            cells[1].y += cells[0].h\n                        }\n\n                        break\n                    }\n                }\n            } else {\n                for (let j = 1; j <= remainHeight + i * i; j++) {\n                    const h = remainHeight - j,\n                        w1 = cells[0].s / h,\n                        w2 = isSingle ? 0 : cells[1].s / h\n\n                    if (w1 + w2 >= remainWidth) {\n                        cells[0].h = Math.floor(h)\n                        cells[0].w = Math.floor(w1)\n\n                        if (!isSingle) {\n                            cells[1].h = Math.floor(h)\n                            cells[1].w = remainWidth - cells[0].w\n\n                            cells[1].x += cells[0].w\n                        }\n\n                        break\n                    }\n                }\n            }\n\n            for (const cell of cells) {\n                if (isLast) {\n                    if (isVertical) {\n                        cell.w = remainWidth\n                        if (isSingle)\n                            cell.h = remainHeight\n                    } else {\n                        cell.h = remainHeight\n                        if (isSingle)\n                            cell.w = remainWidth\n                    }\n                }\n\n                ctx.beginPath()\n\n                ctx.fillStyle = cell.color\n\n                const cellInit = this.state != RenderState.Init\n                    && !this.animations.contains(cell.id, AnimationType.Init)\n\n                const cellIndex = i + cells.indexOf(cell) + (isLast && isSingle ? 1 : 0),\n                    duration = 260\n\n                const getPrev = () => {\n                    let acc = 0\n                    for (let i = 0; i < cellIndex; i++)\n                        acc += duration - duration * (i / this.data.values.length) / Math.E\n\n                    return acc\n                }\n\n                const initAnimationDuration = duration - duration * cellIndex / (this.data.values.length + 1)\n\n                if (!cellInit) {\n                    this.animations.add(cell.id,\n                        AnimationType.Init,\n                        {\n                            duration: getPrev(),\n                            continuous: true,\n                            body: transition => {\n                                if (transition * getPrev() - getPrev() + initAnimationDuration < 0)\n                                    return ctx.fillStyle += '00'\n\n                                transition = (transition * getPrev() - getPrev() + initAnimationDuration) / initAnimationDuration\n\n                                const center = {\n                                    x: cell.x + cell.w / 2,\n                                    y: cell.y + cell.h / 2\n                                }\n\n                                const minSize = .7,\n                                    rest = 1 - minSize\n\n                                ctx.translate(center.x - center.x * (minSize + transition * rest),\n                                    center.y - center.y * (minSize + transition * rest))\n                                ctx.scale((minSize + transition * rest), (minSize + transition * rest))\n\n                                let opacity = Math.round(255 * transition).toString(16)\n\n                                if (opacity.length < 2)\n                                    opacity = 0 + opacity\n\n                                ctx.fillStyle = cell.color + opacity\n                            }\n                        })\n                } else {\n                    const translate = (transition: number, event: AnimationType) => {\n                        const center = {\n                            x: cell.x + cell.w / 2,\n                            y: cell.y + cell.h / 2\n                        }\n\n                        const margin = 12,\n                            minSize = cell.w > cell.h\n                                      ? 1 - margin / cell.w\n                                      : 1 - margin / cell.h,\n                            rest = 1 - minSize\n\n                        ctx.translate(center.x - center.x * (minSize + transition * rest),\n                            center.y - center.y * (minSize + transition * rest))\n                        ctx.scale(minSize + transition * rest, minSize + transition * rest)\n\n                        this.animations.reload(cell.id, event)\n                    }\n\n                    if (this.#isInCell(cell)\n                        && !tooltipCell) {\n                        tooltipCell = cell\n                        contextMenuData = cell.data\n\n                        this.animations.add(cell.id,\n                            AnimationType.MouseOver,\n                            {\n                                duration: Constants.Animations.tree,\n                                backward: true,\n                                body: transition => {\n                                    translate(transition, AnimationType.MouseLeave)\n                                }\n                            })\n                    } else {\n                        this.animations.add(cell.id,\n                            AnimationType.MouseLeave,\n                            {\n                                timer: Constants.Dates.minDate,\n                                duration: Constants.Animations.tree,\n                                body: transition => {\n                                    translate(transition, AnimationType.MouseOver)\n                                }\n                            })\n                    }\n                }\n\n                const gap = 4\n\n                ctx.roundRect(x + gap, y + gap, cell.w - gap, cell.h - gap, gap * 2)\n                ctx.fill()\n\n                if (cell.label\n                    && Helper.stringWidth(cell.label) < cell.w - gap\n                    && cell.h - gap > 16\n                    && !this.animations.contains(cell.id, AnimationType.Init)) {\n                    ctx.beginPath()\n                    TextStyles.large(ctx)\n                    ctx.fillStyle = !Helper.isColorVisible(cell.color, '#ffffff')\n                                    ? '#000000'\n                                    : '#ffffff'\n                    ctx.fillText(cell.label,\n                        x + 2 + cell.w / 2,\n                        y + 2 + cell.h / 2)\n                }\n\n                ctx.resetTransform()\n\n                if (isVertical)\n                    y += cell.h\n                else\n                    x += cell.w\n\n                totalSquare -= cell.w * cell.h\n                sum -= cell.value\n            }\n\n            if (isVertical) {\n                x += cells[0].w\n                y = minY\n            } else {\n                y += cells[0].h\n                x = minX\n            }\n\n            minX = x\n            minY = y\n\n            isVertical = !isVertical\n        }\n\n        this.tooltip.render(!!tooltipCell && !this.dropdown?.isActive,\n            this.onMouseMoveEvent,\n            [\n                new TooltipValue(`${ tooltipCell?.label }: ${ Formatter.number(tooltipCell?.value) }`)\n            ],\n            this.data.values.find(v => v.id == tooltipCell?.id))\n\n        if (!this.isDestroy)\n            requestAnimationFrame(this.render.bind(this))\n\n        this.state = RenderState.Idle\n\n        super.renderDropdown()\n\n        if (tooltipCell || this.contextMenu)\n            this.renderContextMenu(contextMenuData)\n        else\n            this.onContextMenuEvent = undefined\n    }\n\n    #isInCell(cell: TreeCell) {\n        if (!this.onMouseMoveEvent || !cell)\n            return false\n\n        const mouse = this.getMousePosition(this.onMouseMoveEvent)\n\n        return !(this.dropdown?.isActive ?? false)\n               && cell.x <= mouse.x && mouse.x <= cell.x + cell.w\n               && cell.y <= mouse.y && mouse.y <= cell.y + cell.h\n    }\n\n    #drawEmpty() {\n        const ctx = Canvas.getContext(this.canvas)\n\n        TextStyles.regular(ctx)\n        ctx.fillText(TextResources.incorrectValues,\n            this.canvas.width / 2,\n            this.canvas.height / 2)\n    }\n\n    refresh() {\n        super.refresh()\n    }\n\n    resize() {\n        super.resize()\n\n        this.initAnimations()\n        this.animations.clear()\n    }\n\n    prepareSettings() {\n        this.data.values = this.data.values.filter(v => v.value > 0)\n\n        this.data.values.sort((a, b) => (b.value ?? 0) - (a.value ?? 0))\n\n        super.prepareSettings()\n\n        for (let item of this.data.values) {\n            item.disabled = !item.value\n            item.value ??= 0\n        }\n    }\n\n    initDropdown() {\n        super.initDropdown()\n\n        this.dropdown = new Dropdown(this.canvas,\n            {\n                x: -10,\n                y: 10,\n                text: TextResources.menu,\n                items: [\n                    {\n                        text: TextResources.exportCSV,\n                        action: () => {\n                            Export.asCsv(Decomposition.toTable(TreeData.getRows(this.data)), this.settings.title)\n                        }\n                    },\n                    {\n                        isDivider: true\n                    } as DropdownItem,\n                    {\n                        text: TextResources.decomposeToTable,\n                        action: () => {\n                            new Modal(Decomposition.toTable(TreeData.getRows(this.data))).open()\n                        }\n                    }\n                ]\n            })\n    }\n}\n\nexport default TreeRenderer","import { TableData } from './types/TableData'\nimport { Helper } from './Helper'\nimport { Value } from './types/base/Value'\nimport { ChartSettings } from './types/ChartSettings'\nimport { Formatter } from './helpers/Formatter'\nimport { Styles } from './static/constants/Styles'\nimport { Tag } from './static/Enums'\n\nexport class Decomposition {\n    static toTable(values: TableData) {\n        let table = document.createElement(Tag.Table)\n\n        table.classList.add('o-table')\n\n        let totals = new Map<string, number>()\n        let rows = '',\n            headers = ''\n\n        let valuesMap = new Map<string, Map<string, any>>()\n\n        for (const tableValue of values.values) {\n            let allColumns = new Map<string, any>()\n\n            for (const header of values.headers)\n                allColumns.set(header.value, 0)\n\n            for (const [key, value] of tableValue.values)\n                allColumns.set(key, value)\n\n            valuesMap.set(tableValue.name, allColumns)\n        }\n\n        for (const tableHeader of values.headers)\n            headers += `\n                <th>\n                    ${ tableHeader.display }\n                </th>\n            `\n\n        for (const [key, value] of valuesMap) {\n            let columns = ''\n\n            for (const [vKey, vValue] of value) {\n                columns += `\n                    <td>\n                        ${ vValue == undefined ? '' : Formatter.number(vValue) }\n                    </td>\n                `\n\n                if (totals.has(vKey)) {\n                    let totalValue = +(totals.get(vKey) ?? 0)\n                    totals.set(vKey, totalValue + +vValue)\n                } else {\n                    totals.set(vKey, vValue)\n                }\n            }\n\n            rows += `\n                <tr>\n                    <td class=\"o-table-label\">\n                        ${ key }\n                    </td>\n                    \n                    ${ columns } \n                </tr>\n            `\n        }\n\n        let totalColumns = ''\n\n        for (const [, value] of totals)\n            totalColumns += `\n                <td>\n                    ${ value == undefined ? '' : Formatter.number(value) }\n                </td>\n            `\n\n        table.innerHTML = `\n            <thead>\n                <tr>\n                    <th></th>\n                \n                    ${ headers }\n                </tr>\n            </thead>\n        \n            <tbody>\n                ${ rows }\n            </tbody>\n            \n            <tfoot>\n                <tr>\n                    <td></td>\n                \n                    ${ totalColumns }\n                </tr>\n            </tfoot>\n        `\n\n        return table\n    }\n\n    static toChart<T extends Value>(settings: ChartSettings, values: T[]) {\n        let container = document.createElement(Tag.Div),\n            div = document.createElement(Tag.Div),\n            script = document.createElement(Tag.Script),\n            id = Helper.guid()\n\n        container.style.display = Styles.Display.Flex\n        container.style.height = '100%'\n\n        div.id = id\n        div.style.flexGrow = '1'\n\n        let cloneSettings = JSON.parse(JSON.stringify(settings)) as ChartSettings\n\n        if (cloneSettings.title)\n            cloneSettings.title = cloneSettings.title + ' (Other)'\n        cloneSettings.data.values = values\n        cloneSettings.minWidth = undefined\n        cloneSettings.minHeight = undefined\n\n        script.innerHTML = `\n            new OCharts.chart(document.getElementById('${ id }'), ${ JSON.stringify(cloneSettings) })\n                .render()\n        `\n\n        container.append(div, script)\n\n        return container\n    }\n}","export { Animations } from './Animations'\nexport { Dates } from './Dates'\nexport { Values } from './Values'","import { Renderer } from '../types/base/Renderer'\nimport { GaugeData } from '../types/data/GaugeData'\nimport { Helper } from '../Helper'\nimport { Sector } from '../types/Sector'\nimport { Dropdown } from '../Dropdown'\nimport { Point } from '../types/Point'\nimport { Chart } from '../Chart'\nimport { Theme } from '../Theme'\nimport { TextStyles } from '../helpers/TextStyles'\nimport { TooltipValue } from '../types/TooltipValue'\nimport { Export } from '../Export'\nimport { Formatter } from '../helpers/Formatter'\nimport { Canvas } from '../helpers/Canvas'\nimport { TextResources } from '../static/TextResources'\nimport { AnimationType, RenderState } from '../static/Enums'\n\nexport class GaugeRenderer extends Renderer<GaugeData> {\n    #radius: number\n\n    #center: Point\n\n    constructor(chart: Chart) {\n        super(chart)\n\n        this.settings.enableLegend = false\n    }\n\n    render() {\n        super.render()\n\n        this.#draw()\n\n        const value = this.data.values[0]\n        this.tooltip.render(this.#isInsideSector(this.onMouseMoveEvent, value) && !this.dropdown?.isActive,\n            this.onMouseMoveEvent,\n            [\n                new TooltipValue(`${ value?.label }: ${ Formatter.number(value?.current) }`)\n            ],\n            value)\n\n        if (!this.isDestroy)\n            requestAnimationFrame(this.render.bind(this))\n\n        this.state = RenderState.Idle\n\n        super.renderDropdown()\n    }\n\n    #draw() {\n        const ctx = Canvas.getContext(this.canvas)\n\n        const value = this.data.values[0] ?? { id: Helper.guid() }\n\n        if (this.state == RenderState.Init || this.animations.contains(value.id, AnimationType.Init))\n            this.animations.add(value.id,\n                AnimationType.Init,\n                {\n                    duration: 450,\n                    continuous: true,\n                    body: transition => {\n                        value.current = value.value * transition\n                    }\n                })\n\n        ctx.beginPath()\n\n        ctx.strokeStyle = value.color\n        ctx.lineCap = 'round'\n        ctx.lineWidth = 40\n\n        const piece = value.current / this.data.max,\n            angle = (isNaN(piece) ? 1 : piece) * Math.PI\n\n        if (value.value) {\n            ctx.arc(this.#center.x, this.#center.y, this.#radius, Math.PI, angle - Math.PI)\n            ctx.stroke()\n        }\n\n        ctx.beginPath()\n\n        ctx.lineWidth = 1\n        ctx.lineCap = 'square'\n\n        let localAccumulator = 0,\n            localAngle = Math.PI\n\n        while (localAngle >= 0) {\n            let currentAngle = localAngle - Math.PI / 10 > 0\n                               ? Math.PI / 10\n                               : localAngle\n\n            const getPoint = (offset: number) => {\n                return {\n                    x: this.#center.x + (this.#radius + offset) * Math.cos(Math.PI + localAccumulator),\n                    y: this.#center.y + (this.#radius + offset) * Math.sin(Math.PI + localAccumulator)\n                }\n            }\n\n            let point1 = getPoint(50),\n                point2 = getPoint(90),\n                point3 = getPoint(115)\n\n            const opacity = Math.PI - localAngle > angle ? '66' : 'ff'\n\n            ctx.moveTo(point1.x, point1.y)\n            ctx.lineTo(point2.x, point2.y)\n            ctx.strokeStyle = Theme.text + opacity\n            ctx.stroke()\n\n            TextStyles.regular(ctx)\n            ctx.fillStyle = Theme.text + opacity\n            ctx.fillText((this.data.max - localAngle / Math.PI * this.data.max).toString(), point3.x, point3.y)\n\n            localAccumulator += currentAngle\n\n            localAngle -= Math.PI / 10\n        }\n    }\n\n    #isInsideSector(event: MouseEvent, value: Sector): boolean {\n        if (!event)\n            return false\n\n        const isAngle = (point: Point) => {\n            let a = Math.atan2(point.y - this.#center.y, point.x - this.#center.x)\n            if (a < 0)\n                a += Math.PI * 2\n\n            const piece = value.current / this.data.max,\n                angle = (isNaN(piece) ? 1 : piece) * Math.PI\n\n            return a > Math.PI && Math.PI + angle >= a\n        }\n\n        const isWithinRadius = (v: Point) => {\n            const outerRadius = this.#radius + 20,\n                innerRadius = this.#radius - 20\n\n            return v.x * v.x + v.y * v.y <= outerRadius * outerRadius\n                   && v.x * v.x + v.y * v.y >= innerRadius * innerRadius\n        }\n\n        const point = this.getMousePosition(event),\n            inner = {\n                x: point.x - this.#center.x,\n                y: point.y - this.#center.y\n            }\n\n        return !(this.dropdown?.isActive ?? false)\n               && isAngle(point)\n               && isWithinRadius(inner)\n    }\n\n    #calculateSizes() {\n        const longSide = this.canvas.width < this.canvas.height\n                         ? this.canvas.height - 250\n                         : this.canvas.width\n\n        this.#radius = longSide / 3\n\n        this.#center = {\n            x: this.canvas.width / 2,\n            y: this.canvas.height - this.#radius / 5\n        }\n    }\n\n    refresh() {\n        super.refresh()\n    }\n\n    resize() {\n        super.resize()\n\n        this.initAnimations()\n        this.#calculateSizes()\n    }\n\n    prepareSettings() {\n        super.prepareSettings()\n\n        for (let item of this.data.values) {\n            item.disabled = !item.value\n            item.value ??= 0\n        }\n\n        if (this.data.values.length > 0 && this.data.values[0].value > this.data.max)\n            this.data.values[0].value = this.data.max\n    }\n\n    initDropdown() {\n        super.initDropdown()\n\n        this.dropdown = new Dropdown(this.canvas,\n            {\n                x: -10,\n                y: 10,\n                text: TextResources.menu,\n                items: [\n                    {\n                        text: TextResources.exportPNG,\n                        action: () => {\n                            Export.asPng(this.canvas, this.settings.title)\n                        }\n                    }\n                ]\n            })\n    }\n}","import { Theme } from './Theme'\nimport { Helper } from './Helper'\nimport { Canvas } from './helpers/Canvas'\nimport { TextResources } from './static/TextResources'\nimport { Tag } from './static/Enums'\n\nexport class Export {\n    static asPng(canvas: HTMLCanvasElement, title: string) {\n        requestAnimationFrame(() => {\n            const ctx = Canvas.getContext(canvas)\n\n            let width = Helper.stringWidth(TextResources.exportPNG) + 16,\n                height = 64\n\n            if (width < 50)\n                width = 50\n\n            ctx.clearRect(canvas.width - width, 0, width, height)\n\n            let leftEmpty = 0,\n                rightEmpty = 0\n\n            const imageData = new Uint32Array(ctx.getImageData(0, 0, canvas.width, canvas.height).data.buffer)\n\n            let isBusy = false\n\n            for (let i = 0; i < canvas.width; i++) {\n                for (let j = 0; j < canvas.height; j++) {\n                    if (Canvas.isPixelBusy(imageData[i + j * canvas.width])) {\n                        isBusy = true\n                        break\n                    }\n                }\n\n                if (isBusy)\n                    break\n\n                leftEmpty++\n            }\n\n            isBusy = false\n\n            for (let i = canvas.width; i >= 0; i--) {\n                for (let j = 0; j < canvas.height; j++) {\n                    if (Canvas.isPixelBusy(imageData[i + j * canvas.width])) {\n                        isBusy = true\n                        break\n                    }\n                }\n\n                if (isBusy)\n                    break\n\n                rightEmpty++\n            }\n\n            if (leftEmpty > 4)\n                leftEmpty -= 4\n            if (rightEmpty > 4)\n                rightEmpty -= 4\n\n            if (leftEmpty > rightEmpty)\n                leftEmpty = rightEmpty\n            if (rightEmpty > leftEmpty)\n                rightEmpty = leftEmpty\n\n            let destinationCanvas = document.createElement(Tag.Canvas)\n            destinationCanvas.width = canvas.width - leftEmpty - rightEmpty\n            destinationCanvas.height = canvas.height\n\n            const destCtx = Canvas.getContext(destinationCanvas)\n\n            destCtx.fillStyle = Theme.background\n            destCtx.fillRect(0, 0, canvas.width, canvas.height)\n\n            destCtx.drawImage(canvas, -leftEmpty, 0)\n\n            Export.saveAs((title ?? 'chart') + '.png',\n                destinationCanvas.toDataURL('image/png'))\n        })\n    }\n\n    static asCsv(table: HTMLTableElement, title: string) {\n        let rows = table.querySelectorAll('tr'),\n            csv = []\n\n        for (let i = 0; i < rows.length; i++) {\n            let row = [],\n                cols = rows[i].querySelectorAll('td, th')\n\n            for (let j = 0; j < cols.length; j++) {\n                let data = cols[j].innerHTML\n                                  .replace(/(\\r\\n|\\n|\\r)/gm, '')\n                                  .replace(/(\\s\\s)/gm, ' ')\n\n                data = data.replace(/\"/g, '\"\"')\n                row.push('\"' + data + '\"')\n            }\n\n            csv.push(row.join(','))\n        }\n\n        Export.saveAs((title ?? 'table') + '.csv',\n            csv.join('\\n'),\n            'data:text/csv;charset=utf-8,' + encodeURIComponent(csv.join('\\n')),\n            true)\n    }\n\n    static saveAs(name: string, dataURL: string, href?: string | undefined, isText?: boolean) {\n        if (window.showSaveFilePicker != undefined) {\n            const accept = isText\n                           ? { 'text/csv': '.csv' } as FilePickerAcceptType\n                           : { 'image/*': '.png' } as FilePickerAcceptType\n\n            const options = {\n                suggestedName: name,\n                types: [\n                    {\n                        accept: accept\n                    }\n                ],\n                excludeAcceptAllOption: true\n            } as SaveFilePickerOptions\n\n            function toBlob(dataURI: string) {\n                const byteString = atob(dataURI.split(',')[1]),\n                    mimeString = dataURI.split(',')[0]\n                        .split(':')[1]\n                        .split(';')[0],\n                    buffer = new ArrayBuffer(byteString.length),\n                    imageArray = new Uint8Array(buffer)\n\n                for (let i = 0; i < byteString.length; i++)\n                    imageArray[i] = byteString.charCodeAt(i)\n\n                return new Blob([buffer], { type: mimeString })\n            }\n\n            window.showSaveFilePicker(options)\n                  .then(fileHandle => {\n                      fileHandle.createWritable()\n                                .then(writableStream => {\n                                    writableStream.write(isText ? dataURL : toBlob(dataURL))\n                                                  .then(() => writableStream.close())\n                                })\n                  })\n        } else {\n            let download = document.createElement(Tag.A)\n            download.href = href ?? dataURL\n            download.download = name\n            download.click()\n        }\n    }\n}","export abstract class Formatter {\n    static number = (value: number | undefined) =>\n        value?.toLocaleString(undefined, {\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2\n        }) ?? ''\n\n    static date = (value: Date) =>\n        value.toLocaleDateString()\n}","import { TextStyles } from './helpers/TextStyles'\nimport { Theme } from './Theme'\nimport { Animations } from './Animations'\nimport { Helper } from './Helper'\nimport { ButtonOptions } from './types/ButtonOptions'\nimport { Canvas } from './helpers/Canvas'\nimport { AnimationType } from './static/Enums'\nimport * as Constants from './static/constants/Index'\nimport { Styles } from './static/constants/Styles'\n\nexport class Button {\n    #canvas: HTMLCanvasElement\n\n    #options: ButtonOptions\n\n    #canvasPosition: DOMRect\n\n    animations: Animations\n\n    #isInit: boolean\n\n    #position: DOMRect\n\n    constructor(canvas: HTMLCanvasElement, options: ButtonOptions) {\n        this.#canvas = canvas\n        this.#options = options\n\n        this.animations = new Animations()\n\n        this.#initAnimations()\n\n        const width = Helper.stringWidth(this.#options.text) + 20,\n            height = 24\n\n        this.#position = <DOMRect>{\n            x: this.#options.x + width > this.#canvas.width\n               ? this.#canvas.width - width\n               : this.#options.x < 0\n                 ? this.#canvas.width + this.#options.x - width\n                 : this.#options.x,\n            y: this.#options.y + height > this.#canvas.height\n               ? this.#canvas.height - height\n               : this.#options.y < 0\n                 ? this.#canvas.height + this.#options.y - height\n                 : this.#options.y,\n            width: width,\n            height: height\n        }\n    }\n\n    render(moveEvent: MouseEvent, clickEvent: MouseEvent | undefined) {\n        if (!this.#isInit)\n            this.#initAnimations()\n\n        const ctx = Canvas.getContext(this.#canvas)\n\n        ctx.beginPath()\n\n        const translate = (transition: number, event: AnimationType) => {\n            this.animations.reload('animation-button', event)\n\n            ctx.fillStyle = Helper.adjustColor(Theme.background, -Math.round(transition * 40))\n        }\n\n        if (this.#isOnButton(moveEvent)) {\n            this.#canvas.style.cursor = Styles.Cursor.Pointer\n\n            if (clickEvent && this.#isOnButton(clickEvent)) {\n                this.#options.action()\n                clickEvent = undefined\n            }\n\n            this.animations.add('animation-button',\n                AnimationType.MouseOver,\n                {\n                    duration: 300,\n                    body: transition => {\n                        translate(transition, AnimationType.MouseLeave)\n                    }\n                })\n        } else {\n            this.animations.add('animation-button',\n                AnimationType.MouseLeave,\n                {\n                    timer: Constants.Dates.minDate,\n                    duration: 300,\n                    backward: true,\n                    body: transition => {\n                        translate(transition, AnimationType.MouseOver)\n                    }\n                })\n        }\n\n        ctx.strokeStyle = Theme.background\n        ctx.roundRect(this.#position.x, this.#position.y, this.#position.width, this.#position.height, 4)\n        ctx.fill()\n\n        TextStyles.regular(ctx)\n        ctx.fillText(this.#options.text,\n            this.#position.x + this.#position.width / 2,\n            this.#position.y + this.#position.height / 2)\n\n        this.#isInit = true\n\n        return clickEvent\n    }\n\n    resize() {\n        this.#initAnimations()\n    }\n\n    #initAnimations() {\n        this.#canvasPosition = this.#canvas.getBoundingClientRect()\n\n        this.#canvasPosition.x += scrollX\n        this.#canvasPosition.y += scrollY\n    }\n\n    #isOnButton(event: MouseEvent): boolean {\n        if (!event)\n            return false\n\n        let trueX = event.clientX - this.#canvasPosition.x + scrollX,\n            trueY = event.clientY - this.#canvasPosition.y + scrollY\n\n        return trueX >= this.#position.x && trueX <= this.#position.x + this.#position.width\n               && trueY >= this.#position.y && trueY <= this.#position.y + this.#position.height\n    }\n}","export enum AnimationType {\n    MouseOver,\n\n    MouseLeave,\n\n    Init,\n\n    Click,\n\n    AnotherItemOver,\n\n    AnotherItemLeave\n}\n\nexport enum Attribute {\n    Name = 'name'\n}\n\nexport enum ChartType {\n    Plot,\n\n    Circular,\n\n    Gauge,\n\n    TreeMap\n}\n\nexport enum ErrorType {\n    NullContext = 'Can\\'t find context',\n\n    ElementNotExist = 'Element does not exist'\n}\n\nexport enum Events {\n    VisibilityChanged = 'visibilitychange',\n\n    Blur = 'blur',\n\n    MouseMove = 'mousemove',\n\n    Click = 'click',\n\n    Change = 'change',\n\n    ContextMenu = 'contextmenu'\n}\n\nexport enum LegendPlace {\n    Bottom,\n\n    Left,\n\n    Top,\n\n    Right\n}\n\nexport enum LineType {\n    Solid,\n\n    Dash,\n\n    Dotted\n}\n\nexport enum PlotAxisType {\n    Date = 1\n}\n\nexport enum PlotType {\n    Line,\n\n    AttentionLine,\n\n    Column,\n\n    Bar,\n\n    StackingColumn\n}\n\nexport enum Tag {\n    Canvas = 'canvas',\n\n    A = 'a',\n\n    Div = 'div',\n\n    Dialog = 'dialog',\n\n    Table = 'table',\n\n    Script = 'script'\n}\n\nexport enum RenderState {\n    Idle,\n\n    Init\n}","import { Errors } from './helpers/Errors'\nimport { ErrorType, Tag } from './static/Enums'\n\nexport class Modal {\n    modal: HTMLDialogElement | undefined\n\n    #content: HTMLDivElement | undefined\n\n    constructor(content?: HTMLElement, size?: DOMRect) {\n        this.modal = document.createElement(Tag.Dialog)\n\n        this.modal.classList.add('o-modal')\n\n        if (size) {\n            this.modal.style.width = `${size.width}px`\n            this.modal.style.height = `${size.height}px`\n        }\n\n        this.modal.oncancel = () => this.close()\n\n        document.body.appendChild(this.modal)\n\n        this.#setHeader()\n\n        this.#setContent(content)\n    }\n\n    open() {\n        Errors.throwIsUndefined(this.modal, ErrorType.ElementNotExist)\n\n        this.modal!.showModal()\n    }\n\n    close() {\n        Errors.throwIsUndefined(this.modal, ErrorType.ElementNotExist)\n\n        this.modal!.close()\n\n        this.modal!.remove()\n\n        this.modal = undefined\n    }\n\n    #setHeader() {\n        Errors.throwIsUndefined(this.modal, ErrorType.ElementNotExist)\n\n        let closeButton = document.createElement('button')\n\n        closeButton.classList.add('o-modal-close')\n        closeButton.innerHTML = 'x'\n\n        this.modal!.appendChild(closeButton)\n\n        closeButton.onclick = () => this.close()\n    }\n\n    #setContent(content: HTMLElement | undefined) {\n        if (this.#content == undefined) {\n            this.#content = document.createElement(Tag.Div)\n\n            this.#content.classList.add('o-modal-content')\n\n            this.modal?.appendChild(this.#content)\n        }\n\n        if (content != undefined)\n            this.#content.appendChild(content)\n    }\n}","import { Value } from './base/Value'\nimport { PlotPoint } from './PlotPoint'\nimport { LineType, PlotType } from '../static/Enums'\n\nexport class PlotSeries extends Value {\n    values: PlotPoint[]\n\n    type: PlotType\n\n    width: number\n\n    lineType: LineType = LineType.Solid\n\n    constructor(obj: object) {\n        super()\n\n        Object.assign(this, obj)\n    }\n\n    toggle(transition: number) {\n        super.toggle(transition)\n    }\n\n    checkCondition(): boolean {\n        super.checkCondition()\n\n        return true\n    }\n\n    reset() {\n        super.reset()\n    }\n}","import { Value } from './types/base/Value'\nimport { Renderable } from './types/base/Renderable'\nimport { Helper } from './Helper'\nimport { Sector } from './types/Sector'\nimport { Point } from './types/Point'\nimport { Theme } from './Theme'\nimport { Chart } from './Chart'\nimport { TextStyles } from './helpers/TextStyles'\nimport { Canvas } from './helpers/Canvas'\nimport { Button } from './Button'\nimport { TextResources } from './static/TextResources'\nimport * as Constants from './static/constants/Index'\nimport { Styles } from './static/constants/Styles'\nimport { AnimationType, Events, LegendPlace, RenderState } from './static/Enums'\n\nexport class Legend extends Renderable {\n    #button: Button\n\n    #offset: Point\n\n    #chart: Chart\n\n    #hoverCount: number\n\n    isDestroy: boolean = false\n\n    constructor(chart: Chart) {\n        super(chart)\n\n        this.#chart = chart\n\n        this.calculateSizes()\n\n        if (!this.settings.disableInteractions)\n            this.#button = new Button(this.canvas,\n                {\n                    x: -10,\n                    y: 10,\n                    text: TextResources.reset,\n                    action: () => {\n                        for (let value of this.settings.data.values)\n                            value.reset()\n                    }\n                })\n\n        this.#offset = {\n            x: Legend.getOffsetToCenter(this.settings.data.values, this.canvas.width),\n            y: (this.canvas.height - Legend.getLegendHeight(this.settings.data.values, this.canvas.width)) / 2\n        }\n    }\n\n    render() {\n        super.render()\n\n        const ctx = Canvas.getContext(this.canvas)\n\n        let nextPoint = { x: 20, y: 21 }\n\n        this.canvas.style.cursor = Styles.Cursor.Default\n\n        TextStyles.regular(ctx)\n        ctx.textAlign = 'start'\n        ctx.textBaseline = 'alphabetic'\n\n        ctx.translate(this.#offset.x, this.#offset.y)\n\n        this.#hoverCount = 0\n\n        for (const value of this.settings.data.values.filter(v => !v.hideInLegend))\n            nextPoint = this.#draw(value, nextPoint.x, nextPoint.y)\n\n        ctx.translate(-this.#offset.x, -this.#offset.y)\n\n        if (!this.isDestroy)\n            requestAnimationFrame(this.render.bind(this))\n\n        this.onClickEvent = this.#button?.render(this.onMouseMoveEvent, this.onClickEvent)\n\n        this.state = RenderState.Idle\n    }\n\n    #draw(value: Value, x: number, y: number): Point {\n        const ctx = Canvas.getContext(this.canvas)\n\n        const textWidth = Helper.stringWidth(value.label),\n            circleRadius = 6\n\n        if (x + 48 + textWidth >= this.canvas.width - 40 - this.#offset.x) {\n            x = 20\n            y += 26\n        }\n\n        let rectX = x - circleRadius - circleRadius,\n            rectY = y - circleRadius / 2 - circleRadius,\n            rectW = circleRadius + circleRadius + textWidth + 18,\n            rectH = 20\n\n        const isHover = (event: MouseEvent | undefined) => {\n            if (!event)\n                return false\n\n            const px = event.clientX - this.canvasPosition.x + scrollX - this.#offset.x,\n                py = event.clientY - this.canvasPosition.y + scrollY - this.#offset.y\n\n            return px >= rectX && px <= rectX + rectW\n                   && py >= rectY && py <= rectY + rectH\n        }\n\n        const translate = (transition: number, event: AnimationType) => {\n            this.animations.reload(value.id, event)\n\n            ctx.beginPath()\n\n            ctx.roundRect(rectX, rectY, rectW, rectH, circleRadius)\n\n            ctx.fillStyle = Helper.adjustColor(Theme.canvasBackground, Math.round(-25 * transition))\n            ctx.fill()\n        }\n\n        this.animations.add(value.id,\n            AnimationType.Click,\n            {\n                duration: Constants.Animations.legend,\n                continuous: true,\n                before: () => {\n                    return this.onClickEvent != undefined\n                           && (isHover(this.onClickEvent)\n                               || (value instanceof Sector\n                                   && value.current !== 0\n                                   && value.value !== value.current))\n                           && value.checkCondition()\n                },\n                body: transition => {\n                    value.toggle(transition)\n\n                    if (transition == 1)\n                        this.onClickEvent = new PointerEvent(Events.Click)\n                }\n            })\n\n        if (isHover(this.onMouseMoveEvent)) {\n            this.animations.add(value.id,\n                AnimationType.MouseOver,\n                {\n                    duration: Constants.Animations.button,\n                    body: transition => {\n                        translate(transition, AnimationType.MouseLeave)\n                    }\n                })\n\n            if (!value.disabled) {\n                this.#hoverCount++\n\n                this.#chart.highlight(value)\n            }\n\n            this.canvas.style.cursor = Styles.Cursor.Pointer\n        } else {\n            this.animations.add(value.id,\n                AnimationType.MouseLeave,\n                {\n                    timer: Constants.Dates.minDate,\n                    duration: Constants.Animations.button,\n                    backward: true,\n                    body: transition => {\n                        translate(transition, AnimationType.MouseOver)\n                    }\n                })\n\n            if (this.#hoverCount == 0)\n                this.#chart.highlight()\n        }\n\n        ctx.beginPath()\n\n        ctx.arc(x - 1, y + 1, 3, 0, 2 * Math.PI)\n        ctx.fillStyle = value.disabled ? Helper.grayScale(value.color) : value.color\n        ctx.fill()\n\n        ctx.fillStyle = Theme.text\n        if (value.disabled)\n            ctx.fillStyle += '7f'\n\n        ctx.fillText(value.label, x + circleRadius * 1.5 + 1, y + 6)\n\n        x += 20\n\n        if (value.disabled) {\n            ctx.moveTo(x - 10, y + 2)\n            ctx.lineTo(x + textWidth - 10, y + 2)\n            ctx.strokeStyle = Theme.text + '7f'\n            ctx.stroke()\n        }\n\n        x += textWidth + 22\n\n        return {\n            x: x,\n            y: y\n        }\n    }\n\n    destroy() {\n        this.isDestroy = true\n\n        this.canvas.remove()\n    }\n\n    refresh() {\n        this.state = RenderState.Init\n    }\n\n    resize() {\n        this.calculateSizes()\n        this.#button?.resize()\n        this.initAnimations()\n    }\n\n    calculateSizes() {\n        switch (this.settings.legendPlace) {\n            case LegendPlace.Bottom:\n            default:\n                this.canvas.width = this.settings.width\n                this.canvas.height = Legend.getLegendHeight(this.settings.data.values, this.canvas.width)\n\n                this.node.style.flexDirection = Styles.FlexDirection.Column\n\n                break\n\n            case LegendPlace.Top:\n                this.canvas.width = this.settings.width\n                this.canvas.height = Legend.getLegendHeight(this.settings.data.values, this.canvas.width)\n\n                this.node.style.flexDirection = Styles.FlexDirection.ColumnReverse\n\n                break\n\n            case LegendPlace.Left:\n                this.canvas.width = 500\n                this.canvas.height = this.settings.height\n\n                this.node.style.flexDirection = Styles.FlexDirection.Row\n\n                break\n\n            case LegendPlace.Right:\n                this.canvas.width = 500\n                this.canvas.height = this.settings.height\n\n                this.node.style.flexDirection = Styles.FlexDirection.RowReverse\n\n                break\n        }\n    }\n\n    static getOffsetToCenter(values: Value[], width: number): number {\n        let maxWidth = 20\n\n        for (const value of values.filter(v => !v.hideInLegend)) {\n            const labelWidth = Helper.stringWidth(value.label)\n\n            if (maxWidth + labelWidth + 47 >= width - 100)\n                break\n\n            maxWidth += labelWidth + 47\n        }\n\n        return width / 2 - maxWidth / 2\n    }\n\n    static getLegendHeight(values: Value[], width: number): number {\n        let count = 1,\n            acc = 20,\n            offset = Legend.getOffsetToCenter(values, width)\n\n        for (const value of values.filter(v => !v.hideInLegend)) {\n            const labelWidth = Helper.stringWidth(value.label)\n\n            if (acc + labelWidth + 48 >= width - 32 - offset) {\n                acc = 20\n                count++\n            }\n\n            acc += labelWidth + 48\n        }\n\n        return 24 + count * 20 + (count - 1) * 6\n    }\n}","export class Values {\n    static readonly titleOffset = 30\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { Chart } from './Chart'\nimport { ChartSettings } from './types/ChartSettings'\n\nfunction OCharts() {\n}\n\nOCharts.chart = function(context: HTMLElement, settings: ChartSettings) {\n    return new Chart(context, settings)\n}\n\n// @ts-ignore\nwindow.OCharts = OCharts"],"names":["Animations","constructor","this","Map","add","id","type","value","key","has","set","contains","reload","get","timer","Date","clear","forEach","_value","AnimationType","Init","delete","initializeTransitions","i","t","x","Math","pow","y","transitionCurve","toFixed","getTransition","item","stamp","passed","getTime","transition","duration","before","body","backward","continuous","endsWith","Helper","adjustColor","color","amount","replace","min","max","parseInt","toString","slice","grayScale","Array","join","round","reduce","a","v","padStart","randomColor","floor","random","stringWidth","str","font","widths","from","acc","cur","charCodeAt","guid","S4","substring","toLowerCase","hexToRgb","hex","length","exec","r","g","b","Color","isColorVisible","background","foreground","backgroundAsRgb","foregroundAsRgb","isISOString","test","text","Errors","error","Error","throwIsUndefined","object","undefined","throw","context","settings","node","enableLegend","Legend","document","addEventListener","Events","VisibilityChanged","resetMouse","window","Blur","render","ResizeObserver","canvas","destroy","observe","disconnect","highlight","reset","Theme","enableTooltip","disableInteractions","ChartType","Plot","PlotRenderer","Circular","CircularRenderer","Gauge","GaugeRenderer","TreeMap","prepareSettings","initDropdown","initAnimations","resize","refresh","initialize","isDarkThemeFunction","style","display","Styles","Display","Flex","flexDirection","FlexDirection","Column","alignItems","AlignItems","Center","justifyContent","JustifyContent","height","circular","legend","tree","tooltip","button","Sector","Value","obj","super","Object","assign","toggle","disabled","current","checkCondition","TextResources","exportPNG","decomposeToTable","exportCSV","menu","allDataIsHidden","other","incorrectValues","ThousandShort","MillionShort","BillionShort","Show","NoLabel","getContext","willReadFrequently","ErrorType","NullContext","isPixelBusy","pixel","data","templateId","getElementById","condition","event","lines","opacityValue","getBoundingClientRect","scrollX","scrollY","ctx","Canvas","textWidth","map","line","clientX","clientY","width","beginPath","roundRect","opacity","baseOpacity","strokeStyle","dropdownBorder","lineWidth","fillStyle","stroke","fill","offset","arc","PI","TextStyles","fillText","padding","updateVisibility","visibility","Visibility","Visible","regex","content","cloneNode","createElement","Tag","Div","innerHTML","position","Position","Absolute","pointerEvents","PointerEvents","None","setAttribute","Attribute","Name","matches","matchAll","html","match","property","replaceAll","appendChild","Hidden","left","top","tooltips","querySelectorAll","Constants","ThemeOptions","colors","backgrounds","lineAxes","lineActives","dropdownBorders","canvasBackgrounds","getRows","headers","values","series","seriesValues","push","xType","PlotAxisType","Formatter","date","name","label","unique","Set","uniqueHeaders","filter","sort","Cursor","Default","Pointer","ColumnReverse","Row","RowReverse","ImageRendering","Pixelated","options","isActive","animations","moveEvent","clickEvent","translate","cursor","MouseOver","MouseLeave","Dates","minDate","regular","borderRadius","items","dividers","maxWidth","dropdownOpacity","itemOpacityDec","itemBackground","dropdownItemHoverColor","borderColor","rect","setLineDash","isDivider","moveTo","lineTo","animationKey","isReturn","action","textAlign","textBaseline","w","h","trueX","trueY","callback","isDark","function","matchMedia","setTheme","Change","index","currentTheme","lineAxis","lineActive","canvasBackground","Renderer","chart","enableOther","contextMenu","_other","Modal","Decomposition","toChart","innerWidth","innerHeight","open","onMouseMoveEvent","MouseEvent","MouseMove","state","RenderState","Idle","renderDropdown","renderContextMenu","find","onContextMenuEvent","console","log","dropdown","innerRadius","warn","splice","sum","Dropdown","Export","asPng","title","asCsv","toTable","CircularData","anglesSum","flatMap","sector","angle","reverse","TooltipValue","number","isDestroy","requestAnimationFrame","bind","piece","isNaN","isSingle","s","onClickEvent","includes","Click","PointerEvent","direction","cos","sin","lineJoin","lineCap","indexOf","centerOfSector","minSize","rest","scale","swap","point2","save","labelStartPoint","labelMidPoint","dir","endPoint","isBusy","imageDataX","imageData","Uint32Array","getImageData","buffer","quadraticCurveTo","circularLabel","restore","localAccumulator","localAngle","currentAngle","tangentIntersectionAngle","lengthToTangentIntersection","tangentIntersectionPoint","innerPoint2","changeColor","anyHighlight","highlightItems","AnotherItemOver","AnotherItemLeave","closePath","resetTransform","radius","isWithinRadius","point","getMousePosition","inner","outer","atan2","abs","findIndex","o","sumBefore","isAngle","innerTitle","titleOffset","Values","shortSide","longestLabel","large","Renderable","disableInitAnimation","remove","domRect","parentElement","minWidth","minHeight","baseColor","adjustStep","adjustAmount","dispatchEvent","CustomEvent","detail","clone","canvasPosition","isClick","legendPlace","LegendPlace","Top","Bottom","getLegendHeight","Left","Right","PlotSeries","PlotType","Bar","right","bottom","Tooltip","tooltipLines","axisLineHoverColor","yValue","yHeight","columnWidth","columnsIndex","columnsCount","barsIndex","barsCount","barHeight","step","stackingAccumulator","lineType","LineType","Dash","Dotted","Solid","xIndex","yIndex","getTooltipValue","Line","unit","pointDuration","now","addMilliseconds","next","prevValue","endPointX","endPointY","mouse","AttentionLine","yMax","minStep","fillRect","seriesHeight","StackingColumn","ceil","it","PlotData","skip","simple","clearRect","drawImage","isContainsBar","xTitle","yTitle","rotate","xYPos","xCounter","trySet","isFinite","count","maxLabelWidth","maxCount","renderStep","axisLabelOffset","yCount","yCounter","yStep","labelY","labelYAsKey","postfix","shortLabels","countOfTens","isBar","createImageBitmap","then","res","putImageData","axisLineColor","isAnyEquals","xValues","p","yValues","isDate","tempDate","addDays","yMin","stackingColumns","yMaxWidth","isRight","imageRendering","append","onmousemove","onclick","oncontextmenu","preventDefault","onmouseleave","TreeRenderer","maxHeight","tooltipCell","contextMenuData","totalSquare","minX","minY","isVertical","remainWidth","remainHeight","cells","isLast","j","h1","w1","cell","cellInit","cellIndex","getPrev","E","initAnimationDuration","center","gap","TreeData","table","Table","classList","totals","rows","valuesMap","tableValue","allColumns","header","tableHeader","columns","vKey","vValue","totalValue","totalColumns","container","div","script","Script","flexGrow","cloneSettings","JSON","parse","stringify","getPoint","point1","point3","outerRadius","longSide","leftEmpty","rightEmpty","destinationCanvas","destCtx","saveAs","toDataURL","csv","row","cols","encodeURIComponent","dataURL","href","isText","showSaveFilePicker","suggestedName","types","accept","excludeAcceptAllOption","toBlob","dataURI","byteString","atob","split","mimeString","ArrayBuffer","imageArray","Uint8Array","Blob","fileHandle","createWritable","writableStream","write","close","download","A","click","toLocaleString","minimumFractionDigits","maximumFractionDigits","toLocaleDateString","size","modal","Dialog","oncancel","ElementNotExist","showModal","closeButton","calculateSizes","Button","getOffsetToCenter","nextPoint","hideInLegend","labelWidth","rectX","rectY","circleRadius","rectW","isHover","px","py","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","OCharts","Chart"],"sourceRoot":""}