{"version":3,"file":"ocharts.js","mappings":"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","sources":["webpack://charts/./src/Animations.ts","webpack://charts/./src/Helper.ts","webpack://charts/./src/types/TooltipValue.ts","webpack://charts/./src/helpers/Errors.ts","webpack://charts/./src/Chart.ts","webpack://charts/./src/types/Color.ts","webpack://charts/./src/static/constants/Animations.ts","webpack://charts/./src/types/Sector.ts","webpack://charts/./src/static/TextResources.ts","webpack://charts/./src/helpers/Canvas.ts","webpack://charts/./src/Tooltip.ts","webpack://charts/./src/static/ThemeOptions.ts","webpack://charts/./src/types/data/PlotData.ts","webpack://charts/./src/static/constants/Styles.ts","webpack://charts/./src/Dropdown.ts","webpack://charts/./src/Theme.ts","webpack://charts/./src/render/CircularRenderer.ts","webpack://charts/./src/types/base/Renderer.ts","webpack://charts/./src/types/data/TreeData.ts","webpack://charts/./src/types/data/CircularData.ts","webpack://charts/./src/types/base/Value.ts","webpack://charts/./src/render/PlotRenderer.ts","webpack://charts/./src/static/constants/Dates.ts","webpack://charts/./src/helpers/TextStyles.ts","webpack://charts/./src/types/base/Renderable.ts","webpack://charts/./src/render/TreeRenderer.ts","webpack://charts/./src/Decomposition.ts","webpack://charts/./src/static/constants/Index.ts","webpack://charts/./src/render/GaugeRenderer.ts","webpack://charts/./src/Export.ts","webpack://charts/./src/helpers/Formatter.ts","webpack://charts/./src/Button.ts","webpack://charts/./src/static/Enums.ts","webpack://charts/./src/Modal.ts","webpack://charts/./src/types/PlotSeries.ts","webpack://charts/./src/Legend.ts","webpack://charts/./src/static/constants/Values.ts","webpack://charts/webpack/bootstrap","webpack://charts/./src/Prototypes.ts","webpack://charts/./src/OCharts.ts"],"sourcesContent":["import { AnimationItem } from 'types/AnimationItem'\nimport { AnimationType } from 'static/Enums'\n\nexport class Animations {\n    #queue: Map<string, AnimationItem>\n\n    static transitionCurve: Map<number, number> = new Map()\n\n    constructor() {\n        this.#queue = new Map()\n    }\n\n    add(id: string, type: AnimationType, value: AnimationItem) {\n        const key = this.#getKey(id, type)\n        if (!this.#queue.has(key))\n            this.#queue.set(key, value)\n\n        this.#process(key)\n    }\n\n    contains(id: string, type: AnimationType): boolean {\n        return this.#queue.has(this.#getKey(id, type))\n    }\n\n    reload(id: string, type: AnimationType) {\n        if (this.contains(id, type)) {\n            let item = <AnimationItem>this.#queue.get(this.#getKey(id, type))\n\n            item.timer = new Date()\n        }\n    }\n\n    clear() {\n        this.#queue.forEach((_value, key) => !this.#is(key, AnimationType.Init) && this.#queue.delete(key))\n    }\n\n    #process(key: string) {\n        const item = <AnimationItem>this.#queue.get(key),\n            stamp = new Date(),\n            passed = stamp.getTime() - (item.timer ?? stamp).getTime(),\n            transition = Animations.getTransition(passed > item.duration ? 1 : passed / item.duration),\n            before = item.before ? item.before() : true\n\n        if (!item.timer && before)\n            item.timer = stamp\n\n        if (before)\n            item.body(item.backward ? 1 - transition : transition)\n\n        if (transition == 1 && (!before || item.continuous))\n            this.#queue.delete(key)\n    }\n\n    #getKey(id: string, type: number) {\n        return id + '_' + type\n    }\n\n    #is(key: string, type: number) {\n        return key.endsWith('_' + type)\n    }\n\n    static initializeTransitions() {\n        const valuesCount = 30000,\n            offset = .23,\n            p0 = { x: 0, y: 0 },\n            p1 = { x: 1 - offset, y: offset },\n            p2 = { x: offset, y: 1 - offset },\n            p3 = { x: 1, y: 1 }\n\n        for (let i = 0; i < valuesCount; i++) {\n            const t = (i + 1) / valuesCount\n\n            let x = Math.pow(1 - t, 3) * p0.x\n                    + 3 * Math.pow(1 - t, 2) * p1.x * t\n                    + 3 * (1 - t) * Math.pow(t, 2) * p2.x\n                    + Math.pow(t, 3) * p3.x,\n                y = Math.pow(1 - t, 3) * p0.y\n                    + 3 * Math.pow(1 - t, 2) * p1.y * t\n                    + 3 * (1 - t) * Math.pow(t, 2) * p2.y\n                    + Math.pow(t, 3) * p3.y\n\n            Animations.transitionCurve.set(+x.toFixed(4), y)\n        }\n\n        Animations.transitionCurve.set(0, 0)\n    }\n\n    static getTransition(value: number): number {\n        return Animations.transitionCurve.get(+value.toFixed(4)) ?? 0\n    }\n}","import { Color } from 'types/Color'\nimport { Theme } from 'Theme'\n\nexport function adjustColor(color: string, amount: number) {\n    return '#' + color.replace(/^#/, '').replace(/../g, color => ('0' + Math.min(255, Math.max(0, parseInt(color, 16) + amount)).toString(16)).slice(-2))\n}\n\nexport function grayScale(color: string) {\n    return '#' + Array(4).join(Math.round([.3, .59, .11].reduce((a, v, i) => a + v * parseInt(color[2 * i + 1] + color[2 * i + 2], 16), 0) / 3).toString(16).padStart(2, '0'))\n}\n\nexport function randomColor() {\n    let letters = '0123456789ABCDEF',\n        color = '#'\n    for (let i = 0; i < 6; i++)\n        color += letters[Math.floor(Math.random() * 16)]\n\n    return color\n}\n\nexport function stringWidth(str: string | undefined, font?: number) {\n    if (!str)\n        return 0\n\n    const widths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.559375, 0.2765625, 0.3546875, 0.5546875, 0.5546875, 0.8890625, 0.665625, 0.190625, 0.3328125, 0.3328125, 0.3890625, 0.5828125, 0.2765625, 0.3328125, 0.2765625, 0.3015625, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.2765625, 0.2765625, 0.584375, 0.5828125, 0.584375, 0.5546875, 1.0140625, 0.665625, 0.665625, 0.721875, 0.721875, 0.665625, 0.609375, 0.7765625, 0.721875, 0.2765625, 0.5, 0.665625, 0.5546875, 0.8328125, 0.721875, 0.7765625, 0.665625, 0.7765625, 0.721875, 0.665625, 0.609375, 0.721875, 0.665625, 0.94375, 0.665625, 0.665625, 0.609375, 0.2765625, 0.3546875, 0.2765625, 0.4765625, 0.5546875, 0.3328125, 0.5546875, 0.5546875, 0.5, 0.5546875, 0.5546875, 0.2765625, 0.5546875, 0.5546875, 0.221875, 0.240625, 0.5, 0.221875, 0.8328125, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.3328125, 0.5, 0.2765625, 0.5546875, 0.5, 0.721875, 0.5, 0.5, 0.5, 0.3546875, 0.259375, 0.353125, 0.5890625],\n        avg = 0.5279276315789471\n\n    return Array.from(str).reduce((acc, cur) => acc + (widths[cur.charCodeAt(0)] ?? avg), 0) * (font || 14)\n}\n\nexport function guid() {\n    const S4 = () => (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1)\n    return (S4() + S4() + '-' + S4() + '-4' + S4().slice(0, 3) + '-' + S4() + '-' + S4() + S4() + S4()).toLowerCase()\n}\n\nexport function isColorVisible(background: string, foreground: string) {\n    const backgroundAsRgb = hexToRgb(background),\n        foregroundAsRgb = hexToRgb(foreground),\n        value = .77\n\n    return (backgroundAsRgb.r + backgroundAsRgb.g + backgroundAsRgb.b) / (foregroundAsRgb.r + foregroundAsRgb.g + foregroundAsRgb.b) < value\n}\n\nexport function hexToRgb(hex: string): Color {\n    if (hex.length > 4) {\n        const value = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n        if (value)\n            return {\n                r: parseInt(value[1], 16),\n                g: parseInt(value[2], 16),\n                b: parseInt(value[3], 16)\n            }\n    } else {\n        const value = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i.exec(hex)\n        if (value)\n            return {\n                r: parseInt(value[1] + value[1], 16),\n                g: parseInt(value[2] + value[2], 16),\n                b: parseInt(value[3] + value[3], 16)\n            }\n    }\n\n    return new Color()\n}\n\nexport function isISOString(str: string) {\n    return /\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+/.test(str)\n}\n\nexport function applyAlpha(color: string, opacity: number) {\n    function hexToRgb(hex: string) {\n        let result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n        return result\n               ? {\n                   r: parseInt(result[1], 16),\n                   g: parseInt(result[2], 16),\n                   b: parseInt(result[3], 16)\n               } as Color\n               : {\n                   r: 0,\n                   g: 0,\n                   b: 0\n               } as Color\n    }\n\n    function componentToHex(c: number) {\n        let hex = c.toString(16)\n        return hex.length == 1 ? '0' + hex : hex\n    }\n\n    function rgbToHex(r: number, g: number, b: number) {\n        return '#' + componentToHex(r) + componentToHex(g) + componentToHex(b)\n    }\n\n    const rgb = hexToRgb(color),\n        bg = hexToRgb(Theme.canvasBackground)\n\n    opacity /= 255\n\n    const alpha = 1 - opacity\n\n    return rgbToHex(\n        Math.round((opacity * (rgb.r / 255) + (alpha * (bg.r / 255))) * 255),\n        Math.round((opacity * (rgb.g / 255) + (alpha * (bg.g / 255))) * 255),\n        Math.round((opacity * (rgb.b / 255) + (alpha * (bg.b / 255))) * 255)\n    )\n}","export class TooltipValue {\n    text: string | undefined\n\n    color: string | undefined\n\n    constructor(text?: string, color?: string) {\n        this.text = text\n        this.color = color\n    }\n}","import { ErrorType } from 'static/Enums'\n\nexport abstract class Errors {\n    static throw(error: ErrorType): never {\n        throw new Error(error)\n    }\n\n    static throwIsUndefined(object: any, error: ErrorType) {\n        if (object == undefined)\n            Errors.throw(error)\n    }\n}","import { ChartSettings } from 'types/ChartSettings'\nimport { Renderer } from 'types/base/Renderer'\nimport { Data } from 'types/interfaces/Data'\nimport { Legend } from 'Legend'\nimport { Value } from 'types/base/Value'\nimport { PlotRenderer } from 'render/PlotRenderer'\nimport { CircularRenderer } from 'render/CircularRenderer'\nimport { GaugeRenderer } from 'render/GaugeRenderer'\nimport { TreeRenderer } from 'render/TreeRenderer'\nimport { Animations } from 'Animations'\nimport { Theme } from 'Theme'\nimport { Styles } from 'static/constants/Styles'\nimport { ChartType, Events } from 'static/Enums'\n\nexport class Chart {\n    node: HTMLElement\n\n    settings: ChartSettings\n\n    #renderer: Renderer<Data>\n\n    #legend: Legend | undefined\n\n    #observer: ResizeObserver\n\n    #currentType: ChartType\n\n    constructor(context: HTMLElement, settings: ChartSettings) {\n        this.node = context\n\n        this.applySettings(settings)\n\n        this.#applyStyles()\n\n        document.addEventListener(Events.VisibilityChanged, () => this.#renderer.resetMouse())\n        window.addEventListener(Events.Blur, () => this.#renderer.resetMouse())\n\n        window.addEventListener(Events.Click, event => {\n            if (event.target != this.#renderer.canvas)\n                this.#renderer.closeDropdowns()\n        })\n    }\n\n    render() {\n        this.#renderer.render()\n        this.#legend?.render()\n\n        this.#observer = new ResizeObserver(() => {\n            if (this.#renderer.canvas)\n                this.#resize()\n            else\n                this.destroy()\n        })\n        this.#observer.observe(this.node)\n\n        this.#refresh()\n    }\n\n    destroy() {\n        this.#renderer.destroy()\n        this.#legend?.destroy()\n\n        this.#observer.disconnect()\n    }\n\n    highlight(value?: Value) {\n        this.#renderer.highlight(value)\n    }\n\n    reset() {\n        Theme.reset()\n\n        this.#initialize(this.settings)\n    }\n\n    applySettings(settings: ChartSettings) {\n        this.settings = settings\n\n        this.reset()\n\n        const isNeedRestartRender = this.settings.type != this.#currentType\n\n        this.#prepareSettings()\n\n        if (this.settings.enableLegend && this.#legend != undefined)\n            this.#legend.applySettings(settings)\n\n        if (this.settings.enableLegend && this.#legend == undefined) {\n            this.#legend = new Legend(this)\n\n            this.#legend.render()\n        }\n\n        if (!this.settings.enableLegend && this.#legend != undefined) {\n            this.#legend.destroy()\n\n            this.#legend = undefined\n        }\n\n        if (isNeedRestartRender)\n            this.#renderer.render()\n    }\n\n    #prepareSettings() {\n        this.settings.enableTooltip = !this.settings.disableInteractions && this.settings.enableTooltip\n\n        if (this.#renderer == undefined || this.settings.type != this.#currentType) {\n            this.#renderer?.destroy()\n\n            switch (this.settings.type) {\n                case ChartType.Plot:\n                    this.#renderer = new PlotRenderer(this)\n                    this.#currentType = ChartType.Plot\n                    break\n\n                case ChartType.Circular:\n                    this.#renderer = new CircularRenderer(this)\n                    this.#currentType = ChartType.Circular\n                    break\n\n                case ChartType.Gauge:\n                    this.#renderer = new GaugeRenderer(this)\n                    this.#currentType = ChartType.Gauge\n                    break\n\n                case ChartType.TreeMap:\n                    this.#renderer = new TreeRenderer(this)\n                    this.#currentType = ChartType.TreeMap\n                    break\n            }\n        } else {\n            this.#renderer.applySettings(this.settings)\n        }\n\n        this.#renderer.prepareSettings()\n\n        if (!this.settings.disableInteractions) {\n            this.#renderer.initDropdown()\n            this.#renderer.initAnimations()\n        }\n\n        this.#renderer.resize()\n    }\n\n    #refresh() {\n        this.#renderer.refresh()\n        this.#legend?.refresh()\n    }\n\n    #resize() {\n        this.#renderer.resize()\n        this.#legend?.resize()\n    }\n\n    #initialize(settings: ChartSettings) {\n        Theme.initialize(\n            () => this.#resize(),\n            settings.isDarkThemeFunction\n        )\n        Animations.initializeTransitions()\n    }\n\n    #applyStyles() {\n        this.node.style.display = Styles.Display.Flex\n        this.node.style.flexDirection = Styles.FlexDirection.Column\n        this.node.style.alignItems = Styles.AlignItems.Center\n        this.node.style.justifyContent = Styles.JustifyContent.Center\n        this.node.style.height = '100%'\n    }\n}","export class Color {\n    r: number\n\n    g: number\n\n    b: number\n}","export class Animations {\n    static circular = 335\n\n    static legend = 500\n\n    static tree = 250\n\n    static tooltip = 120\n\n    static button = 200\n}","import { Value } from 'types/base/Value'\nimport { Point } from 'types/Point'\n\nexport class Sector extends Value {\n    current: number\n\n    transition: number\n\n    translate: Point\n\n    innerRadius: number\n\n    constructor(obj: object) {\n        super()\n\n        Object.assign(this, obj)\n    }\n\n    toggle(transition: number) {\n        super.toggle(transition)\n\n        if (this.disabled)\n            this.current = this.value * (1 - transition)\n        else\n            this.current = this.value * transition\n    }\n\n    checkCondition(): boolean {\n        super.checkCondition()\n\n        return (this.current == 0 && !this.disabled) || this.value != 0\n    }\n\n    reset() {\n        super.reset()\n\n        this.current = this.value\n    }\n}","export class TextResources {\n    static exportPNG = 'Save as image...'\n\n    static decomposeToTable = 'Show as table...'\n\n    static reset = 'Reset'\n\n    static exportCSV = 'Save as table...'\n\n    static menu = 'Menu'\n\n    static allDataIsHidden = 'All data is hidden'\n\n    static other = 'Other'\n\n    static thousandShort = 'K'\n\n    static millionShort = 'M'\n\n    static billionShort = 'B'\n\n    static show = 'Show...'\n\n    static noLabel = 'No Label'\n\n    static treeMapIsEmpty = 'Tree Map is empty'\n}","import { Errors } from 'helpers/Errors'\nimport { ErrorType } from 'static/Enums'\nimport { Theme } from 'Theme'\n\nexport abstract class Canvas {\n    static getContext(canvas: HTMLCanvasElement): CanvasRenderingContext2D {\n        return canvas.getContext('2d', { willReadFrequently: true })\n               ?? Errors.throw(ErrorType.NullContext)\n    }\n\n    static isPixelBusy(pixel: number) {\n        return pixel != undefined && pixel - Theme.canvasBackgroundInt != 0\n    }\n}","import { Value } from 'types/base/Value'\nimport { Theme } from 'Theme'\nimport { TextStyles } from 'helpers/TextStyles'\nimport * as Helper from 'Helper'\nimport { ChartSettings } from 'types/ChartSettings'\nimport { TooltipValue } from 'types/TooltipValue'\nimport { Data } from 'types/interfaces/Data'\nimport { Canvas } from 'helpers/Canvas'\nimport * as Constants from 'static/constants/Index'\nimport { Styles } from 'static/constants/Styles'\nimport { HTMLTooltipElement } from 'types/extends/HTMLTooltipElement'\nimport { Attribute, Tag } from 'static/Enums'\n\nexport class Tooltip {\n    canvas: HTMLCanvasElement\n\n    data: Data\n\n    readonly #enabled: boolean\n\n    readonly #isCustom: boolean\n\n    #canvasPosition: DOMRect\n\n    #template: HTMLTemplateElement\n\n    #inProgress: boolean\n\n    #toHide: boolean\n\n    #timer: Date | undefined\n\n    #lines: TooltipValue[]\n\n    constructor(canvas: HTMLCanvasElement, settings: ChartSettings) {\n        this.canvas = canvas\n        this.data = settings.data\n        this.#enabled = settings.enableTooltip\n        this.#isCustom = !!settings.templateId\n\n        if (this.#isCustom)\n            this.#template = <HTMLTemplateElement>document.getElementById(settings.templateId)\n\n        this.refresh()\n    }\n\n    render(condition: boolean, event: MouseEvent, lines: TooltipValue[], value?: Value) {\n        this.#hideAll()\n\n        if (!this.#enabled || !event)\n            return\n\n        if (condition || this.#inProgress || this.#toHide) {\n            if (condition)\n                this.#lines = lines\n\n            if (!this.#timer)\n                this.#timer = new Date()\n\n            if (!this.#toHide)\n                this.#inProgress = true\n            else if (this.#inProgress)\n                this.#timer = new Date()\n\n            if (this.#isCustom)\n                this.#renderCustom(event, value)\n            else\n                this.#renderRegular(event)\n\n            const opacityValue = this.#getOpacityValue()\n\n            if (this.#toHide && opacityValue >= 1) {\n                this.#inProgress = false\n                this.#toHide = false\n            }\n\n            if (this.#toHide && opacityValue <= 0) {\n                this.#inProgress = false\n                this.#toHide = false\n                this.#timer = undefined\n            }\n\n            if (!condition && this.#timer != undefined)\n                this.#toHide = true\n        } else {\n            this.#timer = undefined\n        }\n    }\n\n    #renderRegular(event: MouseEvent) {\n        const ctx = Canvas.getContext(this.canvas)\n\n        const textWidth = Math.max(...this.#lines.map(line => Helper.stringWidth(line.text ?? '') + (line.color ? 8 : 0)))\n\n        const padding = 6,\n            borderRadius = 6\n\n        let x = event.clientX - this.#canvasPosition.x + 10,\n            y = event.clientY - this.#canvasPosition.y + scrollY + 10\n\n        if (x + textWidth + 25 > this.#canvasPosition.width)\n            x = this.#canvasPosition.width - (textWidth + 25)\n\n        if (y + 4 + this.#lines.length * 18 > this.#canvasPosition.height)\n            y = this.#canvasPosition.height - 4 - this.#lines.length * 18\n\n        ctx.beginPath()\n        ctx.roundRect(x, y, textWidth + 24, 16 + 16 * this.#lines.length, borderRadius)\n        let opacity = Math.round(this.#getOpacityValue() * 255).toString(16),\n            baseOpacity = Math.round(this.#getOpacityValue() * 207).toString(16)\n        if (opacity.length == 1)\n            opacity = '0' + opacity\n        if (baseOpacity.length == 1)\n            baseOpacity = '0' + baseOpacity\n\n        ctx.strokeStyle = Theme.dropdownBorder + baseOpacity\n        ctx.lineWidth = 1\n        ctx.fillStyle = Theme.background + baseOpacity\n        ctx.stroke()\n        ctx.fill()\n\n        for (let line of this.#lines) {\n            let offset = 0\n\n            if (line.color) {\n                offset = 12\n\n                ctx.beginPath()\n                ctx.fillStyle = line.color + opacity\n                ctx.arc(x + 16, y + 17, 5, 0, Math.PI * 2)\n                ctx.fill()\n            }\n\n            TextStyles.tooltip(ctx)\n            ctx.fillStyle = Theme.text + opacity\n            ctx.fillText(line.text ?? '', x + offset + padding * 2, y + 21)\n\n            y += 16\n        }\n    }\n\n    #renderCustom(event: MouseEvent, value?: Value) {\n        if (value == undefined)\n            return\n\n        const id = this.#template.id + value.id\n\n        let tooltip = <HTMLTooltipElement>document.getElementById(id)\n\n        const updateVisibility = () => {\n            this.#hideAll()\n\n            tooltip.style.visibility = Styles.Visibility.Visible\n        }\n\n        if (!tooltip) {\n            const regex = /\\${[^}]*}/gm\n\n            let content = <HTMLElement>this.#template.cloneNode(true)\n\n            tooltip = document.createElement(Tag.Div) as HTMLTooltipElement\n\n            tooltip.innerHTML = content.innerHTML\n\n            tooltip.id = id\n            tooltip.style.position = Styles.Position.Absolute\n            tooltip.style.pointerEvents = Styles.PointerEvents.None\n            tooltip.style.visibility = Styles.Visibility.Visible\n\n            tooltip.setAttribute(Attribute.Name, this.#template.id)\n\n            const matches = [...tooltip.innerHTML.matchAll(regex)]\n\n            let html = tooltip.innerHTML\n\n            for (const match of matches) {\n                const property = match[0].replace('${', '')\n                                         .replace('}', '')\n                                         .replaceAll(' ', '')\n\n                html = html.replaceAll(match[0], value.data[property])\n            }\n\n            tooltip.innerHTML = html\n\n            document.body.appendChild(tooltip)\n\n            tooltip.position = tooltip.getBoundingClientRect()\n\n            updateVisibility()\n        }\n\n        if (tooltip.style.visibility == Styles.Visibility.Hidden)\n            updateVisibility()\n\n        if (tooltip.position.height == 0)\n            tooltip.position = tooltip.getBoundingClientRect()\n\n        const offset = 10\n\n        let opacity = '1'\n\n        let x = event.clientX,\n            y = event.clientY + scrollY\n\n        if (x + tooltip.position.width - this.#canvasPosition.x > this.#canvasPosition.width - offset) {\n            x = this.#canvasPosition.width - tooltip.position.width + this.#canvasPosition.x - offset\n            opacity = '.67'\n        }\n\n        if (y + tooltip.position.height - this.#canvasPosition.y > this.#canvasPosition.height - offset) {\n            y = this.#canvasPosition.height - tooltip.position.height + this.#canvasPosition.y - offset\n            opacity = '.67'\n        }\n\n        if (x == 0 && y == 0)\n            opacity = '0'\n\n        tooltip.style.left = x + offset + 'px'\n        tooltip.style.top = y + offset + 'px'\n        tooltip.style.opacity = opacity\n    }\n\n    refresh() {\n        this.#canvasPosition = this.canvas.getBoundingClientRect()\n        this.#canvasPosition.x += scrollX\n        this.#canvasPosition.y += scrollY\n    }\n\n    #hideAll() {\n        if (!this.#isCustom)\n            return\n\n        const tooltips = <NodeListOf<HTMLElement>>document.querySelectorAll(`[name=\"${ this.#template.id }\"]`)\n\n        for (let node of tooltips)\n            node.style.visibility = Styles.Visibility.Hidden\n    }\n\n    #getOpacityValue(): number {\n        if (!this.#timer)\n            return 0\n\n        let opacityValue = this.#toHide\n                           ? 1 - (new Date().getTime() - this.#timer.getTime()) / Constants.Animations.tooltip\n                           : (new Date().getTime() - this.#timer.getTime()) / Constants.Animations.tooltip\n        if (opacityValue > 1)\n            opacityValue = 1\n        if (opacityValue < 0)\n            opacityValue = 0\n\n        return opacityValue\n    }\n}","export class ThemeOptions {\n    static readonly colors = ['#000000', '#ffffff']\n\n    static readonly backgrounds = ['#f7f7f7', '#222222']\n\n    static readonly lines = ['#000000', '#eeeeee']\n\n    static readonly lineAxes = ['#e0e0e0', '#212121']\n\n    static readonly lineActives = ['#898989', '#898989']\n\n    static readonly dropdownBorders = ['#bcbcbc', '#7e7e7e']\n\n    static readonly canvasBackgrounds = ['#ffffff', '#222222']\n}","import { TableValue } from 'types/TableValue'\nimport { PlotSeries } from 'types/PlotSeries'\nimport { TableHeaderValue } from 'types/TableHeaderValue'\nimport { TableData } from 'types/TableData'\nimport { Data } from 'types/interfaces/Data'\nimport { Formatter } from 'helpers/Formatter'\nimport { PlotAxisType } from 'static/Enums'\n\nexport class PlotData implements Data {\n    shortLabels: boolean\n\n    simple: boolean\n\n    yMax: number\n\n    xTitle: string\n\n    yTitle: string\n\n    xType: PlotAxisType\n\n    values: PlotSeries[]\n\n    static getRows(data: PlotData): TableData {\n        let headers: TableHeaderValue[] = []\n\n        let values: TableValue[] = []\n\n        for (const series of data.values) {\n            let seriesValues = new Map<string, any>()\n\n            for (const value of series.values) {\n                seriesValues.set(value.x.toString(), value.y)\n                headers.push({\n                    value: value.x.toString(),\n                    display: data.xType == PlotAxisType.Date\n                             ? Formatter.date(new Date(value.x))\n                             : value.x.toString()\n                })\n            }\n\n            values.push({\n                name: series.label,\n                values: seriesValues\n            })\n        }\n\n        const unique = new Set(),\n            uniqueHeaders = headers.filter(v => !unique.has(v.display) && unique.add(v.display))\n\n        if (data.xType == PlotAxisType.Date)\n            uniqueHeaders.sort((a, b) => new Date(a.value).getTime() - new Date(b.value).getTime())\n\n        return {\n            headers: uniqueHeaders,\n            values: values\n        }\n    }\n}","export namespace Styles {\n    export class Cursor {\n        static Default = 'default'\n\n        static Pointer = 'pointer'\n    }\n\n    export class Display {\n        static Flex = 'flex'\n    }\n\n    export class FlexDirection {\n        static Column = 'column'\n\n        static ColumnReverse = 'column-reverse'\n\n        static Row = 'row'\n\n        static RowReverse = 'row-reverse'\n    }\n\n    export class AlignItems {\n        static Center = 'center'\n    }\n\n    export class Visibility {\n        static Visible = 'visible'\n\n        static Hidden = 'hidden'\n    }\n\n    export class Position {\n        static Absolute = 'absolute'\n    }\n\n    export class PointerEvents {\n        static None = 'none'\n    }\n\n    export class JustifyContent {\n        static Center = 'center'\n    }\n\n    export class ImageRendering {\n        static Pixelated = 'pixelated'\n    }\n}","import { Theme } from 'Theme'\nimport { DropdownOptions } from 'types/DropdownOptions'\nimport { Animations } from 'Animations'\nimport * as Helper from 'Helper'\nimport { TextStyles } from 'helpers/TextStyles'\nimport { Canvas } from 'helpers/Canvas'\nimport { AnimationType } from 'static/Enums'\nimport * as Constants from 'static/constants/Index'\nimport { Styles } from 'static/constants/Styles'\n\nexport class Dropdown {\n    isActive: boolean = false\n\n    #isInit: boolean\n\n    #options: DropdownOptions\n\n    #canvasPosition: DOMRect\n\n    animations: Animations\n\n    #position: DOMRect\n\n    readonly #isOnlyMenu: boolean\n\n    readonly #canvas: HTMLCanvasElement\n\n    constructor(canvas: HTMLCanvasElement, options: DropdownOptions) {\n        this.#canvas = canvas\n        this.#options = options\n\n        if (this.#options.icon)\n            this.#options.text = this.#options.icon\n\n        this.#isOnlyMenu = this.#options.text == undefined\n\n        this.animations = new Animations()\n    }\n\n    render(moveEvent: MouseEvent, clickEvent: MouseEvent | undefined) {\n        if (!this.#isInit)\n            this.#initAnimations()\n\n        if (this.#isOnlyMenu)\n            this.isActive = true\n\n        const ctx = Canvas.getContext(this.#canvas)\n\n        let x = this.#position.x,\n            y = this.#position.y,\n            width = this.#position.width,\n            height = this.#position.height\n\n        ctx.beginPath()\n\n        if (!this.#isOnlyMenu) {\n            const translate = (transition: number, event: AnimationType) => {\n                this.animations.reload('animation-dropdown', event)\n\n                ctx.fillStyle = Helper.adjustColor(Theme.canvasBackground, -Math.round(25 * transition))\n            }\n\n            if (this.#isOnButton(moveEvent, x, y, width, height)) {\n                this.#canvas.style.cursor = Styles.Cursor.Pointer\n\n                if (clickEvent && moveEvent.x == clickEvent.x && moveEvent.y == clickEvent.y) {\n                    this.isActive = !this.isActive\n                    clickEvent = undefined\n                }\n\n                if (!this.isActive)\n                    this.animations.add('animation-dropdown',\n                        AnimationType.MouseOver,\n                        {\n                            duration: 300,\n                            body: transition => {\n                                translate(transition, AnimationType.MouseLeave)\n                            }\n                        })\n                else\n                    ctx.fillStyle = Helper.adjustColor(Theme.canvasBackground, -25)\n            } else {\n                this.#canvas.style.cursor = Styles.Cursor.Default\n\n                if (!this.isActive)\n                    this.animations.add('animation-dropdown',\n                        AnimationType.MouseLeave,\n                        {\n                            timer: Constants.Dates.minDate,\n                            duration: 300,\n                            backward: true,\n                            body: transition => {\n                                translate(transition, AnimationType.MouseOver)\n                            }\n                        })\n                else\n                    ctx.fillStyle = Helper.adjustColor(Theme.canvasBackground, -25)\n            }\n\n            ctx.roundRect(x, y, width, height, 4)\n            ctx.fill()\n\n            TextStyles.regular(ctx)\n\n            if (this.#options.icon)\n                ctx.font = '20px sans-serif'\n\n            const iconOffset = this.#options.icon\n                               ? navigator.platform != 'Win32'\n                                 ? 1\n                                 : -1\n                               : 0\n\n            ctx.fillText(\n                this.#options.text ?? '',\n                x + width / 2,\n                y + height / 2 - iconOffset\n            )\n        }\n\n        if (this.isActive) {\n            const padding = 6,\n                borderRadius = 6\n\n            y += height\n\n            const items = this.#options.items.filter(value => value.text),\n                dividers = this.#options.items.filter(value => !value.text)\n\n            let maxWidth = Math.max(...items.map(value => Helper.stringWidth(value.text)))\n                           + padding * 4\n\n            if (x + maxWidth > this.#canvas.width - 4)\n                x -= x + maxWidth - this.#canvas.width + 4\n\n            const dropdownOpacity = 'bb',\n                itemOpacityDec = 127,\n                itemBackground = Theme.dropdownItemHoverColor,\n                borderColor = Theme.dropdownBorder\n\n            ctx.beginPath()\n\n            const rect = {\n                x: x,\n                y: y,\n                width: maxWidth,\n                height: items.length * 26\n                        + dividers.length * 4\n                        + (items.length == 1 ? padding : 0)\n                        + (items.length == 2 && dividers.length == 1 ? padding : 0)\n            }\n\n            ctx.roundRect(rect.x, rect.y, rect.width, rect.height, borderRadius)\n            ctx.fillStyle = Theme.background + dropdownOpacity\n            ctx.setLineDash([])\n            ctx.lineWidth = 1\n            ctx.strokeStyle = borderColor + dropdownOpacity\n            ctx.fill()\n            ctx.stroke()\n\n            ctx.beginPath()\n\n            y += 6\n\n            for (const item of this.#options.items) {\n                ctx.beginPath()\n\n                if (item.isDivider == true) {\n                    y += 2\n\n                    ctx.moveTo(x + padding, y)\n                    ctx.lineTo(x + maxWidth - padding, y)\n\n                    ctx.lineWidth = .5\n                    ctx.stroke()\n\n                    y += 4\n\n                    continue\n                }\n\n                ctx.fillStyle = 'transparent'\n\n                const animationKey = 'animation-dropdown' + item.text\n\n                const translate = (transition: number, event: AnimationType, isReturn?: boolean) => {\n                    this.animations.reload(animationKey, event)\n\n                    if (isReturn && transition == 1)\n                        return\n\n                    let opacity = Math.round(itemOpacityDec * transition).toString(16)\n                    if (opacity.length == 1)\n                        opacity = '0' + opacity\n\n                    ctx.fillStyle = itemBackground + opacity\n                }\n\n                if (this.#isOnButton(moveEvent, x, y, maxWidth, 20)) {\n                    this.animations.add(animationKey,\n                        AnimationType.MouseOver,\n                        {\n                            duration: 300,\n                            body: transition => {\n                                translate(transition, AnimationType.MouseLeave)\n                            }\n                        })\n\n                    this.#canvas.style.cursor = Styles.Cursor.Pointer\n\n                    if (clickEvent) {\n                        item.action()\n\n                        clickEvent = undefined\n                        this.isActive = false\n                    }\n                } else {\n                    this.animations.add(animationKey,\n                        AnimationType.MouseLeave,\n                        {\n                            timer: Constants.Dates.minDate,\n                            duration: 300,\n                            backward: true,\n                            body: transition => {\n                                translate(transition, AnimationType.MouseOver, true)\n                            }\n                        })\n                }\n\n                ctx.roundRect(x + padding, y, maxWidth - padding * 2, 20, borderRadius)\n                ctx.fill()\n\n                TextStyles.regular(ctx)\n                ctx.fillStyle = Theme.text\n                ctx.textAlign = 'left'\n                ctx.textBaseline = 'hanging'\n                ctx.fillText(item.text, x + padding * 2, y + 5)\n\n                y += 22\n            }\n        }\n\n        ctx.lineWidth = 1\n\n        if (!this.#isOnlyMenu && clickEvent != undefined && this.isActive) {\n            this.isActive = false\n            clickEvent = undefined\n        }\n\n        this.#isInit = true\n\n        if (this.#isOnlyMenu && clickEvent && moveEvent.x == clickEvent.x && moveEvent.y == clickEvent.y) {\n            this.isActive = !this.isActive\n            clickEvent = undefined\n        }\n\n        return clickEvent\n    }\n\n    #initAnimations() {\n        this.#canvasPosition = this.#canvas.getBoundingClientRect()\n\n        this.#canvasPosition.x += scrollX\n        this.#canvasPosition.y += scrollY\n    }\n\n    #isOnButton(event: MouseEvent, x: number, y: number, w: number, h: number): boolean {\n        if (!event)\n            return false\n\n        let trueX = event.clientX - this.#canvasPosition.x + scrollX,\n            trueY = event.clientY - this.#canvasPosition.y + scrollY\n\n        return trueX >= x && trueX <= x + w\n               && trueY >= y && trueY <= y + h\n    }\n\n    refresh() {\n        this.#isInit = false\n    }\n\n    resize() {\n        this.#initAnimations()\n        this.#calculatePosition()\n    }\n\n    close() {\n        this.isActive = false\n    }\n\n    #calculatePosition() {\n        const width = this.#isOnlyMenu ? 0 : Helper.stringWidth(this.#options.text ?? '') + 12,\n            height = this.#isOnlyMenu ? 0 : 20\n\n        this.#position = {\n            x: this.#options.x + width > this.#canvas.width\n               ? this.#canvas.width - width\n               : this.#options.x < 0\n                 ? this.#canvas.width + this.#options.x - width\n                 : this.#options.x,\n            y: this.#options.y + height > this.#canvas.height\n               ? this.#canvas.height - height\n               : this.#options.y < 0\n                 ? this.#canvas.height + this.#options.y - height\n                 : this.#options.y,\n            width: width,\n            height: height\n        } as DOMRect\n    }\n}","import * as Helper from 'Helper'\nimport { ThemeOptions } from 'static/ThemeOptions'\nimport { Events } from 'static/Enums'\n\nexport class Theme {\n    static currentTheme = 0\n\n    static text: string\n\n    static background: string\n\n    static line: string\n\n    static lineAxis: string\n\n    static lineActive: string\n\n    static dropdownItemHoverColor: string\n\n    static dropdownBorder: string\n\n    static canvasBackground: string\n\n    static canvasBackgroundInt: number\n\n    static function: Function | undefined\n\n    static initialize(callback: Function, isDark?: Function) {\n        if (!Theme.function && isDark)\n            Theme.function = isDark\n\n        if (window.matchMedia\n            && window.matchMedia('(prefers-color-scheme: dark)').matches\n            && (!Theme.function || Theme.function()))\n            Theme.setTheme(1)\n        else\n            Theme.setTheme(0)\n\n        window.matchMedia('(prefers-color-scheme: dark)')\n              .addEventListener(Events.Change, event => {\n                  Theme.setTheme(event.matches && (!Theme.function || Theme.function()) ? 1 : 0)\n                  callback()\n              })\n    }\n\n    static setTheme(index: number) {\n        Theme.currentTheme = index\n\n        Theme.text = ThemeOptions.colors[index]\n        Theme.background = ThemeOptions.backgrounds[index]\n        Theme.line = ThemeOptions.lines[index]\n        Theme.lineAxis = ThemeOptions.lineAxes[index]\n        Theme.lineActive = ThemeOptions.lineActives[index]\n        Theme.dropdownItemHoverColor = Helper.adjustColor(Theme.background, index == 0 ? -50 : 50)\n        Theme.dropdownBorder = ThemeOptions.dropdownBorders[index]\n        Theme.canvasBackground = ThemeOptions.canvasBackgrounds[index]\n        Theme.canvasBackgroundInt = Number(`0xff${ Theme.canvasBackground.slice(1) }`)\n    }\n\n    static reset() {\n        this.function = undefined\n    }\n}","import { Renderer } from 'types/base/Renderer'\nimport { CircularData } from 'types/data/CircularData'\nimport { Sector } from 'types/Sector'\nimport { CircularAngle } from 'types/CircularAngle'\nimport { Point } from 'types/Point'\nimport { DropdownItem } from 'types/DropdownItem'\nimport * as Helper from 'Helper'\nimport { Dropdown } from 'Dropdown'\nimport { Theme } from 'Theme'\nimport { TextStyles } from 'helpers/TextStyles'\nimport { Chart } from 'Chart'\nimport { TooltipValue } from 'types/TooltipValue'\nimport { Decomposition } from 'Decomposition'\nimport { Export } from 'Export'\nimport { TextResources } from 'static/TextResources'\nimport { Modal } from 'Modal'\nimport { Canvas } from 'helpers/Canvas'\nimport { Formatter } from 'helpers/Formatter'\nimport { AnimationType, Events, Icon, RenderState } from 'static/Enums'\nimport * as Constants from 'static/constants/Index'\nimport { Styles } from 'static/constants/Styles'\n\nexport class CircularRenderer extends Renderer<CircularData> {\n    #canRenderInnerTitle: boolean\n\n    #isDonut: boolean\n\n    #radius: number\n\n    #sum: number\n\n    #accumulator: number\n\n    #animationOffset: number\n\n    #hoverCount: number\n\n    #currentHover: string | undefined\n\n    #pinned: string[]\n\n    #center: Point\n\n    #startPoint: Point\n\n    #angles: CircularAngle[]\n\n    #other: Sector[]\n\n    #innerTitleStyle: Function\n\n    readonly #startAngle: number\n\n    constructor(chart: Chart) {\n        super(chart)\n\n        this.#startAngle = Math.PI / 4\n\n        this.onMouseMoveEvent = new MouseEvent(Events.MouseMove)\n    }\n\n    render() {\n        super.render()\n\n        this.#accumulator = this.#startAngle\n        this.#hoverCount = 0\n\n        if (this.data.values.filter(v => !v.disabled).length == 0)\n            this.#drawEmpty()\n        else\n            this.#draw()\n\n        if (this.#hoverCount == 0)\n            this.#currentHover = undefined\n\n        this.state = RenderState.Idle\n\n        super.renderDropdown()\n\n        if (this.#currentHover || this.contextMenu)\n            this.renderContextMenu(this.data.values.find(v => v.id == this.#currentHover)?.data ?? {})\n        else\n            this.onContextMenuEvent = undefined\n\n        if (this.#currentHover)\n            this.canvas.style.cursor = Styles.Cursor.Pointer\n        else\n            this.highlight()\n    }\n\n    #draw() {\n        if (this.onMouseMoveEvent || this.state == RenderState.Init) {\n            this.#sum = this.data.values.reduce((acc, v) => acc + v.current, 0)\n\n            let anglesSum = this.#startAngle\n            this.#angles = this.data.values.flatMap(sector => {\n                                   const angle = sector.current / this.#sum * 2 * Math.PI\n\n                                   return {\n                                       id: sector.id,\n                                       value: angle,\n                                       sum: (anglesSum += angle) - angle\n                                   }\n                               })\n                               .reverse()\n\n            this.#startPoint = this.#getPoint(this.#radius, 0)\n\n            for (const value of this.data.values)\n                this.#drawSector(value)\n\n            const value = this.data.values.find(v => v.id == this.#currentHover)\n            this.tooltip.render(!!value && !this.dropdown?.isActive,\n                this.onMouseMoveEvent,\n                [\n                    new TooltipValue(`${ value?.label }: ${ Formatter.number(value?.current) }`)\n                ],\n                value)\n\n            this.#drawInnerTitle()\n        }\n\n        if (!this.isDestroy)\n            requestAnimationFrame(this.render.bind(this))\n    }\n\n    #drawSector(value: Sector) {\n        const ctx = Canvas.getContext(this.canvas)\n\n        ctx.fillStyle = value.color\n        ctx.strokeStyle = value.color\n\n        const piece = value.current / this.#sum,\n            angle = (isNaN(piece) ? 1 : piece) * 2 * Math.PI\n\n        const isSingle = this.data.values.filter(s => !s.disabled).length == 1\n\n        if ((!!this.onClickEvent || this.#pinned.includes(value.id))\n            && !this.animations.contains(value.id, AnimationType.Init)\n            && !isSingle) {\n            this.animations.add(value.id,\n                AnimationType.Click,\n                {\n                    duration: Constants.Animations.circular,\n                    before: () => {\n                        if (!!this.onClickEvent) {\n                            if (this.#isInsideSector(this.onClickEvent, value)) {\n                                if (this.#pinned.includes(value.id))\n                                    this.#pinned = this.#pinned.filter(id => id != value.id)\n                                else\n                                    this.#pinned.push(value.id)\n\n                                this.onClickEvent = new PointerEvent(Events.Click)\n                            }\n                        }\n\n                        return true\n                    },\n                    body: () => {\n                        if (!this.#pinned.includes(value.id))\n                            return\n\n                        const piece = value.current / this.#sum,\n                            angle = (isNaN(piece) ? 1 : piece) * 2 * Math.PI,\n                            direction = this.#accumulator + angle / 2\n\n                        const transition = {\n                            x: this.#animationOffset * Math.cos(direction),\n                            y: this.#animationOffset * Math.sin(direction)\n                        }\n\n                        ctx.translate(transition.x, transition.y)\n\n                        if (angle > Math.PI / 6)\n                            ctx.lineWidth = 8\n                        ctx.lineJoin = 'round'\n                        ctx.lineCap = 'round'\n\n                        ctx.fillStyle = value.color\n                    }\n                })\n        }\n\n        if (this.onMouseMoveEvent && this.#isInsideSector(this.onMouseMoveEvent, value)) {\n            this.#currentHover = value.id\n            this.#hoverCount++\n        }\n\n        if (this.state == RenderState.Init || this.animations.contains(value.id, AnimationType.Init)) {\n            this.animations.add(value.id,\n                AnimationType.Init,\n                {\n                    duration: Constants.Animations.circular + (this.data.values.indexOf(value) + 1) / this.data.values.length * Constants.Animations.circular,\n                    continuous: true,\n                    body: transition => {\n                        const centerOfSector = {\n                            x: this.#center.x + this.#radius / 2 * Math.cos(this.#accumulator + angle / 2),\n                            y: this.#center.y + this.#radius / 2 * Math.sin(this.#accumulator + angle / 2)\n                        }\n\n                        const minSize = .7,\n                            rest = 1 - minSize\n\n                        ctx.translate(centerOfSector.x - centerOfSector.x * (minSize + transition * rest),\n                            centerOfSector.y - centerOfSector.y * (minSize + transition * rest))\n                        ctx.scale((minSize + transition * rest), (minSize + transition * rest))\n\n                        let opacity = Math.round(255 * transition).toString(16)\n\n                        if (opacity.length < 2)\n                            opacity = 0 + opacity\n\n                        ctx.fillStyle = value.color + opacity\n                        ctx.strokeStyle = Helper.applyAlpha(value.color, 255 * transition)\n                    }\n                })\n        } else if (this.onMouseMoveEvent\n                   && !this.animations.contains(value.id, AnimationType.Init)\n                   && !this.#pinned.includes(value.id)\n                   && !isSingle) {\n            const translate = (transition: number, event: AnimationType, swap: boolean) => {\n                this.animations.reload(value.id, event)\n\n                ctx.lineWidth = 1\n                ctx.lineJoin = 'miter'\n                ctx.lineCap = 'butt'\n\n                if (transition == 0)\n                    return\n\n                if (swap)\n                    transition = value.transition\n\n                const piece = value.current / this.#sum,\n                    angle = (isNaN(piece) ? 1 : piece) * 2 * Math.PI,\n                    direction = this.#accumulator + angle / 2,\n                    translate = {\n                        x: this.#animationOffset * Math.cos(direction) * transition,\n                        y: this.#animationOffset * Math.sin(direction) * transition\n                    }\n\n                ctx.translate(translate.x, translate.y)\n\n                if (angle > Math.PI / 6)\n                    ctx.lineWidth = transition * 8\n                ctx.lineJoin = 'round'\n                ctx.lineCap = 'round'\n\n                value.translate = translate\n                value.transition = transition\n            }\n\n            if (!this.#isInsideSector(this.onMouseMoveEvent, value)\n                || !this.animations.contains(value.id, AnimationType.MouseLeave))\n                this.animations.add(value.id,\n                    AnimationType.MouseLeave,\n                    {\n                        timer: Constants.Dates.minDate,\n                        duration: Constants.Animations.circular,\n                        backward: true,\n                        body: transition => {\n                            translate(transition,\n                                AnimationType.MouseOver,\n                                value.transition < transition)\n                        }\n                    })\n            else\n                this.animations.add(value.id,\n                    AnimationType.MouseOver,\n                    {\n                        duration: Constants.Animations.circular,\n                        body: transition => {\n                            translate(transition,\n                                AnimationType.MouseLeave,\n                                value.transition > transition)\n                        }\n                    })\n        }\n\n        let point2 = this.#getPoint(this.#radius, angle)\n\n        if (angle > 0) {\n            ctx.save()\n\n            if (value.current > 0) {\n                let labelStartPoint = this.#getPoint(this.#radius + 10, angle / 2),\n                    labelMidPoint = this.#getPoint(this.#radius + 20, angle / 2)\n\n                const dir = labelStartPoint.x > this.#center.x ? 1 : -1\n\n                let endPoint = {\n                    x: labelMidPoint.x + 10 * dir,\n                    y: labelMidPoint.y\n                }\n\n                let isBusy = false\n\n                const textWidth = Helper.stringWidth(value.label),\n                    imageDataX = dir == 1 ? endPoint.x + 12 : endPoint.x - textWidth - 12,\n                    imageData = new Uint32Array(ctx.getImageData(imageDataX, endPoint.y - 12, textWidth + 12, 28).data.buffer)\n\n                if (imageDataX < 0 || imageDataX + textWidth > this.canvas.width\n                    || endPoint.y - 12 < 0 || endPoint.y + 12 > this.canvas.height)\n                    isBusy = true\n\n                if (!isBusy)\n                    for (let i = 0; i < imageData.length; i++)\n                        if (Canvas.isPixelBusy(imageData[i])) {\n                            isBusy = true\n                            break\n                        }\n\n                if (!isBusy) {\n                    ctx.beginPath()\n                    ctx.moveTo(labelStartPoint.x, labelStartPoint.y)\n\n                    ctx.quadraticCurveTo(labelMidPoint.x, labelMidPoint.y, endPoint.x, endPoint.y)\n\n                    let opacity = Math.round(255 * (value.current / value.value)).toString(16)\n\n                    if (opacity.length < 2)\n                        opacity = 0 + opacity\n\n                    ctx.strokeStyle = Theme.text + opacity\n                    ctx.lineCap = 'butt'\n                    ctx.lineJoin = 'miter'\n                    ctx.lineWidth = 1\n                    ctx.stroke()\n\n                    ctx.fillStyle = Theme.text + opacity\n                    TextStyles.circularLabel(ctx, dir == 1)\n                    ctx.fillText(value.label, endPoint.x + 8 * dir, endPoint.y + 4)\n                }\n            }\n\n            ctx.restore()\n\n            ctx.beginPath()\n\n            if (!this.#isDonut)\n                ctx.moveTo(this.#center.x, this.#center.y)\n\n            ctx.lineTo(this.#startPoint.x, this.#startPoint.y)\n\n            let localAccumulator = 0,\n                localAngle = angle\n\n            while (localAngle > 0) {\n                let currentAngle = localAngle - Math.PI / 6 > 0\n                                   ? Math.PI / 6\n                                   : localAngle\n\n                point2 = this.#getPoint(this.#radius, localAccumulator + currentAngle)\n\n                const tangentIntersectionAngle = Math.PI - currentAngle,\n                    lengthToTangentIntersection = this.#radius / Math.sin(tangentIntersectionAngle / 2),\n                    tangentIntersectionPoint = this.#getPoint(lengthToTangentIntersection, localAccumulator + currentAngle / 2)\n\n                ctx.quadraticCurveTo(tangentIntersectionPoint.x, tangentIntersectionPoint.y, point2.x, point2.y)\n\n                localAccumulator += currentAngle\n\n                localAngle -= Math.PI / 6\n            }\n\n            if (this.#isDonut || value.innerRadius != 0) {\n                const innerRadius = this.#radius * (value.innerRadius / 100)\n\n                const innerPoint2 = {\n                    x: point2.x - (((this.#radius - innerRadius) * (point2.x - this.#center.x)) / this.#radius),\n                    y: point2.y - (((this.#radius - innerRadius) * (point2.y - this.#center.y)) / this.#radius)\n                }\n\n                ctx.lineTo(innerPoint2.x, innerPoint2.y)\n\n                localAngle = 0\n                localAccumulator = angle\n\n                while (localAngle < angle) {\n                    let currentAngle = localAngle + Math.PI / 6 < angle\n                                       ? Math.PI / 6\n                                       : angle - localAngle\n\n                    point2 = this.#getPoint(innerRadius, localAccumulator - currentAngle)\n\n                    const tangentIntersectionAngle = Math.PI - currentAngle,\n                        lengthToTangentIntersection = innerRadius / Math.sin(tangentIntersectionAngle / 2),\n                        tangentIntersectionPoint = this.#getPoint(lengthToTangentIntersection, localAccumulator - currentAngle / 2)\n\n                    ctx.quadraticCurveTo(tangentIntersectionPoint.x, tangentIntersectionPoint.y, point2.x, point2.y)\n\n                    localAccumulator -= currentAngle\n\n                    localAngle += Math.PI / 6\n                }\n\n                point2 = this.#getPoint(this.#radius, angle)\n            }\n\n            if (!this.animations.contains(value.id, AnimationType.Init)) {\n                const changeColor = (transition: number, event: AnimationType) => {\n                    this.animations.reload(value.id, event)\n\n                    if (transition == 0)\n                        return\n\n                    let opacity = Math.round(255 - 127 * transition).toString(16)\n                    if (opacity.length < 2)\n                        opacity = 0 + opacity\n\n                    ctx.fillStyle = value.color + opacity\n                    ctx.strokeStyle = Helper.applyAlpha(value.color, 255 - 127 * transition)\n                }\n\n                const anyHighlight = this.highlightItems.length != 0\n\n                if ((this.#currentHover && this.#currentHover != value.id)\n                    || (anyHighlight && !this.highlightItems.includes(value.id))) {\n                    this.animations.add(\n                        value.id,\n                        AnimationType.AnotherItemOver,\n                        {\n                            duration: Constants.Animations.circular,\n                            body: transition => {\n                                changeColor(transition, AnimationType.AnotherItemLeave)\n                            }\n                        }\n                    )\n                } else if (this.#currentHover == undefined || !anyHighlight) {\n                    this.animations.add(\n                        value.id,\n                        AnimationType.AnotherItemLeave,\n                        {\n                            timer: Constants.Dates.minDate,\n                            duration: Constants.Animations.circular,\n                            backward: true,\n                            body: transition => {\n                                changeColor(transition, AnimationType.AnotherItemOver)\n                            }\n                        }\n                    )\n                }\n            }\n\n            ctx.closePath()\n\n            ctx.fill()\n            ctx.stroke()\n\n            this.#accumulator += angle\n        }\n\n        ctx.resetTransform()\n\n        this.#startPoint = point2\n    }\n\n    #getPoint(radius: number, angle: number): Point {\n        return {\n            x: this.#center.x + radius * Math.cos(this.#accumulator + angle),\n            y: this.#center.y + radius * Math.sin(this.#accumulator + angle)\n        }\n    }\n\n    #isInsideSector(event: MouseEvent, value: Sector): boolean {\n        const isAngle = (point: Point) => {\n            let a = Math.atan2(point.y - this.#center.y, point.x - this.#center.x)\n            if (a < 0)\n                a += Math.PI * 2\n            if (a < this.#startAngle)\n                a = Math.PI * 2 - Math.abs(this.#startAngle - a) + this.#startAngle\n\n            let index = this.#angles.findIndex(o => o.id == value.id),\n                sumBefore = this.#angles[index].sum\n\n            return !(this.dropdown?.isActive ?? false)\n                   && sumBefore <= a\n                   && sumBefore + this.#angles[index].value - a >= 0\n        }\n\n        const isWithinRadius = (v: Point) => {\n            return v.x * v.x + v.y * v.y <= this.#radius * this.#radius\n                   && (!this.#isDonut || v.x * v.x + v.y * v.y\n                       >= this.#radius * (value.innerRadius / 100) * this.#radius * (value.innerRadius / 100))\n        }\n\n        const point = this.getMousePosition(event),\n            inner = {\n                x: point.x - this.#center.x,\n                y: point.y - this.#center.y\n            },\n            outer = {\n                x: point.x - this.#center.x - value.translate?.x,\n                y: point.y - this.#center.y - value.translate?.y\n            }\n\n        return isAngle(point) && (isWithinRadius(inner) || isWithinRadius(outer))\n    }\n\n    #drawEmpty() {\n        const ctx = Canvas.getContext(this.canvas)\n\n        ctx.beginPath()\n\n        ctx.arc(this.#center.x, this.#center.y, this.#radius, 0, 2 * Math.PI)\n        ctx.strokeStyle = Theme.text\n        ctx.stroke()\n\n        TextStyles.regular(ctx)\n        ctx.fillText(TextResources.allDataIsHidden, this.#center.x, this.#center.y)\n\n        requestAnimationFrame(this.render.bind(this))\n    }\n\n    #drawInnerTitle() {\n        if (this.#canRenderInnerTitle) {\n            const ctx = Canvas.getContext(this.canvas)\n\n            this.#innerTitleStyle(ctx)\n            ctx.fillText(this.data.innerTitle, this.#center.x, this.#center.y)\n        }\n    }\n\n    #calculateSizes() {\n        const titleOffset = this.settings.title\n                            ? Constants.Values.titleOffset\n                            : 0\n\n        const shortSide = this.canvas.width > this.canvas.height - titleOffset * 2\n                          ? this.canvas.height - titleOffset * 2\n                          : this.canvas.width\n\n        this.#center = {\n            x: this.canvas.width / 2,\n            y: titleOffset + this.canvas.height / 2\n        }\n\n        let longestLabel = 0\n\n        for (const value of this.data.values) {\n            const width = Helper.stringWidth(value.label)\n\n            if (width > longestLabel)\n                longestLabel = width\n        }\n\n        this.#radius = shortSide / 2 - (longestLabel + 50)\n\n        if (this.#radius < shortSide / 2 - 50)\n            this.#radius = shortSide / 2 - 50\n\n        if (this.data.innerTitle != undefined && this.data.innerTitle != '') {\n            this.#innerTitleStyle = TextStyles.large\n            this.#canRenderInnerTitle = Helper.stringWidth(this.data.innerTitle, 16)\n                                        < (this.data.innerRadius / 100) * this.#radius * 2\n\n            if (!this.#canRenderInnerTitle) {\n                this.#innerTitleStyle = TextStyles.regular\n                this.#canRenderInnerTitle = Helper.stringWidth(this.data.innerTitle, 14)\n                                            < (this.data.innerRadius / 100) * this.#radius * 2\n            }\n\n            if (!this.#canRenderInnerTitle)\n                console.warn(`Inner title is declared, but can't be rendered`)\n        }\n\n        this.#animationOffset = this.#radius * .1\n    }\n\n    refresh() {\n        super.refresh()\n\n        this.dropdown?.refresh()\n    }\n\n    resize() {\n        super.resize()\n\n        this.initAnimations()\n        this.#calculateSizes()\n        this.dropdown?.resize()\n    }\n\n    prepareSettings() {\n        super.prepareSettings()\n\n        this.data.values = this.data.values.map(v => new Sector(v))\n\n        if (this.settings.enableOther) {\n            if (!this.settings.contextMenu)\n                this.settings.contextMenu = [] as DropdownItem[]\n            else\n                this.settings.contextMenu.push({\n                    isDivider: true\n                } as DropdownItem)\n\n            this.settings.contextMenu.push({\n                text: TextResources.show,\n                condition: data => data?._other,\n                action: () => {\n                    new Modal(Decomposition.toChart<Sector>(this.settings, this.#other),\n                        {\n                            width: window.innerWidth * .8,\n                            height: window.innerHeight * .8\n                        } as DOMRect)\n                        .open()\n                }\n            })\n        }\n\n        this.#pinned = []\n\n        this.#isDonut = (this.data.innerRadius ?? 0) != 0\n\n        for (let item of this.data.values) {\n            item.disabled = !item.value\n            item.value ??= 0\n            item.current = item.value\n            item.innerRadius ??= this.data.innerRadius ?? 0\n\n            if (item.value < 0)\n                console.warn(`\"${ item.label }\" has negative value (${ item.value }) and will not be render`)\n        }\n\n        this.data.values = this.data.values.filter(v => v.value >= 0)\n\n        if (this.settings.enableOther && this.data.values.length > 20) {\n            this.#other = this.data.values.splice(20)\n\n            const sum = this.#other.reduce((acc, v) => acc + v.current, 0)\n\n            this.data.values = this.data.values.slice(0, 20)\n\n            this.data.values.push(new Sector({\n                value: sum,\n                current: sum,\n                label: TextResources.other,\n                id: Helper.guid(),\n                color: this.#other[this.#other.length - 1].color,\n                innerRadius: this.data.innerRadius,\n                data: {\n                    _other: true\n                }\n            }))\n        }\n    }\n\n    initDropdown() {\n        super.initDropdown()\n\n        this.dropdown = new Dropdown(this.canvas,\n            {\n                x: -10,\n                y: 10,\n                icon: Icon.ThreeLines,\n                items: [\n                    {\n                        text: TextResources.exportPNG,\n                        action: () => {\n                            Export.asPng(this.canvas, this.settings.title)\n                        }\n                    },\n                    {\n                        text: TextResources.exportCSV,\n                        action: () => {\n                            Export.asCsv(Decomposition.toTable(CircularData.getRows(this.data)), this.settings.title)\n                        }\n                    },\n                    {\n                        isDivider: true\n                    } as DropdownItem,\n                    {\n                        text: TextResources.decomposeToTable,\n                        action: () => {\n                            new Modal(Decomposition.toTable(CircularData.getRows(this.data))).open()\n                        }\n                    }\n                ]\n            })\n    }\n}","import { Data } from 'types/interfaces/Data'\nimport { Renderable } from 'types/base/Renderable'\nimport * as Helper from 'Helper'\nimport { Value } from 'types/base/Value'\nimport { Legend } from 'Legend'\nimport { Dropdown } from 'Dropdown'\nimport { DropdownItem } from 'types/DropdownItem'\nimport { Point } from 'types/Point'\nimport { TextResources } from 'static/TextResources'\nimport { Chart } from 'Chart'\nimport { Canvas } from 'helpers/Canvas'\nimport { TextStyles } from 'helpers/TextStyles'\nimport { LegendPlace, RenderState } from 'static/Enums'\nimport * as Constants from 'static/constants/Index'\nimport { ChartSettings } from '../ChartSettings'\n\nexport class Renderer<T extends Data> extends Renderable {\n    dropdown: Dropdown\n\n    data: T\n\n    protected isDestroy: boolean = false\n\n    protected highlightItems: string[]\n\n    constructor(chart: Chart) {\n        super(chart)\n\n        this.highlightItems = []\n\n        this.state = this.settings.disableInitAnimation ? RenderState.Idle : RenderState.Init\n    }\n\n    render() {\n        super.render()\n\n        this.renderTitle()\n    }\n\n    destroy() {\n        this.isDestroy = true\n\n        this.canvas.remove()\n    }\n\n    renderDropdown() {\n        this.onClickEvent = this.dropdown?.render(this.onMouseMoveEvent, this.onClickEvent)\n    }\n\n    resize() {\n        this.#calculateSizes()\n        this.tooltip.refresh()\n        this.dropdown?.resize()\n    }\n\n    prepareSettings() {\n        this.data = <T>this.settings.data\n\n        const domRect = this.node.parentElement!.getBoundingClientRect()\n\n        this.settings.minWidth = isNaN(+this.settings.width)\n                                 ? 0\n                                 : +this.settings.width\n        this.settings.minHeight = isNaN(+this.settings.height)\n                                  ? 0\n                                  : +this.settings.height\n\n        this.settings.width = this.settings.minWidth != 0 && domRect.width < this.settings.minWidth\n                              ? this.settings.minWidth\n                              : domRect.width\n\n        this.settings.height = this.settings.minHeight != 0 && domRect.height < this.settings.minHeight\n                               ? this.settings.minHeight\n                               : domRect.height\n\n        this.canvas.width = this.settings.width\n        this.canvas.height = this.settings.height\n\n        for (let item of this.settings.data.values) {\n            item.id = Helper.guid()\n            item.label ??= TextResources.noLabel\n\n            if (item.label.length > 30)\n                item.label = item.label.slice(0, 27) + '...'\n        }\n\n        this.calculateColors()\n\n        for (let item of this.settings.contextMenu ?? [])\n            if (item.id != undefined)\n                item.action = data => this.node.dispatchEvent(new CustomEvent(item.id ?? '', { detail: data }))\n    }\n\n    calculateColors(force: boolean = false) {\n        const baseColor = this.settings.baseColor ?? Helper.randomColor()\n        let adjustStep = Math.round(100 / this.settings.data.values.length),\n            adjustAmount = -50\n\n        if (adjustStep <= 1)\n            adjustStep = 1\n\n        for (let item of this.settings.data.values)\n            if (item.color == undefined || force)\n                item.color = Helper.adjustColor(baseColor, adjustAmount += adjustStep)\n    }\n\n    initDropdown() {\n    }\n\n    renderContextMenu(data: any) {\n        if (this.dropdown?.isActive) {\n            this.onContextMenuEvent = undefined\n\n            return false\n        }\n\n        if (this.onContextMenuEvent != undefined && this.settings.contextMenu?.length != 0) {\n            if (this.contextMenu == undefined && this.settings.contextMenu != undefined) {\n                let clone: DropdownItem[] = []\n\n                for (const item of this.settings.contextMenu)\n                    if (!item.condition || item.condition(data))\n                        clone.push({\n                            id: item.id,\n                            text: item.text,\n                            isDivider: item.isDivider,\n                            action: () => {\n                                item.action(data)\n\n                                this.onContextMenuEvent = undefined\n                                this.contextMenu = undefined\n                            }\n                        })\n\n                this.contextMenu = new Dropdown(this.canvas, {\n                    x: this.onContextMenuEvent.x - this.canvasPosition.x,\n                    y: this.onContextMenuEvent.y - this.canvasPosition.y,\n                    items: clone,\n                    data: data\n                })\n\n                this.contextMenu.resize()\n\n                this.onClickEvent = undefined\n            }\n\n            const isClick = this.onClickEvent != undefined\n\n            this.onClickEvent = this.contextMenu?.render(this.onMouseMoveEvent, this.onClickEvent)\n\n            if (this.onClickEvent == undefined && isClick) {\n                this.contextMenu = undefined\n                this.onContextMenuEvent = undefined\n\n                return true\n            }\n        }\n\n        return false\n    }\n\n    highlight(value?: Value) {\n        if (value)\n            this.highlightItems = [value.id]\n        else\n            this.highlightItems = []\n    }\n\n    closeDropdowns() {\n        this.dropdown?.close()\n        this.onContextMenuEvent = undefined\n    }\n\n    protected renderTitle() {\n        const ctx = Canvas.getContext(this.canvas)\n\n        if (this.settings.title) {\n            TextStyles.title(ctx)\n            ctx.fillText(this.settings.title, this.canvas.width / 2, Constants.Values.titleOffset)\n        }\n    }\n\n    #calculateSizes() {\n        let domRect = this.node.getBoundingClientRect()\n\n        this.settings.width = this.settings.minWidth && domRect.width < this.settings.minWidth\n                              ? this.settings.minWidth\n                              : domRect.width\n        this.settings.height = this.settings.minHeight && domRect.height < this.settings.minHeight\n                               ? this.settings.minHeight\n                               : domRect.height\n\n        this.canvas.width = this.settings.width\n        this.canvas.height = this.settings.height\n\n        if (this.settings.enableLegend) {\n            if (this.settings.legendPlace == undefined\n                || this.settings.legendPlace == LegendPlace.Top\n                || this.settings.legendPlace == LegendPlace.Bottom)\n                this.canvas.height -= Legend.getLegendHeight(this.settings.data.values, this.canvas.width)\n\n            if (this.settings.legendPlace == LegendPlace.Left\n                || this.settings.legendPlace == LegendPlace.Right)\n                this.canvas.width -= 500\n        }\n    }\n\n    protected getMousePosition(event: MouseEvent): Point {\n        return {\n            x: event.clientX - this.canvasPosition.x + scrollX,\n            y: event.clientY - this.canvasPosition.y + scrollY\n        }\n    }\n\n    applySettings(settings: ChartSettings) {\n        this.settings = settings\n    }\n}","import { Value } from 'types/base/Value'\nimport { TableValue } from 'types/TableValue'\nimport { TableData } from 'types/TableData'\nimport { Data } from 'types/interfaces/Data'\n\nexport class TreeData implements Data {\n    values: Value[]\n\n    padding: number\n\n    static getRows(data: TreeData): TableData {\n        const key = 'Value'\n\n        let values: TableValue[] = []\n\n        for (const value of data.values)\n            values.push({\n                name: value.label,\n                values: new Map([[key, value.value]])\n            })\n\n        return {\n            headers: [\n                {\n                    value: key,\n                    display: key\n                }\n            ],\n            values: values\n        }\n    }\n}","import { TableValue } from 'types/TableValue'\nimport { Sector } from 'types/Sector'\nimport { TableData } from 'types/TableData'\nimport { Data } from 'types/interfaces/Data'\n\nexport class CircularData implements Data {\n    values: Sector[]\n\n    innerRadius: number\n\n    innerTitle: string\n\n    static getRows(data: CircularData): TableData {\n        const key = 'Value'\n\n        let values: TableValue[] = []\n\n        for (const value of data.values)\n            values.push({\n                name: value.label,\n                values: new Map([[key, value.value]])\n            })\n\n        return {\n            headers: [\n                {\n                    value: key,\n                    display: key\n                }\n            ],\n            values: values\n        }\n    }\n}","export class Value {\n    id: string\n\n    color: string\n\n    label: string\n\n    disabled: boolean\n\n    hideInLegend: boolean\n\n    data: { [key: string]: string }\n\n    value: number\n\n    toggle(transition: number) {\n        if (transition == 0)\n            this.disabled = !this.disabled\n    }\n\n    checkCondition(): boolean {\n        return false\n    }\n\n    reset() {\n        this.disabled = false\n    }\n}","import { PlotData } from 'types/data/PlotData'\nimport { Renderer } from 'types/base/Renderer'\nimport * as Helper from 'Helper'\nimport { DropdownItem } from 'types/DropdownItem'\nimport { PlotAxis } from 'types/PlotAxis'\nimport { Paddings } from 'types/Paddings'\nimport { Dropdown } from 'Dropdown'\nimport { HoverItem } from 'types/HoverItem'\nimport { PlotSeries } from 'types/PlotSeries'\nimport { Tooltip } from 'Tooltip'\nimport { Theme } from 'Theme'\nimport { Chart } from 'Chart'\nimport { TextStyles } from 'helpers/TextStyles'\nimport { TooltipValue } from 'types/TooltipValue'\nimport { Export } from 'Export'\nimport { Decomposition } from 'Decomposition'\nimport { Modal } from 'Modal'\nimport { TextResources } from 'static/TextResources'\nimport { Formatter } from 'helpers/Formatter'\nimport { Canvas } from 'helpers/Canvas'\nimport { AnimationType, Icon, LineType, PlotAxisType, PlotType, RenderState } from 'static/Enums'\nimport * as Constants from 'static/constants/Index'\n\nexport class PlotRenderer extends Renderer<PlotData> {\n    #x: PlotAxis\n\n    #y: PlotAxis\n\n    #paddings: Paddings\n\n    #tooltipX: number\n\n    #tooltipY: number\n\n    #labelsX: Map<number, string>\n\n    #labelsY: Map<number, string>\n\n    #allValuesX: any[]\n\n    #allValuesY: any[]\n\n    #base: ImageBitmap | undefined\n\n    #backLines: ImageData | undefined\n\n    #yAxisStep: number\n\n    #plot: DOMRect\n\n    #hoverX: HoverItem | undefined\n\n    constructor(chart: Chart) {\n        super(chart)\n    }\n\n    render() {\n        super.render()\n\n        let tooltipLines = [\n            new TooltipValue(this.#labelsX.get(Math.round(this.#tooltipX))\n                             ?? this.#labelsY.get(Math.round(this.#tooltipY)))\n        ]\n\n        const ctx = Canvas.getContext(this.canvas)\n\n        TextStyles.regular(ctx)\n        ctx.lineJoin = 'round'\n\n        const axisLineHoverColor = Theme.lineActive\n\n        this.#renderBackLines()\n        this.#renderBase(true)\n\n        let x = 0,\n            y = 0,\n            yValue = 0,\n            yHeight = 0,\n            columnWidth = 0\n\n        const seriesToRender = this.data.values.filter(s => !s.disabled)\n\n        let columnsIndex = 0,\n            columnsCount = seriesToRender.filter(s => s.type == PlotType.Column).length\n\n        let barsIndex = 0,\n            barsCount = seriesToRender.filter(s => s.type == PlotType.Bar).length\n\n        let stackingAccumulator = []\n        for (let i = 0; i < this.#allValuesY.length; i++)\n            stackingAccumulator.push(0)\n\n        for (const series of seriesToRender) {\n            ctx.beginPath()\n\n            ctx.strokeStyle = series.color\n            ctx.fillStyle = series.color\n            ctx.lineWidth = series.width\n            ctx.lineCap = 'round'\n\n            const anyHighlight = this.highlightItems.length != 0\n\n            if (!this.animations.contains(series.id, AnimationType.Init)) {\n                const changeColor = (transition: number, event: AnimationType) => {\n                    this.animations.reload(series.id, event)\n\n                    if (transition == 0)\n                        return\n\n                    let opacity = Math.round(255 - 127 * transition).toString(16)\n                    if (opacity.length < 2)\n                        opacity = 0 + opacity\n\n                    ctx.fillStyle = series.color + opacity\n                    ctx.strokeStyle = series.color + opacity\n                }\n\n                if (anyHighlight && !this.highlightItems.includes(series.id)) {\n                    this.animations.add(\n                        series.id,\n                        AnimationType.AnotherItemOver,\n                        {\n                            duration: Constants.Animations.circular,\n                            body: transition => {\n                                changeColor(transition, AnimationType.AnotherItemLeave)\n                            }\n                        }\n                    )\n                } else if (!anyHighlight) {\n                    this.animations.add(\n                        series.id,\n                        AnimationType.AnotherItemLeave,\n                        {\n                            timer: Constants.Dates.minDate,\n                            duration: Constants.Animations.circular,\n                            backward: true,\n                            body: transition => {\n                                changeColor(transition, AnimationType.AnotherItemOver)\n                            }\n                        }\n                    )\n                }\n            }\n\n            switch (series.lineType) {\n                case LineType.Dash:\n                    ctx.setLineDash([series.width * 3, series.width * 2])\n\n                    break\n\n                case LineType.Dotted:\n                    ctx.setLineDash([series.width, series.width])\n\n                    break\n\n                case LineType.Solid:\n                default:\n                    break\n            }\n\n            for (const value of series.values) {\n                let index = series.values.indexOf(value),\n                    xIndex = this.#allValuesX.indexOf(this.data.xType == PlotAxisType.Date ? value.x?.toString() : value.x),\n                    yIndex = this.#allValuesY.indexOf(value.y)\n\n                const getTooltipValue = () => {\n                    return {\n                        x: value.x\n                           ? this.data.xType == PlotAxisType.Date\n                             ? this.#allValuesX[xIndex]\n                             : Formatter.number(this.#allValuesX[xIndex])\n                           : '0',\n                        y: value.y\n                           ? Formatter.number(this.#allValuesY[yIndex])\n                           : '0'\n                    }\n                }\n\n                x = this.#paddings.left\n                if (series.type != PlotType.Bar)\n                    x += xIndex * this.#x.step\n                if (series.type == PlotType.Line)\n                    x -= this.#x.step / 2 - this.#x.step\n\n                switch (series.type) {\n                    case PlotType.Line:\n                        y = this.#paddings.top + this.#plot.height - <number>value.y / this.#y.unit * this.#y.step\n                            - Math.abs(this.#y.min / this.#y.unit * this.#y.step)\n\n                        const pointDuration = 1500 / series.values.length * 1.2\n\n                        if (this.state == RenderState.Init || this.animations.contains(value.id, AnimationType.Init)) {\n                            this.animations.add(value.id,\n                                AnimationType.Init,\n                                {\n                                    timer: new Date(Date.now()).addMilliseconds(pointDuration * (index - 1)),\n                                    duration: pointDuration,\n                                    continuous: true,\n                                    body: transition => {\n                                        if (index == 0)\n                                            return\n\n                                        x = this.#paddings.left + xIndex * this.#x.step - this.#x.step / 2\n                                        y = this.#paddings.top + this.#plot.height - <number>value.y / this.#y.unit * this.#y.step\n                                            - Math.abs(this.#y.min / this.#y.unit * this.#y.step)\n\n                                        const next = series.values[index - 1]\n\n                                        let prevValue = {\n                                            x: this.#paddings.left + xIndex * this.#x.step - this.#x.step / 2,\n                                            y: this.#paddings.top + this.#plot.height - <number>next.y / this.#y.unit * this.#y.step\n                                               - Math.abs(this.#y.min / this.#y.unit * this.#y.step)\n                                        }\n\n                                        const endPointX = prevValue.x + (this.#x.step + (x - prevValue.x)) * transition,\n                                            endPointY = prevValue.y + (y - prevValue.y) * transition\n\n                                        if (prevValue.x != endPointX && prevValue.y != endPointY) {\n                                            ctx.moveTo(prevValue.x, prevValue.y)\n                                            ctx.lineTo(endPointX, endPointY)\n                                        }\n                                    }\n                                })\n                        } else {\n                            ctx.lineTo(x, y)\n\n                            if (this.#isOnX(x)) {\n                                const mouse = this.getMousePosition(this.onMouseMoveEvent)\n\n                                if (Math.abs(mouse.y - y) < 5) {\n                                    this.#hoverX = {\n                                        x: x,\n                                        y: y,\n                                        index: index,\n                                        data: value.data,\n                                        series: series\n                                    }\n\n                                    tooltipLines.push(new TooltipValue(`${ series.label }: ${ getTooltipValue().y }`, series.color))\n                                    this.#tooltipX = x - this.#x.step / 2\n                                }\n                            }\n                        }\n\n                        break\n\n                    case PlotType.AttentionLine:\n                        yValue = this.canvas.height - this.#paddings.bottom - <number>value.y / this.#y.unit * this.#y.step\n\n                        ctx.moveTo(this.#paddings.left, yValue)\n\n                        if (this.state == RenderState.Init || this.animations.contains(value.id, AnimationType.Init))\n                            this.animations.add(value.id,\n                                AnimationType.Init,\n                                {\n                                    duration: 1500,\n                                    continuous: true,\n                                    body: transition => {\n                                        ctx.lineTo(this.#paddings.left + (this.canvas.width - this.#paddings.left - this.#paddings.right) * transition,\n                                            this.canvas.height - this.#paddings.bottom - <number>value.y / this.#y.unit * this.#y.step)\n                                    }\n                                })\n                        else\n                            ctx.lineTo(this.canvas.width - this.#paddings.right, yValue)\n\n                        break\n\n                    case PlotType.Column:\n                        yValue = <number>value.y > this.data.yMax ? this.data.yMax : <number>value.y\n\n                        y = this.#plot.height * yValue / this.#y.max\n                        if (y < this.#y.minStep)\n                            y = this.#y.minStep\n\n                        columnWidth = this.#x.step * (series.width ? series.width / 100 : .5) / columnsCount\n\n                        ctx.beginPath()\n\n                        if (this.state == RenderState.Init || this.animations.contains(value.id + columnsIndex, AnimationType.Init)) {\n                            this.animations.add(value.id + columnsIndex,\n                                AnimationType.Init,\n                                {\n                                    duration: 800,\n                                    continuous: true,\n                                    body: transition => {\n                                        yValue = <number>value.y > this.data.yMax ? this.data.yMax : <number>value.y\n\n                                        x = this.#paddings.left + xIndex * this.#x.step\n                                        y = this.#plot.height * yValue / this.#y.max * transition\n\n                                        if (y < this.#y.minStep)\n                                            y = this.#y.minStep * transition\n\n                                        columnsIndex = this.data.values.filter(s => s.type == PlotType.Column)\n                                                           .indexOf(series)\n\n                                        ctx.roundRect(x + columnsIndex * columnWidth + (this.#x.step - columnsCount * columnWidth) / 2,\n                                            this.canvas.height - this.#paddings.bottom - y,\n                                            columnWidth,\n                                            y,\n                                            [6, 6, 0, 0])\n                                        ctx.fill()\n                                    }\n                                })\n                        } else {\n                            if (this.#isInArea(x + columnsIndex * columnWidth + (this.#x.step - columnsCount * columnWidth) / 2,\n                                    this.canvas.height - this.#paddings.bottom - y,\n                                    columnWidth,\n                                    y)\n                                && (this.contextMenu?.isActive == undefined\n                                    || this.contextMenu?.isActive == false)) {\n                                this.#hoverX = {\n                                    x: x,\n                                    y: y,\n                                    index: index,\n                                    data: value.data,\n                                    series: series\n                                }\n\n                                tooltipLines.push(new TooltipValue(`${ series.label }: ${ getTooltipValue().y }`, series.color))\n                                this.#tooltipX = x\n                            }\n\n                            ctx.roundRect(x + columnsIndex * columnWidth + (this.#x.step - columnsCount * columnWidth) / 2,\n                                this.canvas.height - this.#paddings.bottom - y,\n                                columnWidth,\n                                y,\n                                [6, 6, 0, 0])\n                            ctx.fill()\n                        }\n\n                        break\n\n                    case PlotType.Bar:\n                        y = this.#paddings.top + yIndex * this.#y.step + this.#y.step / 2\n                            + (100 - series.width) * this.#y.step / 100 / 2\n\n                        const seriesHeight = (series.width * this.#y.step / 100) / barsCount\n\n                        if (this.state == RenderState.Init || this.animations.contains(value.id + barsIndex, AnimationType.Init)) {\n                            this.animations.add(value.id + barsIndex,\n                                AnimationType.Init,\n                                {\n                                    duration: 800,\n                                    continuous: true,\n                                    body: transition => {\n                                        y = this.#paddings.top + yIndex * this.#y.step + this.#y.step / 2\n                                            + (100 - series.width) * this.#y.step / 100 / 2\n\n                                        barsIndex = this.data.values.filter(s => s.type == PlotType.Bar)\n                                                        .indexOf(series)\n\n                                        ctx.fillRect(x,\n                                            y - this.#y.step / 2 + barsIndex * seriesHeight,\n                                            <number>value.x / this.#x.unit * this.#x.step * transition,\n                                            seriesHeight)\n                                    }\n                                })\n                        } else {\n                            if (!anyHighlight) {\n                                if (this.#isInArea(x,\n                                    y - this.#y.step / 2 + barsIndex * seriesHeight,\n                                    <number>value.x / this.#x.unit * this.#x.step,\n                                    seriesHeight)) {\n                                    this.#hoverX = {\n                                        x: x,\n                                        y: y,\n                                        index: index,\n                                        data: value.data,\n                                        series: series\n                                    }\n\n                                    ctx.fillStyle += '88'\n\n                                    tooltipLines.push(new TooltipValue(`${ series.label }: ${ getTooltipValue().x }`, series.color))\n                                    this.#tooltipY = y - this.#y.step / 2\n                                } else {\n                                    ctx.fillStyle = series.color\n                                }\n                            }\n\n                            ctx.fillRect(x,\n                                y - this.#y.step / 2 + barsIndex * seriesHeight,\n                                <number>value.x / this.#x.unit * this.#x.step,\n                                seriesHeight)\n                        }\n\n                        break\n\n                    case PlotType.StackingColumn:\n                        y = this.canvas.height - this.#paddings.bottom - <number>value.y / this.#y.unit * this.#y.step\n\n                        columnWidth = this.#x.step * (series.width ? series.width / 100 : .5)\n\n                        if (this.state == RenderState.Init || this.animations.contains(value.id + index, AnimationType.Init)) {\n                            this.animations.add(value.id + index,\n                                AnimationType.Init,\n                                {\n                                    duration: 800,\n                                    continuous: true,\n                                    body: transition => {\n                                        columnsIndex = this.data.values.filter(s => s.type == PlotType.StackingColumn\n                                                                                    && s.values.filter(v => this.data.xType == PlotAxisType.Date\n                                                                                                            ? (v.x as Date).getTime() == (value.x as Date).getTime()\n                                                                                                            : v.x == value.x)\n                                                                                        .length > 0)\n                                                           .indexOf(series)\n\n                                        x = this.#paddings.left + xIndex * this.#x.step\n                                        y = this.canvas.height - this.#paddings.bottom - <number>value.y / this.#y.unit * this.#y.step\n\n                                        if (columnsIndex == 0)\n                                            stackingAccumulator[xIndex] = 0\n\n                                        let offset = stackingAccumulator[xIndex] != undefined\n                                                     ? stackingAccumulator[xIndex]\n                                                     : 0\n\n                                        yValue = this.canvas.height - this.#paddings.bottom + offset\n                                        yHeight = (y - this.canvas.height + this.#paddings.bottom) * transition\n\n                                        if (yValue > this.#paddings.top) {\n                                            if (yValue + yHeight < this.#paddings.top)\n                                                yHeight -= yValue + yHeight - this.#paddings.top\n\n                                            ctx.fillRect(x + (this.#x.step - columnWidth) / 2,\n                                                yValue,\n                                                columnWidth,\n                                                yHeight)\n                                        }\n\n                                        stackingAccumulator[xIndex] += (y - this.canvas.height + this.#paddings.bottom) * transition\n                                    }\n                                })\n                        } else {\n                            if (columnsIndex == 0)\n                                stackingAccumulator[xIndex] = 0\n\n                            let offset = stackingAccumulator[xIndex] != undefined\n                                         ? stackingAccumulator[xIndex]\n                                         : 0\n\n                            yValue = this.canvas.height - this.#paddings.bottom + offset\n                            yHeight = y - this.canvas.height + this.#paddings.bottom\n\n                            if (yValue > this.#paddings.top) {\n                                if (yValue + yHeight < this.#paddings.top)\n                                    yHeight -= yValue + yHeight - this.#paddings.top\n\n                                if (this.#isInArea(x + (this.#x.step - columnWidth) / 2,\n                                    yValue + yHeight,\n                                    columnWidth,\n                                    Math.abs(yHeight))) {\n                                    this.#hoverX = {\n                                        x: x,\n                                        y: y,\n                                        index: xIndex,\n                                        data: value.data,\n                                        series: series\n                                    }\n\n                                    tooltipLines.push(new TooltipValue(`${ series.label }: ${ getTooltipValue().y }`, series.color))\n                                    this.#tooltipX = x\n                                }\n\n                                ctx.fillRect(x + (this.#x.step - columnWidth) / 2,\n                                    yValue,\n                                    columnWidth,\n                                    yHeight)\n                            }\n\n                            stackingAccumulator[xIndex] += (y - this.canvas.height + this.#paddings.bottom)\n                        }\n\n                        break\n                }\n            }\n\n            ctx.setLineDash([])\n\n            switch (series.type) {\n                case PlotType.Line:\n                    ctx.stroke()\n\n                    if (this.#hoverX && this.#hoverX.series == series) {\n                        ctx.beginPath()\n                        ctx.lineWidth = 1\n                        ctx.strokeStyle = axisLineHoverColor\n                        ctx.moveTo(this.#paddings.left, this.#hoverX.y)\n                        ctx.lineTo(this.canvas.width - this.#paddings.right, this.#hoverX.y)\n                        ctx.stroke()\n\n                        let radius = Math.round(series.width * 1.1)\n                        if (radius < 5)\n                            radius = 5\n\n                        ctx.beginPath()\n                        ctx.arc(this.#hoverX.x, this.#hoverX.y, radius, 0, 2 * Math.PI)\n                        ctx.fill()\n                        ctx.lineWidth = Math.ceil(radius / 2)\n                        ctx.strokeStyle = Helper.adjustColor(series.color, 50)\n                        ctx.stroke()\n                    }\n\n                    break\n\n                case PlotType.AttentionLine:\n                    ctx.stroke()\n\n                    TextStyles.regular(ctx)\n                    ctx.fillText(series.label,\n                        this.#paddings.left + (this.canvas.width - this.#paddings.left - this.#paddings.right) / 2,\n                        this.canvas.height - this.#paddings.bottom - <number>series.values[0].y / this.#y.unit * this.#y.step + 16)\n\n                    break\n\n                case PlotType.Column:\n                case PlotType.StackingColumn:\n                    if (this.#hoverX)\n                        this.highlight(this.#hoverX.series)\n\n                    columnsIndex++\n\n                    break\n\n                case PlotType.Bar:\n                    if (this.#hoverX) {\n                        ctx.lineWidth = 1\n                        ctx.strokeStyle = axisLineHoverColor\n                        ctx.moveTo(this.#paddings.left,\n                            this.#tooltipY + this.#y.step / 2)\n                        ctx.lineTo(this.canvas.width - this.#paddings.right,\n                            this.#tooltipY + this.#y.step / 2)\n                        ctx.stroke()\n                    }\n\n                    barsIndex++\n\n                    break\n            }\n        }\n\n        this.#renderBase()\n\n        this.renderTitle()\n\n        this.tooltip.render(tooltipLines.length > 1 && !this.dropdown?.isActive,\n            this.onMouseMoveEvent,\n            tooltipLines,\n            this.#hoverX\n            ? this.#hoverX.series!.values[this.#hoverX.index]\n            : undefined)\n\n        if (!this.isDestroy)\n            requestAnimationFrame(this.render.bind(this))\n\n        this.state = RenderState.Idle\n\n        super.renderDropdown()\n\n        if (this.onContextMenuEvent && !this.#hoverX)\n            this.onContextMenuEvent = undefined\n\n        if (this.#hoverX == undefined)\n            this.highlight()\n\n        if (this.#hoverX\n            && (this.renderContextMenu(this.#hoverX.data)\n                || !this.onContextMenuEvent))\n            this.#hoverX = undefined\n    }\n\n    refresh() {\n        super.refresh()\n    }\n\n    resize() {\n        super.resize()\n\n        this.#base = undefined\n\n        this.#calculateSizes()\n    }\n\n    #isOnX(x: number): boolean {\n        if (!this.onMouseMoveEvent)\n            return false\n\n        const mouse = this.getMousePosition(this.onMouseMoveEvent)\n\n        return !(this.dropdown?.isActive ?? false)\n               && x - this.#x.step / 2 <= mouse.x && mouse.x < x + this.#x.step / 2\n               && this.#paddings.top <= mouse.y && mouse.y <= this.canvas.height - this.#paddings.bottom\n               && this.#paddings.left < mouse.x\n    }\n\n    #isInArea(x: number, y: number, w: number, h: number): boolean {\n        if (!this.onMouseMoveEvent)\n            return false\n\n        const mouse = this.getMousePosition(this.onMouseMoveEvent)\n\n        return !(this.dropdown?.isActive ?? false)\n               && mouse.x >= x && mouse.x <= x + w\n               && mouse.y >= y && mouse.y <= y + h\n    }\n\n    #renderBase(skip: boolean = false) {\n        if (this.#base && skip)\n            return\n\n        if (this.data.simple)\n            return\n\n        const ctx = Canvas.getContext(this.canvas)\n\n        if (skip)\n            ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\n\n        if (this.#base) {\n            ctx.drawImage(this.#base, 0, 0)\n            return\n        }\n\n        if (!skip)\n            return\n\n        const axisLabelOffset = 12\n\n        ctx.fillStyle = Theme.canvasBackground\n\n        ctx.fillRect(0, 0, this.#paddings.left, this.canvas.height)\n        ctx.fillRect(0, 0, this.canvas.width, this.#paddings.top)\n        ctx.fillRect(this.canvas.width - this.#paddings.right, 0, this.canvas.width, this.canvas.height)\n        ctx.fillRect(0, this.canvas.height - this.#paddings.bottom, this.canvas.width, this.canvas.height)\n\n        const isContainsBar = this.data.values.filter(s => s.type == PlotType.Bar).length > 0\n\n        if (this.data.xTitle || this.data.yTitle) {\n            ctx.textAlign = 'center'\n            ctx.textBaseline = 'bottom'\n            ctx.fillStyle = Theme.text\n\n            if (this.data.xTitle)\n                ctx.fillText(this.data.xTitle,\n                    this.#paddings.left + (this.canvas.width - this.#paddings.left - this.#paddings.right) / 2,\n                    this.canvas.height - 4)\n\n            if (this.data.yTitle) {\n                ctx.rotate(-Math.PI / 2)\n\n                ctx.textBaseline = 'top'\n\n                ctx.fillText(this.data.yTitle,\n                    -(this.#paddings.top + (this.canvas.height - this.#paddings.top - this.#paddings.bottom) / 2),\n                    8)\n\n                ctx.resetTransform()\n            }\n        }\n\n        ctx.textAlign = 'center'\n        ctx.textBaseline = 'top'\n\n        const step = this.#x.step,\n            xYPos = this.canvas.height - this.#paddings.bottom\n\n        let xCounter = 0,\n            acc = this.#paddings.left + step / 2\n\n        for (let i = 0; i < this.#allValuesX.length + 1; i++)\n            this.#labelsX.trySet(\n                Math.round(this.#paddings.left + i * this.#x.step),\n                this.data.xType == PlotAxisType.Date\n                ? Formatter.date(new Date(this.#allValuesX[i]))\n                : isNaN(+this.#x.min) || !isFinite(+this.#x.min)\n                  ? this.#allValuesX[i - 1]\n                  : Formatter.number(\n                        this.#x.min + i * (this.#x.max - this.#x.min) / (this.#x.count - 1)\n                    )\n            )\n\n        const maxLabelWidth = Math.max(\n            ...[...this.#labelsX.values()].map(label => Math.ceil(Helper.stringWidth(label)))\n        ) + 10\n        const maxCount = Math.floor(\n            (this.canvas.width - this.#paddings.left - this.#paddings.right) / maxLabelWidth\n        )\n        const renderStep = Math.ceil(1 / (maxCount / this.#allValuesX.length))\n\n        while (acc < this.canvas.width - this.#paddings.right) {\n            if (xCounter % renderStep == 0) {\n                ctx.fillStyle = Theme.text + 'b7'\n\n                ctx.fillText(\n                    this.#labelsX.get(Math.round(acc - this.#x.step / 2)) ?? '',\n                    acc,\n                    xYPos + axisLabelOffset / 2\n                )\n            }\n\n            acc += step\n            xCounter++\n        }\n\n        ctx.textAlign = 'right'\n        ctx.textBaseline = 'middle'\n\n        const yCount = this.#y.count > 10 ? 10 : this.#y.count\n\n        let yCounter = isContainsBar ? 1 : 0,\n            yStep = this.#allValuesY.length / yCount\n\n        for (let i = isContainsBar ? 1 : 0; i < this.#allValuesY.length + 1; i++) {\n            const labelY = this.canvas.height - yCounter * yStep * this.#y.step - this.#paddings.bottom,\n                labelYAsKey = Math.round(this.canvas.height - i * this.#y.step - this.#paddings.bottom)\n\n            if (!this.#labelsY.get(labelYAsKey))\n                this.#labelsY.set(labelYAsKey,\n                    Formatter.number(this.#y.min + (i + (isContainsBar ? -1 : 0)) * (this.#y.max - this.#y.min) / this.#y.count))\n\n            if (i >= yCounter * yStep) {\n                const label = {\n                    x: this.#paddings.left,\n                    y: labelY,\n                    label: this.#yAxisStep >= 1\n                           ? Math.round((this.#y.min + (yCounter * yStep + (isContainsBar ? -1 : 0)) * (this.#y.max - this.#y.min) / this.#y.count) / this.#yAxisStep) * this.#yAxisStep\n                           : Math.round(this.#y.min + (yCounter * yStep + (isContainsBar ? -1 : 0)) * (this.#y.max - this.#y.min) / this.#y.count / this.#yAxisStep) * this.#yAxisStep\n                }\n\n                if (label.label == -0)\n                    label.label = 0\n\n                let postfix = ''\n\n                if (this.data.shortLabels) {\n                    const countOfTens = Math.floor(label.label.toString().length / 4)\n\n                    if (countOfTens > 0) {\n                        label.label /= Math.pow(1000, countOfTens)\n\n                        postfix = [\n                            TextResources.thousandShort,\n                            TextResources.millionShort,\n                            TextResources.billionShort\n                        ][countOfTens - 1]\n                    }\n                }\n\n                ctx.fillText(Formatter.number(label.label) + postfix,\n                    label.x - axisLabelOffset,\n                    label.y + (isContainsBar ? this.#y.step / 2 : 0))\n\n                yCounter++\n            }\n        }\n\n        ctx.beginPath()\n\n        ctx.strokeStyle = Theme.line\n        ctx.lineWidth = 1\n\n        const offset = .5,\n            isBar = this.data.values.filter(v => v.type == PlotType.Bar).length > 0\n\n        ctx.moveTo(this.#paddings.left - (isBar ? offset : 0),\n            this.canvas.height - this.#paddings.bottom + (isBar ? -offset : offset))\n\n        if (isBar)\n            ctx.lineTo(this.#paddings.left - offset, this.#paddings.top)\n        else\n            ctx.lineTo(this.canvas.width - this.#paddings.right, this.canvas.height - this.#paddings.bottom + offset)\n\n        ctx.stroke()\n\n        if (this.canvas.width > 0 && this.canvas.height > 0)\n            createImageBitmap(ctx.getImageData(0, 0, this.canvas.width, this.canvas.height))\n                .then(res => this.#base = res)\n    }\n\n    #renderBackLines() {\n        if (this.data.simple)\n            return\n\n        const ctx = Canvas.getContext(this.canvas)\n\n        if (this.#backLines) {\n            ctx.putImageData(this.#backLines, 0, 0)\n            return\n        }\n\n        ctx.fillStyle = Theme.canvasBackground\n        ctx.fillRect(0, 0, this.canvas.width, this.canvas.height)\n\n        const axisLineColor = Theme.lineAxis\n\n        const isContainsBar = this.data.values.filter(s => s.type == PlotType.Bar).length > 0\n\n        if (isContainsBar) {\n            const step = this.#x.step,\n                xYPos = this.canvas.height - this.#paddings.bottom\n\n            let xCounter = 0,\n                acc = this.#paddings.left + step / 2\n\n            for (let i = 0; i < this.#allValuesX.length + 1; i++)\n                this.#labelsX.trySet(\n                    Math.round(this.#paddings.left + i * this.#x.step),\n                    this.data.xType == PlotAxisType.Date\n                    ? Formatter.date(new Date(this.#allValuesX[i - 1]))\n                    : isNaN(+this.#x.min) || !isFinite(+this.#x.min)\n                      ? this.#allValuesX[i - 1]\n                      : Formatter.number(\n                            this.#x.min + i * (this.#x.max - this.#x.min) / (this.#x.count - 1)\n                        )\n                )\n\n            const maxLabelWidth = Math.max(\n                ...[...this.#labelsX.values()].map(label => Math.ceil(Helper.stringWidth(label)))\n            ) + 10\n            const maxCount = Math.floor(\n                (this.canvas.width - this.#paddings.left - this.#paddings.right) / maxLabelWidth\n            )\n            const renderStep = Math.ceil(1 / (maxCount / this.#allValuesX.length))\n\n            while (acc < this.canvas.width - this.#paddings.right) {\n                if (xCounter % renderStep == 0) {\n                    ctx.beginPath()\n\n                    ctx.moveTo(acc, xYPos)\n                    ctx.lineTo(acc, this.#paddings.top)\n\n                    ctx.lineWidth = 1\n                    ctx.strokeStyle = axisLineColor\n                    ctx.setLineDash([6, 6])\n                    ctx.stroke()\n                }\n\n                acc += step\n                xCounter++\n            }\n        }\n\n        ctx.textAlign = 'right'\n        ctx.textBaseline = 'middle'\n\n        const yCount = this.#y.count > 10 ? 10 : this.#y.count\n\n        let yCounter = isContainsBar ? 1 : 0,\n            yStep = this.#allValuesY.length / yCount\n\n        for (let i = isContainsBar ? 1 : 0; i < this.#allValuesY.length + 1; i++) {\n            const labelY = this.canvas.height - yCounter * yStep * this.#y.step - this.#paddings.bottom\n\n            if (i >= yCounter * yStep) {\n                const label = {\n                    x: this.#paddings.left,\n                    y: labelY\n                }\n\n                if (this.data.values.filter(s => s.type.isAnyEquals(PlotType.Column, PlotType.StackingColumn, PlotType.Line)).length > 0) {\n                    ctx.beginPath()\n\n                    ctx.moveTo(label.x, label.y)\n                    ctx.lineTo(this.canvas.width - this.#paddings.right, label.y)\n\n                    ctx.lineWidth = 1\n                    ctx.strokeStyle = axisLineColor\n                    ctx.setLineDash([6, 6])\n                    ctx.stroke()\n                }\n\n                yCounter++\n            }\n        }\n\n        if (this.canvas.width > 0 && this.canvas.height > 0)\n            this.#backLines = ctx.getImageData(0, 0, this.canvas.width, this.canvas.height)\n    }\n\n    #calculateSizes() {\n        let xValues = this.data.values.flatMap(s => s.values.map(p => p.x)),\n            yValues = this.data.values.flatMap(s => s.values.map(p => p.y))\n\n        const isDate = this.data.xType == PlotAxisType.Date\n\n        if (isDate) {\n            let tempDate = new Date(Math.min(...(<number[]>xValues)))\n\n            while (tempDate.getTime() < Math.max(...(<number[]>xValues))) {\n                if (!xValues.includes(tempDate.getTime()))\n                    xValues.push(new Date(tempDate.getTime()))\n\n                tempDate = tempDate.addDays(1)\n            }\n\n            xValues.sort((a, b) => a < b ? -1 : 1)\n        }\n\n        yValues.sort((a, b) => b > a ? -1 : 1)\n\n        this.#allValuesX = [...new Set(xValues.filter(x => x != undefined).map(x => isDate ? x.toString() : x))]\n        this.#allValuesY = [...new Set(yValues.filter(y => y != undefined))]\n\n        this.#x = {\n            min: Math.min(...(<number[]>xValues)),\n            max: Math.max(...(<number[]>xValues)),\n            unit: (Math.abs(Math.min(...(<number[]>xValues))) + Math.abs(Math.max(...(<number[]>xValues)))) / (this.#allValuesX.length - 1),\n            step: (this.canvas.width - this.#paddings.left - this.#paddings.right) / this.#allValuesX.length,\n            minStep: 0,\n            count: this.#allValuesX.length\n        }\n\n        let yMin = Math.min(...(<number[]>yValues))\n        if (yMin > 0)\n            yMin = 0\n\n        this.#y = {\n            min: yMin,\n            max: this.data.yMax ?? Math.max(...(<number[]>yValues)),\n            unit: (Math.abs(yMin) + Math.abs(this.data.yMax ?? Math.max(...(<number[]>yValues)))) / (this.#allValuesY.length - 1),\n            step: (this.canvas.height - this.#paddings.top - this.#paddings.bottom) / this.#allValuesY.length,\n            minStep: 0,\n            count: this.#allValuesY.length\n        }\n\n        let stackingColumns = this.data.values.filter(s => s.type == PlotType.StackingColumn)\n\n        let max\n\n        if (stackingColumns.length > 0) {\n            let values = stackingColumns.map(s => s.values.flatMap(v => +v.y))\n\n            max = this.#y.max\n\n            for (let i = 0; i < values[0].length; i++) {\n                let sum = 0\n\n                for (const v of values)\n                    sum += v[i]\n\n                if (sum > max)\n                    max = sum\n            }\n\n            this.#y.max = max > this.data.yMax ? this.data.yMax : max\n            this.#y.unit = (Math.abs(this.#y.min) + Math.abs(this.#y.max)) / (this.#allValuesY.length - 1)\n        }\n\n        const yMaxWidth = Helper.stringWidth(Formatter.number(this.#y.max))\n        if (yMaxWidth > this.#paddings.left - 40 && !this.data.simple) {\n            this.#paddings.left += yMaxWidth - this.#paddings.left + 40\n            this.#x.step = (this.canvas.width - this.#paddings.left - this.#paddings.right) / this.#allValuesX.length\n        }\n\n        this.#yAxisStep = Math.abs(this.#y.min) + Math.abs(this.#y.max)\n\n        if (.5 <= this.#yAxisStep && this.#yAxisStep < 1)\n            this.#yAxisStep = .05\n        else if (1 <= this.#yAxisStep && this.#yAxisStep < 10)\n            this.#yAxisStep = .1\n        else if (10 <= this.#yAxisStep && this.#yAxisStep < 100)\n            this.#yAxisStep = 2\n        else if (100 <= this.#yAxisStep && this.#yAxisStep < 1000)\n            this.#yAxisStep = 20\n        else if (1000 <= this.#yAxisStep && this.#yAxisStep < 10000)\n            this.#yAxisStep = 50\n        else if (10000 <= this.#yAxisStep && this.#yAxisStep < 100000)\n            this.#yAxisStep = 1000\n        else if (100000 <= this.#yAxisStep && this.#yAxisStep < 1000000)\n            this.#yAxisStep = 10000\n        else if (1000000 <= this.#yAxisStep && this.#yAxisStep < 10000000)\n            this.#yAxisStep = 50000\n        else\n            this.#yAxisStep = 1\n\n        if (this.#yAxisStep != 1) {\n            max = yValues.length > 10\n                  ? (this.#y.max / 10 + this.#yAxisStep - (this.#y.max / 10) % this.#yAxisStep) * 10\n                  : Math.ceil(this.#y.max / this.#yAxisStep) * this.#yAxisStep\n\n            this.#y.max = max > this.data.yMax ? this.data.yMax : max\n            this.#y.unit = (Math.abs(this.#y.min) + Math.abs(this.#y.max)) / this.#allValuesY.length\n        }\n\n        this.#plot = {\n            width: this.canvas.width - this.#paddings.left - this.#paddings.right,\n            height: this.canvas.height - this.#paddings.top - this.#paddings.bottom\n        } as DOMRect\n\n        this.#x.minStep = this.#plot.width * 0.002\n        this.#y.minStep = this.#plot.height * 0.002\n    }\n\n    prepareSettings() {\n        super.prepareSettings()\n\n        this.data.values = this.data.values.map(v => new PlotSeries(v))\n\n        if (this.data.values.filter(v => v.type == PlotType.Bar).length > 0) {\n            for (let series of this.data.values) {\n                for (let item of series.values) {\n                    const x = item.x\n                    item['x'] = item.y\n                    item['y'] = x\n                }\n\n                series.values.sort((a, b) => b.x > a.x ? 1 : -1)\n            }\n        }\n\n        for (let item of this.data.values) {\n            item.disabled = !item.values\n            item.type ??= PlotType.Line\n\n            for (let it of item.values) {\n                it.id = Helper.guid()\n\n                if (this.data.xType == PlotAxisType.Date) {\n                    if (Helper.isISOString(it.x as string))\n                        it.x = new Date(it.x)\n                    else\n                        console.warn(`${ it.x } is not a date in ISO format.`)\n                }\n            }\n        }\n\n        this.#paddings = {\n            top: 30,\n            right: 40,\n            bottom: 50,\n            left: 80\n        }\n\n        if (this.data.simple)\n            this.#paddings = {\n                top: 10,\n                right: 10,\n                bottom: 10,\n                left: 10\n            }\n\n        if (this.settings.title)\n            this.#paddings.top += Constants.Values.titleOffset\n\n        this.tooltip = new Tooltip(this.canvas, this.settings)\n\n        this.#labelsX = new Map()\n        this.#labelsY = new Map()\n    }\n\n    initDropdown() {\n        super.initDropdown()\n\n        this.dropdown = new Dropdown(this.canvas,\n            {\n                x: -10,\n                y: 10,\n                icon: Icon.ThreeLines,\n                items: [\n                    {\n                        text: TextResources.exportPNG,\n                        action: () => {\n                            Export.asPng(this.canvas, this.settings.title)\n                        }\n                    },\n                    {\n                        text: TextResources.exportCSV,\n                        action: () => {\n                            Export.asCsv(Decomposition.toTable(PlotData.getRows(this.data)), this.settings.title)\n                        }\n                    },\n                    {\n                        isDivider: true\n                    } as DropdownItem,\n                    {\n                        text: TextResources.decomposeToTable,\n                        action: () => {\n                            new Modal(Decomposition.toTable(PlotData.getRows(this.data))).open()\n                        }\n                    }\n                ]\n            })\n    }\n}","export class Dates {\n    static minDate = new Date(2000, 1, 1)\n}","import { Theme } from 'Theme'\n\nexport abstract class TextStyles {\n    static title(context: CanvasRenderingContext2D) {\n        context.fillStyle = Theme.text\n        context.textAlign = 'center'\n        context.textBaseline = 'middle'\n        context.font = '20px sans-serif'\n    }\n\n    static regular(context: CanvasRenderingContext2D) {\n        context.fillStyle = Theme.text\n        context.textAlign = 'center'\n        context.textBaseline = 'middle'\n        context.font = '14px sans-serif'\n    }\n\n    static large(context: CanvasRenderingContext2D) {\n        context.fillStyle = Theme.text\n        context.textAlign = 'center'\n        context.textBaseline = 'middle'\n        context.font = '16px sans-serif'\n    }\n\n    static tooltip(context: CanvasRenderingContext2D) {\n        context.font = '14px sans-serif'\n        context.textAlign = 'start'\n        context.textBaseline = 'alphabetic'\n    }\n\n    static circularLabel(context: CanvasRenderingContext2D, isRight: boolean) {\n        context.textAlign = isRight ? 'start' : 'end'\n        context.textBaseline = 'alphabetic'\n        context.font = '14px sans-serif'\n    }\n}","import { ChartSettings } from 'types/ChartSettings'\nimport { Animations } from 'Animations'\nimport { Tooltip } from 'Tooltip'\nimport { Dropdown } from 'Dropdown'\nimport { Chart } from 'Chart'\nimport { Canvas } from 'helpers/Canvas'\nimport { Events, RenderState, Tag } from 'static/Enums'\nimport { Styles } from 'static/constants/Styles'\nimport { Theme } from 'Theme'\n\nexport class Renderable {\n    node: HTMLElement\n\n    canvas: HTMLCanvasElement\n\n    settings: ChartSettings\n\n    animations: Animations\n\n    tooltip: Tooltip\n\n    protected state: RenderState = RenderState.Init\n\n    protected canvasPosition: DOMRect\n\n    protected onMouseMoveEvent: MouseEvent\n\n    protected onClickEvent: MouseEvent | undefined\n\n    protected onContextMenuEvent: MouseEvent | undefined\n\n    protected contextMenu: Dropdown | undefined\n\n    constructor(chart: Chart) {\n        this.node = chart.node\n        this.settings = chart.settings\n        this.animations = new Animations()\n\n        this.canvas = document.createElement(Tag.Canvas)\n\n        this.canvas.style.imageRendering = Styles.ImageRendering.Pixelated\n\n        this.node.append(this.canvas)\n\n        this.initAnimations()\n    }\n\n    render() {\n        const ctx = Canvas.getContext(this.canvas)\n\n        ctx.fillStyle = Theme.canvasBackground\n        ctx.fillRect(0, 0, this.canvas.width, this.canvas.height)\n    }\n\n    refresh() {\n        this.tooltip.refresh()\n        this.state = this.settings.disableInitAnimation ? RenderState.Idle : RenderState.Init\n    }\n\n    resetMouse() {\n        this.onMouseMoveEvent = new MouseEvent(Events.MouseMove)\n        this.onClickEvent = new MouseEvent(Events.Click)\n        this.onContextMenuEvent = undefined\n    }\n\n    initAnimations() {\n        this.tooltip = new Tooltip(this.canvas, this.settings)\n\n        this.canvasPosition = this.canvas.getBoundingClientRect()\n\n        this.canvasPosition.x += scrollX\n        this.canvasPosition.y += scrollY\n\n        if (this.state == RenderState.Init && !this.settings.disableInteractions) {\n            this.canvas.onmousemove = event => this.onMouseMoveEvent = event\n            this.canvas.onclick = event => this.onClickEvent = event\n            this.canvas.oncontextmenu = event => {\n                event.preventDefault()\n                this.contextMenu = undefined\n                if (this.onContextMenuEvent)\n                    this.onContextMenuEvent = undefined\n                else\n                    this.onContextMenuEvent = event\n            }\n            this.canvas.onmouseleave = () => this.onMouseMoveEvent = new MouseEvent(Events.MouseMove)\n        }\n    }\n\n    destroy() {\n        this.canvas.remove()\n    }\n}","import { TreeData } from 'types/data/TreeData'\nimport { Renderer } from 'types/base/Renderer'\nimport { Sector } from 'types/Sector'\nimport * as Helper from 'Helper'\nimport { DropdownItem } from 'types/DropdownItem'\nimport { Dropdown } from 'Dropdown'\nimport { Chart } from 'Chart'\nimport { TextStyles } from 'helpers/TextStyles'\nimport { TooltipValue } from 'types/TooltipValue'\nimport { Export } from 'Export'\nimport { Decomposition } from 'Decomposition'\nimport { Modal } from 'Modal'\nimport { TextResources } from 'static/TextResources'\nimport { Canvas } from 'helpers/Canvas'\nimport { TreeCell } from 'types/TreeCell'\nimport { Formatter } from 'helpers/Formatter'\nimport { AnimationType, Icon, RenderState } from 'static/Enums'\nimport * as Constants from 'static/constants/Index'\n\nexport class TreeRenderer extends Renderer<TreeData> {\n    constructor(chart: Chart) {\n        super(chart)\n\n        this.settings.enableLegend = false\n    }\n\n    render() {\n        super.render()\n\n        if (this.data.values.filter(v => v.value > 0).length == 0) {\n            this.#drawEmpty()\n            requestAnimationFrame(this.render.bind(this))\n            return\n        }\n\n        const titleOffset = this.settings.title ? Constants.Values.titleOffset : 0\n\n        const maxWidth = this.canvas.width - this.data.padding * 2,\n            maxHeight = this.canvas.height - this.data.padding * 2 - titleOffset\n\n        let sum = this.data.values.reduce((acc, cur) => acc + cur.value, 0),\n            totalSquare = maxWidth * maxHeight\n\n        let x = this.data.padding,\n            y = this.data.padding + titleOffset\n\n        let minX = this.data.padding,\n            minY = this.data.padding + titleOffset\n\n        let tooltipCell: TreeCell | undefined = undefined\n        let contextMenuData = undefined\n\n        const ctx = Canvas.getContext(this.canvas)\n\n        let isVertical = true\n        for (let i = 0; i < this.data.values.length; i++) {\n            const item = this.data.values[i]\n\n            const remainWidth = maxWidth - (x - this.data.padding),\n                remainHeight = maxHeight - (y - this.data.padding - titleOffset)\n\n            let cells: TreeCell[] = [\n                {\n                    color: item.color,\n                    label: item.label,\n                    s: item.value / sum * totalSquare,\n                    value: item.value,\n                    id: item.id,\n                    x: x,\n                    y: y\n                } as TreeCell\n            ]\n\n            if (i + 1 <= this.data.values.length - 1) {\n                const next = this.data.values[i + 1]\n\n                cells.push({\n                    color: next.color,\n                    label: next.label,\n                    s: next.value / sum * totalSquare,\n                    value: next.value,\n                    id: next.id,\n                    x: x,\n                    y: y\n                } as TreeCell)\n\n                i++\n            }\n\n            const isSingle = cells.length == 1,\n                isLast = i == this.data.values.length - 1\n\n            if (isVertical) {\n                for (let j = 1; j <= remainWidth + i * i; j++) {\n                    const w = remainWidth - j,\n                        h1 = cells[0].s / w,\n                        h2 = isSingle ? 0 : cells[1].s / w\n\n                    if (h1 + h2 >= remainHeight) {\n                        cells[0].w = Math.floor(w)\n                        cells[0].h = Math.floor(h1)\n\n                        if (!isSingle) {\n                            cells[1].w = Math.floor(w)\n                            cells[1].h = remainHeight - cells[0].h\n\n                            cells[1].y += cells[0].h\n                        }\n\n                        break\n                    }\n                }\n            } else {\n                for (let j = 1; j <= remainHeight + i * i; j++) {\n                    const h = remainHeight - j,\n                        w1 = cells[0].s / h,\n                        w2 = isSingle ? 0 : cells[1].s / h\n\n                    if (w1 + w2 >= remainWidth) {\n                        cells[0].h = Math.floor(h)\n                        cells[0].w = Math.floor(w1)\n\n                        if (!isSingle) {\n                            cells[1].h = Math.floor(h)\n                            cells[1].w = remainWidth - cells[0].w\n\n                            cells[1].x += cells[0].w\n                        }\n\n                        break\n                    }\n                }\n            }\n\n            for (const cell of cells) {\n                if (isLast) {\n                    if (isVertical) {\n                        cell.w = remainWidth\n                        if (isSingle)\n                            cell.h = remainHeight\n                    } else {\n                        cell.h = remainHeight\n                        if (isSingle)\n                            cell.w = remainWidth\n                    }\n                }\n\n                ctx.beginPath()\n\n                ctx.fillStyle = cell.color\n\n                const cellInit = this.state != RenderState.Init\n                                 && !this.animations.contains(cell.id, AnimationType.Init)\n\n                const cellIndex = i + cells.indexOf(cell) + (isLast && isSingle ? 1 : 0),\n                    duration = 260\n\n                const getPrev = () => {\n                    let acc = 0\n                    for (let i = 0; i < cellIndex; i++)\n                        acc += duration - duration * (i / this.data.values.length) / Math.E\n\n                    return acc\n                }\n\n                const initAnimationDuration = duration - duration * cellIndex / (this.data.values.length + 1)\n\n                if (!cellInit) {\n                    this.animations.add(cell.id,\n                        AnimationType.Init,\n                        {\n                            duration: getPrev(),\n                            continuous: true,\n                            body: transition => {\n                                if (transition * getPrev() - getPrev() + initAnimationDuration < 0)\n                                    return ctx.fillStyle += '00'\n\n                                transition = (transition * getPrev() - getPrev() + initAnimationDuration) / initAnimationDuration\n\n                                const center = {\n                                    x: cell.x + cell.w / 2,\n                                    y: cell.y + cell.h / 2\n                                }\n\n                                const minSize = .7,\n                                    rest = 1 - minSize\n\n                                ctx.translate(center.x - center.x * (minSize + transition * rest),\n                                    center.y - center.y * (minSize + transition * rest))\n                                ctx.scale((minSize + transition * rest), (minSize + transition * rest))\n\n                                let opacity = Math.round(255 * transition).toString(16)\n\n                                if (opacity.length < 2)\n                                    opacity = 0 + opacity\n\n                                ctx.fillStyle = cell.color + opacity\n                            }\n                        })\n                } else {\n                    const translate = (transition: number, event: AnimationType) => {\n                        const center = {\n                            x: cell.x + cell.w / 2,\n                            y: cell.y + cell.h / 2\n                        }\n\n                        const margin = 12,\n                            minSize = cell.w > cell.h\n                                      ? 1 - margin / cell.w\n                                      : 1 - margin / cell.h,\n                            rest = 1 - minSize\n\n                        ctx.translate(center.x - center.x * (minSize + transition * rest),\n                            center.y - center.y * (minSize + transition * rest))\n                        ctx.scale(minSize + transition * rest, minSize + transition * rest)\n\n                        this.animations.reload(cell.id, event)\n                    }\n\n                    if (this.#isInCell(cell)\n                        && !tooltipCell) {\n                        tooltipCell = cell\n                        contextMenuData = cell.data\n\n                        this.animations.add(cell.id,\n                            AnimationType.MouseOver,\n                            {\n                                duration: Constants.Animations.tree,\n                                backward: true,\n                                body: transition => {\n                                    translate(transition, AnimationType.MouseLeave)\n                                }\n                            })\n                    } else {\n                        this.animations.add(cell.id,\n                            AnimationType.MouseLeave,\n                            {\n                                timer: Constants.Dates.minDate,\n                                duration: Constants.Animations.tree,\n                                body: transition => {\n                                    translate(transition, AnimationType.MouseOver)\n                                }\n                            })\n                    }\n                }\n\n                const gap = 4\n\n                ctx.roundRect(x + gap, y + gap, cell.w - gap, cell.h - gap, gap * 2)\n                ctx.fill()\n\n                if (cell.label\n                    && Helper.stringWidth(cell.label) < cell.w - gap\n                    && cell.h - gap > 16\n                    && !this.animations.contains(cell.id, AnimationType.Init)) {\n                    ctx.beginPath()\n                    TextStyles.large(ctx)\n                    ctx.fillStyle = !Helper.isColorVisible(cell.color, '#ffffff')\n                                    ? '#000000'\n                                    : '#ffffff'\n                    ctx.fillText(cell.label,\n                        x + 2 + cell.w / 2,\n                        y + 2 + cell.h / 2)\n                }\n\n                ctx.resetTransform()\n\n                if (isVertical)\n                    y += cell.h\n                else\n                    x += cell.w\n\n                totalSquare -= cell.w * cell.h\n                sum -= cell.value\n            }\n\n            if (isVertical) {\n                x += cells[0].w\n                y = minY\n            } else {\n                y += cells[0].h\n                x = minX\n            }\n\n            minX = x\n            minY = y\n\n            isVertical = !isVertical\n        }\n\n        this.tooltip.render(!!tooltipCell && !this.dropdown?.isActive,\n            this.onMouseMoveEvent,\n            [\n                new TooltipValue(`${ tooltipCell?.label }: ${ Formatter.number(tooltipCell?.value) }`)\n            ],\n            this.data.values.find(v => v.id == tooltipCell?.id))\n\n        if (!this.isDestroy)\n            requestAnimationFrame(this.render.bind(this))\n\n        this.state = RenderState.Idle\n\n        super.renderDropdown()\n\n        if (tooltipCell || this.contextMenu)\n            this.renderContextMenu(contextMenuData)\n        else\n            this.onContextMenuEvent = undefined\n    }\n\n    #isInCell(cell: TreeCell) {\n        if (!this.onMouseMoveEvent || !cell)\n            return false\n\n        const mouse = this.getMousePosition(this.onMouseMoveEvent)\n\n        return !(this.dropdown?.isActive ?? false)\n               && cell.x <= mouse.x && mouse.x <= cell.x + cell.w\n               && cell.y <= mouse.y && mouse.y <= cell.y + cell.h\n    }\n\n    #drawEmpty() {\n        const ctx = Canvas.getContext(this.canvas)\n\n        TextStyles.regular(ctx)\n        ctx.fillText(TextResources.treeMapIsEmpty,\n            this.canvas.width / 2,\n            this.canvas.height / 2)\n    }\n\n    refresh() {\n        super.refresh()\n    }\n\n    resize() {\n        super.resize()\n\n        this.initAnimations()\n        this.animations.clear()\n    }\n\n    prepareSettings() {\n        super.prepareSettings()\n\n        this.data.values = this.data.values.map(v => new Sector(v))\n\n        this.data.values = this.data.values.filter(v => v.value > 0)\n\n        this.data.values.sort((a, b) => (b.value ?? 0) - (a.value ?? 0))\n\n        this.calculateColors(true)\n\n        for (let item of this.data.values) {\n            item.disabled = !item.value\n            item.value ??= 0\n        }\n    }\n\n    initDropdown() {\n        super.initDropdown()\n\n        this.dropdown = new Dropdown(this.canvas,\n            {\n                x: -10,\n                y: 10,\n                icon: Icon.ThreeLines,\n                items: [\n                    {\n                        text: TextResources.exportCSV,\n                        action: () => {\n                            Export.asCsv(Decomposition.toTable(TreeData.getRows(this.data)), this.settings.title)\n                        }\n                    },\n                    {\n                        isDivider: true\n                    } as DropdownItem,\n                    {\n                        text: TextResources.decomposeToTable,\n                        action: () => {\n                            new Modal(Decomposition.toTable(TreeData.getRows(this.data))).open()\n                        }\n                    }\n                ]\n            })\n    }\n}","import { TableData } from 'types/TableData'\nimport * as Helper from 'Helper'\nimport { Value } from 'types/base/Value'\nimport { ChartSettings } from 'types/ChartSettings'\nimport { Formatter } from 'helpers/Formatter'\nimport { Styles } from 'static/constants/Styles'\nimport { Tag } from 'static/Enums'\n\nexport class Decomposition {\n    static toTable(values: TableData) {\n        let table = document.createElement(Tag.Table)\n\n        table.classList.add('o-table')\n\n        let totals = new Map<string, number>()\n        let rows = '',\n            headers = '',\n            index = 0\n\n        let valuesMap = new Map<string, Map<string, any>>()\n\n        for (const tableValue of values.values) {\n            let allColumns = new Map<string, any>()\n\n            for (const header of values.headers)\n                allColumns.set(header.value, 0)\n\n            for (const [key, value] of tableValue.values)\n                allColumns.set(key, value)\n\n            let indexSpaces = ''\n            for (let i = 0; i < index; i++)\n                indexSpaces += ' '\n\n            valuesMap.set(tableValue.name + indexSpaces, allColumns)\n\n            index++\n        }\n\n        for (const tableHeader of values.headers)\n            headers += `\n                <th>\n                    ${ tableHeader.display }\n                </th>\n            `\n\n        for (const [key, value] of valuesMap) {\n            let columns = ''\n\n            for (const [vKey, vValue] of value) {\n                columns += `\n                    <td>\n                        ${ vValue == undefined ? '' : Formatter.number(vValue) }\n                    </td>\n                `\n\n                if (totals.has(vKey)) {\n                    let totalValue = +(totals.get(vKey) ?? 0)\n                    totals.set(vKey, totalValue + +vValue)\n                } else {\n                    totals.set(vKey, vValue)\n                }\n            }\n\n            rows += `\n                <tr>\n                    <td class=\"o-table-label\">\n                        ${ key.trim() }\n                    </td>\n                    \n                    ${ columns } \n                </tr>\n            `\n        }\n\n        let totalColumns = ''\n\n        for (const [, value] of totals)\n            totalColumns += `\n                <td>\n                    ${ value == undefined ? '' : Formatter.number(value) }\n                </td>\n            `\n\n        table.innerHTML = `\n            <thead>\n                <tr>\n                    <th></th>\n                \n                    ${ headers }\n                </tr>\n            </thead>\n        \n            <tbody>\n                ${ rows }\n            </tbody>\n            \n            <tfoot>\n                <tr>\n                    <td></td>\n                \n                    ${ totalColumns }\n                </tr>\n            </tfoot>\n        `\n\n        return table\n    }\n\n    static toChart<T extends Value>(settings: ChartSettings, values: T[]) {\n        let container = document.createElement(Tag.Div),\n            div = document.createElement(Tag.Div),\n            script = document.createElement(Tag.Script),\n            id = Helper.guid()\n\n        container.style.display = Styles.Display.Flex\n        container.style.height = '100%'\n\n        div.id = id\n        div.style.flexGrow = '1'\n\n        let cloneSettings = JSON.parse(JSON.stringify(settings)) as ChartSettings\n\n        if (cloneSettings.title)\n            cloneSettings.title = cloneSettings.title + ' (Other)'\n        cloneSettings.data.values = values\n        cloneSettings.minWidth = undefined\n        cloneSettings.minHeight = undefined\n\n        script.innerHTML = `\n            new OCharts.chart(document.getElementById('${ id }'), ${ JSON.stringify(cloneSettings) })\n                .render()\n        `\n\n        container.append(div, script)\n\n        return container\n    }\n}","export { Animations } from './Animations'\nexport { Dates } from './Dates'\nexport { Values } from './Values'","import { Renderer } from 'types/base/Renderer'\nimport { GaugeData } from 'types/data/GaugeData'\nimport * as Helper from 'Helper'\nimport { Sector } from 'types/Sector'\nimport { Dropdown } from 'Dropdown'\nimport { Point } from 'types/Point'\nimport { Chart } from 'Chart'\nimport { Theme } from 'Theme'\nimport { TextStyles } from 'helpers/TextStyles'\nimport { TooltipValue } from 'types/TooltipValue'\nimport { Export } from 'Export'\nimport { Formatter } from 'helpers/Formatter'\nimport { Canvas } from 'helpers/Canvas'\nimport { TextResources } from 'static/TextResources'\nimport { AnimationType, Icon, RenderState } from 'static/Enums'\n\nexport class GaugeRenderer extends Renderer<GaugeData> {\n    #radius: number\n\n    #center: Point\n\n    constructor(chart: Chart) {\n        super(chart)\n\n        this.settings.enableLegend = false\n    }\n\n    render() {\n        super.render()\n\n        this.#draw()\n\n        const value = this.data.values[0]\n        this.tooltip.render(this.#isInsideSector(this.onMouseMoveEvent, value) && !this.dropdown?.isActive,\n            this.onMouseMoveEvent,\n            [\n                new TooltipValue(`${ value?.label }: ${ Formatter.number(value?.current) }`)\n            ],\n            value)\n\n        if (!this.isDestroy)\n            requestAnimationFrame(this.render.bind(this))\n\n        this.state = RenderState.Idle\n\n        super.renderDropdown()\n    }\n\n    #draw() {\n        const ctx = Canvas.getContext(this.canvas)\n\n        const value = this.data.values[0] ?? { id: Helper.guid() }\n\n        if (this.state == RenderState.Init || this.animations.contains(value.id, AnimationType.Init))\n            this.animations.add(value.id,\n                AnimationType.Init,\n                {\n                    duration: 450,\n                    continuous: true,\n                    body: transition => {\n                        value.current = value.value * transition\n                    }\n                })\n\n        ctx.beginPath()\n\n        ctx.strokeStyle = value.color\n        ctx.lineCap = 'round'\n        ctx.lineWidth = 40\n\n        const piece = value.current / this.data.max,\n            angle = (isNaN(piece) ? 1 : piece) * Math.PI\n\n        if (value.value) {\n            ctx.arc(this.#center.x, this.#center.y, this.#radius, Math.PI, angle - Math.PI)\n            ctx.stroke()\n        }\n\n        ctx.beginPath()\n\n        ctx.lineWidth = 1\n        ctx.lineCap = 'square'\n\n        let localAccumulator = 0,\n            localAngle = Math.PI\n\n        while (localAngle >= 0) {\n            let currentAngle = localAngle - Math.PI / 10 > 0\n                               ? Math.PI / 10\n                               : localAngle\n\n            const getPoint = (offset: number) => {\n                return {\n                    x: this.#center.x + (this.#radius + offset) * Math.cos(Math.PI + localAccumulator),\n                    y: this.#center.y + (this.#radius + offset) * Math.sin(Math.PI + localAccumulator)\n                }\n            }\n\n            let point1 = getPoint(50),\n                point2 = getPoint(90),\n                point3 = getPoint(115)\n\n            const opacity = Math.PI - localAngle > angle ? '66' : 'ff'\n\n            ctx.moveTo(point1.x, point1.y)\n            ctx.lineTo(point2.x, point2.y)\n            ctx.strokeStyle = Theme.text + opacity\n            ctx.stroke()\n\n            TextStyles.regular(ctx)\n            ctx.fillStyle = Theme.text + opacity\n            ctx.fillText(Formatter.number(this.data.max - localAngle / Math.PI * this.data.max), point3.x, point3.y)\n\n            localAccumulator += currentAngle\n\n            localAngle -= Math.PI / 10\n        }\n    }\n\n    #isInsideSector(event: MouseEvent, value: Sector): boolean {\n        if (!event)\n            return false\n\n        const isAngle = (point: Point) => {\n            let a = Math.atan2(point.y - this.#center.y, point.x - this.#center.x)\n            if (a < 0)\n                a += Math.PI * 2\n\n            const piece = value.current / this.data.max,\n                angle = (isNaN(piece) ? 1 : piece) * Math.PI\n\n            return a > Math.PI && Math.PI + angle >= a\n        }\n\n        const isWithinRadius = (v: Point) => {\n            const outerRadius = this.#radius + 20,\n                innerRadius = this.#radius - 20\n\n            return v.x * v.x + v.y * v.y <= outerRadius * outerRadius\n                   && v.x * v.x + v.y * v.y >= innerRadius * innerRadius\n        }\n\n        const point = this.getMousePosition(event),\n            inner = {\n                x: point.x - this.#center.x,\n                y: point.y - this.#center.y\n            }\n\n        return !(this.dropdown?.isActive ?? false)\n               && isAngle(point)\n               && isWithinRadius(inner)\n    }\n\n    #calculateSizes() {\n        const longSide = this.canvas.width < this.canvas.height\n                         ? this.canvas.height - 250\n                         : this.canvas.width\n\n        this.#radius = longSide / 3\n\n        this.#center = {\n            x: this.canvas.width / 2,\n            y: this.canvas.height - this.#radius / 5\n        }\n    }\n\n    refresh() {\n        super.refresh()\n    }\n\n    resize() {\n        super.resize()\n\n        this.initAnimations()\n        this.#calculateSizes()\n    }\n\n    prepareSettings() {\n        super.prepareSettings()\n\n        for (let item of this.data.values) {\n            item.disabled = !item.value\n            item.value ??= 0\n        }\n\n        if (this.data.values.length > 0 && this.data.values[0].value > this.data.max)\n            this.data.values[0].value = this.data.max\n    }\n\n    initDropdown() {\n        super.initDropdown()\n\n        this.dropdown = new Dropdown(this.canvas,\n            {\n                x: -10,\n                y: 10,\n                icon: Icon.ThreeLines,\n                items: [\n                    {\n                        text: TextResources.exportPNG,\n                        action: () => {\n                            Export.asPng(this.canvas, this.settings.title)\n                        }\n                    }\n                ]\n            })\n    }\n}","import { Theme } from 'Theme'\nimport * as Helper from 'Helper'\nimport { Canvas } from 'helpers/Canvas'\nimport { Icon, Tag } from 'static/Enums'\n\nexport class Export {\n    static asPng(canvas: HTMLCanvasElement, title: string) {\n        requestAnimationFrame(() => {\n            const ctx = Canvas.getContext(canvas)\n\n            let width = Helper.stringWidth(Icon.ThreeLines) + 20,\n                height = 64\n\n            ctx.fillStyle = Theme.canvasBackground\n            ctx.fillRect(canvas.width - width, 0, width, height)\n\n            let leftEmpty = 0,\n                rightEmpty = 0\n\n            const imageData = new Uint32Array(ctx.getImageData(0, 0, canvas.width, canvas.height).data.buffer)\n\n            let isBusy = false\n\n            for (let i = 0; i < canvas.width; i++) {\n                for (let j = 0; j < canvas.height; j++) {\n                    if (Canvas.isPixelBusy(imageData[i + j * canvas.width])) {\n                        isBusy = true\n                        break\n                    }\n                }\n\n                if (isBusy)\n                    break\n\n                leftEmpty++\n            }\n\n            isBusy = false\n\n            for (let i = canvas.width; i >= 0; i--) {\n                for (let j = 0; j < canvas.height; j++) {\n                    if (Canvas.isPixelBusy(imageData[i + j * canvas.width])) {\n                        isBusy = true\n                        break\n                    }\n                }\n\n                if (isBusy)\n                    break\n\n                rightEmpty++\n            }\n\n            if (leftEmpty > 4)\n                leftEmpty -= 4\n            if (rightEmpty > 4)\n                rightEmpty -= 4\n\n            if (leftEmpty > rightEmpty)\n                leftEmpty = rightEmpty\n            if (rightEmpty > leftEmpty)\n                rightEmpty = leftEmpty\n\n            let destinationCanvas = document.createElement(Tag.Canvas)\n            destinationCanvas.width = canvas.width - leftEmpty - rightEmpty\n            destinationCanvas.height = canvas.height\n\n            const destCtx = Canvas.getContext(destinationCanvas)\n\n            destCtx.fillStyle = Theme.background\n            destCtx.fillRect(0, 0, canvas.width, canvas.height)\n\n            destCtx.drawImage(canvas, -leftEmpty, 0)\n\n            Export.saveAs((title ?? 'chart') + '.png',\n                destinationCanvas.toDataURL('image/png'))\n        })\n    }\n\n    static asCsv(table: HTMLTableElement, title: string) {\n        let rows = table.querySelectorAll('tr'),\n            csv = []\n\n        for (let i = 0; i < rows.length; i++) {\n            let row = [],\n                cols = rows[i].querySelectorAll('td, th')\n\n            for (let j = 0; j < cols.length; j++) {\n                let data = cols[j].innerHTML\n                                  .replace(/(\\r\\n|\\n|\\r)/gm, '')\n                                  .replace(/(\\s\\s)/gm, ' ')\n\n                data = data.replace(/\"/g, '\"\"')\n                row.push('\"' + data + '\"')\n            }\n\n            csv.push(row.join(','))\n        }\n\n        Export.saveAs((title ?? 'table') + '.csv',\n            csv.join('\\n'),\n            'data:text/csv;charset=utf-8,' + encodeURIComponent(csv.join('\\n')),\n            true)\n    }\n\n    static saveAs(name: string, dataURL: string, href?: string | undefined, isText?: boolean) {\n        if (window.showSaveFilePicker != undefined) {\n            const accept = isText\n                           ? { 'text/csv': '.csv' } as FilePickerAcceptType\n                           : { 'image/*': '.png' } as FilePickerAcceptType\n\n            const options = {\n                suggestedName: name,\n                types: [\n                    {\n                        accept: accept\n                    }\n                ],\n                excludeAcceptAllOption: true\n            } as SaveFilePickerOptions\n\n            function toBlob(dataURI: string) {\n                const byteString = atob(dataURI.split(',')[1]),\n                    mimeString = dataURI.split(',')[0]\n                        .split(':')[1]\n                        .split(';')[0],\n                    buffer = new ArrayBuffer(byteString.length),\n                    imageArray = new Uint8Array(buffer)\n\n                for (let i = 0; i < byteString.length; i++)\n                    imageArray[i] = byteString.charCodeAt(i)\n\n                return new Blob([buffer], { type: mimeString })\n            }\n\n            window.showSaveFilePicker(options)\n                  .then(fileHandle => {\n                      fileHandle.createWritable()\n                                .then(writableStream => {\n                                    writableStream.write(isText ? dataURL : toBlob(dataURL))\n                                                  .then(() => writableStream.close())\n                                })\n                  })\n        } else {\n            let download = document.createElement(Tag.A)\n            download.href = href ?? dataURL\n            download.download = name\n            download.click()\n        }\n    }\n}","export abstract class Formatter {\n    static number = (value: number | undefined) =>\n        value?.toLocaleString(undefined, {\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2\n        }) ?? ''\n\n    static date = (value: Date) =>\n        value.toLocaleDateString()\n}","import { TextStyles } from 'helpers/TextStyles'\nimport { Theme } from 'Theme'\nimport { Animations } from 'Animations'\nimport * as Helper from 'Helper'\nimport { ButtonOptions } from 'types/ButtonOptions'\nimport { Canvas } from 'helpers/Canvas'\nimport { AnimationType } from 'static/Enums'\nimport * as Constants from 'static/constants/Index'\nimport { Styles } from 'static/constants/Styles'\n\nexport class Button {\n    #canvas: HTMLCanvasElement\n\n    #options: ButtonOptions\n\n    #canvasPosition: DOMRect\n\n    animations: Animations\n\n    #isInit: boolean\n\n    #position: DOMRect\n\n    constructor(canvas: HTMLCanvasElement, options: ButtonOptions) {\n        this.#canvas = canvas\n        this.#options = options\n\n        this.animations = new Animations()\n\n        this.#initAnimations()\n    }\n\n    render(moveEvent: MouseEvent, clickEvent: MouseEvent | undefined) {\n        if (!this.#isInit)\n            this.#initAnimations()\n\n        const ctx = Canvas.getContext(this.#canvas)\n\n        ctx.beginPath()\n\n        const translate = (transition: number, event: AnimationType) => {\n            this.animations.reload('animation-button', event)\n\n            ctx.fillStyle = Helper.adjustColor(Theme.canvasBackground, -Math.round(transition * 25))\n        }\n\n        if (this.#isOnButton(moveEvent)) {\n            this.#canvas.style.cursor = Styles.Cursor.Pointer\n\n            if (clickEvent && this.#isOnButton(clickEvent)) {\n                this.#options.action()\n                clickEvent = undefined\n            }\n\n            this.animations.add('animation-button',\n                AnimationType.MouseOver,\n                {\n                    duration: 300,\n                    body: transition => {\n                        translate(transition, AnimationType.MouseLeave)\n                    }\n                })\n        } else {\n            this.animations.add('animation-button',\n                AnimationType.MouseLeave,\n                {\n                    timer: Constants.Dates.minDate,\n                    duration: 300,\n                    backward: true,\n                    body: transition => {\n                        translate(transition, AnimationType.MouseOver)\n                    }\n                })\n        }\n\n        ctx.roundRect(this.#position.x, this.#position.y, this.#position.width, this.#position.height, 4)\n        ctx.fill()\n\n        TextStyles.regular(ctx)\n        ctx.fillText(this.#options.text,\n            this.#position.x + this.#position.width / 2,\n            this.#position.y + this.#position.height / 2)\n\n        this.#isInit = true\n\n        return clickEvent\n    }\n\n    resize() {\n        this.#initAnimations()\n    }\n\n    #initAnimations() {\n        this.#canvasPosition = this.#canvas.getBoundingClientRect()\n\n        this.#canvasPosition.x += scrollX\n        this.#canvasPosition.y += scrollY\n\n        const width = Helper.stringWidth(this.#options.text) + 12,\n            height = 20\n\n        this.#position = <DOMRect>{\n            x: this.#options.x + width > this.#canvas.width\n               ? this.#canvas.width - width\n               : this.#options.x < 0\n                 ? this.#canvas.width + this.#options.x - width\n                 : this.#options.x,\n            y: this.#options.y + height > this.#canvas.height\n               ? this.#canvas.height - height\n               : this.#options.y < 0\n                 ? this.#canvas.height + this.#options.y - height\n                 : this.#options.y,\n            width: width,\n            height: height\n        }\n    }\n\n    #isOnButton(event: MouseEvent): boolean {\n        if (!event)\n            return false\n\n        let trueX = event.clientX - this.#canvasPosition.x + scrollX,\n            trueY = event.clientY - this.#canvasPosition.y + scrollY\n\n        return trueX >= this.#position.x && trueX <= this.#position.x + this.#position.width\n               && trueY >= this.#position.y && trueY <= this.#position.y + this.#position.height\n    }\n}","export enum AnimationType {\n    MouseOver,\n\n    MouseLeave,\n\n    Init,\n\n    Click,\n\n    AnotherItemOver,\n\n    AnotherItemLeave\n}\n\nexport enum Attribute {\n    Name = 'name'\n}\n\nexport enum ChartType {\n    Plot,\n\n    Circular,\n\n    Gauge,\n\n    TreeMap\n}\n\nexport enum ErrorType {\n    NullContext = 'Can\\'t find context',\n\n    ElementNotExist = 'Element does not exist'\n}\n\nexport enum Events {\n    VisibilityChanged = 'visibilitychange',\n\n    Blur = 'blur',\n\n    MouseMove = 'mousemove',\n\n    Click = 'click',\n\n    Change = 'change',\n\n    ContextMenu = 'contextmenu'\n}\n\nexport enum LegendPlace {\n    Bottom,\n\n    Left,\n\n    Top,\n\n    Right\n}\n\nexport enum LineType {\n    Solid,\n\n    Dash,\n\n    Dotted\n}\n\nexport enum PlotAxisType {\n    Date = 1\n}\n\nexport enum PlotType {\n    Line,\n\n    AttentionLine,\n\n    Column,\n\n    Bar,\n\n    StackingColumn\n}\n\nexport enum Tag {\n    Canvas = 'canvas',\n\n    A = 'a',\n\n    Div = 'div',\n\n    Dialog = 'dialog',\n\n    Table = 'table',\n\n    Script = 'script'\n}\n\nexport enum RenderState {\n    Idle,\n\n    Init\n}\n\nexport enum Icon {\n    ThreeLines = '☰'\n}","import { Errors } from 'helpers/Errors'\nimport { ErrorType, Tag } from 'static/Enums'\n\nexport class Modal {\n    modal: HTMLDialogElement | undefined\n\n    #content: HTMLDivElement | undefined\n\n    constructor(content?: HTMLElement, size?: DOMRect) {\n        this.modal = document.createElement(Tag.Dialog)\n\n        this.modal.classList.add('o-modal')\n\n        if (size) {\n            this.modal.style.width = `${size.width}px`\n            this.modal.style.height = `${size.height}px`\n        }\n\n        this.modal.oncancel = () => this.close()\n\n        document.body.appendChild(this.modal)\n\n        this.#setHeader()\n\n        this.#setContent(content)\n    }\n\n    open() {\n        Errors.throwIsUndefined(this.modal, ErrorType.ElementNotExist)\n\n        this.modal!.showModal()\n    }\n\n    close() {\n        Errors.throwIsUndefined(this.modal, ErrorType.ElementNotExist)\n\n        this.modal!.close()\n\n        this.modal!.remove()\n\n        this.modal = undefined\n    }\n\n    #setHeader() {\n        Errors.throwIsUndefined(this.modal, ErrorType.ElementNotExist)\n\n        let closeButton = document.createElement('button')\n\n        closeButton.classList.add('o-modal-close')\n        closeButton.innerHTML = 'x'\n\n        this.modal!.appendChild(closeButton)\n\n        closeButton.onclick = () => this.close()\n    }\n\n    #setContent(content: HTMLElement | undefined) {\n        if (this.#content == undefined) {\n            this.#content = document.createElement(Tag.Div)\n\n            this.#content.classList.add('o-modal-content')\n\n            this.modal?.appendChild(this.#content)\n        }\n\n        if (content != undefined)\n            this.#content.appendChild(content)\n    }\n}","import { Value } from 'types/base/Value'\nimport { PlotPoint } from 'types/PlotPoint'\nimport { LineType, PlotType } from 'static/Enums'\n\nexport class PlotSeries extends Value {\n    values: PlotPoint[]\n\n    type: PlotType\n\n    width: number\n\n    lineType: LineType = LineType.Solid\n\n    constructor(obj: object) {\n        super()\n\n        Object.assign(this, obj)\n    }\n\n    toggle(transition: number) {\n        super.toggle(transition)\n    }\n\n    checkCondition(): boolean {\n        super.checkCondition()\n\n        return true\n    }\n\n    reset() {\n        super.reset()\n    }\n}","import { Value } from 'types/base/Value'\nimport { Renderable } from 'types/base/Renderable'\nimport * as Helper from 'Helper'\nimport { Sector } from 'types/Sector'\nimport { Point } from 'types/Point'\nimport { Theme } from 'Theme'\nimport { Chart } from 'Chart'\nimport { TextStyles } from 'helpers/TextStyles'\nimport { Canvas } from 'helpers/Canvas'\nimport { Button } from 'Button'\nimport { TextResources } from 'static/TextResources'\nimport * as Constants from 'static/constants/Index'\nimport { Styles } from 'static/constants/Styles'\nimport { AnimationType, Events, LegendPlace, RenderState } from 'static/Enums'\nimport { ChartSettings } from './types/ChartSettings'\n\nexport class Legend extends Renderable {\n    #button: Button\n\n    #offset: Point\n\n    #chart: Chart\n\n    #hoverCount: number\n\n    isDestroy: boolean = false\n\n    constructor(chart: Chart) {\n        super(chart)\n\n        this.#chart = chart\n\n        this.prepareSettings()\n    }\n\n    render() {\n        super.render()\n\n        const ctx = Canvas.getContext(this.canvas)\n\n        let nextPoint = { x: 20, y: 21 }\n\n        this.canvas.style.cursor = Styles.Cursor.Default\n\n        TextStyles.regular(ctx)\n        ctx.textAlign = 'start'\n        ctx.textBaseline = 'alphabetic'\n\n        ctx.translate(this.#offset.x, this.#offset.y)\n\n        this.#hoverCount = 0\n\n        for (const value of this.settings.data.values.filter(v => !v.hideInLegend))\n            nextPoint = this.#draw(value, nextPoint.x, nextPoint.y)\n\n        ctx.translate(-this.#offset.x, -this.#offset.y)\n\n        if (!this.isDestroy)\n            requestAnimationFrame(this.render.bind(this))\n\n        this.onClickEvent = this.#button?.render(this.onMouseMoveEvent, this.onClickEvent)\n\n        this.state = RenderState.Idle\n    }\n\n    #draw(value: Value, x: number, y: number): Point {\n        const ctx = Canvas.getContext(this.canvas)\n\n        const textWidth = Helper.stringWidth(value.label),\n            circleRadius = 6\n\n        if (x + 48 + textWidth >= this.canvas.width - 40 - this.#offset.x) {\n            x = 20\n            y += 26\n        }\n\n        let rectX = x - circleRadius - circleRadius,\n            rectY = y - circleRadius / 2 - circleRadius,\n            rectW = circleRadius + circleRadius + textWidth + 18,\n            rectH = 20\n\n        const isHover = (event: MouseEvent | undefined) => {\n            if (!event)\n                return false\n\n            const px = event.clientX - this.canvasPosition.x + scrollX - this.#offset.x,\n                py = event.clientY - this.canvasPosition.y + scrollY - this.#offset.y\n\n            return px >= rectX && px <= rectX + rectW\n                   && py >= rectY && py <= rectY + rectH\n        }\n\n        const translate = (transition: number, event: AnimationType) => {\n            this.animations.reload(value.id, event)\n\n            ctx.beginPath()\n\n            ctx.roundRect(rectX, rectY, rectW, rectH, circleRadius)\n\n            ctx.fillStyle = Helper.adjustColor(Theme.canvasBackground, Math.round(-25 * transition))\n            ctx.fill()\n        }\n\n        this.animations.add(value.id,\n            AnimationType.Click,\n            {\n                duration: Constants.Animations.legend,\n                continuous: true,\n                before: () => {\n                    return this.onClickEvent != undefined\n                           && (isHover(this.onClickEvent)\n                               || (value instanceof Sector\n                                   && value.current !== 0\n                                   && value.value !== value.current))\n                           && value.checkCondition()\n                },\n                body: transition => {\n                    value.toggle(transition)\n\n                    if (transition == 1)\n                        this.onClickEvent = new PointerEvent(Events.Click)\n                }\n            })\n\n        if (isHover(this.onMouseMoveEvent)) {\n            this.animations.add(value.id,\n                AnimationType.MouseOver,\n                {\n                    duration: Constants.Animations.button,\n                    body: transition => {\n                        translate(transition, AnimationType.MouseLeave)\n                    }\n                })\n\n            if (!value.disabled) {\n                this.#hoverCount++\n\n                this.#chart.highlight(value)\n            }\n\n            this.canvas.style.cursor = Styles.Cursor.Pointer\n        } else {\n            this.animations.add(value.id,\n                AnimationType.MouseLeave,\n                {\n                    timer: Constants.Dates.minDate,\n                    duration: Constants.Animations.button,\n                    backward: true,\n                    body: transition => {\n                        translate(transition, AnimationType.MouseOver)\n                    }\n                })\n        }\n\n        ctx.beginPath()\n\n        ctx.arc(x - 1, y + 1, 3, 0, 2 * Math.PI)\n        ctx.fillStyle = value.disabled ? Helper.grayScale(value.color) : value.color\n        ctx.fill()\n\n        ctx.fillStyle = Theme.text\n        if (value.disabled)\n            ctx.fillStyle += '7f'\n\n        ctx.fillText(value.label, x + circleRadius * 1.5 + 1, y + 6)\n\n        x += 20\n\n        if (value.disabled) {\n            ctx.moveTo(x - 10, y + 2)\n            ctx.lineTo(x + textWidth - 10, y + 2)\n            ctx.strokeStyle = Theme.text + '7f'\n            ctx.stroke()\n        }\n\n        x += textWidth + 22\n\n        return {\n            x: x,\n            y: y\n        }\n    }\n\n    destroy() {\n        this.isDestroy = true\n\n        this.canvas.remove()\n    }\n\n    refresh() {\n        this.state = RenderState.Init\n    }\n\n    resize() {\n        this.calculateSizes()\n        this.#button?.resize()\n        this.initAnimations()\n    }\n\n    calculateSizes() {\n        switch (this.settings.legendPlace) {\n            case LegendPlace.Bottom:\n            default:\n                this.canvas.width = this.settings.width\n                this.canvas.height = Legend.getLegendHeight(this.settings.data.values, this.canvas.width)\n\n                this.node.style.flexDirection = Styles.FlexDirection.Column\n\n                break\n\n            case LegendPlace.Top:\n                this.canvas.width = this.settings.width\n                this.canvas.height = Legend.getLegendHeight(this.settings.data.values, this.canvas.width)\n\n                this.node.style.flexDirection = Styles.FlexDirection.ColumnReverse\n\n                break\n\n            case LegendPlace.Left:\n                this.canvas.width = 500\n                this.canvas.height = this.settings.height\n\n                this.node.style.flexDirection = Styles.FlexDirection.Row\n\n                break\n\n            case LegendPlace.Right:\n                this.canvas.width = 500\n                this.canvas.height = this.settings.height\n\n                this.node.style.flexDirection = Styles.FlexDirection.RowReverse\n\n                break\n        }\n\n        this.#offset = {\n            x: Legend.getOffsetToCenter(this.settings.data.values, this.canvas.width),\n            y: (this.canvas.height - Legend.getLegendHeight(this.settings.data.values, this.canvas.width)) / 2\n        }\n    }\n\n    applySettings(settings: ChartSettings) {\n        this.settings = settings\n\n        this.prepareSettings()\n    }\n\n    prepareSettings() {\n        this.calculateSizes()\n\n        if (!this.settings.disableInteractions)\n            this.#button = new Button(this.canvas,\n                {\n                    x: -10,\n                    y: 12,\n                    text: TextResources.reset,\n                    action: () => {\n                        for (let value of this.settings.data.values)\n                            value.reset()\n                    }\n                })\n    }\n\n    static getOffsetToCenter(values: Value[], width: number): number {\n        let maxWidth = 20\n\n        for (const value of values.filter(v => !v.hideInLegend)) {\n            const labelWidth = Helper.stringWidth(value.label)\n\n            if (maxWidth + labelWidth + 47 >= width - 100)\n                break\n\n            maxWidth += labelWidth + 47\n        }\n\n        return width / 2 - maxWidth / 2\n    }\n\n    static getLegendHeight(values: Value[], width: number): number {\n        let count = 1,\n            acc = 20,\n            offset = Legend.getOffsetToCenter(values, width)\n\n        for (const value of values.filter(v => !v.hideInLegend)) {\n            const labelWidth = Helper.stringWidth(value.label)\n\n            if (acc + labelWidth + 48 >= width - 32 - offset) {\n                acc = 20\n                count++\n            }\n\n            acc += labelWidth + 48\n        }\n\n        return 24 + count * 20 + (count - 1) * 6\n    }\n}","export class Values {\n    static readonly titleOffset = 30\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","Number.prototype.isAnyEquals = function (...values) {\n    return values.includes(<number>this)\n}\n\nDate.prototype.addDays = function (days: number) {\n    let result = new Date(this)\n    result.setDate(result.getDate() + days)\n    return result\n}\n\nDate.prototype.addMilliseconds = function (milliseconds: number) {\n    let result = new Date(this)\n    result.setMilliseconds(result.getMilliseconds() + milliseconds)\n    return result\n}\n\nMap.prototype.trySet = function (key: any, value: any) {\n    if (!this.has(key))\n        this.set(key, value)\n}","import { Chart } from 'Chart'\nimport { ChartSettings } from 'types/ChartSettings'\n\nfunction OCharts() {\n}\n\nOCharts.chart = function(context: HTMLElement, settings: ChartSettings) {\n    return new Chart(context, settings)\n}\n\n// @ts-ignore\nwindow.OCharts = OCharts"],"names":["Animations","constructor","this","Map","add","id","type","value","key","has","set","contains","reload","get","timer","Date","clear","forEach","_value","AnimationType","Init","delete","initializeTransitions","i","t","x","Math","pow","y","transitionCurve","toFixed","getTransition","item","stamp","passed","getTime","transition","duration","before","body","backward","continuous","endsWith","color","amount","replace","min","max","parseInt","toString","slice","Array","join","round","reduce","a","v","padStart","floor","random","str","font","widths","from","acc","cur","charCodeAt","S4","substring","toLowerCase","background","foreground","backgroundAsRgb","hexToRgb","foregroundAsRgb","r","g","b","test","opacity","hex","result","exec","componentToHex","c","length","rgb","bg","Theme","canvasBackground","alpha","Color","text","Errors","error","Error","throwIsUndefined","object","undefined","throw","context","settings","node","applySettings","document","addEventListener","Events","VisibilityChanged","resetMouse","window","Blur","Click","event","target","canvas","closeDropdowns","render","ResizeObserver","destroy","observe","disconnect","highlight","reset","isNeedRestartRender","enableLegend","Legend","enableTooltip","disableInteractions","ChartType","Plot","PlotRenderer","Circular","CircularRenderer","Gauge","GaugeRenderer","TreeMap","TreeRenderer","prepareSettings","initDropdown","initAnimations","resize","refresh","initialize","isDarkThemeFunction","style","display","Styles","Display","Flex","flexDirection","FlexDirection","Column","alignItems","AlignItems","Center","justifyContent","JustifyContent","height","circular","legend","tree","tooltip","button","Sector","Value","obj","super","Object","assign","toggle","disabled","current","checkCondition","TextResources","exportPNG","decomposeToTable","exportCSV","menu","allDataIsHidden","other","thousandShort","millionShort","billionShort","show","noLabel","treeMapIsEmpty","getContext","willReadFrequently","ErrorType","NullContext","isPixelBusy","pixel","canvasBackgroundInt","data","templateId","getElementById","condition","lines","opacityValue","getBoundingClientRect","scrollX","scrollY","ctx","Canvas","textWidth","map","line","Helper","stringWidth","clientX","clientY","width","beginPath","roundRect","baseOpacity","strokeStyle","dropdownBorder","lineWidth","fillStyle","stroke","fill","offset","arc","PI","TextStyles","fillText","padding","updateVisibility","visibility","Visibility","Visible","regex","content","cloneNode","createElement","Tag","Div","innerHTML","position","Position","Absolute","pointerEvents","PointerEvents","None","setAttribute","Attribute","Name","matches","matchAll","html","match","property","replaceAll","appendChild","Hidden","left","top","tooltips","querySelectorAll","Constants","ThemeOptions","colors","backgrounds","lineAxes","lineActives","dropdownBorders","canvasBackgrounds","getRows","headers","values","series","seriesValues","push","xType","PlotAxisType","Formatter","date","name","label","unique","Set","uniqueHeaders","filter","sort","Cursor","Default","Pointer","ColumnReverse","Row","RowReverse","ImageRendering","Pixelated","options","isActive","icon","animations","moveEvent","clickEvent","translate","adjustColor","cursor","MouseOver","MouseLeave","Dates","minDate","regular","iconOffset","navigator","platform","borderRadius","items","dividers","maxWidth","dropdownOpacity","itemOpacityDec","itemBackground","dropdownItemHoverColor","borderColor","rect","setLineDash","isDivider","moveTo","lineTo","animationKey","isReturn","action","textAlign","textBaseline","close","w","h","trueX","trueY","callback","isDark","function","matchMedia","setTheme","Change","index","currentTheme","lineAxis","lineActive","Number","Renderer","chart","onMouseMoveEvent","MouseEvent","MouseMove","state","RenderState","Idle","renderDropdown","contextMenu","renderContextMenu","find","onContextMenuEvent","dropdown","enableOther","_other","Modal","Decomposition","toChart","innerWidth","innerHeight","open","innerRadius","console","warn","splice","sum","guid","Dropdown","Icon","ThreeLines","Export","asPng","title","asCsv","toTable","CircularData","anglesSum","flatMap","sector","angle","reverse","TooltipValue","number","isDestroy","requestAnimationFrame","bind","piece","isNaN","isSingle","s","onClickEvent","includes","PointerEvent","direction","cos","sin","lineJoin","lineCap","indexOf","centerOfSector","minSize","rest","scale","applyAlpha","swap","point2","save","labelStartPoint","labelMidPoint","dir","endPoint","isBusy","imageDataX","imageData","Uint32Array","getImageData","buffer","quadraticCurveTo","circularLabel","restore","localAccumulator","localAngle","currentAngle","tangentIntersectionAngle","lengthToTangentIntersection","tangentIntersectionPoint","innerPoint2","changeColor","anyHighlight","highlightItems","AnotherItemOver","AnotherItemLeave","closePath","resetTransform","radius","isWithinRadius","point","getMousePosition","inner","outer","atan2","abs","findIndex","o","sumBefore","isAngle","innerTitle","titleOffset","Values","shortSide","longestLabel","large","Renderable","disableInitAnimation","renderTitle","remove","domRect","parentElement","minWidth","minHeight","calculateColors","dispatchEvent","CustomEvent","detail","force","baseColor","randomColor","adjustStep","adjustAmount","clone","canvasPosition","isClick","legendPlace","LegendPlace","Top","Bottom","getLegendHeight","Left","Right","tooltipLines","axisLineHoverColor","yValue","yHeight","columnWidth","seriesToRender","columnsIndex","columnsCount","PlotType","barsIndex","barsCount","Bar","stackingAccumulator","lineType","LineType","Dash","Dotted","Solid","xIndex","yIndex","getTooltipValue","step","Line","unit","pointDuration","now","addMilliseconds","next","prevValue","endPointX","endPointY","mouse","AttentionLine","bottom","right","yMax","minStep","seriesHeight","fillRect","StackingColumn","ceil","PlotSeries","it","isISOString","simple","Tooltip","PlotData","skip","clearRect","drawImage","isContainsBar","xTitle","yTitle","rotate","xYPos","xCounter","trySet","isFinite","count","maxLabelWidth","maxCount","renderStep","axisLabelOffset","yCount","yCounter","yStep","labelY","labelYAsKey","postfix","shortLabels","countOfTens","isBar","createImageBitmap","then","res","putImageData","axisLineColor","isAnyEquals","xValues","p","yValues","isDate","tempDate","addDays","yMin","stackingColumns","yMaxWidth","isRight","imageRendering","append","onmousemove","onclick","oncontextmenu","preventDefault","onmouseleave","maxHeight","tooltipCell","contextMenuData","totalSquare","minX","minY","isVertical","remainWidth","remainHeight","cells","isLast","j","h1","w1","cell","cellInit","cellIndex","getPrev","E","initAnimationDuration","center","gap","isColorVisible","TreeData","table","Table","classList","totals","rows","valuesMap","tableValue","allColumns","header","indexSpaces","tableHeader","columns","vKey","vValue","totalValue","trim","totalColumns","container","div","script","Script","flexGrow","cloneSettings","JSON","parse","stringify","getPoint","point1","point3","outerRadius","longSide","leftEmpty","rightEmpty","destinationCanvas","destCtx","saveAs","toDataURL","csv","row","cols","encodeURIComponent","dataURL","href","isText","showSaveFilePicker","suggestedName","types","accept","excludeAcceptAllOption","toBlob","dataURI","byteString","atob","split","mimeString","ArrayBuffer","imageArray","Uint8Array","Blob","fileHandle","createWritable","writableStream","write","download","A","click","toLocaleString","minimumFractionDigits","maximumFractionDigits","toLocaleDateString","size","modal","Dialog","oncancel","ElementNotExist","showModal","closeButton","nextPoint","hideInLegend","calculateSizes","getOffsetToCenter","Button","labelWidth","rectX","rectY","circleRadius","rectW","isHover","px","py","grayScale","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","prototype","days","setDate","getDate","milliseconds","setMilliseconds","getMilliseconds","OCharts","Chart"],"sourceRoot":""}