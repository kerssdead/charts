{"version":3,"file":"ocharts.js","mappings":"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","sources":["webpack://charts/./src/Animations.ts","webpack://charts/./src/Helper.ts","webpack://charts/./src/types/TooltipValue.ts","webpack://charts/./src/helpers/Errors.ts","webpack://charts/./src/Chart.ts","webpack://charts/./src/types/Color.ts","webpack://charts/./src/static/constants/Animations.ts","webpack://charts/./src/types/Sector.ts","webpack://charts/./src/static/TextResources.ts","webpack://charts/./src/helpers/Canvas.ts","webpack://charts/./src/Tooltip.ts","webpack://charts/./src/static/ThemeOptions.ts","webpack://charts/./src/types/data/PlotData.ts","webpack://charts/./src/static/constants/Styles.ts","webpack://charts/./src/Dropdown.ts","webpack://charts/./src/Theme.ts","webpack://charts/./src/render/CircularRenderer.ts","webpack://charts/./src/types/base/Renderer.ts","webpack://charts/./src/types/data/TreeData.ts","webpack://charts/./src/types/data/CircularData.ts","webpack://charts/./src/types/base/Value.ts","webpack://charts/./src/render/PlotRenderer.ts","webpack://charts/./src/static/constants/Dates.ts","webpack://charts/./src/helpers/TextStyles.ts","webpack://charts/./src/types/base/Renderable.ts","webpack://charts/./src/render/TreeRenderer.ts","webpack://charts/./src/Decomposition.ts","webpack://charts/./src/static/constants/Index.ts","webpack://charts/./src/render/GaugeRenderer.ts","webpack://charts/./src/Export.ts","webpack://charts/./src/helpers/Formatter.ts","webpack://charts/./src/Button.ts","webpack://charts/./src/static/Enums.ts","webpack://charts/./src/Modal.ts","webpack://charts/./src/types/PlotSeries.ts","webpack://charts/./src/Legend.ts","webpack://charts/./src/static/constants/Values.ts","webpack://charts/webpack/bootstrap","webpack://charts/./src/Prototypes.ts","webpack://charts/./src/OCharts.ts"],"sourcesContent":["import { AnimationItem } from './types/AnimationItem'\r\nimport { AnimationType } from './static/Enums'\r\n\r\nexport class Animations {\r\n    #queue: Map<string, AnimationItem>\r\n\r\n    static transitionCurve: Map<number, number> = new Map()\r\n\r\n    constructor() {\r\n        this.#queue = new Map()\r\n    }\r\n\r\n    add(id: string, type: AnimationType, value: AnimationItem) {\r\n        const key = this.#getKey(id, type)\r\n        if (!this.#queue.has(key))\r\n            this.#queue.set(key, value)\r\n\r\n        this.#process(key)\r\n    }\r\n\r\n    contains(id: string, type: AnimationType): boolean {\r\n        return this.#queue.has(this.#getKey(id, type))\r\n    }\r\n\r\n    reload(id: string, type: AnimationType) {\r\n        if (this.contains(id, type)) {\r\n            let item = <AnimationItem>this.#queue.get(this.#getKey(id, type))\r\n\r\n            item.timer = new Date()\r\n        }\r\n    }\r\n\r\n    clear() {\r\n        this.#queue.forEach((_value, key) => !this.#is(key, AnimationType.Init) && this.#queue.delete(key))\r\n    }\r\n\r\n    #process(key: string) {\r\n        const item = <AnimationItem>this.#queue.get(key),\r\n            stamp = new Date(),\r\n            passed = stamp.getTime() - (item.timer ?? stamp).getTime(),\r\n            transition = Animations.getTransition(passed > item.duration ? 1 : passed / item.duration),\r\n            before = item.before ? item.before() : true\r\n\r\n        if (!item.timer && before)\r\n            item.timer = stamp\r\n\r\n        if (before)\r\n            item.body(item.backward ? 1 - transition : transition)\r\n\r\n        if (transition == 1 && (!before || item.continuous))\r\n            this.#queue.delete(key)\r\n    }\r\n\r\n    #getKey(id: string, type: number) {\r\n        return id + '_' + type\r\n    }\r\n\r\n    #is(key: string, type: number) {\r\n        return key.endsWith('_' + type)\r\n    }\r\n\r\n    static initializeTransitions() {\r\n        const valuesCount = 30000,\r\n            offset = .23,\r\n            p0 = { x: 0, y: 0 },\r\n            p1 = { x: 1 - offset, y: offset },\r\n            p2 = { x: offset, y: 1 - offset },\r\n            p3 = { x: 1, y: 1 }\r\n\r\n        for (let i = 0; i < valuesCount; i++) {\r\n            const t = (i + 1) / valuesCount\r\n\r\n            let x = Math.pow(1 - t, 3) * p0.x\r\n                    + 3 * Math.pow(1 - t, 2) * p1.x * t\r\n                    + 3 * (1 - t) * Math.pow(t, 2) * p2.x\r\n                    + Math.pow(t, 3) * p3.x,\r\n                y = Math.pow(1 - t, 3) * p0.y\r\n                    + 3 * Math.pow(1 - t, 2) * p1.y * t\r\n                    + 3 * (1 - t) * Math.pow(t, 2) * p2.y\r\n                    + Math.pow(t, 3) * p3.y\r\n\r\n            Animations.transitionCurve.set(+x.toFixed(4), y)\r\n        }\r\n\r\n        Animations.transitionCurve.set(0, 0)\r\n    }\r\n\r\n    static getTransition(value: number): number {\r\n        return Animations.transitionCurve.get(+value.toFixed(4)) ?? 0\r\n    }\r\n}","import { Color } from './types/Color'\r\nimport { Theme } from './Theme'\r\n\r\nexport class Helper {\r\n    static adjustColor(color: string, amount: number) {\r\n        return '#' + color.replace(/^#/, '').replace(/../g, color => ('0' + Math.min(255, Math.max(0, parseInt(color, 16) + amount)).toString(16)).slice(-2))\r\n    }\r\n\r\n    static grayScale(color: string) {\r\n        return '#' + Array(4).join(Math.round([.3, .59, .11].reduce((a, v, i) => a + v * parseInt(color[2 * i + 1] + color[2 * i + 2], 16), 0) / 3).toString(16).padStart(2, '0'))\r\n    }\r\n\r\n    static randomColor() {\r\n        let letters = '0123456789ABCDEF',\r\n            color = '#'\r\n        for (let i = 0; i < 6; i++)\r\n            color += letters[Math.floor(Math.random() * 16)]\r\n\r\n        return color\r\n    }\r\n\r\n    static stringWidth(str: string, font?: number) {\r\n        const widths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2796875, 0.2765625, 0.3546875, 0.5546875, 0.5546875, 0.8890625, 0.665625, 0.190625, 0.3328125, 0.3328125, 0.3890625, 0.5828125, 0.2765625, 0.3328125, 0.2765625, 0.3015625, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.2765625, 0.2765625, 0.584375, 0.5828125, 0.584375, 0.5546875, 1.0140625, 0.665625, 0.665625, 0.721875, 0.721875, 0.665625, 0.609375, 0.7765625, 0.721875, 0.2765625, 0.5, 0.665625, 0.5546875, 0.8328125, 0.721875, 0.7765625, 0.665625, 0.7765625, 0.721875, 0.665625, 0.609375, 0.721875, 0.665625, 0.94375, 0.665625, 0.665625, 0.609375, 0.2765625, 0.3546875, 0.2765625, 0.4765625, 0.5546875, 0.3328125, 0.5546875, 0.5546875, 0.5, 0.5546875, 0.5546875, 0.2765625, 0.5546875, 0.5546875, 0.221875, 0.240625, 0.5, 0.221875, 0.8328125, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.3328125, 0.5, 0.2765625, 0.5546875, 0.5, 0.721875, 0.5, 0.5, 0.5, 0.3546875, 0.259375, 0.353125, 0.5890625]\r\n        const avg = 0.5279276315789471\r\n        return Array.from(str).reduce((acc, cur) => acc + (widths[cur.charCodeAt(0)] ?? avg), 0) * (font || 14)\r\n    }\r\n\r\n    static guid() {\r\n        const S4 = () => (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1)\r\n        return (S4() + S4() + '-' + S4() + '-4' + S4().slice(0, 3) + '-' + S4() + '-' + S4() + S4() + S4()).toLowerCase()\r\n    }\r\n\r\n    static hexToRgb(hex: string): Color {\r\n        if (hex.length > 4) {\r\n            const value = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\r\n            if (value)\r\n                return {\r\n                    r: parseInt(value[1], 16),\r\n                    g: parseInt(value[2], 16),\r\n                    b: parseInt(value[3], 16)\r\n                }\r\n        } else {\r\n            const value = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i.exec(hex)\r\n            if (value)\r\n                return {\r\n                    r: parseInt(value[1] + value[1], 16),\r\n                    g: parseInt(value[2] + value[2], 16),\r\n                    b: parseInt(value[3] + value[3], 16)\r\n                }\r\n        }\r\n\r\n        return new Color()\r\n    }\r\n\r\n    static isColorVisible(background: string, foreground: string) {\r\n        const backgroundAsRgb = Helper.hexToRgb(background),\r\n            foregroundAsRgb = Helper.hexToRgb(foreground),\r\n            value = .77\r\n\r\n        return (backgroundAsRgb.r + backgroundAsRgb.g + backgroundAsRgb.b) / (foregroundAsRgb.r + foregroundAsRgb.g + foregroundAsRgb.b) < value\r\n    }\r\n\r\n    static isISOString(str: string) {\r\n        return /\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+/.test(str)\r\n    }\r\n\r\n    static applyAlpha(color: string, opacity: number) {\r\n        function hexToRgb(hex: string) {\r\n            let result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\r\n            return result\r\n                   ? {\r\n                    r: parseInt(result[1], 16),\r\n                    g: parseInt(result[2], 16),\r\n                    b: parseInt(result[3], 16)\r\n                } as Color\r\n                   : {\r\n                    r: 0,\r\n                    g: 0,\r\n                    b: 0\r\n                } as Color\r\n        }\r\n\r\n        function componentToHex(c: number) {\r\n            let hex = c.toString(16)\r\n            return hex.length == 1 ? '0' + hex : hex\r\n        }\r\n\r\n        function rgbToHex(r: number, g: number, b: number) {\r\n            return '#' + componentToHex(r) + componentToHex(g) + componentToHex(b)\r\n        }\r\n\r\n        const rgb = hexToRgb(color),\r\n            bg = hexToRgb(Theme.canvasBackground)\r\n\r\n        opacity /= 255\r\n\r\n        const alpha = 1 - opacity\r\n\r\n        return rgbToHex(\r\n            Math.round((opacity * (rgb.r / 255) + (alpha * (bg.r / 255))) * 255),\r\n            Math.round((opacity * (rgb.g / 255) + (alpha * (bg.g / 255))) * 255),\r\n            Math.round((opacity * (rgb.b / 255) + (alpha * (bg.b / 255))) * 255)\r\n        )\r\n    }\r\n}","export class TooltipValue {\r\n    text: string | undefined\r\n\r\n    color: string | undefined\r\n\r\n    constructor(text?: string, color?: string) {\r\n        this.text = text\r\n        this.color = color\r\n    }\r\n}","import { ErrorType } from '../static/Enums'\r\n\r\nexport abstract class Errors {\r\n    static throw(error: ErrorType): never {\r\n        throw new Error(error)\r\n    }\r\n\r\n    static throwIsUndefined(object: any, error: ErrorType) {\r\n        if (object == undefined)\r\n            Errors.throw(error)\r\n    }\r\n}","import { ChartSettings } from './types/ChartSettings'\r\nimport { Renderer } from './types/base/Renderer'\r\nimport { Data } from './types/interfaces/Data'\r\nimport { Legend } from './Legend'\r\nimport { Value } from './types/base/Value'\r\nimport { PlotRenderer } from './render/PlotRenderer'\r\nimport { CircularRenderer } from './render/CircularRenderer'\r\nimport { GaugeRenderer } from './render/GaugeRenderer'\r\nimport { TreeRenderer } from './render/TreeRenderer'\r\nimport { Animations } from './Animations'\r\nimport { Theme } from './Theme'\r\nimport { Styles } from './static/constants/Styles'\r\nimport { ChartType, Events } from './static/Enums'\r\n\r\nexport class Chart {\r\n    node: HTMLElement\r\n\r\n    settings: ChartSettings\r\n\r\n    #renderer: Renderer<Data>\r\n\r\n    #legend: Legend\r\n\r\n    #observer: ResizeObserver\r\n\r\n    constructor(context: HTMLElement, settings: ChartSettings) {\r\n        this.#initialize(settings)\r\n\r\n        this.node = context\r\n        this.settings = settings\r\n\r\n        this.#applyStyles()\r\n        this.#prepareSettings()\r\n\r\n        if (settings.enableLegend)\r\n            this.#legend = new Legend(this)\r\n\r\n        document.addEventListener(Events.VisibilityChanged, () => this.#renderer.resetMouse())\r\n        window.addEventListener(Events.Blur, () => this.#renderer.resetMouse())\r\n\r\n        window.addEventListener(Events.Click, event => {\r\n            if (event.target != this.#renderer.canvas)\r\n                this.#renderer.closeDropdowns()\r\n        })\r\n    }\r\n\r\n    render() {\r\n        this.#renderer.render()\r\n        this.#legend?.render()\r\n\r\n        this.#observer = new ResizeObserver(() => {\r\n            if (this.#renderer.canvas)\r\n                this.#resize()\r\n            else\r\n                this.destroy()\r\n        })\r\n        this.#observer.observe(this.node)\r\n\r\n        this.#refresh()\r\n    }\r\n\r\n    destroy() {\r\n        this.#renderer.destroy()\r\n        this.#legend?.destroy()\r\n\r\n        this.#observer.disconnect()\r\n    }\r\n\r\n    highlight(value?: Value) {\r\n        this.#renderer.highlight(value)\r\n    }\r\n\r\n    reset() {\r\n        Theme.reset()\r\n\r\n        this.#initialize(this.settings)\r\n    }\r\n\r\n    #prepareSettings() {\r\n        this.settings.enableTooltip = !this.settings.disableInteractions && this.settings.enableTooltip\r\n\r\n        switch (this.settings.type) {\r\n            case ChartType.Plot:\r\n                this.#renderer = new PlotRenderer(this)\r\n                break\r\n\r\n            case ChartType.Circular:\r\n                this.#renderer = new CircularRenderer(this)\r\n                break\r\n\r\n            case ChartType.Gauge:\r\n                this.#renderer = new GaugeRenderer(this)\r\n                break\r\n\r\n            case ChartType.TreeMap:\r\n                this.#renderer = new TreeRenderer(this)\r\n                break\r\n        }\r\n\r\n        this.#renderer.prepareSettings()\r\n\r\n        if (!this.settings.disableInteractions) {\r\n            this.#renderer.initDropdown()\r\n            this.#renderer.initAnimations()\r\n        }\r\n\r\n        this.#renderer.resize()\r\n    }\r\n\r\n    #refresh() {\r\n        this.#renderer.refresh()\r\n        this.#legend?.refresh()\r\n    }\r\n\r\n    #resize() {\r\n        this.#renderer.resize()\r\n        this.#legend?.resize()\r\n    }\r\n\r\n    #initialize(settings: ChartSettings) {\r\n        Theme.initialize(\r\n            () => this.#resize(),\r\n            settings.isDarkThemeFunction\r\n        )\r\n        Animations.initializeTransitions()\r\n    }\r\n\r\n    #applyStyles() {\r\n        this.node.style.display = Styles.Display.Flex\r\n        this.node.style.flexDirection = Styles.FlexDirection.Column\r\n        this.node.style.alignItems = Styles.AlignItems.Center\r\n        this.node.style.justifyContent = Styles.JustifyContent.Center\r\n        this.node.style.height = '100%'\r\n    }\r\n}","export class Color {\r\n    r: number\r\n\r\n    g: number\r\n\r\n    b: number\r\n}","export class Animations {\r\n    static circular = 335\r\n\r\n    static legend = 500\r\n\r\n    static tree = 250\r\n\r\n    static tooltip = 120\r\n\r\n    static button = 200\r\n}","import { Value } from './base/Value'\r\nimport { Point } from './Point'\r\n\r\nexport class Sector extends Value {\r\n    value: number\r\n\r\n    current: number\r\n\r\n    transition: number\r\n\r\n    translate: Point\r\n\r\n    innerRadius: number\r\n\r\n    constructor(obj: object) {\r\n        super()\r\n\r\n        Object.assign(this, obj)\r\n    }\r\n\r\n    toggle(transition: number) {\r\n        super.toggle(transition)\r\n\r\n        if (this.disabled)\r\n            this.current = this.value * (1 - transition)\r\n        else\r\n            this.current = this.value * transition\r\n    }\r\n\r\n    checkCondition(): boolean {\r\n        super.checkCondition()\r\n\r\n        return (this.current == 0 && !this.disabled) || this.value != 0\r\n    }\r\n\r\n    reset() {\r\n        super.reset()\r\n\r\n        this.current = this.value\r\n    }\r\n}","export class TextResources {\r\n    static exportPNG = 'Save as image...'\r\n\r\n    static decomposeToTable = 'Show as table...'\r\n\r\n    static reset = 'Reset'\r\n\r\n    static exportCSV = 'Save as table...'\r\n\r\n    static menu = 'Menu'\r\n\r\n    static allDataIsHidden = 'All data is hidden'\r\n\r\n    static other = 'Other'\r\n\r\n    static incorrectValues = 'Incorrect values'\r\n\r\n    static ThousandShort = 'K'\r\n\r\n    static MillionShort = 'M'\r\n\r\n    static BillionShort = 'B'\r\n\r\n    static Show = 'Show...'\r\n\r\n    static NoLabel = 'No Label'\r\n}","import { Errors } from './Errors'\r\nimport { ErrorType } from '../static/Enums'\r\nimport { Theme } from '../Theme'\r\n\r\nexport abstract class Canvas {\r\n    static getContext(canvas: HTMLCanvasElement): CanvasRenderingContext2D {\r\n        return canvas.getContext('2d', { willReadFrequently: true })\r\n               ?? Errors.throw(ErrorType.NullContext)\r\n    }\r\n\r\n    static isPixelBusy(pixel: number) {\r\n        return pixel - Theme.canvasBackgroundInt != 0\r\n    }\r\n}","import { Value } from './types/base/Value'\r\nimport { Theme } from './Theme'\r\nimport { TextStyles } from './helpers/TextStyles'\r\nimport { Helper } from './Helper'\r\nimport { ChartSettings } from './types/ChartSettings'\r\nimport { TooltipValue } from './types/TooltipValue'\r\nimport { Data } from './types/interfaces/Data'\r\nimport { Canvas } from './helpers/Canvas'\r\nimport * as Constants from './static/constants/Index'\r\nimport { Styles } from './static/constants/Styles'\r\nimport { HTMLTooltipElement } from './types/extends/HTMLTooltipElement'\r\nimport { Attribute, Tag } from './static/Enums'\r\n\r\nexport class Tooltip {\r\n    canvas: HTMLCanvasElement\r\n\r\n    data: Data\r\n\r\n    readonly #enabled: boolean\r\n\r\n    readonly #isCustom: boolean\r\n\r\n    #canvasPosition: DOMRect\r\n\r\n    #template: HTMLTemplateElement\r\n\r\n    #inProgress: boolean\r\n\r\n    #toHide: boolean\r\n\r\n    #timer: Date | undefined\r\n\r\n    #lines: TooltipValue[]\r\n\r\n    constructor(canvas: HTMLCanvasElement, settings: ChartSettings) {\r\n        this.canvas = canvas\r\n        this.data = settings.data\r\n        this.#enabled = settings.enableTooltip\r\n        this.#isCustom = !!settings.templateId\r\n\r\n        if (this.#isCustom)\r\n            this.#template = <HTMLTemplateElement>document.getElementById(settings.templateId)\r\n\r\n        this.refresh()\r\n    }\r\n\r\n    render(condition: boolean, event: MouseEvent, lines: TooltipValue[], value?: Value) {\r\n        this.#hideAll()\r\n\r\n        if (!this.#enabled || !event)\r\n            return\r\n\r\n        if (condition || this.#inProgress || this.#toHide) {\r\n            if (condition)\r\n                this.#lines = lines\r\n\r\n            if (!this.#timer)\r\n                this.#timer = new Date()\r\n\r\n            if (!this.#toHide)\r\n                this.#inProgress = true\r\n            else if (this.#inProgress)\r\n                this.#timer = new Date()\r\n\r\n            if (this.#isCustom)\r\n                this.#renderCustom(event, value)\r\n            else\r\n                this.#renderRegular(event)\r\n\r\n            const opacityValue = this.#getOpacityValue()\r\n\r\n            if (this.#toHide && opacityValue >= 1) {\r\n                this.#inProgress = false\r\n                this.#toHide = false\r\n            }\r\n\r\n            if (this.#toHide && opacityValue <= 0) {\r\n                this.#inProgress = false\r\n                this.#toHide = false\r\n                this.#timer = undefined\r\n            }\r\n\r\n            if (!condition && this.#timer != undefined)\r\n                this.#toHide = true\r\n        } else {\r\n            this.#timer = undefined\r\n        }\r\n    }\r\n\r\n    #renderRegular(event: MouseEvent) {\r\n        const ctx = Canvas.getContext(this.canvas)\r\n\r\n        const textWidth = Math.max(...this.#lines.map(line => Helper.stringWidth(line.text ?? '') + (line.color ? 8 : 0)))\r\n\r\n        const padding = 6,\r\n            borderRadius = 6\r\n\r\n        let x = event.clientX - this.#canvasPosition.x + 10,\r\n            y = event.clientY - this.#canvasPosition.y + scrollY + 10\r\n\r\n        if (x + textWidth + 25 > this.#canvasPosition.width)\r\n            x = this.#canvasPosition.width - (textWidth + 25)\r\n\r\n        if (y + 4 + this.#lines.length * 18 > this.#canvasPosition.height)\r\n            y = this.#canvasPosition.height - 4 - this.#lines.length * 18\r\n\r\n        ctx.beginPath()\r\n        ctx.roundRect(x, y, textWidth + 24, 16 + 16 * this.#lines.length, borderRadius)\r\n        let opacity = Math.round(this.#getOpacityValue() * 255).toString(16),\r\n            baseOpacity = Math.round(this.#getOpacityValue() * 207).toString(16)\r\n        if (opacity.length == 1)\r\n            opacity = '0' + opacity\r\n        if (baseOpacity.length == 1)\r\n            baseOpacity = '0' + baseOpacity\r\n\r\n        ctx.strokeStyle = Theme.dropdownBorder + baseOpacity\r\n        ctx.lineWidth = 1\r\n        ctx.fillStyle = Theme.background + baseOpacity\r\n        ctx.stroke()\r\n        ctx.fill()\r\n\r\n        for (let line of this.#lines) {\r\n            let offset = 0\r\n\r\n            if (line.color) {\r\n                offset = 12\r\n\r\n                ctx.beginPath()\r\n                ctx.fillStyle = line.color + opacity\r\n                ctx.arc(x + 16, y + 17, 5, 0, Math.PI * 2)\r\n                ctx.fill()\r\n            }\r\n\r\n            TextStyles.tooltip(ctx)\r\n            ctx.fillStyle = Theme.text + opacity\r\n            ctx.fillText(line.text ?? '', x + offset + padding * 2, y + 21)\r\n\r\n            y += 16\r\n        }\r\n    }\r\n\r\n    #renderCustom(event: MouseEvent, value?: Value) {\r\n        if (value == undefined)\r\n            return\r\n\r\n        const id = this.#template.id + value.id\r\n\r\n        let tooltip = <HTMLTooltipElement>document.getElementById(id)\r\n\r\n        const updateVisibility = () => {\r\n            this.#hideAll()\r\n\r\n            tooltip.style.visibility = Styles.Visibility.Visible\r\n        }\r\n\r\n        if (!tooltip) {\r\n            const regex = /\\${[^}]*}/gm\r\n\r\n            let content = <HTMLElement>this.#template.cloneNode(true)\r\n\r\n            tooltip = document.createElement(Tag.Div) as HTMLTooltipElement\r\n\r\n            tooltip.innerHTML = content.innerHTML\r\n\r\n            tooltip.id = id\r\n            tooltip.style.position = Styles.Position.Absolute\r\n            tooltip.style.pointerEvents = Styles.PointerEvents.None\r\n            tooltip.style.visibility = Styles.Visibility.Visible\r\n\r\n            tooltip.setAttribute(Attribute.Name, this.#template.id)\r\n\r\n            const matches = [...tooltip.innerHTML.matchAll(regex)]\r\n\r\n            let html = tooltip.innerHTML\r\n\r\n            for (const match of matches) {\r\n                const property = match[0].replace('${', '')\r\n                                         .replace('}', '')\r\n                                         .replaceAll(' ', '')\r\n\r\n                html = html.replaceAll(match[0], value.data[property])\r\n            }\r\n\r\n            tooltip.innerHTML = html\r\n\r\n            document.body.appendChild(tooltip)\r\n\r\n            tooltip.position = tooltip.getBoundingClientRect()\r\n\r\n            updateVisibility()\r\n        }\r\n\r\n        if (tooltip.style.visibility == Styles.Visibility.Hidden)\r\n            updateVisibility()\r\n\r\n        if (tooltip.position.height == 0)\r\n            tooltip.position = tooltip.getBoundingClientRect()\r\n\r\n        const offset = 10\r\n\r\n        let opacity = '1'\r\n\r\n        let x = event.clientX,\r\n            y = event.clientY + scrollY\r\n\r\n        if (x + tooltip.position.width - this.#canvasPosition.x > this.#canvasPosition.width - offset) {\r\n            x = this.#canvasPosition.width - tooltip.position.width + this.#canvasPosition.x - offset\r\n            opacity = '.67'\r\n        }\r\n\r\n        if (y + tooltip.position.height - this.#canvasPosition.y > this.#canvasPosition.height - offset) {\r\n            y = this.#canvasPosition.height - tooltip.position.height + this.#canvasPosition.y - offset\r\n            opacity = '.67'\r\n        }\r\n\r\n        if (x == 0 && y == 0)\r\n            opacity = '0'\r\n\r\n        tooltip.style.left = x + offset + 'px'\r\n        tooltip.style.top = y + offset + 'px'\r\n        tooltip.style.opacity = opacity\r\n    }\r\n\r\n    refresh() {\r\n        this.#canvasPosition = this.canvas.getBoundingClientRect()\r\n        this.#canvasPosition.x += scrollX\r\n        this.#canvasPosition.y += scrollY\r\n    }\r\n\r\n    #hideAll() {\r\n        if (!this.#isCustom)\r\n            return\r\n\r\n        const tooltips = <NodeListOf<HTMLElement>>document.querySelectorAll(`[name=\"${ this.#template.id }\"]`)\r\n\r\n        for (let node of tooltips)\r\n            node.style.visibility = Styles.Visibility.Hidden\r\n    }\r\n\r\n    #getOpacityValue(): number {\r\n        if (!this.#timer)\r\n            return 0\r\n\r\n        let opacityValue = this.#toHide\r\n                           ? 1 - (new Date().getTime() - this.#timer.getTime()) / Constants.Animations.tooltip\r\n                           : (new Date().getTime() - this.#timer.getTime()) / Constants.Animations.tooltip\r\n        if (opacityValue > 1)\r\n            opacityValue = 1\r\n        if (opacityValue < 0)\r\n            opacityValue = 0\r\n\r\n        return opacityValue\r\n    }\r\n}","export class ThemeOptions {\r\n    static readonly colors = ['#000000', '#ffffff']\r\n\r\n    static readonly backgrounds = ['#f7f7f7', '#222222']\r\n\r\n    static readonly lines = ['#000000', '#eeeeee']\r\n\r\n    static readonly lineAxes = ['#e0e0e0', '#212121']\r\n\r\n    static readonly lineActives = ['#898989', '#898989']\r\n\r\n    static readonly dropdownBorders = ['#bcbcbc', '#7e7e7e']\r\n\r\n    static readonly canvasBackgrounds = ['#ffffff', '#222222']\r\n}","import { TableValue } from '../TableValue'\r\nimport { PlotSeries } from '../PlotSeries'\r\nimport { TableHeaderValue } from '../TableHeaderValue'\r\nimport { TableData } from '../TableData'\r\nimport { Data } from '../interfaces/Data'\r\nimport { Formatter } from '../../helpers/Formatter'\r\nimport { PlotAxisType } from '../../static/Enums'\r\n\r\nexport class PlotData implements Data {\r\n    shortLabels: boolean\r\n\r\n    simple: boolean\r\n\r\n    yMax: number\r\n\r\n    xTitle: string\r\n\r\n    yTitle: string\r\n\r\n    xType: PlotAxisType\r\n\r\n    values: PlotSeries[]\r\n\r\n    static getRows(data: PlotData): TableData {\r\n        let headers: TableHeaderValue[] = []\r\n\r\n        let values: TableValue[] = []\r\n\r\n        for (const series of data.values) {\r\n            let seriesValues = new Map<string, any>()\r\n\r\n            for (const value of series.values) {\r\n                seriesValues.set(value.x.toString(), value.y)\r\n                headers.push({\r\n                    value: value.x.toString(),\r\n                    display: data.xType == PlotAxisType.Date\r\n                             ? Formatter.date(new Date(value.x))\r\n                             : value.x.toString()\r\n                })\r\n            }\r\n\r\n            values.push({\r\n                name: series.label,\r\n                values: seriesValues\r\n            })\r\n        }\r\n\r\n        const unique = new Set(),\r\n            uniqueHeaders = headers.filter(v => !unique.has(v.display) && unique.add(v.display))\r\n\r\n        if (data.xType == PlotAxisType.Date)\r\n            uniqueHeaders.sort((a, b) => new Date(a.value).getTime() - new Date(b.value).getTime())\r\n\r\n        return {\r\n            headers: uniqueHeaders,\r\n            values: values\r\n        }\r\n    }\r\n}","export namespace Styles {\r\n    export class Cursor {\r\n        static Default = 'default'\r\n\r\n        static Pointer = 'pointer'\r\n    }\r\n\r\n    export class Display {\r\n        static Flex = 'flex'\r\n    }\r\n\r\n    export class FlexDirection {\r\n        static Column = 'column'\r\n\r\n        static ColumnReverse = 'column-reverse'\r\n\r\n        static Row = 'row'\r\n\r\n        static RowReverse = 'row-reverse'\r\n    }\r\n\r\n    export class AlignItems {\r\n        static Center = 'center'\r\n    }\r\n\r\n    export class Visibility {\r\n        static Visible = 'visible'\r\n\r\n        static Hidden = 'hidden'\r\n    }\r\n\r\n    export class Position {\r\n        static Absolute = 'absolute'\r\n    }\r\n\r\n    export class PointerEvents {\r\n        static None = 'none'\r\n    }\r\n\r\n    export class JustifyContent {\r\n        static Center = 'center'\r\n    }\r\n\r\n    export class ImageRendering {\r\n        static Pixelated = 'pixelated'\r\n    }\r\n}","import { Theme } from './Theme'\r\nimport { DropdownOptions } from './types/DropdownOptions'\r\nimport { Animations } from './Animations'\r\nimport { Helper } from './Helper'\r\nimport { TextStyles } from './helpers/TextStyles'\r\nimport { Canvas } from './helpers/Canvas'\r\nimport { AnimationType } from './static/Enums'\r\nimport * as Constants from './static/constants/Index'\r\nimport { Styles } from './static/constants/Styles'\r\n\r\nexport class Dropdown {\r\n    isActive: boolean = false\r\n\r\n    #isInit: boolean\r\n\r\n    #options: DropdownOptions\r\n\r\n    #canvasPosition: DOMRect\r\n\r\n    animations: Animations\r\n\r\n    #position: DOMRect\r\n\r\n    readonly #isOnlyMenu: boolean\r\n\r\n    readonly #canvas: HTMLCanvasElement\r\n\r\n    constructor(canvas: HTMLCanvasElement, options: DropdownOptions) {\r\n        this.#canvas = canvas\r\n        this.#options = options\r\n\r\n        if (this.#options.icon)\r\n            this.#options.text = this.#options.icon\r\n\r\n        this.#isOnlyMenu = this.#options.text == undefined\r\n\r\n        this.animations = new Animations()\r\n    }\r\n\r\n    render(moveEvent: MouseEvent, clickEvent: MouseEvent | undefined) {\r\n        if (!this.#isInit)\r\n            this.#initAnimations()\r\n\r\n        if (this.#isOnlyMenu)\r\n            this.isActive = true\r\n\r\n        const ctx = Canvas.getContext(this.#canvas)\r\n\r\n        let x = this.#position.x,\r\n            y = this.#position.y,\r\n            width = this.#position.width,\r\n            height = this.#position.height\r\n\r\n        ctx.beginPath()\r\n\r\n        if (!this.#isOnlyMenu) {\r\n            const translate = (transition: number, event: AnimationType) => {\r\n                this.animations.reload('animation-dropdown', event)\r\n\r\n                ctx.fillStyle = Helper.adjustColor(Theme.canvasBackground, -Math.round(25 * transition))\r\n            }\r\n\r\n            if (this.#isOnButton(moveEvent, x, y, width, height)) {\r\n                this.#canvas.style.cursor = Styles.Cursor.Pointer\r\n\r\n                if (clickEvent && moveEvent.x == clickEvent.x && moveEvent.y == clickEvent.y) {\r\n                    this.isActive = !this.isActive\r\n                    clickEvent = undefined\r\n                }\r\n\r\n                if (!this.isActive)\r\n                    this.animations.add('animation-dropdown',\r\n                        AnimationType.MouseOver,\r\n                        {\r\n                            duration: 300,\r\n                            body: transition => {\r\n                                translate(transition, AnimationType.MouseLeave)\r\n                            }\r\n                        })\r\n                else\r\n                    ctx.fillStyle = Helper.adjustColor(Theme.canvasBackground, -25)\r\n            } else {\r\n                this.#canvas.style.cursor = Styles.Cursor.Default\r\n\r\n                if (!this.isActive)\r\n                    this.animations.add('animation-dropdown',\r\n                        AnimationType.MouseLeave,\r\n                        {\r\n                            timer: Constants.Dates.minDate,\r\n                            duration: 300,\r\n                            backward: true,\r\n                            body: transition => {\r\n                                translate(transition, AnimationType.MouseOver)\r\n                            }\r\n                        })\r\n                else\r\n                    ctx.fillStyle = Helper.adjustColor(Theme.canvasBackground, -25)\r\n            }\r\n\r\n            ctx.roundRect(x, y, width, height, 4)\r\n            ctx.fill()\r\n\r\n            TextStyles.regular(ctx)\r\n\r\n            if (this.#options.icon)\r\n                ctx.font = '20px sans-serif'\r\n\r\n            const iconOffset = this.#options.icon\r\n                               ? navigator.platform != 'Win32'\r\n                                 ? 1\r\n                                 : -1\r\n                               : 0\r\n\r\n            console.log(iconOffset)\r\n\r\n            ctx.fillText(\r\n                this.#options.text ?? '',\r\n                x + width / 2,\r\n                y + height / 2 - iconOffset\r\n            )\r\n        }\r\n\r\n        if (this.isActive) {\r\n            const padding = 6,\r\n                borderRadius = 6\r\n\r\n            y += height\r\n\r\n            const items = this.#options.items.filter(value => value.text),\r\n                dividers = this.#options.items.filter(value => !value.text)\r\n\r\n            let maxWidth = Math.max(...items.map(value => Helper.stringWidth(value.text)))\r\n                           + padding * 4\r\n\r\n            if (x + maxWidth > this.#canvas.width - 4)\r\n                x -= x + maxWidth - this.#canvas.width + 4\r\n\r\n            const dropdownOpacity = 'bb',\r\n                itemOpacityDec = 127,\r\n                itemBackground = Theme.dropdownItemHoverColor,\r\n                borderColor = Theme.dropdownBorder\r\n\r\n            ctx.beginPath()\r\n\r\n            const rect = {\r\n                x: x,\r\n                y: y,\r\n                width: maxWidth,\r\n                height: items.length * 26\r\n                        + dividers.length * 4\r\n                        + (items.length == 1 ? padding : 0)\r\n                        + (items.length == 2 && dividers.length == 1 ? padding : 0)\r\n            }\r\n\r\n            ctx.roundRect(rect.x, rect.y, rect.width, rect.height, borderRadius)\r\n            ctx.fillStyle = Theme.background + dropdownOpacity\r\n            ctx.setLineDash([])\r\n            ctx.lineWidth = 1\r\n            ctx.strokeStyle = borderColor + dropdownOpacity\r\n            ctx.fill()\r\n            ctx.stroke()\r\n\r\n            ctx.beginPath()\r\n\r\n            y += 6\r\n\r\n            for (const item of this.#options.items) {\r\n                ctx.beginPath()\r\n\r\n                if (item.isDivider == true) {\r\n                    y += 2\r\n\r\n                    ctx.moveTo(x + padding, y)\r\n                    ctx.lineTo(x + maxWidth - padding, y)\r\n\r\n                    ctx.lineWidth = .5\r\n                    ctx.stroke()\r\n\r\n                    y += 4\r\n\r\n                    continue\r\n                }\r\n\r\n                ctx.fillStyle = 'transparent'\r\n\r\n                const animationKey = 'animation-dropdown' + item.text\r\n\r\n                const translate = (transition: number, event: AnimationType, isReturn?: boolean) => {\r\n                    this.animations.reload(animationKey, event)\r\n\r\n                    if (isReturn && transition == 1)\r\n                        return\r\n\r\n                    let opacity = Math.round(itemOpacityDec * transition).toString(16)\r\n                    if (opacity.length == 1)\r\n                        opacity = '0' + opacity\r\n\r\n                    ctx.fillStyle = itemBackground + opacity\r\n                }\r\n\r\n                if (this.#isOnButton(moveEvent, x, y, maxWidth, 20)) {\r\n                    this.animations.add(animationKey,\r\n                        AnimationType.MouseOver,\r\n                        {\r\n                            duration: 300,\r\n                            body: transition => {\r\n                                translate(transition, AnimationType.MouseLeave)\r\n                            }\r\n                        })\r\n\r\n                    this.#canvas.style.cursor = Styles.Cursor.Pointer\r\n\r\n                    if (clickEvent) {\r\n                        item.action()\r\n\r\n                        clickEvent = undefined\r\n                        this.isActive = false\r\n                    }\r\n                } else {\r\n                    this.animations.add(animationKey,\r\n                        AnimationType.MouseLeave,\r\n                        {\r\n                            timer: Constants.Dates.minDate,\r\n                            duration: 300,\r\n                            backward: true,\r\n                            body: transition => {\r\n                                translate(transition, AnimationType.MouseOver, true)\r\n                            }\r\n                        })\r\n                }\r\n\r\n                ctx.roundRect(x + padding, y, maxWidth - padding * 2, 20, borderRadius)\r\n                ctx.fill()\r\n\r\n                TextStyles.regular(ctx)\r\n                ctx.fillStyle = Theme.text\r\n                ctx.textAlign = 'left'\r\n                ctx.textBaseline = 'hanging'\r\n                ctx.fillText(item.text, x + padding * 2, y + 5)\r\n\r\n                y += 22\r\n            }\r\n        }\r\n\r\n        ctx.lineWidth = 1\r\n\r\n        if (!this.#isOnlyMenu && clickEvent != undefined && this.isActive) {\r\n            this.isActive = false\r\n            clickEvent = undefined\r\n        }\r\n\r\n        this.#isInit = true\r\n\r\n        if (this.#isOnlyMenu && clickEvent && moveEvent.x == clickEvent.x && moveEvent.y == clickEvent.y) {\r\n            this.isActive = !this.isActive\r\n            clickEvent = undefined\r\n        }\r\n\r\n        return clickEvent\r\n    }\r\n\r\n    #initAnimations() {\r\n        this.#canvasPosition = this.#canvas.getBoundingClientRect()\r\n\r\n        this.#canvasPosition.x += scrollX\r\n        this.#canvasPosition.y += scrollY\r\n    }\r\n\r\n    #isOnButton(event: MouseEvent, x: number, y: number, w: number, h: number): boolean {\r\n        if (!event)\r\n            return false\r\n\r\n        let trueX = event.clientX - this.#canvasPosition.x + scrollX,\r\n            trueY = event.clientY - this.#canvasPosition.y + scrollY\r\n\r\n        return trueX >= x && trueX <= x + w\r\n               && trueY >= y && trueY <= y + h\r\n    }\r\n\r\n    refresh() {\r\n        this.#isInit = false\r\n    }\r\n\r\n    resize() {\r\n        this.#initAnimations()\r\n        this.#calculatePosition()\r\n    }\r\n\r\n    close() {\r\n        this.isActive = false\r\n    }\r\n\r\n    #calculatePosition() {\r\n        const width = this.#isOnlyMenu ? 0 : Helper.stringWidth(this.#options.text ?? '') + 12,\r\n            height = this.#isOnlyMenu ? 0 : 20\r\n\r\n        this.#position = {\r\n            x: this.#options.x + width > this.#canvas.width\r\n               ? this.#canvas.width - width\r\n               : this.#options.x < 0\r\n                 ? this.#canvas.width + this.#options.x - width\r\n                 : this.#options.x,\r\n            y: this.#options.y + height > this.#canvas.height\r\n               ? this.#canvas.height - height\r\n               : this.#options.y < 0\r\n                 ? this.#canvas.height + this.#options.y - height\r\n                 : this.#options.y,\r\n            width: width,\r\n            height: height\r\n        } as DOMRect\r\n    }\r\n}","import { Helper } from './Helper'\r\nimport { ThemeOptions } from './static/ThemeOptions'\r\nimport { Events } from './static/Enums'\r\n\r\nexport class Theme {\r\n    static currentTheme = 0\r\n\r\n    static text: string\r\n\r\n    static background: string\r\n\r\n    static line: string\r\n\r\n    static lineAxis: string\r\n\r\n    static lineActive: string\r\n\r\n    static dropdownItemHoverColor: string\r\n\r\n    static dropdownBorder: string\r\n\r\n    static canvasBackground: string\r\n\r\n    static canvasBackgroundInt: number\r\n\r\n    static function: Function | undefined\r\n\r\n    static initialize(callback: Function, isDark?: Function) {\r\n        if (!Theme.function && isDark)\r\n            Theme.function = isDark\r\n\r\n        if (window.matchMedia\r\n            && window.matchMedia('(prefers-color-scheme: dark)').matches\r\n            && (!Theme.function || Theme.function()))\r\n            Theme.setTheme(1)\r\n        else\r\n            Theme.setTheme(0)\r\n\r\n        window.matchMedia('(prefers-color-scheme: dark)')\r\n              .addEventListener(Events.Change, event => {\r\n                  Theme.setTheme(event.matches && (!Theme.function || Theme.function()) ? 1 : 0)\r\n                  callback()\r\n              })\r\n    }\r\n\r\n    static setTheme(index: number) {\r\n        Theme.currentTheme = index\r\n\r\n        Theme.text = ThemeOptions.colors[index]\r\n        Theme.background = ThemeOptions.backgrounds[index]\r\n        Theme.line = ThemeOptions.lines[index]\r\n        Theme.lineAxis = ThemeOptions.lineAxes[index]\r\n        Theme.lineActive = ThemeOptions.lineActives[index]\r\n        Theme.dropdownItemHoverColor = Helper.adjustColor(Theme.background, index == 0 ? -50 : 50)\r\n        Theme.dropdownBorder = ThemeOptions.dropdownBorders[index]\r\n        Theme.canvasBackground = ThemeOptions.canvasBackgrounds[index]\r\n        Theme.canvasBackgroundInt = Number(`0xff${ Theme.canvasBackground.slice(1) }`)\r\n    }\r\n\r\n    static reset() {\r\n        this.function = undefined\r\n    }\r\n}","import { Renderer } from '../types/base/Renderer'\r\nimport { CircularData } from '../types/data/CircularData'\r\nimport { Sector } from '../types/Sector'\r\nimport { CircularAngle } from '../types/CircularAngle'\r\nimport { Point } from '../types/Point'\r\nimport { DropdownItem } from '../types/DropdownItem'\r\nimport { Helper } from '../Helper'\r\nimport { Dropdown } from '../Dropdown'\r\nimport { Theme } from '../Theme'\r\nimport { TextStyles } from '../helpers/TextStyles'\r\nimport { Chart } from '../Chart'\r\nimport { TooltipValue } from '../types/TooltipValue'\r\nimport { Decomposition } from '../Decomposition'\r\nimport { Export } from '../Export'\r\nimport { TextResources } from '../static/TextResources'\r\nimport { Modal } from '../Modal'\r\nimport { Canvas } from '../helpers/Canvas'\r\nimport { Formatter } from '../helpers/Formatter'\r\nimport { AnimationType, Events, Icon, RenderState } from '../static/Enums'\r\nimport * as Constants from '../static/constants/Index'\r\nimport { Styles } from '../static/constants/Styles'\r\n\r\nexport class CircularRenderer extends Renderer<CircularData> {\r\n    #canRenderInnerTitle: boolean\r\n\r\n    #isDonut: boolean\r\n\r\n    #radius: number\r\n\r\n    #sum: number\r\n\r\n    #accumulator: number\r\n\r\n    #animationOffset: number\r\n\r\n    #hoverCount: number\r\n\r\n    #currentHover: string | undefined\r\n\r\n    #pinned: string[]\r\n\r\n    #center: Point\r\n\r\n    #startPoint: Point\r\n\r\n    #angles: CircularAngle[]\r\n\r\n    #other: Sector[]\r\n\r\n    #innerTitleStyle: Function\r\n\r\n    readonly #startAngle: number\r\n\r\n    constructor(chart: Chart) {\r\n        super(chart)\r\n\r\n        this.data.values = this.data.values.map(v => new Sector(v))\r\n\r\n        if (this.settings.enableOther) {\r\n            if (!this.settings.contextMenu)\r\n                this.settings.contextMenu = [] as DropdownItem[]\r\n            else\r\n                this.settings.contextMenu.push({\r\n                    isDivider: true\r\n                } as DropdownItem)\r\n\r\n            this.settings.contextMenu.push({\r\n                    text: TextResources.Show,\r\n                    condition: data => data?._other,\r\n                    action: () => {\r\n                        new Modal(Decomposition.toChart<Sector>(this.settings, this.#other),\r\n                            {\r\n                                width: window.innerWidth * .8,\r\n                                height: window.innerHeight * .8\r\n                            } as DOMRect)\r\n                            .open()\r\n                    }\r\n                })\r\n        }\r\n\r\n        this.#startAngle = Math.PI / 4\r\n\r\n        this.#pinned = []\r\n\r\n        this.onMouseMoveEvent = new MouseEvent(Events.MouseMove)\r\n    }\r\n\r\n    render() {\r\n        super.render()\r\n\r\n        this.#accumulator = this.#startAngle\r\n        this.#hoverCount = 0\r\n\r\n        if (this.data.values.filter(v => !v.disabled).length == 0)\r\n            this.#drawEmpty()\r\n        else\r\n            this.#draw()\r\n\r\n        if (this.#hoverCount == 0)\r\n            this.#currentHover = undefined\r\n\r\n        this.state = RenderState.Idle\r\n\r\n        super.renderDropdown()\r\n\r\n        if (this.#currentHover || this.contextMenu)\r\n            this.renderContextMenu(this.data.values.find(v => v.id == this.#currentHover)?.data ?? {})\r\n        else\r\n            this.onContextMenuEvent = undefined\r\n\r\n        if (this.#currentHover)\r\n            this.canvas.style.cursor = Styles.Cursor.Pointer\r\n    }\r\n\r\n    #draw() {\r\n        if (this.onMouseMoveEvent || this.state == RenderState.Init) {\r\n            this.#sum = this.data.values.reduce((acc, v) => acc + v.current, 0)\r\n\r\n            let anglesSum = this.#startAngle\r\n            this.#angles = this.data.values.flatMap(sector => {\r\n                                   const angle = sector.current / this.#sum * 2 * Math.PI\r\n\r\n                                   return {\r\n                                       id: sector.id,\r\n                                       value: angle,\r\n                                       sum: (anglesSum += angle) - angle\r\n                                   }\r\n                               })\r\n                               .reverse()\r\n\r\n            this.#startPoint = this.#getPoint(this.#radius, 0)\r\n\r\n            for (const value of this.data.values)\r\n                this.#drawSector(value)\r\n\r\n            const value = this.data.values.find(v => v.id == this.#currentHover)\r\n            this.tooltip.render(!!value && !this.dropdown?.isActive,\r\n                this.onMouseMoveEvent,\r\n                [\r\n                    new TooltipValue(`${ value?.label }: ${ Formatter.number(value?.current) }`)\r\n                ],\r\n                value)\r\n\r\n            this.#drawInnerTitle()\r\n        }\r\n\r\n        if (!this.isDestroy)\r\n            requestAnimationFrame(this.render.bind(this))\r\n    }\r\n\r\n    #drawSector(value: Sector) {\r\n        const ctx = Canvas.getContext(this.canvas)\r\n\r\n        ctx.fillStyle = value.color\r\n        ctx.strokeStyle = value.color\r\n\r\n        const piece = value.current / this.#sum,\r\n            angle = (isNaN(piece) ? 1 : piece) * 2 * Math.PI\r\n\r\n        const isSingle = this.data.values.filter(s => !s.disabled).length == 1\r\n\r\n        if ((!!this.onClickEvent || this.#pinned.includes(value.id))\r\n            && !this.animations.contains(value.id, AnimationType.Init)\r\n            && !isSingle) {\r\n            this.animations.add(value.id,\r\n                AnimationType.Click,\r\n                {\r\n                    duration: Constants.Animations.circular,\r\n                    before: () => {\r\n                        if (!!this.onClickEvent) {\r\n                            if (this.#isInsideSector(this.onClickEvent, value)) {\r\n                                if (this.#pinned.includes(value.id))\r\n                                    this.#pinned = this.#pinned.filter(id => id != value.id)\r\n                                else\r\n                                    this.#pinned.push(value.id)\r\n\r\n                                this.onClickEvent = new PointerEvent(Events.Click)\r\n                            }\r\n                        }\r\n\r\n                        return true\r\n                    },\r\n                    body: () => {\r\n                        if (!this.#pinned.includes(value.id))\r\n                            return\r\n\r\n                        const piece = value.current / this.#sum,\r\n                            angle = (isNaN(piece) ? 1 : piece) * 2 * Math.PI,\r\n                            direction = this.#accumulator + angle / 2\r\n\r\n                        const transition = {\r\n                            x: this.#animationOffset * Math.cos(direction),\r\n                            y: this.#animationOffset * Math.sin(direction)\r\n                        }\r\n\r\n                        ctx.translate(transition.x, transition.y)\r\n\r\n                        ctx.lineWidth = 8\r\n                        ctx.lineJoin = 'round'\r\n                        ctx.lineCap = 'round'\r\n\r\n                        ctx.fillStyle = value.color\r\n                    }\r\n                })\r\n        }\r\n\r\n        if (this.onMouseMoveEvent && this.#isInsideSector(this.onMouseMoveEvent, value)) {\r\n            this.#currentHover = value.id\r\n            this.#hoverCount++\r\n        }\r\n\r\n        if (this.state == RenderState.Init || this.animations.contains(value.id, AnimationType.Init)) {\r\n            this.animations.add(value.id,\r\n                AnimationType.Init,\r\n                {\r\n                    duration: Constants.Animations.circular + (this.data.values.indexOf(value) + 1) / this.data.values.length * Constants.Animations.circular,\r\n                    continuous: true,\r\n                    body: transition => {\r\n                        const centerOfSector = {\r\n                            x: this.#center.x + this.#radius / 2 * Math.cos(this.#accumulator + angle / 2),\r\n                            y: this.#center.y + this.#radius / 2 * Math.sin(this.#accumulator + angle / 2)\r\n                        }\r\n\r\n                        const minSize = .7,\r\n                            rest = 1 - minSize\r\n\r\n                        ctx.translate(centerOfSector.x - centerOfSector.x * (minSize + transition * rest),\r\n                            centerOfSector.y - centerOfSector.y * (minSize + transition * rest))\r\n                        ctx.scale((minSize + transition * rest), (minSize + transition * rest))\r\n\r\n                        let opacity = Math.round(255 * transition).toString(16)\r\n\r\n                        if (opacity.length < 2)\r\n                            opacity = 0 + opacity\r\n\r\n                        ctx.fillStyle = value.color + opacity\r\n                        ctx.strokeStyle = Helper.applyAlpha(value.color, 255 * transition)\r\n                    }\r\n                })\r\n        } else if (this.onMouseMoveEvent\r\n                   && !this.animations.contains(value.id, AnimationType.Init)\r\n                   && !this.#pinned.includes(value.id)\r\n                   && !isSingle) {\r\n            const translate = (transition: number, event: AnimationType, swap: boolean) => {\r\n                this.animations.reload(value.id, event)\r\n\r\n                ctx.lineWidth = 1\r\n                ctx.lineJoin = 'miter'\r\n                ctx.lineCap = 'butt'\r\n\r\n                if (transition == 0)\r\n                    return\r\n\r\n                if (swap)\r\n                    transition = value.transition\r\n\r\n                const piece = value.current / this.#sum,\r\n                    angle = (isNaN(piece) ? 1 : piece) * 2 * Math.PI,\r\n                    direction = this.#accumulator + angle / 2,\r\n                    translate = {\r\n                        x: this.#animationOffset * Math.cos(direction) * transition,\r\n                        y: this.#animationOffset * Math.sin(direction) * transition\r\n                    }\r\n\r\n                ctx.translate(translate.x, translate.y)\r\n\r\n                ctx.lineWidth = transition * 8\r\n                ctx.lineJoin = 'round'\r\n                ctx.lineCap = 'round'\r\n\r\n                value.translate = translate\r\n                value.transition = transition\r\n            }\r\n\r\n            if (!this.#isInsideSector(this.onMouseMoveEvent, value)\r\n                || !this.animations.contains(value.id, AnimationType.MouseLeave))\r\n                this.animations.add(value.id,\r\n                    AnimationType.MouseLeave,\r\n                    {\r\n                        timer: Constants.Dates.minDate,\r\n                        duration: Constants.Animations.circular,\r\n                        backward: true,\r\n                        body: transition => {\r\n                            translate(transition,\r\n                                AnimationType.MouseOver,\r\n                                value.transition < transition)\r\n                        }\r\n                    })\r\n            else\r\n                this.animations.add(value.id,\r\n                    AnimationType.MouseOver,\r\n                    {\r\n                        duration: Constants.Animations.circular,\r\n                        body: transition => {\r\n                            translate(transition,\r\n                                AnimationType.MouseLeave,\r\n                                value.transition > transition)\r\n                        }\r\n                    })\r\n        }\r\n\r\n        let point2 = this.#getPoint(this.#radius, angle)\r\n\r\n        if (angle > 0) {\r\n            ctx.save()\r\n\r\n            if (value.current > 0) {\r\n                let labelStartPoint = this.#getPoint(this.#radius + 10, angle / 2),\r\n                    labelMidPoint = this.#getPoint(this.#radius + 20, angle / 2)\r\n\r\n                const dir = labelStartPoint.x > this.#center.x ? 1 : -1\r\n\r\n                let endPoint = {\r\n                    x: labelMidPoint.x + 10 * dir,\r\n                    y: labelMidPoint.y\r\n                }\r\n\r\n                let isBusy = false\r\n\r\n                const textWidth = Helper.stringWidth(value.label),\r\n                    imageDataX = dir == 1 ? endPoint.x + 12 : endPoint.x - textWidth - 12,\r\n                    imageData = new Uint32Array(ctx.getImageData(imageDataX, endPoint.y - 12, textWidth + 12, 28).data.buffer)\r\n\r\n                if (imageDataX < 0 || imageDataX + textWidth > this.canvas.width\r\n                    || endPoint.y - 12 < 0 || endPoint.y + 12 > this.canvas.height)\r\n                    isBusy = true\r\n\r\n                if (!isBusy)\r\n                    for (let i = 0; i < imageData.length; i++)\r\n                        if (Canvas.isPixelBusy(imageData[i])) {\r\n                            isBusy = true\r\n                            break\r\n                        }\r\n\r\n                if (!isBusy) {\r\n                    ctx.beginPath()\r\n                    ctx.moveTo(labelStartPoint.x, labelStartPoint.y)\r\n\r\n                    ctx.quadraticCurveTo(labelMidPoint.x, labelMidPoint.y, endPoint.x, endPoint.y)\r\n\r\n                    let opacity = Math.round(255 * (value.current / value.value)).toString(16)\r\n\r\n                    if (opacity.length < 2)\r\n                        opacity = 0 + opacity\r\n\r\n                    ctx.strokeStyle = Theme.text + opacity\r\n                    ctx.lineCap = 'butt'\r\n                    ctx.lineJoin = 'miter'\r\n                    ctx.lineWidth = 1\r\n                    ctx.stroke()\r\n\r\n                    ctx.fillStyle = Theme.text + opacity\r\n                    TextStyles.circularLabel(ctx, dir == 1)\r\n                    ctx.fillText(value.label, endPoint.x + 8 * dir, endPoint.y + 4)\r\n                }\r\n            }\r\n\r\n            ctx.restore()\r\n\r\n            ctx.beginPath()\r\n\r\n            if (!this.#isDonut)\r\n                ctx.moveTo(this.#center.x, this.#center.y)\r\n\r\n            ctx.lineTo(this.#startPoint.x, this.#startPoint.y)\r\n\r\n            let localAccumulator = 0,\r\n                localAngle = angle\r\n\r\n            while (localAngle > 0) {\r\n                let currentAngle = localAngle - Math.PI / 6 > 0\r\n                                   ? Math.PI / 6\r\n                                   : localAngle\r\n\r\n                point2 = this.#getPoint(this.#radius, localAccumulator + currentAngle)\r\n\r\n                const tangentIntersectionAngle = Math.PI - currentAngle,\r\n                    lengthToTangentIntersection = this.#radius / Math.sin(tangentIntersectionAngle / 2),\r\n                    tangentIntersectionPoint = this.#getPoint(lengthToTangentIntersection, localAccumulator + currentAngle / 2)\r\n\r\n                ctx.quadraticCurveTo(tangentIntersectionPoint.x, tangentIntersectionPoint.y, point2.x, point2.y)\r\n\r\n                localAccumulator += currentAngle\r\n\r\n                localAngle -= Math.PI / 6\r\n            }\r\n\r\n            if (this.#isDonut || value.innerRadius != 0) {\r\n                const innerRadius = this.#radius * (value.innerRadius / 100)\r\n\r\n                const innerPoint2 = {\r\n                    x: point2.x - (((this.#radius - innerRadius) * (point2.x - this.#center.x)) / this.#radius),\r\n                    y: point2.y - (((this.#radius - innerRadius) * (point2.y - this.#center.y)) / this.#radius)\r\n                }\r\n\r\n                ctx.lineTo(innerPoint2.x, innerPoint2.y)\r\n\r\n                localAngle = 0\r\n                localAccumulator = angle\r\n\r\n                while (localAngle < angle) {\r\n                    let currentAngle = localAngle + Math.PI / 6 < angle\r\n                                       ? Math.PI / 6\r\n                                       : angle - localAngle\r\n\r\n                    point2 = this.#getPoint(innerRadius, localAccumulator - currentAngle)\r\n\r\n                    const tangentIntersectionAngle = Math.PI - currentAngle,\r\n                        lengthToTangentIntersection = innerRadius / Math.sin(tangentIntersectionAngle / 2),\r\n                        tangentIntersectionPoint = this.#getPoint(lengthToTangentIntersection, localAccumulator - currentAngle / 2)\r\n\r\n                    ctx.quadraticCurveTo(tangentIntersectionPoint.x, tangentIntersectionPoint.y, point2.x, point2.y)\r\n\r\n                    localAccumulator -= currentAngle\r\n\r\n                    localAngle += Math.PI / 6\r\n                }\r\n\r\n                point2 = this.#getPoint(this.#radius, angle)\r\n            }\r\n\r\n            if (!this.animations.contains(value.id, AnimationType.Init)) {\r\n                const changeColor = (transition: number, event: AnimationType) => {\r\n                    this.animations.reload(value.id, event)\r\n\r\n                    if (transition == 0)\r\n                        return\r\n\r\n                    let opacity = Math.round(255 - 127 * transition).toString(16)\r\n                    if (opacity.length < 2)\r\n                        opacity = 0 + opacity\r\n\r\n                    ctx.fillStyle = value.color + opacity\r\n                    ctx.strokeStyle = Helper.applyAlpha(value.color, 255 - 127 * transition)\r\n                }\r\n\r\n                const anyHighlight = this.highlightItems.length != 0\r\n\r\n                if ((this.#currentHover && this.#currentHover != value.id)\r\n                    || (anyHighlight && !this.highlightItems.includes(value.id))) {\r\n                    this.animations.add(\r\n                        value.id,\r\n                        AnimationType.AnotherItemOver,\r\n                        {\r\n                            duration: Constants.Animations.circular,\r\n                            body: transition => {\r\n                                changeColor(transition, AnimationType.AnotherItemLeave)\r\n                            }\r\n                        }\r\n                    )\r\n                } else if (this.#currentHover == undefined || !anyHighlight) {\r\n                    this.animations.add(\r\n                        value.id,\r\n                        AnimationType.AnotherItemLeave,\r\n                        {\r\n                            timer: Constants.Dates.minDate,\r\n                            duration: Constants.Animations.circular,\r\n                            backward: true,\r\n                            body: transition => {\r\n                                changeColor(transition, AnimationType.AnotherItemOver)\r\n                            }\r\n                        }\r\n                    )\r\n                }\r\n            }\r\n\r\n            ctx.closePath()\r\n\r\n            ctx.fill()\r\n            ctx.stroke()\r\n\r\n            this.#accumulator += angle\r\n        }\r\n\r\n        ctx.resetTransform()\r\n\r\n        this.#startPoint = point2\r\n    }\r\n\r\n    #getPoint(radius: number, angle: number): Point {\r\n        return {\r\n            x: this.#center.x + radius * Math.cos(this.#accumulator + angle),\r\n            y: this.#center.y + radius * Math.sin(this.#accumulator + angle)\r\n        }\r\n    }\r\n\r\n    #isInsideSector(event: MouseEvent, value: Sector): boolean {\r\n        const isAngle = (point: Point) => {\r\n            let a = Math.atan2(point.y - this.#center.y, point.x - this.#center.x)\r\n            if (a < 0)\r\n                a += Math.PI * 2\r\n            if (a < this.#startAngle)\r\n                a = Math.PI * 2 - Math.abs(this.#startAngle - a) + this.#startAngle\r\n\r\n            let index = this.#angles.findIndex(o => o.id == value.id),\r\n                sumBefore = this.#angles[index].sum\r\n\r\n            return !(this.dropdown?.isActive ?? false)\r\n                   && sumBefore <= a\r\n                   && sumBefore + this.#angles[index].value - a >= 0\r\n        }\r\n\r\n        const isWithinRadius = (v: Point) => {\r\n            return v.x * v.x + v.y * v.y <= this.#radius * this.#radius\r\n                   && (!this.#isDonut || v.x * v.x + v.y * v.y\r\n                       >= this.#radius * (value.innerRadius / 100) * this.#radius * (value.innerRadius / 100))\r\n        }\r\n\r\n        const point = this.getMousePosition(event),\r\n            inner = {\r\n                x: point.x - this.#center.x,\r\n                y: point.y - this.#center.y\r\n            },\r\n            outer = {\r\n                x: point.x - this.#center.x - value.translate?.x,\r\n                y: point.y - this.#center.y - value.translate?.y\r\n            }\r\n\r\n        return isAngle(point) && (isWithinRadius(inner) || isWithinRadius(outer))\r\n    }\r\n\r\n    #drawEmpty() {\r\n        const ctx = Canvas.getContext(this.canvas)\r\n\r\n        ctx.beginPath()\r\n\r\n        ctx.arc(this.#center.x, this.#center.y, this.#radius, 0, 2 * Math.PI)\r\n        ctx.strokeStyle = Theme.text\r\n        ctx.stroke()\r\n\r\n        TextStyles.regular(ctx)\r\n        ctx.fillText(TextResources.allDataIsHidden, this.#center.x, this.#center.y)\r\n\r\n        requestAnimationFrame(this.render.bind(this))\r\n    }\r\n\r\n    #drawInnerTitle() {\r\n        if (this.#canRenderInnerTitle) {\r\n            const ctx = Canvas.getContext(this.canvas)\r\n\r\n            this.#innerTitleStyle(ctx)\r\n            ctx.fillText(this.data.innerTitle, this.#center.x, this.#center.y)\r\n        }\r\n    }\r\n\r\n    #calculateSizes() {\r\n        const titleOffset = this.settings.title\r\n                            ? Constants.Values.titleOffset\r\n                            : 0\r\n\r\n        const shortSide = this.canvas.width > this.canvas.height - titleOffset * 2\r\n                          ? this.canvas.height - titleOffset * 2\r\n                          : this.canvas.width\r\n\r\n        this.#center = {\r\n            x: this.canvas.width / 2,\r\n            y: titleOffset + this.canvas.height / 2\r\n        }\r\n\r\n        let longestLabel = 0\r\n\r\n        for (const value of this.data.values) {\r\n            const width = Helper.stringWidth(value.label)\r\n\r\n            if (width > longestLabel)\r\n                longestLabel = width\r\n        }\r\n\r\n        this.#radius = shortSide / 2 - (longestLabel + 50)\r\n\r\n        if (this.data.innerTitle != undefined && this.data.innerTitle != '') {\r\n            this.#innerTitleStyle = TextStyles.large\r\n            this.#canRenderInnerTitle = Helper.stringWidth(this.data.innerTitle, 16)\r\n                                        < (this.data.innerRadius / 100) * this.#radius * 2\r\n\r\n            if (!this.#canRenderInnerTitle) {\r\n                this.#innerTitleStyle = TextStyles.regular\r\n                this.#canRenderInnerTitle = Helper.stringWidth(this.data.innerTitle, 14)\r\n                                            < (this.data.innerRadius / 100) * this.#radius * 2\r\n            }\r\n\r\n            if (!this.#canRenderInnerTitle)\r\n                console.warn(`Inner title is declared, but can't be rendered`)\r\n        }\r\n\r\n        this.#animationOffset = this.#radius * .1\r\n    }\r\n\r\n    refresh() {\r\n        super.refresh()\r\n\r\n        this.dropdown?.refresh()\r\n    }\r\n\r\n    resize() {\r\n        super.resize()\r\n\r\n        this.initAnimations()\r\n        this.#calculateSizes()\r\n        this.dropdown?.resize()\r\n    }\r\n\r\n    prepareSettings() {\r\n        super.prepareSettings()\r\n\r\n        this.#isDonut = (this.data.innerRadius ?? 0) != 0\r\n\r\n        for (let item of this.data.values) {\r\n            item.disabled = !item.value\r\n            item.value ??= 0\r\n            item.current = item.value\r\n            item.innerRadius ??= this.data.innerRadius ?? 0\r\n\r\n            if (item.value < 0)\r\n                console.warn(`\"${ item.label }\" has negative value (${ item.value }) and will not be render`)\r\n        }\r\n\r\n        this.data.values = this.data.values.filter(v => v.value >= 0)\r\n\r\n        if (this.settings.enableOther && this.data.values.length > 20) {\r\n            this.#other = this.data.values.splice(20)\r\n\r\n            const sum = this.#other.reduce((acc, v) => acc + v.current, 0)\r\n\r\n            this.data.values = this.data.values.slice(0, 20)\r\n\r\n            this.data.values.push(new Sector({\r\n                value: sum,\r\n                current: sum,\r\n                label: TextResources.other,\r\n                id: Helper.guid(),\r\n                color: this.#other[this.#other.length - 1].color,\r\n                innerRadius: this.data.innerRadius,\r\n                data: {\r\n                    _other: true\r\n                }\r\n            }))\r\n        }\r\n    }\r\n\r\n    initDropdown() {\r\n        super.initDropdown()\r\n\r\n        this.dropdown = new Dropdown(this.canvas,\r\n            {\r\n                x: -10,\r\n                y: 10,\r\n                icon: Icon.ThreeLines,\r\n                items: [\r\n                    {\r\n                        text: TextResources.exportPNG,\r\n                        action: () => {\r\n                            Export.asPng(this.canvas, this.settings.title)\r\n                        }\r\n                    },\r\n                    {\r\n                        text: TextResources.exportCSV,\r\n                        action: () => {\r\n                            Export.asCsv(Decomposition.toTable(CircularData.getRows(this.data)), this.settings.title)\r\n                        }\r\n                    },\r\n                    {\r\n                        isDivider: true\r\n                    } as DropdownItem,\r\n                    {\r\n                        text: TextResources.decomposeToTable,\r\n                        action: () => {\r\n                            new Modal(Decomposition.toTable(CircularData.getRows(this.data))).open()\r\n                        }\r\n                    }\r\n                ]\r\n            })\r\n    }\r\n}","import { Data } from '../interfaces/Data'\r\nimport { Renderable } from './Renderable'\r\nimport { Helper } from '../../Helper'\r\nimport { Value } from './Value'\r\nimport { Legend } from '../../Legend'\r\nimport { Dropdown } from '../../Dropdown'\r\nimport { DropdownItem } from '../DropdownItem'\r\nimport { Point } from '../Point'\r\nimport { TextResources } from '../../static/TextResources'\r\nimport { Chart } from '../../Chart'\r\nimport { Canvas } from '../../helpers/Canvas'\r\nimport { TextStyles } from '../../helpers/TextStyles'\r\nimport { LegendPlace, RenderState } from '../../static/Enums'\r\nimport * as Constants from '../../static/constants/Index'\r\n\r\nexport class Renderer<T extends Data> extends Renderable {\r\n    dropdown: Dropdown\r\n\r\n    data: T\r\n\r\n    protected isDestroy: boolean = false\r\n\r\n    protected highlightItems: string[]\r\n\r\n    constructor(chart: Chart) {\r\n        super(chart)\r\n\r\n        this.data = <T>this.settings.data\r\n\r\n        this.highlightItems = []\r\n\r\n        this.state = this.settings.disableInitAnimation ? RenderState.Idle : RenderState.Init\r\n    }\r\n\r\n    render() {\r\n        super.render()\r\n\r\n        this.renderTitle()\r\n    }\r\n\r\n    destroy() {\r\n        this.isDestroy = true\r\n\r\n        this.canvas.remove()\r\n    }\r\n\r\n    renderDropdown() {\r\n        this.onClickEvent = this.dropdown?.render(this.onMouseMoveEvent, this.onClickEvent)\r\n    }\r\n\r\n    resize() {\r\n        this.#calculateSizes()\r\n        this.tooltip.refresh()\r\n        this.dropdown?.resize()\r\n    }\r\n\r\n    prepareSettings() {\r\n        const domRect = this.node.parentElement!.getBoundingClientRect()\r\n\r\n        this.settings.minWidth = isNaN(+this.settings.width)\r\n                                 ? 0\r\n                                 : +this.settings.width\r\n        this.settings.minHeight = isNaN(+this.settings.height)\r\n                                  ? 0\r\n                                  : +this.settings.height\r\n\r\n        this.settings.width = this.settings.minWidth != 0 && domRect.width < this.settings.minWidth\r\n                              ? this.settings.minWidth\r\n                              : domRect.width\r\n\r\n        this.settings.height = this.settings.minHeight != 0 && domRect.height < this.settings.minHeight\r\n                               ? this.settings.minHeight\r\n                               : domRect.height\r\n\r\n        this.canvas.width = this.settings.width\r\n        this.canvas.height = this.settings.height\r\n\r\n        const baseColor = this.settings.baseColor ?? Helper.randomColor()\r\n        let adjustStep = Math.round(100 / this.settings.data.values.length),\r\n            adjustAmount = -50\r\n\r\n        if (adjustStep <= 1)\r\n            adjustStep = 1\r\n\r\n        for (let item of this.settings.data.values) {\r\n            item.id = Helper.guid()\r\n            item.color ??= Helper.adjustColor(baseColor, adjustAmount += adjustStep)\r\n            item.label ??= TextResources.NoLabel\r\n        }\r\n\r\n        for (let item of this.settings.contextMenu ?? [])\r\n            if (item.id != undefined)\r\n                item.action = data => this.node.dispatchEvent(new CustomEvent(item.id ?? '', { detail: data }))\r\n    }\r\n\r\n    initDropdown() {\r\n    }\r\n\r\n    renderContextMenu(data: any) {\r\n        if (this.dropdown?.isActive) {\r\n            this.onContextMenuEvent = undefined\r\n\r\n            return false\r\n        }\r\n\r\n        if (this.onContextMenuEvent != undefined && this.settings.contextMenu?.length != 0) {\r\n            if (this.contextMenu == undefined && this.settings.contextMenu != undefined) {\r\n                let clone: DropdownItem[] = []\r\n\r\n                for (const item of this.settings.contextMenu)\r\n                    if (!item.condition || item.condition(data))\r\n                        clone.push({\r\n                            id: item.id,\r\n                            text: item.text,\r\n                            isDivider: item.isDivider,\r\n                            action: () => {\r\n                                item.action(data)\r\n\r\n                                this.onContextMenuEvent = undefined\r\n                                this.contextMenu = undefined\r\n                            }\r\n                        })\r\n\r\n                this.contextMenu = new Dropdown(this.canvas, {\r\n                    x: this.onContextMenuEvent.x - this.canvasPosition.x,\r\n                    y: this.onContextMenuEvent.y - this.canvasPosition.y,\r\n                    items: clone,\r\n                    data: data\r\n                })\r\n\r\n                this.contextMenu.resize()\r\n\r\n                this.onClickEvent = undefined\r\n            }\r\n\r\n            const isClick = this.onClickEvent != undefined\r\n\r\n            this.onClickEvent = this.contextMenu?.render(this.onMouseMoveEvent, this.onClickEvent)\r\n\r\n            if (this.onClickEvent == undefined && isClick) {\r\n                this.contextMenu = undefined\r\n                this.onContextMenuEvent = undefined\r\n\r\n                return true\r\n            }\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    highlight(value?: Value) {\r\n        if (value)\r\n            this.highlightItems = [value.id]\r\n        else\r\n            this.highlightItems = []\r\n    }\r\n\r\n    closeDropdowns() {\r\n        this.dropdown?.close()\r\n        this.onContextMenuEvent = undefined\r\n    }\r\n\r\n    protected renderTitle() {\r\n        const ctx = Canvas.getContext(this.canvas)\r\n\r\n        if (this.settings.title) {\r\n            TextStyles.title(ctx)\r\n            ctx.fillText(this.settings.title, this.canvas.width / 2, Constants.Values.titleOffset)\r\n        }\r\n    }\r\n\r\n    #calculateSizes() {\r\n        let domRect = this.node.getBoundingClientRect()\r\n\r\n        this.settings.width = this.settings.minWidth && domRect.width < this.settings.minWidth\r\n                              ? this.settings.minWidth\r\n                              : domRect.width\r\n        this.settings.height = this.settings.minHeight && domRect.height < this.settings.minHeight\r\n                               ? this.settings.minHeight\r\n                               : domRect.height\r\n\r\n        this.canvas.width = this.settings.width\r\n        this.canvas.height = this.settings.height\r\n\r\n        if (this.settings.enableLegend) {\r\n            if (this.settings.legendPlace == undefined\r\n                || this.settings.legendPlace == LegendPlace.Top\r\n                || this.settings.legendPlace == LegendPlace.Bottom)\r\n                this.canvas.height -= Legend.getLegendHeight(this.settings.data.values, this.canvas.width)\r\n\r\n            if (this.settings.legendPlace == LegendPlace.Left\r\n                || this.settings.legendPlace == LegendPlace.Right)\r\n                this.canvas.width -= 500\r\n        }\r\n    }\r\n\r\n    protected getMousePosition(event: MouseEvent): Point {\r\n        return {\r\n            x: event.clientX - this.canvasPosition.x + scrollX,\r\n            y: event.clientY - this.canvasPosition.y + scrollY\r\n        }\r\n    }\r\n}","import { Value } from '../base/Value'\r\nimport { TableValue } from '../TableValue'\r\nimport { TableData } from '../TableData'\r\nimport { Data } from '../interfaces/Data'\r\n\r\nexport class TreeData implements Data {\r\n    values: Value[]\r\n\r\n    padding: number\r\n\r\n    static getRows(data: TreeData): TableData {\r\n        const key = 'Value'\r\n\r\n        let values: TableValue[] = []\r\n\r\n        for (const value of data.values)\r\n            values.push({\r\n                name: value.label,\r\n                values: new Map([[key, value.value]])\r\n            })\r\n\r\n        return {\r\n            headers: [\r\n                {\r\n                    value: key,\r\n                    display: key\r\n                }\r\n            ],\r\n            values: values\r\n        }\r\n    }\r\n}","import { TableValue } from '../TableValue'\r\nimport { Sector } from '../Sector'\r\nimport { TableData } from '../TableData'\r\nimport { Data } from '../interfaces/Data'\r\n\r\nexport class CircularData implements Data {\r\n    values: Sector[]\r\n\r\n    innerRadius: number\r\n\r\n    innerTitle: string\r\n\r\n    static getRows(data: CircularData): TableData {\r\n        const key = 'Value'\r\n\r\n        let values: TableValue[] = []\r\n\r\n        for (const value of data.values)\r\n            values.push({\r\n                name: value.label,\r\n                values: new Map([[key, value.value]])\r\n            })\r\n\r\n        return {\r\n            headers: [\r\n                {\r\n                    value: key,\r\n                    display: key\r\n                }\r\n            ],\r\n            values: values\r\n        }\r\n    }\r\n}","export class Value {\r\n    id: string\r\n\r\n    color: string\r\n\r\n    label: string\r\n\r\n    disabled: boolean\r\n\r\n    hideInLegend: boolean\r\n\r\n    data: { [key: string]: string }\r\n\r\n    value: number\r\n\r\n    toggle(transition: number) {\r\n        if (transition == 0)\r\n            this.disabled = !this.disabled\r\n    }\r\n\r\n    checkCondition(): boolean {\r\n        return false\r\n    }\r\n\r\n    reset() {\r\n        this.disabled = false\r\n    }\r\n}","import { PlotData } from '../types/data/PlotData'\r\nimport { Renderer } from '../types/base/Renderer'\r\nimport { Helper } from '../Helper'\r\nimport { DropdownItem } from '../types/DropdownItem'\r\nimport { PlotAxis } from '../types/PlotAxis'\r\nimport { Paddings } from '../types/Paddings'\r\nimport { Dropdown } from '../Dropdown'\r\nimport { HoverItem } from '../types/HoverItem'\r\nimport { PlotSeries } from '../types/PlotSeries'\r\nimport { Tooltip } from '../Tooltip'\r\nimport { Theme } from '../Theme'\r\nimport { Chart } from '../Chart'\r\nimport { TextStyles } from '../helpers/TextStyles'\r\nimport { TooltipValue } from '../types/TooltipValue'\r\nimport { Export } from '../Export'\r\nimport { Decomposition } from '../Decomposition'\r\nimport { Modal } from '../Modal'\r\nimport { TextResources } from '../static/TextResources'\r\nimport { Formatter } from '../helpers/Formatter'\r\nimport { Canvas } from '../helpers/Canvas'\r\nimport { AnimationType, Icon, LineType, PlotAxisType, PlotType, RenderState } from '../static/Enums'\r\nimport * as Constants from '../static/constants/Index'\r\n\r\nexport class PlotRenderer extends Renderer<PlotData> {\r\n    #x: PlotAxis\r\n\r\n    #y: PlotAxis\r\n\r\n    #paddings: Paddings\r\n\r\n    #tooltipX: number\r\n\r\n    #tooltipY: number\r\n\r\n    #labelsX: Map<number, string>\r\n\r\n    #labelsY: Map<number, string>\r\n\r\n    #allValuesX: any[]\r\n\r\n    #allValuesY: any[]\r\n\r\n    #base: ImageBitmap | undefined\r\n\r\n    #backLines: ImageData | undefined\r\n\r\n    #yAxisStep: number\r\n\r\n    #plot: DOMRect\r\n\r\n    #hoverX: HoverItem | undefined\r\n\r\n    constructor(chart: Chart) {\r\n        super(chart)\r\n\r\n        this.data.values = this.data.values.map(v => new PlotSeries(v))\r\n\r\n        if (this.data.values.filter(v => v.type == PlotType.Bar).length > 0) {\r\n            for (let series of this.data.values) {\r\n                for (let item of series.values) {\r\n                    const x = item.x\r\n                    item['x'] = item.y\r\n                    item['y'] = x\r\n                }\r\n\r\n                series.values.sort((a, b) => b.x > a.x ? 1 : -1)\r\n            }\r\n        }\r\n\r\n        this.#paddings = {\r\n            top: 30,\r\n            right: 40,\r\n            bottom: 50,\r\n            left: 80\r\n        }\r\n\r\n        if (this.settings.title)\r\n            this.#paddings.top += Constants.Values.titleOffset\r\n\r\n        this.tooltip = new Tooltip(this.canvas, this.settings)\r\n\r\n        this.#labelsX = new Map()\r\n        this.#labelsY = new Map()\r\n    }\r\n\r\n    render() {\r\n        super.render()\r\n\r\n        let tooltipLines = [\r\n            new TooltipValue(this.#labelsX.get(Math.round(this.#tooltipX))\r\n                             ?? this.#labelsY.get(Math.round(this.#tooltipY)))\r\n        ]\r\n\r\n        const ctx = Canvas.getContext(this.canvas)\r\n\r\n        TextStyles.regular(ctx)\r\n        ctx.lineJoin = 'round'\r\n\r\n        const axisLineHoverColor = Theme.lineActive\r\n\r\n        this.#renderBackLines()\r\n        this.#renderBase(true)\r\n\r\n        let x = 0,\r\n            y = 0,\r\n            yValue = 0,\r\n            yHeight = 0,\r\n            columnWidth = 0\r\n\r\n        const seriesToRender = this.data.values.filter(s => !s.disabled)\r\n\r\n        let columnsIndex = 0,\r\n            columnsCount = seriesToRender.filter(s => s.type == PlotType.Column).length\r\n\r\n        let barsIndex = 0,\r\n            barsCount = seriesToRender.filter(s => s.type == PlotType.Bar).length\r\n\r\n        let stackingAccumulator = []\r\n        for (let i = 0; i < this.#allValuesY.length; i++)\r\n            stackingAccumulator.push(0)\r\n\r\n        for (const series of seriesToRender) {\r\n            ctx.beginPath()\r\n\r\n            ctx.strokeStyle = series.color\r\n            ctx.fillStyle = series.color\r\n            ctx.lineWidth = series.width\r\n            ctx.lineCap = 'round'\r\n\r\n            const anyHighlight = this.highlightItems.length != 0\r\n\r\n            if (!this.animations.contains(series.id, AnimationType.Init)) {\r\n                const changeColor = (transition: number, event: AnimationType) => {\r\n                    this.animations.reload(series.id, event)\r\n\r\n                    if (transition == 0)\r\n                        return\r\n\r\n                    let opacity = Math.round(255 - 127 * transition).toString(16)\r\n                    if (opacity.length < 2)\r\n                        opacity = 0 + opacity\r\n\r\n                    ctx.fillStyle = series.color + opacity\r\n                    ctx.strokeStyle = series.color + opacity\r\n                }\r\n\r\n                if (anyHighlight && !this.highlightItems.includes(series.id)) {\r\n                    this.animations.add(\r\n                        series.id,\r\n                        AnimationType.AnotherItemOver,\r\n                        {\r\n                            duration: Constants.Animations.circular,\r\n                            body: transition => {\r\n                                changeColor(transition, AnimationType.AnotherItemLeave)\r\n                            }\r\n                        }\r\n                    )\r\n                } else if (!anyHighlight) {\r\n                    this.animations.add(\r\n                        series.id,\r\n                        AnimationType.AnotherItemLeave,\r\n                        {\r\n                            timer: Constants.Dates.minDate,\r\n                            duration: Constants.Animations.circular,\r\n                            backward: true,\r\n                            body: transition => {\r\n                                changeColor(transition, AnimationType.AnotherItemOver)\r\n                            }\r\n                        }\r\n                    )\r\n                }\r\n            }\r\n\r\n            switch (series.lineType) {\r\n                case LineType.Dash:\r\n                    ctx.setLineDash([series.width * 3, series.width * 2])\r\n\r\n                    break\r\n\r\n                case LineType.Dotted:\r\n                    ctx.setLineDash([series.width, series.width])\r\n\r\n                    break\r\n\r\n                case LineType.Solid:\r\n                default:\r\n                    break\r\n            }\r\n\r\n            for (const value of series.values) {\r\n                let index = series.values.indexOf(value),\r\n                    xIndex = this.#allValuesX.indexOf(this.data.xType == PlotAxisType.Date ? value.x.toString() : value.x),\r\n                    yIndex = this.#allValuesY.indexOf(value.y)\r\n\r\n                const getTooltipValue = () => {\r\n                    return {\r\n                        x: value.x\r\n                           ? this.data.xType == PlotAxisType.Date\r\n                             ? this.#allValuesX[xIndex]\r\n                             : Formatter.number(this.#allValuesX[xIndex])\r\n                           : '0',\r\n                        y: value.y\r\n                           ? Formatter.number(this.#allValuesY[yIndex])\r\n                           : '0'\r\n                    }\r\n                }\r\n\r\n                x = this.#paddings.left\r\n                if (series.type != PlotType.Bar)\r\n                    x += xIndex * this.#x.step\r\n                if (series.type == PlotType.Line)\r\n                    x -= this.#x.step / 2 - this.#x.step\r\n\r\n                switch (series.type) {\r\n                    case PlotType.Line:\r\n                        y = this.#paddings.top + this.#plot.height - <number>value.y / this.#y.unit * this.#y.step\r\n                            - Math.abs(this.#y.min / this.#y.unit * this.#y.step)\r\n\r\n                        const pointDuration = 1500 / series.values.length * 1.2\r\n\r\n                        if (this.state == RenderState.Init || this.animations.contains(value.id, AnimationType.Init)) {\r\n                            this.animations.add(value.id,\r\n                                AnimationType.Init,\r\n                                {\r\n                                    timer: new Date(Date.now()).addMilliseconds(pointDuration * (index - 1)),\r\n                                    duration: pointDuration,\r\n                                    continuous: true,\r\n                                    body: transition => {\r\n                                        if (index == 0)\r\n                                            return\r\n\r\n                                        x = this.#paddings.left + xIndex * this.#x.step - this.#x.step / 2\r\n                                        y = this.#paddings.top + this.#plot.height - <number>value.y / this.#y.unit * this.#y.step\r\n                                            - Math.abs(this.#y.min / this.#y.unit * this.#y.step)\r\n\r\n                                        const next = series.values[index - 1]\r\n\r\n                                        let prevValue = {\r\n                                            x: this.#paddings.left + xIndex * this.#x.step - this.#x.step / 2,\r\n                                            y: this.#paddings.top + this.#plot.height - <number>next.y / this.#y.unit * this.#y.step\r\n                                               - Math.abs(this.#y.min / this.#y.unit * this.#y.step)\r\n                                        }\r\n\r\n                                        const endPointX = prevValue.x + (this.#x.step + (x - prevValue.x)) * transition,\r\n                                            endPointY = prevValue.y + (y - prevValue.y) * transition\r\n\r\n                                        if (prevValue.x != endPointX && prevValue.y != endPointY) {\r\n                                            ctx.moveTo(prevValue.x, prevValue.y)\r\n                                            ctx.lineTo(endPointX, endPointY)\r\n                                        }\r\n                                    }\r\n                                })\r\n                        } else {\r\n                            ctx.lineTo(x, y)\r\n\r\n                            if (this.#isOnX(x)) {\r\n                                const mouse = this.getMousePosition(this.onMouseMoveEvent)\r\n\r\n                                if (Math.abs(mouse.y - y) < 5) {\r\n                                    this.#hoverX = {\r\n                                        x: x,\r\n                                        y: y,\r\n                                        index: index,\r\n                                        data: value.data,\r\n                                        series: series\r\n                                    }\r\n\r\n                                    tooltipLines.push(new TooltipValue(`${ series.label }: ${ getTooltipValue().y }`, series.color))\r\n                                    this.#tooltipX = x - this.#x.step / 2\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        break\r\n\r\n                    case PlotType.AttentionLine:\r\n                        yValue = this.canvas.height - this.#paddings.bottom - <number>value.y / this.#y.unit * this.#y.step\r\n\r\n                        ctx.moveTo(this.#paddings.left, yValue)\r\n\r\n                        if (this.state == RenderState.Init || this.animations.contains(value.id, AnimationType.Init))\r\n                            this.animations.add(value.id,\r\n                                AnimationType.Init,\r\n                                {\r\n                                    duration: 1500,\r\n                                    continuous: true,\r\n                                    body: transition => {\r\n                                        ctx.lineTo(this.#paddings.left + (this.canvas.width - this.#paddings.left - this.#paddings.right) * transition,\r\n                                            this.canvas.height - this.#paddings.bottom - <number>value.y / this.#y.unit * this.#y.step)\r\n                                    }\r\n                                })\r\n                        else\r\n                            ctx.lineTo(this.canvas.width - this.#paddings.right, yValue)\r\n\r\n                        break\r\n\r\n                    case PlotType.Column:\r\n                        yValue = <number>value.y > this.data.yMax ? this.data.yMax : <number>value.y\r\n\r\n                        y = this.#plot.height * yValue / this.#y.max\r\n                        if (y < this.#y.minStep)\r\n                            y = this.#y.minStep\r\n\r\n                        columnWidth = this.#x.step * (series.width ? series.width / 100 : .5) / columnsCount\r\n\r\n                        ctx.beginPath()\r\n\r\n                        if (this.state == RenderState.Init || this.animations.contains(value.id + columnsIndex, AnimationType.Init)) {\r\n                            this.animations.add(value.id + columnsIndex,\r\n                                AnimationType.Init,\r\n                                {\r\n                                    duration: 800,\r\n                                    continuous: true,\r\n                                    body: transition => {\r\n                                        yValue = <number>value.y > this.data.yMax ? this.data.yMax : <number>value.y\r\n\r\n                                        x = this.#paddings.left + xIndex * this.#x.step\r\n                                        y = this.#plot.height * yValue / this.#y.max * transition\r\n\r\n                                        if (y < this.#y.minStep)\r\n                                            y = this.#y.minStep * transition\r\n\r\n                                        columnsIndex = this.data.values.filter(s => s.type == PlotType.Column)\r\n                                                           .indexOf(series)\r\n\r\n                                        ctx.roundRect(x + columnsIndex * columnWidth + (this.#x.step - columnsCount * columnWidth) / 2,\r\n                                            this.canvas.height - this.#paddings.bottom - y,\r\n                                            columnWidth,\r\n                                            y,\r\n                                            [6, 6, 0, 0])\r\n                                        ctx.fill()\r\n                                    }\r\n                                })\r\n                        } else {\r\n                            if (!anyHighlight) {\r\n                                if (this.#isInArea(x + columnsIndex * columnWidth + (this.#x.step - columnsCount * columnWidth) / 2,\r\n                                        this.canvas.height - this.#paddings.bottom - y,\r\n                                        columnWidth,\r\n                                        y)\r\n                                    && (this.contextMenu?.isActive == undefined\r\n                                        || this.contextMenu?.isActive == false)) {\r\n                                    this.#hoverX = {\r\n                                        x: x,\r\n                                        y: y,\r\n                                        index: index,\r\n                                        data: value.data,\r\n                                        series: series\r\n                                    }\r\n\r\n                                    tooltipLines.push(new TooltipValue(`${ series.label }: ${ getTooltipValue().y }`, series.color))\r\n                                    this.#tooltipX = x\r\n\r\n                                    ctx.fillStyle += '88'\r\n                                } else {\r\n                                    ctx.fillStyle = series.color\r\n                                }\r\n                            }\r\n\r\n                            ctx.roundRect(x + columnsIndex * columnWidth + (this.#x.step - columnsCount * columnWidth) / 2,\r\n                                this.canvas.height - this.#paddings.bottom - y,\r\n                                columnWidth,\r\n                                y,\r\n                                [6, 6, 0, 0])\r\n                            ctx.fill()\r\n                        }\r\n\r\n                        break\r\n\r\n                    case PlotType.Bar:\r\n                        y = this.#paddings.top + yIndex * this.#y.step + this.#y.step / 2\r\n                            + (100 - series.width) * this.#y.step / 100 / 2\r\n\r\n                        const seriesHeight = (series.width * this.#y.step / 100) / barsCount\r\n\r\n                        if (this.state == RenderState.Init || this.animations.contains(value.id + barsIndex, AnimationType.Init)) {\r\n                            this.animations.add(value.id + barsIndex,\r\n                                AnimationType.Init,\r\n                                {\r\n                                    duration: 800,\r\n                                    continuous: true,\r\n                                    body: transition => {\r\n                                        y = this.#paddings.top + yIndex * this.#y.step + this.#y.step / 2\r\n                                            + (100 - series.width) * this.#y.step / 100 / 2\r\n\r\n                                        barsIndex = this.data.values.filter(s => s.type == PlotType.Bar)\r\n                                                        .indexOf(series)\r\n\r\n                                        ctx.fillRect(x,\r\n                                            y - this.#y.step / 2 + barsIndex * seriesHeight,\r\n                                            <number>value.x / this.#x.unit * this.#x.step * transition,\r\n                                            seriesHeight)\r\n                                    }\r\n                                })\r\n                        } else {\r\n                            if (!anyHighlight) {\r\n                                if (this.#isInArea(x,\r\n                                    y - this.#y.step / 2 + barsIndex * seriesHeight,\r\n                                    <number>value.x / this.#x.unit * this.#x.step,\r\n                                    seriesHeight)) {\r\n                                    this.#hoverX = {\r\n                                        x: x,\r\n                                        y: y,\r\n                                        index: index,\r\n                                        data: value.data,\r\n                                        series: series\r\n                                    }\r\n\r\n                                    ctx.fillStyle += '88'\r\n\r\n                                    tooltipLines.push(new TooltipValue(`${ series.label }: ${ getTooltipValue().x }`, series.color))\r\n                                    this.#tooltipY = y - this.#y.step / 2\r\n                                } else {\r\n                                    ctx.fillStyle = series.color\r\n                                }\r\n                            }\r\n\r\n                            ctx.fillRect(x,\r\n                                y - this.#y.step / 2 + barsIndex * seriesHeight,\r\n                                <number>value.x / this.#x.unit * this.#x.step,\r\n                                seriesHeight)\r\n                        }\r\n\r\n                        break\r\n\r\n                    case PlotType.StackingColumn:\r\n                        y = this.canvas.height - this.#paddings.bottom - <number>value.y / this.#y.unit * this.#y.step\r\n\r\n                        columnWidth = this.#x.step * (series.width ? series.width / 100 : .5)\r\n\r\n                        if (this.state == RenderState.Init || this.animations.contains(value.id + index, AnimationType.Init)) {\r\n                            this.animations.add(value.id + index,\r\n                                AnimationType.Init,\r\n                                {\r\n                                    duration: 800,\r\n                                    continuous: true,\r\n                                    body: transition => {\r\n                                        columnsIndex = this.data.values.filter(s => s.type == PlotType.StackingColumn && s.values.filter(v => v.x == value.x).length > 0)\r\n                                                           .indexOf(series)\r\n\r\n                                        x = this.#paddings.left + xIndex * this.#x.step\r\n                                        y = this.canvas.height - this.#paddings.bottom - <number>value.y / this.#y.unit * this.#y.step\r\n\r\n                                        if (columnsIndex == 0)\r\n                                            stackingAccumulator[xIndex] = 0\r\n\r\n                                        let offset = stackingAccumulator[xIndex] != undefined\r\n                                                     ? stackingAccumulator[xIndex]\r\n                                                     : 0\r\n\r\n                                        yValue = this.canvas.height - this.#paddings.bottom + offset\r\n                                        yHeight = (y - this.canvas.height + this.#paddings.bottom) * transition\r\n\r\n                                        if (yValue > this.#paddings.top) {\r\n                                            if (yValue + yHeight < this.#paddings.top)\r\n                                                yHeight -= yValue + yHeight - this.#paddings.top\r\n\r\n                                            ctx.fillRect(x + (this.#x.step - columnWidth) / 2,\r\n                                                yValue,\r\n                                                columnWidth,\r\n                                                yHeight)\r\n                                        }\r\n\r\n                                        stackingAccumulator[xIndex] += (y - this.canvas.height + this.#paddings.bottom) * transition\r\n                                    }\r\n                                })\r\n                        } else {\r\n                            if (columnsIndex == 0)\r\n                                stackingAccumulator[xIndex] = 0\r\n\r\n                            let offset = stackingAccumulator[xIndex] != undefined\r\n                                         ? stackingAccumulator[xIndex]\r\n                                         : 0\r\n\r\n                            yValue = this.canvas.height - this.#paddings.bottom + offset\r\n                            yHeight = y - this.canvas.height + this.#paddings.bottom\r\n\r\n                            if (yValue > this.#paddings.top) {\r\n                                if (yValue + yHeight < this.#paddings.top)\r\n                                    yHeight -= yValue + yHeight - this.#paddings.top\r\n\r\n                                if (!anyHighlight) {\r\n                                    if (this.#isInArea(x + (this.#x.step - columnWidth) / 2,\r\n                                        yValue + yHeight,\r\n                                        columnWidth,\r\n                                        Math.abs(yHeight))) {\r\n                                        this.#hoverX = {\r\n                                            x: x,\r\n                                            y: y,\r\n                                            index: xIndex,\r\n                                            data: value.data,\r\n                                            series: series\r\n                                        }\r\n\r\n                                        tooltipLines.push(new TooltipValue(`${ series.label }: ${ getTooltipValue().y }`, series.color))\r\n                                        this.#tooltipX = x\r\n\r\n                                        ctx.fillStyle += '88'\r\n                                    } else {\r\n                                        ctx.fillStyle = series.color\r\n                                    }\r\n                                }\r\n\r\n                                ctx.fillRect(x + (this.#x.step - columnWidth) / 2,\r\n                                    yValue,\r\n                                    columnWidth,\r\n                                    yHeight)\r\n                            }\r\n\r\n                            stackingAccumulator[xIndex] += (y - this.canvas.height + this.#paddings.bottom)\r\n                        }\r\n\r\n                        break\r\n                }\r\n            }\r\n\r\n            ctx.setLineDash([])\r\n\r\n            switch (series.type) {\r\n                case PlotType.Line:\r\n                    ctx.stroke()\r\n\r\n                    if (this.#hoverX && this.#hoverX.series == series) {\r\n                        ctx.beginPath()\r\n                        ctx.lineWidth = 1\r\n                        ctx.strokeStyle = axisLineHoverColor\r\n                        ctx.moveTo(this.#paddings.left, this.#hoverX.y)\r\n                        ctx.lineTo(this.canvas.width - this.#paddings.right, this.#hoverX.y)\r\n                        ctx.stroke()\r\n\r\n                        let radius = Math.round(series.width * 1.1)\r\n                        if (radius < 5)\r\n                            radius = 5\r\n\r\n                        ctx.beginPath()\r\n                        ctx.arc(this.#hoverX.x, this.#hoverX.y, radius, 0, 2 * Math.PI)\r\n                        ctx.fill()\r\n                        ctx.lineWidth = Math.ceil(radius / 2)\r\n                        ctx.strokeStyle = Helper.adjustColor(series.color, 50)\r\n                        ctx.stroke()\r\n                    }\r\n\r\n                    break\r\n\r\n                case PlotType.AttentionLine:\r\n                    ctx.stroke()\r\n\r\n                    TextStyles.regular(ctx)\r\n                    ctx.fillText(series.label,\r\n                        this.#paddings.left + (this.canvas.width - this.#paddings.left - this.#paddings.right) / 2,\r\n                        this.canvas.height - this.#paddings.bottom - <number>series.values[0].y / this.#y.unit * this.#y.step + 16)\r\n\r\n                    break\r\n\r\n                case PlotType.Column:\r\n                case PlotType.StackingColumn:\r\n                    if (this.#hoverX) {\r\n                        let offset = stackingAccumulator[this.#hoverX.index] != undefined\r\n                                     ? stackingAccumulator[this.#hoverX.index]\r\n                                     : 0\r\n\r\n                        if (this.canvas.height - this.#paddings.bottom + offset > this.#paddings.top) {\r\n                            ctx.beginPath()\r\n                            ctx.lineWidth = 1\r\n                            ctx.strokeStyle = axisLineHoverColor\r\n                            ctx.moveTo(this.#tooltipX + this.#x.step / 2,\r\n                                this.#paddings.top)\r\n                            ctx.lineTo(this.#tooltipX + this.#x.step / 2,\r\n                                this.canvas.height - this.#paddings.bottom + offset)\r\n                            ctx.stroke()\r\n                        }\r\n                    }\r\n\r\n                    columnsIndex++\r\n\r\n                    break\r\n\r\n                case PlotType.Bar:\r\n                    if (this.#hoverX) {\r\n                        ctx.lineWidth = 1\r\n                        ctx.strokeStyle = axisLineHoverColor\r\n                        ctx.moveTo(this.#paddings.left,\r\n                            this.#tooltipY + this.#y.step / 2)\r\n                        ctx.lineTo(this.canvas.width - this.#paddings.right,\r\n                            this.#tooltipY + this.#y.step / 2)\r\n                        ctx.stroke()\r\n                    }\r\n\r\n                    barsIndex++\r\n\r\n                    break\r\n            }\r\n        }\r\n\r\n        this.#renderBase()\r\n\r\n        this.renderTitle()\r\n\r\n        this.tooltip.render(tooltipLines.length > 1 && !this.dropdown?.isActive,\r\n            this.onMouseMoveEvent,\r\n            tooltipLines,\r\n            this.#hoverX\r\n            ? this.#hoverX.series!.values[this.#hoverX.index]\r\n            : undefined)\r\n\r\n        if (!this.isDestroy)\r\n            requestAnimationFrame(this.render.bind(this))\r\n\r\n        this.state = RenderState.Idle\r\n\r\n        super.renderDropdown()\r\n\r\n        if (this.onContextMenuEvent && !this.#hoverX)\r\n            this.onContextMenuEvent = undefined\r\n\r\n        if (this.#hoverX\r\n            && (this.renderContextMenu(this.#hoverX.data)\r\n                || !this.onContextMenuEvent))\r\n            this.#hoverX = undefined\r\n    }\r\n\r\n    refresh() {\r\n        super.refresh()\r\n    }\r\n\r\n    resize() {\r\n        super.resize()\r\n\r\n        this.#base = undefined\r\n\r\n        this.#calculateSizes()\r\n    }\r\n\r\n    #isOnX(x: number): boolean {\r\n        if (!this.onMouseMoveEvent)\r\n            return false\r\n\r\n        const mouse = this.getMousePosition(this.onMouseMoveEvent)\r\n\r\n        return !(this.dropdown?.isActive ?? false)\r\n               && x - this.#x.step / 2 <= mouse.x && mouse.x < x + this.#x.step / 2\r\n               && this.#paddings.top <= mouse.y && mouse.y <= this.canvas.height - this.#paddings.bottom\r\n               && this.#paddings.left < mouse.x\r\n    }\r\n\r\n    #isInArea(x: number, y: number, w: number, h: number): boolean {\r\n        if (!this.onMouseMoveEvent)\r\n            return false\r\n\r\n        const mouse = this.getMousePosition(this.onMouseMoveEvent)\r\n\r\n        return !(this.dropdown?.isActive ?? false)\r\n               && mouse.x >= x && mouse.x <= x + w\r\n               && mouse.y >= y && mouse.y <= y + h\r\n    }\r\n\r\n    #renderBase(skip: boolean = false) {\r\n        if (this.#base && skip)\r\n            return\r\n\r\n        if (this.data.simple)\r\n            return\r\n\r\n        const ctx = Canvas.getContext(this.canvas)\r\n\r\n        if (skip)\r\n            ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\r\n\r\n        if (this.#base) {\r\n            ctx.drawImage(this.#base, 0, 0)\r\n            return\r\n        }\r\n\r\n        if (!skip)\r\n            return\r\n\r\n        const axisLabelOffset = 12\r\n\r\n        ctx.fillStyle = Theme.canvasBackground\r\n\r\n        ctx.fillRect(0, 0, this.#paddings.left, this.canvas.height)\r\n        ctx.fillRect(0, 0, this.canvas.width, this.#paddings.top)\r\n        ctx.fillRect(this.canvas.width - this.#paddings.right, 0, this.canvas.width, this.canvas.height)\r\n        ctx.fillRect(0, this.canvas.height - this.#paddings.bottom, this.canvas.width, this.canvas.height)\r\n\r\n        const isContainsBar = this.data.values.filter(s => s.type == PlotType.Bar).length > 0\r\n\r\n        if (this.data.xTitle || this.data.yTitle) {\r\n            ctx.textAlign = 'center'\r\n            ctx.textBaseline = 'bottom'\r\n            ctx.fillStyle = Theme.text\r\n\r\n            if (this.data.xTitle)\r\n                ctx.fillText(this.data.xTitle,\r\n                    this.#paddings.left + (this.canvas.width - this.#paddings.left - this.#paddings.right) / 2,\r\n                    this.canvas.height - 4)\r\n\r\n            if (this.data.yTitle) {\r\n                ctx.rotate(-Math.PI / 2)\r\n\r\n                ctx.textBaseline = 'top'\r\n\r\n                ctx.fillText(this.data.yTitle,\r\n                    -(this.#paddings.top + (this.canvas.height - this.#paddings.top - this.#paddings.bottom) / 2),\r\n                    8)\r\n\r\n                ctx.resetTransform()\r\n            }\r\n        }\r\n\r\n        ctx.textAlign = 'center'\r\n        ctx.textBaseline = 'top'\r\n\r\n        const step = this.#x.step,\r\n            xYPos = this.canvas.height - this.#paddings.bottom\r\n\r\n        let xCounter = 0,\r\n            acc = this.#paddings.left + step / 2\r\n\r\n        for (let i = 0; i < this.#allValuesX.length + 1; i++)\r\n            this.#labelsX.trySet(\r\n                Math.round(this.#paddings.left + i * this.#x.step),\r\n                this.data.xType == PlotAxisType.Date\r\n                ? Formatter.date(new Date(this.#allValuesX[i - 1]))\r\n                : isNaN(+this.#x.min) || !isFinite(+this.#x.min)\r\n                  ? this.#allValuesX[i - 1]\r\n                  : Formatter.number(\r\n                        this.#x.min + i * (this.#x.max - this.#x.min) / (this.#x.count - 1)\r\n                    )\r\n            )\r\n\r\n        const maxLabelWidth = Math.max(\r\n            ...[...this.#labelsX.values()].map(label => Math.ceil(Helper.stringWidth(label)))\r\n        ) + 10\r\n        const maxCount = Math.floor(\r\n            (this.canvas.width - this.#paddings.left - this.#paddings.right) / maxLabelWidth\r\n        )\r\n        const renderStep = Math.ceil(1 / (maxCount / this.#allValuesX.length))\r\n\r\n        while (acc < this.canvas.width - this.#paddings.right) {\r\n            if (xCounter % renderStep == 0) {\r\n                ctx.fillStyle = Theme.text + 'b7'\r\n\r\n                ctx.fillText(\r\n                    this.#labelsX.get(Math.round(acc - this.#x.step / 2)) ?? '',\r\n                    acc,\r\n                    xYPos + axisLabelOffset / 2\r\n                )\r\n            }\r\n\r\n            acc += step\r\n            xCounter++\r\n        }\r\n\r\n        ctx.textAlign = 'right'\r\n        ctx.textBaseline = 'middle'\r\n\r\n        const yCount = this.#y.count > 10 ? 10 : this.#y.count\r\n\r\n        let yCounter = isContainsBar ? 1 : 0,\r\n            yStep = this.#allValuesY.length / yCount\r\n\r\n        for (let i = isContainsBar ? 1 : 0; i < this.#allValuesY.length + 1; i++) {\r\n            const labelY = this.canvas.height - yCounter * yStep * this.#y.step - this.#paddings.bottom,\r\n                labelYAsKey = Math.round(this.canvas.height - i * this.#y.step - this.#paddings.bottom)\r\n\r\n            if (!this.#labelsY.get(labelYAsKey))\r\n                this.#labelsY.set(labelYAsKey,\r\n                    Formatter.number(this.#y.min + (i + (isContainsBar ? -1 : 0)) * (this.#y.max - this.#y.min) / this.#y.count))\r\n\r\n            if (i >= yCounter * yStep) {\r\n                const label = {\r\n                    x: this.#paddings.left,\r\n                    y: labelY,\r\n                    label: this.#yAxisStep >= 1\r\n                           ? Math.round((this.#y.min + (yCounter * yStep + (isContainsBar ? -1 : 0)) * (this.#y.max - this.#y.min) / this.#y.count) / this.#yAxisStep) * this.#yAxisStep\r\n                           : Math.round(this.#y.min + (yCounter * yStep + (isContainsBar ? -1 : 0)) * (this.#y.max - this.#y.min) / this.#y.count / this.#yAxisStep) * this.#yAxisStep\r\n                }\r\n\r\n                let postfix = ''\r\n\r\n                if (this.data.shortLabels) {\r\n                    const countOfTens = Math.floor(label.label.toString().length / 4)\r\n\r\n                    if (countOfTens > 0) {\r\n                        label.label /= Math.pow(1000, countOfTens)\r\n\r\n                        postfix = [\r\n                            TextResources.ThousandShort,\r\n                            TextResources.MillionShort,\r\n                            TextResources.BillionShort\r\n                        ][countOfTens - 1]\r\n                    }\r\n                }\r\n\r\n                ctx.fillText(Formatter.number(label.label) + postfix,\r\n                    label.x - axisLabelOffset,\r\n                    label.y + (isContainsBar ? this.#y.step / 2 : 0))\r\n\r\n                yCounter++\r\n            }\r\n        }\r\n\r\n        ctx.beginPath()\r\n\r\n        ctx.strokeStyle = Theme.line\r\n        ctx.lineWidth = 1\r\n\r\n        const offset = .5,\r\n            isBar = this.data.values.filter(v => v.type == PlotType.Bar).length > 0\r\n\r\n        ctx.moveTo(this.#paddings.left - offset,\r\n            this.canvas.height - this.#paddings.bottom + (isBar ? -offset : offset))\r\n\r\n        if (isBar)\r\n            ctx.lineTo(this.#paddings.left - offset, this.#paddings.top)\r\n        else\r\n            ctx.lineTo(this.canvas.width - this.#paddings.right, this.canvas.height - this.#paddings.bottom + offset)\r\n\r\n        ctx.stroke()\r\n\r\n        if (this.canvas.width > 0 && this.canvas.height > 0)\r\n            createImageBitmap(ctx.getImageData(0, 0, this.canvas.width, this.canvas.height))\r\n                .then(res => this.#base = res)\r\n    }\r\n\r\n    #renderBackLines() {\r\n        if (this.data.simple)\r\n            return\r\n\r\n        const ctx = Canvas.getContext(this.canvas)\r\n\r\n        if (this.#backLines) {\r\n            ctx.putImageData(this.#backLines, 0, 0)\r\n            return\r\n        }\r\n\r\n        ctx.fillStyle = Theme.canvasBackground\r\n        ctx.fillRect(0, 0, this.canvas.width, this.canvas.height)\r\n\r\n        const axisLineColor = Theme.lineAxis\r\n\r\n        const isContainsBar = this.data.values.filter(s => s.type == PlotType.Bar).length > 0\r\n\r\n        if (isContainsBar) {\r\n            const step = this.#x.step,\r\n                xYPos = this.canvas.height - this.#paddings.bottom\r\n\r\n            let xCounter = 0,\r\n                acc = this.#paddings.left + step / 2\r\n\r\n            for (let i = 0; i < this.#allValuesX.length + 1; i++)\r\n                this.#labelsX.trySet(\r\n                    Math.round(this.#paddings.left + i * this.#x.step),\r\n                    this.data.xType == PlotAxisType.Date\r\n                    ? Formatter.date(new Date(this.#allValuesX[i - 1]))\r\n                    : isNaN(+this.#x.min) || !isFinite(+this.#x.min)\r\n                      ? this.#allValuesX[i - 1]\r\n                      : Formatter.number(\r\n                            this.#x.min + i * (this.#x.max - this.#x.min) / (this.#x.count - 1)\r\n                        )\r\n                )\r\n\r\n            const maxLabelWidth = Math.max(\r\n                ...[...this.#labelsX.values()].map(label => Math.ceil(Helper.stringWidth(label)))\r\n            ) + 10\r\n            const maxCount = Math.floor(\r\n                (this.canvas.width - this.#paddings.left - this.#paddings.right) / maxLabelWidth\r\n            )\r\n            const renderStep = Math.ceil(1 / (maxCount / this.#allValuesX.length))\r\n\r\n            while (acc < this.canvas.width - this.#paddings.right) {\r\n                if (xCounter % renderStep == 0) {\r\n                    ctx.beginPath()\r\n\r\n                    ctx.moveTo(acc, xYPos)\r\n                    ctx.lineTo(acc, this.#paddings.top)\r\n\r\n                    ctx.lineWidth = 1\r\n                    ctx.strokeStyle = axisLineColor\r\n                    ctx.setLineDash([6, 6])\r\n                    ctx.stroke()\r\n                }\r\n\r\n                acc += step\r\n                xCounter++\r\n            }\r\n        }\r\n\r\n        ctx.textAlign = 'right'\r\n        ctx.textBaseline = 'middle'\r\n\r\n        const yCount = this.#y.count > 10 ? 10 : this.#y.count\r\n\r\n        let yCounter = isContainsBar ? 1 : 0,\r\n            yStep = this.#allValuesY.length / yCount\r\n\r\n        for (let i = isContainsBar ? 1 : 0; i < this.#allValuesY.length + 1; i++) {\r\n            const labelY = this.canvas.height - yCounter * yStep * this.#y.step - this.#paddings.bottom\r\n\r\n            if (i >= yCounter * yStep) {\r\n                const label = {\r\n                    x: this.#paddings.left,\r\n                    y: labelY\r\n                }\r\n\r\n                if (this.data.values.filter(s => s.type.isAnyEquals(PlotType.Column, PlotType.StackingColumn, PlotType.Line)).length > 0) {\r\n                    ctx.beginPath()\r\n\r\n                    ctx.moveTo(label.x, label.y)\r\n                    ctx.lineTo(this.canvas.width - this.#paddings.right, label.y)\r\n\r\n                    ctx.lineWidth = 1\r\n                    ctx.strokeStyle = axisLineColor\r\n                    ctx.setLineDash([6, 6])\r\n                    ctx.stroke()\r\n                }\r\n\r\n                yCounter++\r\n            }\r\n        }\r\n\r\n        if (this.canvas.width > 0 && this.canvas.height > 0)\r\n            this.#backLines = ctx.getImageData(0, 0, this.canvas.width, this.canvas.height)\r\n    }\r\n\r\n    #calculateSizes() {\r\n        let xValues = this.data.values.flatMap(s => s.values.map(p => p.x)),\r\n            yValues = this.data.values.flatMap(s => s.values.map(p => p.y))\r\n\r\n        const isDate = this.data.xType == PlotAxisType.Date\r\n\r\n        if (isDate) {\r\n            let tempDate = new Date(Math.min(...(<number[]>xValues)))\r\n\r\n            while (tempDate.getTime() < Math.max(...(<number[]>xValues))) {\r\n                if (!xValues.includes(tempDate.getTime()))\r\n                    xValues.push(new Date(tempDate.getTime()))\r\n\r\n                tempDate = tempDate.addDays(1)\r\n            }\r\n\r\n            xValues.sort((a, b) => a < b ? -1 : 1)\r\n        }\r\n\r\n        yValues.sort((a, b) => b > a ? -1 : 1)\r\n\r\n        this.#allValuesX = [...new Set(xValues.filter(x => x != undefined).map(x => isDate ? x.toString() : x))]\r\n        this.#allValuesY = [...new Set(yValues.filter(y => y != undefined))]\r\n\r\n        this.#x = {\r\n            min: Math.min(...(<number[]>xValues)),\r\n            max: Math.max(...(<number[]>xValues)),\r\n            unit: (Math.abs(Math.min(...(<number[]>xValues))) + Math.abs(Math.max(...(<number[]>xValues)))) / (this.#allValuesX.length - 1),\r\n            step: (this.canvas.width - this.#paddings.left - this.#paddings.right) / this.#allValuesX.length,\r\n            minStep: 0,\r\n            count: this.#allValuesX.length\r\n        }\r\n\r\n        let yMin = Math.min(...(<number[]>yValues))\r\n        if (yMin > 0)\r\n            yMin = 0\r\n\r\n        this.#y = {\r\n            min: yMin,\r\n            max: this.data.yMax ?? Math.max(...(<number[]>yValues)),\r\n            unit: (Math.abs(yMin) + Math.abs(this.data.yMax ?? Math.max(...(<number[]>yValues)))) / (this.#allValuesY.length - 1),\r\n            step: (this.canvas.height - this.#paddings.top - this.#paddings.bottom) / this.#allValuesY.length,\r\n            minStep: 0,\r\n            count: this.#allValuesY.length\r\n        }\r\n\r\n        let stackingColumns = this.data.values.filter(s => s.type == PlotType.StackingColumn)\r\n\r\n        let max\r\n\r\n        if (stackingColumns.length > 0) {\r\n            let values = stackingColumns.map(s => s.values.flatMap(v => +v.y))\r\n\r\n            max = this.#y.max\r\n\r\n            for (let i = 0; i < values[0].length; i++) {\r\n                let sum = 0\r\n\r\n                for (const v of values)\r\n                    sum += v[i]\r\n\r\n                if (sum > max)\r\n                    max = sum\r\n            }\r\n\r\n            this.#y.max = max > this.data.yMax ? this.data.yMax : max\r\n            this.#y.unit = (Math.abs(this.#y.min) + Math.abs(this.#y.max)) / (this.#allValuesY.length - 1)\r\n        }\r\n\r\n        const yMaxWidth = Helper.stringWidth(Formatter.number(this.#y.max))\r\n        if (yMaxWidth > this.#paddings.left - 40) {\r\n            this.#paddings.left += yMaxWidth - this.#paddings.left + 40\r\n            this.#x.step = (this.canvas.width - this.#paddings.left - this.#paddings.right) / this.#allValuesX.length\r\n        }\r\n\r\n        this.#yAxisStep = Math.abs(this.#y.min) + Math.abs(this.#y.max)\r\n\r\n        if (.5 <= this.#yAxisStep && this.#yAxisStep < 1)\r\n            this.#yAxisStep = .05\r\n        else if (1 <= this.#yAxisStep && this.#yAxisStep < 10)\r\n            this.#yAxisStep = .1\r\n        else if (10 <= this.#yAxisStep && this.#yAxisStep < 100)\r\n            this.#yAxisStep = 2\r\n        else if (100 <= this.#yAxisStep && this.#yAxisStep < 1000)\r\n            this.#yAxisStep = 20\r\n        else if (1000 <= this.#yAxisStep && this.#yAxisStep < 10000)\r\n            this.#yAxisStep = 50\r\n        else if (10000 <= this.#yAxisStep && this.#yAxisStep < 100000)\r\n            this.#yAxisStep = 1000\r\n        else if (100000 <= this.#yAxisStep && this.#yAxisStep < 1000000)\r\n            this.#yAxisStep = 10000\r\n        else if (1000000 <= this.#yAxisStep && this.#yAxisStep < 10000000)\r\n            this.#yAxisStep = 50000\r\n        else\r\n            this.#yAxisStep = 1\r\n\r\n        if (this.#yAxisStep != 1) {\r\n            max = yValues.length > 10\r\n                  ? (this.#y.max / 10 + this.#yAxisStep - (this.#y.max / 10) % this.#yAxisStep) * 10\r\n                  : Math.ceil(this.#y.max / this.#yAxisStep) * this.#yAxisStep\r\n\r\n            this.#y.max = max > this.data.yMax ? this.data.yMax : max\r\n            this.#y.unit = (Math.abs(this.#y.min) + Math.abs(this.#y.max)) / this.#allValuesY.length\r\n        }\r\n\r\n        this.#plot = {\r\n            width: this.canvas.width - this.#paddings.left - this.#paddings.right,\r\n            height: this.canvas.height - this.#paddings.top - this.#paddings.bottom\r\n        } as DOMRect\r\n\r\n        this.#x.minStep = this.#plot.width * 0.002\r\n        this.#y.minStep = this.#plot.height * 0.002\r\n    }\r\n\r\n    prepareSettings() {\r\n        super.prepareSettings()\r\n\r\n        for (let item of this.data.values) {\r\n            item.disabled = !item.values\r\n            item.type ??= PlotType.Line\r\n\r\n            for (let it of item.values) {\r\n                it.id = Helper.guid()\r\n\r\n                if (this.data.xType == PlotAxisType.Date) {\r\n                    if (Helper.isISOString(it.x as string))\r\n                        it.x = new Date(it.x)\r\n                    else\r\n                        console.warn(`${ it.x } is not a date in ISO format.`)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    initDropdown() {\r\n        super.initDropdown()\r\n\r\n        this.dropdown = new Dropdown(this.canvas,\r\n            {\r\n                x: -10,\r\n                y: 10,\r\n                icon: Icon.ThreeLines,\r\n                items: [\r\n                    {\r\n                        text: TextResources.exportPNG,\r\n                        action: () => {\r\n                            Export.asPng(this.canvas, this.settings.title)\r\n                        }\r\n                    },\r\n                    {\r\n                        text: TextResources.exportCSV,\r\n                        action: () => {\r\n                            Export.asCsv(Decomposition.toTable(PlotData.getRows(this.data)), this.settings.title)\r\n                        }\r\n                    },\r\n                    {\r\n                        isDivider: true\r\n                    } as DropdownItem,\r\n                    {\r\n                        text: TextResources.decomposeToTable,\r\n                        action: () => {\r\n                            new Modal(Decomposition.toTable(PlotData.getRows(this.data))).open()\r\n                        }\r\n                    }\r\n                ]\r\n            })\r\n    }\r\n}","export class Dates {\r\n    static minDate = new Date(2000, 1, 1)\r\n}","import { Theme } from '../Theme'\r\n\r\nexport abstract class TextStyles {\r\n    static title(context: CanvasRenderingContext2D) {\r\n        context.fillStyle = Theme.text\r\n        context.textAlign = 'center'\r\n        context.textBaseline = 'middle'\r\n        context.font = '20px sans-serif'\r\n    }\r\n\r\n    static regular(context: CanvasRenderingContext2D) {\r\n        context.fillStyle = Theme.text\r\n        context.textAlign = 'center'\r\n        context.textBaseline = 'middle'\r\n        context.font = '14px sans-serif'\r\n    }\r\n\r\n    static large(context: CanvasRenderingContext2D) {\r\n        context.fillStyle = Theme.text\r\n        context.textAlign = 'center'\r\n        context.textBaseline = 'middle'\r\n        context.font = '16px sans-serif'\r\n    }\r\n\r\n    static tooltip(context: CanvasRenderingContext2D) {\r\n        context.font = '14px sans-serif'\r\n        context.textAlign = 'start'\r\n        context.textBaseline = 'alphabetic'\r\n    }\r\n\r\n    static circularLabel(context: CanvasRenderingContext2D, isRight: boolean) {\r\n        context.textAlign = isRight ? 'start' : 'end'\r\n        context.textBaseline = 'alphabetic'\r\n        context.font = '14px sans-serif'\r\n    }\r\n}","import { ChartSettings } from '../ChartSettings'\r\nimport { Animations } from '../../Animations'\r\nimport { Tooltip } from '../../Tooltip'\r\nimport { Dropdown } from '../../Dropdown'\r\nimport { Chart } from '../../Chart'\r\nimport { Canvas } from '../../helpers/Canvas'\r\nimport { Events, RenderState, Tag } from '../../static/Enums'\r\nimport { Styles } from '../../static/constants/Styles'\r\nimport { Theme } from '../../Theme'\r\n\r\nexport class Renderable {\r\n    node: HTMLElement\r\n\r\n    canvas: HTMLCanvasElement\r\n\r\n    settings: ChartSettings\r\n\r\n    animations: Animations\r\n\r\n    tooltip: Tooltip\r\n\r\n    protected state: RenderState = RenderState.Init\r\n\r\n    protected canvasPosition: DOMRect\r\n\r\n    protected onMouseMoveEvent: MouseEvent\r\n\r\n    protected onClickEvent: MouseEvent | undefined\r\n\r\n    protected onContextMenuEvent: MouseEvent | undefined\r\n\r\n    protected contextMenu: Dropdown | undefined\r\n\r\n    constructor(chart: Chart) {\r\n        this.node = chart.node\r\n        this.settings = chart.settings\r\n        this.animations = new Animations()\r\n\r\n        this.canvas = document.createElement(Tag.Canvas)\r\n\r\n        this.canvas.style.imageRendering = Styles.ImageRendering.Pixelated\r\n\r\n        this.node.append(this.canvas)\r\n\r\n        this.tooltip = new Tooltip(this.canvas, this.settings)\r\n\r\n        this.initAnimations()\r\n    }\r\n\r\n    render() {\r\n        const ctx = Canvas.getContext(this.canvas)\r\n\r\n        ctx.fillStyle = Theme.canvasBackground\r\n        ctx.fillRect(0, 0, this.canvas.width, this.canvas.height)\r\n    }\r\n\r\n    refresh() {\r\n        this.tooltip.refresh()\r\n        this.state = this.settings.disableInitAnimation ? RenderState.Idle : RenderState.Init\r\n    }\r\n\r\n    resetMouse() {\r\n        this.onMouseMoveEvent = new MouseEvent(Events.MouseMove)\r\n        this.onClickEvent = new MouseEvent(Events.Click)\r\n        this.onContextMenuEvent = undefined\r\n    }\r\n\r\n    initAnimations() {\r\n        this.canvasPosition = this.canvas.getBoundingClientRect()\r\n\r\n        this.canvasPosition.x += scrollX\r\n        this.canvasPosition.y += scrollY\r\n\r\n        if (this.state == RenderState.Init && !this.settings.disableInteractions) {\r\n            this.canvas.onmousemove = event => this.onMouseMoveEvent = event\r\n            this.canvas.onclick = event => this.onClickEvent = event\r\n            this.canvas.oncontextmenu = event => {\r\n                event.preventDefault()\r\n                this.contextMenu = undefined\r\n                if (this.onContextMenuEvent)\r\n                    this.onContextMenuEvent = undefined\r\n                else\r\n                    this.onContextMenuEvent = event\r\n            }\r\n            this.canvas.onmouseleave = () => this.onMouseMoveEvent = new MouseEvent(Events.MouseMove)\r\n        }\r\n    }\r\n}","import { TreeData } from '../types/data/TreeData'\r\nimport { Renderer } from '../types/base/Renderer'\r\nimport { Sector } from '../types/Sector'\r\nimport { Helper } from '../Helper'\r\nimport { DropdownItem } from '../types/DropdownItem'\r\nimport { Dropdown } from '../Dropdown'\r\nimport { Chart } from '../Chart'\r\nimport { TextStyles } from '../helpers/TextStyles'\r\nimport { TooltipValue } from '../types/TooltipValue'\r\nimport { Export } from '../Export'\r\nimport { Decomposition } from '../Decomposition'\r\nimport { Modal } from '../Modal'\r\nimport { TextResources } from '../static/TextResources'\r\nimport { Canvas } from '../helpers/Canvas'\r\nimport { TreeCell } from '../types/TreeCell'\r\nimport { Formatter } from '../helpers/Formatter'\r\nimport { AnimationType, Icon, RenderState } from '../static/Enums'\r\nimport * as Constants from '../static/constants/Index'\r\n\r\nexport class TreeRenderer extends Renderer<TreeData> {\r\n    constructor(chart: Chart) {\r\n        super(chart)\r\n\r\n        this.settings.enableLegend = false\r\n\r\n        this.data.values = this.data.values.map(v => new Sector(v))\r\n    }\r\n\r\n    render() {\r\n        super.render()\r\n\r\n        if (this.data.values.filter(v => v.value > 0).length == 0) {\r\n            this.#drawEmpty()\r\n            return\r\n        }\r\n\r\n        const titleOffset = this.settings.title ? Constants.Values.titleOffset : 0\r\n\r\n        const maxWidth = this.canvas.width - this.data.padding * 2,\r\n            maxHeight = this.canvas.height - this.data.padding * 2 - titleOffset\r\n\r\n        let sum = this.data.values.reduce((acc, cur) => acc + cur.value, 0),\r\n            totalSquare = maxWidth * maxHeight\r\n\r\n        let x = this.data.padding,\r\n            y = this.data.padding + titleOffset\r\n\r\n        let minX = this.data.padding,\r\n            minY = this.data.padding + titleOffset\r\n\r\n        let tooltipCell: TreeCell | undefined = undefined\r\n        let contextMenuData = undefined\r\n\r\n        const ctx = Canvas.getContext(this.canvas)\r\n\r\n        let isVertical = true\r\n        for (let i = 0; i < this.data.values.length; i++) {\r\n            const item = this.data.values[i]\r\n\r\n            const remainWidth = maxWidth - (x - this.data.padding),\r\n                remainHeight = maxHeight - (y - this.data.padding - titleOffset)\r\n\r\n            let cells: TreeCell[] = [\r\n                {\r\n                    color: item.color,\r\n                    label: item.label,\r\n                    s: item.value / sum * totalSquare,\r\n                    value: item.value,\r\n                    id: item.id,\r\n                    x: x,\r\n                    y: y\r\n                } as TreeCell\r\n            ]\r\n\r\n            if (i + 1 <= this.data.values.length - 1) {\r\n                const next = this.data.values[i + 1]\r\n\r\n                cells.push({\r\n                    color: next.color,\r\n                    label: next.label,\r\n                    s: next.value / sum * totalSquare,\r\n                    value: next.value,\r\n                    id: next.id,\r\n                    x: x,\r\n                    y: y\r\n                } as TreeCell)\r\n\r\n                i++\r\n            }\r\n\r\n            const isSingle = cells.length == 1,\r\n                isLast = i == this.data.values.length - 1\r\n\r\n            if (isVertical) {\r\n                for (let j = 1; j <= remainWidth + i * i; j++) {\r\n                    const w = remainWidth - j,\r\n                        h1 = cells[0].s / w,\r\n                        h2 = isSingle ? 0 : cells[1].s / w\r\n\r\n                    if (h1 + h2 >= remainHeight) {\r\n                        cells[0].w = Math.floor(w)\r\n                        cells[0].h = Math.floor(h1)\r\n\r\n                        if (!isSingle) {\r\n                            cells[1].w = Math.floor(w)\r\n                            cells[1].h = remainHeight - cells[0].h\r\n\r\n                            cells[1].y += cells[0].h\r\n                        }\r\n\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                for (let j = 1; j <= remainHeight + i * i; j++) {\r\n                    const h = remainHeight - j,\r\n                        w1 = cells[0].s / h,\r\n                        w2 = isSingle ? 0 : cells[1].s / h\r\n\r\n                    if (w1 + w2 >= remainWidth) {\r\n                        cells[0].h = Math.floor(h)\r\n                        cells[0].w = Math.floor(w1)\r\n\r\n                        if (!isSingle) {\r\n                            cells[1].h = Math.floor(h)\r\n                            cells[1].w = remainWidth - cells[0].w\r\n\r\n                            cells[1].x += cells[0].w\r\n                        }\r\n\r\n                        break\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (const cell of cells) {\r\n                if (isLast) {\r\n                    if (isVertical) {\r\n                        cell.w = remainWidth\r\n                        if (isSingle)\r\n                            cell.h = remainHeight\r\n                    } else {\r\n                        cell.h = remainHeight\r\n                        if (isSingle)\r\n                            cell.w = remainWidth\r\n                    }\r\n                }\r\n\r\n                ctx.beginPath()\r\n\r\n                ctx.fillStyle = cell.color\r\n\r\n                const cellInit = this.state != RenderState.Init\r\n                    && !this.animations.contains(cell.id, AnimationType.Init)\r\n\r\n                const cellIndex = i + cells.indexOf(cell) + (isLast && isSingle ? 1 : 0),\r\n                    duration = 260\r\n\r\n                const getPrev = () => {\r\n                    let acc = 0\r\n                    for (let i = 0; i < cellIndex; i++)\r\n                        acc += duration - duration * (i / this.data.values.length) / Math.E\r\n\r\n                    return acc\r\n                }\r\n\r\n                const initAnimationDuration = duration - duration * cellIndex / (this.data.values.length + 1)\r\n\r\n                if (!cellInit) {\r\n                    this.animations.add(cell.id,\r\n                        AnimationType.Init,\r\n                        {\r\n                            duration: getPrev(),\r\n                            continuous: true,\r\n                            body: transition => {\r\n                                if (transition * getPrev() - getPrev() + initAnimationDuration < 0)\r\n                                    return ctx.fillStyle += '00'\r\n\r\n                                transition = (transition * getPrev() - getPrev() + initAnimationDuration) / initAnimationDuration\r\n\r\n                                const center = {\r\n                                    x: cell.x + cell.w / 2,\r\n                                    y: cell.y + cell.h / 2\r\n                                }\r\n\r\n                                const minSize = .7,\r\n                                    rest = 1 - minSize\r\n\r\n                                ctx.translate(center.x - center.x * (minSize + transition * rest),\r\n                                    center.y - center.y * (minSize + transition * rest))\r\n                                ctx.scale((minSize + transition * rest), (minSize + transition * rest))\r\n\r\n                                let opacity = Math.round(255 * transition).toString(16)\r\n\r\n                                if (opacity.length < 2)\r\n                                    opacity = 0 + opacity\r\n\r\n                                ctx.fillStyle = cell.color + opacity\r\n                            }\r\n                        })\r\n                } else {\r\n                    const translate = (transition: number, event: AnimationType) => {\r\n                        const center = {\r\n                            x: cell.x + cell.w / 2,\r\n                            y: cell.y + cell.h / 2\r\n                        }\r\n\r\n                        const margin = 12,\r\n                            minSize = cell.w > cell.h\r\n                                      ? 1 - margin / cell.w\r\n                                      : 1 - margin / cell.h,\r\n                            rest = 1 - minSize\r\n\r\n                        ctx.translate(center.x - center.x * (minSize + transition * rest),\r\n                            center.y - center.y * (minSize + transition * rest))\r\n                        ctx.scale(minSize + transition * rest, minSize + transition * rest)\r\n\r\n                        this.animations.reload(cell.id, event)\r\n                    }\r\n\r\n                    if (this.#isInCell(cell)\r\n                        && !tooltipCell) {\r\n                        tooltipCell = cell\r\n                        contextMenuData = cell.data\r\n\r\n                        this.animations.add(cell.id,\r\n                            AnimationType.MouseOver,\r\n                            {\r\n                                duration: Constants.Animations.tree,\r\n                                backward: true,\r\n                                body: transition => {\r\n                                    translate(transition, AnimationType.MouseLeave)\r\n                                }\r\n                            })\r\n                    } else {\r\n                        this.animations.add(cell.id,\r\n                            AnimationType.MouseLeave,\r\n                            {\r\n                                timer: Constants.Dates.minDate,\r\n                                duration: Constants.Animations.tree,\r\n                                body: transition => {\r\n                                    translate(transition, AnimationType.MouseOver)\r\n                                }\r\n                            })\r\n                    }\r\n                }\r\n\r\n                const gap = 4\r\n\r\n                ctx.roundRect(x + gap, y + gap, cell.w - gap, cell.h - gap, gap * 2)\r\n                ctx.fill()\r\n\r\n                if (cell.label\r\n                    && Helper.stringWidth(cell.label) < cell.w - gap\r\n                    && cell.h - gap > 16\r\n                    && !this.animations.contains(cell.id, AnimationType.Init)) {\r\n                    ctx.beginPath()\r\n                    TextStyles.large(ctx)\r\n                    ctx.fillStyle = !Helper.isColorVisible(cell.color, '#ffffff')\r\n                                    ? '#000000'\r\n                                    : '#ffffff'\r\n                    ctx.fillText(cell.label,\r\n                        x + 2 + cell.w / 2,\r\n                        y + 2 + cell.h / 2)\r\n                }\r\n\r\n                ctx.resetTransform()\r\n\r\n                if (isVertical)\r\n                    y += cell.h\r\n                else\r\n                    x += cell.w\r\n\r\n                totalSquare -= cell.w * cell.h\r\n                sum -= cell.value\r\n            }\r\n\r\n            if (isVertical) {\r\n                x += cells[0].w\r\n                y = minY\r\n            } else {\r\n                y += cells[0].h\r\n                x = minX\r\n            }\r\n\r\n            minX = x\r\n            minY = y\r\n\r\n            isVertical = !isVertical\r\n        }\r\n\r\n        this.tooltip.render(!!tooltipCell && !this.dropdown?.isActive,\r\n            this.onMouseMoveEvent,\r\n            [\r\n                new TooltipValue(`${ tooltipCell?.label }: ${ Formatter.number(tooltipCell?.value) }`)\r\n            ],\r\n            this.data.values.find(v => v.id == tooltipCell?.id))\r\n\r\n        if (!this.isDestroy)\r\n            requestAnimationFrame(this.render.bind(this))\r\n\r\n        this.state = RenderState.Idle\r\n\r\n        super.renderDropdown()\r\n\r\n        if (tooltipCell || this.contextMenu)\r\n            this.renderContextMenu(contextMenuData)\r\n        else\r\n            this.onContextMenuEvent = undefined\r\n    }\r\n\r\n    #isInCell(cell: TreeCell) {\r\n        if (!this.onMouseMoveEvent || !cell)\r\n            return false\r\n\r\n        const mouse = this.getMousePosition(this.onMouseMoveEvent)\r\n\r\n        return !(this.dropdown?.isActive ?? false)\r\n               && cell.x <= mouse.x && mouse.x <= cell.x + cell.w\r\n               && cell.y <= mouse.y && mouse.y <= cell.y + cell.h\r\n    }\r\n\r\n    #drawEmpty() {\r\n        const ctx = Canvas.getContext(this.canvas)\r\n\r\n        TextStyles.regular(ctx)\r\n        ctx.fillText(TextResources.incorrectValues,\r\n            this.canvas.width / 2,\r\n            this.canvas.height / 2)\r\n    }\r\n\r\n    refresh() {\r\n        super.refresh()\r\n    }\r\n\r\n    resize() {\r\n        super.resize()\r\n\r\n        this.initAnimations()\r\n        this.animations.clear()\r\n    }\r\n\r\n    prepareSettings() {\r\n        this.data.values = this.data.values.filter(v => v.value > 0)\r\n\r\n        this.data.values.sort((a, b) => (b.value ?? 0) - (a.value ?? 0))\r\n\r\n        super.prepareSettings()\r\n\r\n        for (let item of this.data.values) {\r\n            item.disabled = !item.value\r\n            item.value ??= 0\r\n        }\r\n    }\r\n\r\n    initDropdown() {\r\n        super.initDropdown()\r\n\r\n        this.dropdown = new Dropdown(this.canvas,\r\n            {\r\n                x: -10,\r\n                y: 10,\r\n                icon: Icon.ThreeLines,\r\n                items: [\r\n                    {\r\n                        text: TextResources.exportCSV,\r\n                        action: () => {\r\n                            Export.asCsv(Decomposition.toTable(TreeData.getRows(this.data)), this.settings.title)\r\n                        }\r\n                    },\r\n                    {\r\n                        isDivider: true\r\n                    } as DropdownItem,\r\n                    {\r\n                        text: TextResources.decomposeToTable,\r\n                        action: () => {\r\n                            new Modal(Decomposition.toTable(TreeData.getRows(this.data))).open()\r\n                        }\r\n                    }\r\n                ]\r\n            })\r\n    }\r\n}","import { TableData } from './types/TableData'\r\nimport { Helper } from './Helper'\r\nimport { Value } from './types/base/Value'\r\nimport { ChartSettings } from './types/ChartSettings'\r\nimport { Formatter } from './helpers/Formatter'\r\nimport { Styles } from './static/constants/Styles'\r\nimport { Tag } from './static/Enums'\r\n\r\nexport class Decomposition {\r\n    static toTable(values: TableData) {\r\n        let table = document.createElement(Tag.Table)\r\n\r\n        table.classList.add('o-table')\r\n\r\n        let totals = new Map<string, number>()\r\n        let rows = '',\r\n            headers = ''\r\n\r\n        let valuesMap = new Map<string, Map<string, any>>()\r\n\r\n        for (const tableValue of values.values) {\r\n            let allColumns = new Map<string, any>()\r\n\r\n            for (const header of values.headers)\r\n                allColumns.set(header.value, 0)\r\n\r\n            for (const [key, value] of tableValue.values)\r\n                allColumns.set(key, value)\r\n\r\n            valuesMap.set(tableValue.name, allColumns)\r\n        }\r\n\r\n        for (const tableHeader of values.headers)\r\n            headers += `\r\n                <th>\r\n                    ${ tableHeader.display }\r\n                </th>\r\n            `\r\n\r\n        for (const [key, value] of valuesMap) {\r\n            let columns = ''\r\n\r\n            for (const [vKey, vValue] of value) {\r\n                columns += `\r\n                    <td>\r\n                        ${ vValue == undefined ? '' : Formatter.number(vValue) }\r\n                    </td>\r\n                `\r\n\r\n                if (totals.has(vKey)) {\r\n                    let totalValue = +(totals.get(vKey) ?? 0)\r\n                    totals.set(vKey, totalValue + +vValue)\r\n                } else {\r\n                    totals.set(vKey, vValue)\r\n                }\r\n            }\r\n\r\n            rows += `\r\n                <tr>\r\n                    <td class=\"o-table-label\">\r\n                        ${ key }\r\n                    </td>\r\n                    \r\n                    ${ columns } \r\n                </tr>\r\n            `\r\n        }\r\n\r\n        let totalColumns = ''\r\n\r\n        for (const [, value] of totals)\r\n            totalColumns += `\r\n                <td>\r\n                    ${ value == undefined ? '' : Formatter.number(value) }\r\n                </td>\r\n            `\r\n\r\n        table.innerHTML = `\r\n            <thead>\r\n                <tr>\r\n                    <th></th>\r\n                \r\n                    ${ headers }\r\n                </tr>\r\n            </thead>\r\n        \r\n            <tbody>\r\n                ${ rows }\r\n            </tbody>\r\n            \r\n            <tfoot>\r\n                <tr>\r\n                    <td></td>\r\n                \r\n                    ${ totalColumns }\r\n                </tr>\r\n            </tfoot>\r\n        `\r\n\r\n        return table\r\n    }\r\n\r\n    static toChart<T extends Value>(settings: ChartSettings, values: T[]) {\r\n        let container = document.createElement(Tag.Div),\r\n            div = document.createElement(Tag.Div),\r\n            script = document.createElement(Tag.Script),\r\n            id = Helper.guid()\r\n\r\n        container.style.display = Styles.Display.Flex\r\n        container.style.height = '100%'\r\n\r\n        div.id = id\r\n        div.style.flexGrow = '1'\r\n\r\n        let cloneSettings = JSON.parse(JSON.stringify(settings)) as ChartSettings\r\n\r\n        if (cloneSettings.title)\r\n            cloneSettings.title = cloneSettings.title + ' (Other)'\r\n        cloneSettings.data.values = values\r\n        cloneSettings.minWidth = undefined\r\n        cloneSettings.minHeight = undefined\r\n\r\n        script.innerHTML = `\r\n            new OCharts.chart(document.getElementById('${ id }'), ${ JSON.stringify(cloneSettings) })\r\n                .render()\r\n        `\r\n\r\n        container.append(div, script)\r\n\r\n        return container\r\n    }\r\n}","export { Animations } from './Animations'\r\nexport { Dates } from './Dates'\r\nexport { Values } from './Values'","import { Renderer } from '../types/base/Renderer'\r\nimport { GaugeData } from '../types/data/GaugeData'\r\nimport { Helper } from '../Helper'\r\nimport { Sector } from '../types/Sector'\r\nimport { Dropdown } from '../Dropdown'\r\nimport { Point } from '../types/Point'\r\nimport { Chart } from '../Chart'\r\nimport { Theme } from '../Theme'\r\nimport { TextStyles } from '../helpers/TextStyles'\r\nimport { TooltipValue } from '../types/TooltipValue'\r\nimport { Export } from '../Export'\r\nimport { Formatter } from '../helpers/Formatter'\r\nimport { Canvas } from '../helpers/Canvas'\r\nimport { TextResources } from '../static/TextResources'\r\nimport { AnimationType, Icon, RenderState } from '../static/Enums'\r\n\r\nexport class GaugeRenderer extends Renderer<GaugeData> {\r\n    #radius: number\r\n\r\n    #center: Point\r\n\r\n    constructor(chart: Chart) {\r\n        super(chart)\r\n\r\n        this.settings.enableLegend = false\r\n    }\r\n\r\n    render() {\r\n        super.render()\r\n\r\n        this.#draw()\r\n\r\n        const value = this.data.values[0]\r\n        this.tooltip.render(this.#isInsideSector(this.onMouseMoveEvent, value) && !this.dropdown?.isActive,\r\n            this.onMouseMoveEvent,\r\n            [\r\n                new TooltipValue(`${ value?.label }: ${ Formatter.number(value?.current) }`)\r\n            ],\r\n            value)\r\n\r\n        if (!this.isDestroy)\r\n            requestAnimationFrame(this.render.bind(this))\r\n\r\n        this.state = RenderState.Idle\r\n\r\n        super.renderDropdown()\r\n    }\r\n\r\n    #draw() {\r\n        const ctx = Canvas.getContext(this.canvas)\r\n\r\n        const value = this.data.values[0] ?? { id: Helper.guid() }\r\n\r\n        if (this.state == RenderState.Init || this.animations.contains(value.id, AnimationType.Init))\r\n            this.animations.add(value.id,\r\n                AnimationType.Init,\r\n                {\r\n                    duration: 450,\r\n                    continuous: true,\r\n                    body: transition => {\r\n                        value.current = value.value * transition\r\n                    }\r\n                })\r\n\r\n        ctx.beginPath()\r\n\r\n        ctx.strokeStyle = value.color\r\n        ctx.lineCap = 'round'\r\n        ctx.lineWidth = 40\r\n\r\n        const piece = value.current / this.data.max,\r\n            angle = (isNaN(piece) ? 1 : piece) * Math.PI\r\n\r\n        if (value.value) {\r\n            ctx.arc(this.#center.x, this.#center.y, this.#radius, Math.PI, angle - Math.PI)\r\n            ctx.stroke()\r\n        }\r\n\r\n        ctx.beginPath()\r\n\r\n        ctx.lineWidth = 1\r\n        ctx.lineCap = 'square'\r\n\r\n        let localAccumulator = 0,\r\n            localAngle = Math.PI\r\n\r\n        while (localAngle >= 0) {\r\n            let currentAngle = localAngle - Math.PI / 10 > 0\r\n                               ? Math.PI / 10\r\n                               : localAngle\r\n\r\n            const getPoint = (offset: number) => {\r\n                return {\r\n                    x: this.#center.x + (this.#radius + offset) * Math.cos(Math.PI + localAccumulator),\r\n                    y: this.#center.y + (this.#radius + offset) * Math.sin(Math.PI + localAccumulator)\r\n                }\r\n            }\r\n\r\n            let point1 = getPoint(50),\r\n                point2 = getPoint(90),\r\n                point3 = getPoint(115)\r\n\r\n            const opacity = Math.PI - localAngle > angle ? '66' : 'ff'\r\n\r\n            ctx.moveTo(point1.x, point1.y)\r\n            ctx.lineTo(point2.x, point2.y)\r\n            ctx.strokeStyle = Theme.text + opacity\r\n            ctx.stroke()\r\n\r\n            TextStyles.regular(ctx)\r\n            ctx.fillStyle = Theme.text + opacity\r\n            ctx.fillText(Formatter.number(this.data.max - localAngle / Math.PI * this.data.max), point3.x, point3.y)\r\n\r\n            localAccumulator += currentAngle\r\n\r\n            localAngle -= Math.PI / 10\r\n        }\r\n    }\r\n\r\n    #isInsideSector(event: MouseEvent, value: Sector): boolean {\r\n        if (!event)\r\n            return false\r\n\r\n        const isAngle = (point: Point) => {\r\n            let a = Math.atan2(point.y - this.#center.y, point.x - this.#center.x)\r\n            if (a < 0)\r\n                a += Math.PI * 2\r\n\r\n            const piece = value.current / this.data.max,\r\n                angle = (isNaN(piece) ? 1 : piece) * Math.PI\r\n\r\n            return a > Math.PI && Math.PI + angle >= a\r\n        }\r\n\r\n        const isWithinRadius = (v: Point) => {\r\n            const outerRadius = this.#radius + 20,\r\n                innerRadius = this.#radius - 20\r\n\r\n            return v.x * v.x + v.y * v.y <= outerRadius * outerRadius\r\n                   && v.x * v.x + v.y * v.y >= innerRadius * innerRadius\r\n        }\r\n\r\n        const point = this.getMousePosition(event),\r\n            inner = {\r\n                x: point.x - this.#center.x,\r\n                y: point.y - this.#center.y\r\n            }\r\n\r\n        return !(this.dropdown?.isActive ?? false)\r\n               && isAngle(point)\r\n               && isWithinRadius(inner)\r\n    }\r\n\r\n    #calculateSizes() {\r\n        const longSide = this.canvas.width < this.canvas.height\r\n                         ? this.canvas.height - 250\r\n                         : this.canvas.width\r\n\r\n        this.#radius = longSide / 3\r\n\r\n        this.#center = {\r\n            x: this.canvas.width / 2,\r\n            y: this.canvas.height - this.#radius / 5\r\n        }\r\n    }\r\n\r\n    refresh() {\r\n        super.refresh()\r\n    }\r\n\r\n    resize() {\r\n        super.resize()\r\n\r\n        this.initAnimations()\r\n        this.#calculateSizes()\r\n    }\r\n\r\n    prepareSettings() {\r\n        super.prepareSettings()\r\n\r\n        for (let item of this.data.values) {\r\n            item.disabled = !item.value\r\n            item.value ??= 0\r\n        }\r\n\r\n        if (this.data.values.length > 0 && this.data.values[0].value > this.data.max)\r\n            this.data.values[0].value = this.data.max\r\n    }\r\n\r\n    initDropdown() {\r\n        super.initDropdown()\r\n\r\n        this.dropdown = new Dropdown(this.canvas,\r\n            {\r\n                x: -10,\r\n                y: 10,\r\n                icon: Icon.ThreeLines,\r\n                items: [\r\n                    {\r\n                        text: TextResources.exportPNG,\r\n                        action: () => {\r\n                            Export.asPng(this.canvas, this.settings.title)\r\n                        }\r\n                    }\r\n                ]\r\n            })\r\n    }\r\n}","import { Theme } from './Theme'\r\nimport { Helper } from './Helper'\r\nimport { Canvas } from './helpers/Canvas'\r\nimport { Icon, Tag } from './static/Enums'\r\n\r\nexport class Export {\r\n    static asPng(canvas: HTMLCanvasElement, title: string) {\r\n        requestAnimationFrame(() => {\r\n            const ctx = Canvas.getContext(canvas)\r\n\r\n            let width = Helper.stringWidth(Icon.ThreeLines) + 20,\r\n                height = 64\r\n\r\n            ctx.fillStyle = Theme.canvasBackground\r\n            ctx.fillRect(canvas.width - width, 0, width, height)\r\n\r\n            let leftEmpty = 0,\r\n                rightEmpty = 0\r\n\r\n            const imageData = new Uint32Array(ctx.getImageData(0, 0, canvas.width, canvas.height).data.buffer)\r\n\r\n            let isBusy = false\r\n\r\n            for (let i = 0; i < canvas.width; i++) {\r\n                for (let j = 0; j < canvas.height; j++) {\r\n                    if (Canvas.isPixelBusy(imageData[i + j * canvas.width])) {\r\n                        isBusy = true\r\n                        break\r\n                    }\r\n                }\r\n\r\n                if (isBusy)\r\n                    break\r\n\r\n                leftEmpty++\r\n            }\r\n\r\n            isBusy = false\r\n\r\n            for (let i = canvas.width; i >= 0; i--) {\r\n                for (let j = 0; j < canvas.height; j++) {\r\n                    if (Canvas.isPixelBusy(imageData[i + j * canvas.width])) {\r\n                        isBusy = true\r\n                        break\r\n                    }\r\n                }\r\n\r\n                if (isBusy)\r\n                    break\r\n\r\n                rightEmpty++\r\n            }\r\n\r\n            if (leftEmpty > 4)\r\n                leftEmpty -= 4\r\n            if (rightEmpty > 4)\r\n                rightEmpty -= 4\r\n\r\n            if (leftEmpty > rightEmpty)\r\n                leftEmpty = rightEmpty\r\n            if (rightEmpty > leftEmpty)\r\n                rightEmpty = leftEmpty\r\n\r\n            let destinationCanvas = document.createElement(Tag.Canvas)\r\n            destinationCanvas.width = canvas.width - leftEmpty - rightEmpty\r\n            destinationCanvas.height = canvas.height\r\n\r\n            const destCtx = Canvas.getContext(destinationCanvas)\r\n\r\n            destCtx.fillStyle = Theme.background\r\n            destCtx.fillRect(0, 0, canvas.width, canvas.height)\r\n\r\n            destCtx.drawImage(canvas, -leftEmpty, 0)\r\n\r\n            Export.saveAs((title ?? 'chart') + '.png',\r\n                destinationCanvas.toDataURL('image/png'))\r\n        })\r\n    }\r\n\r\n    static asCsv(table: HTMLTableElement, title: string) {\r\n        let rows = table.querySelectorAll('tr'),\r\n            csv = []\r\n\r\n        for (let i = 0; i < rows.length; i++) {\r\n            let row = [],\r\n                cols = rows[i].querySelectorAll('td, th')\r\n\r\n            for (let j = 0; j < cols.length; j++) {\r\n                let data = cols[j].innerHTML\r\n                                  .replace(/(\\r\\n|\\n|\\r)/gm, '')\r\n                                  .replace(/(\\s\\s)/gm, ' ')\r\n\r\n                data = data.replace(/\"/g, '\"\"')\r\n                row.push('\"' + data + '\"')\r\n            }\r\n\r\n            csv.push(row.join(','))\r\n        }\r\n\r\n        Export.saveAs((title ?? 'table') + '.csv',\r\n            csv.join('\\n'),\r\n            'data:text/csv;charset=utf-8,' + encodeURIComponent(csv.join('\\n')),\r\n            true)\r\n    }\r\n\r\n    static saveAs(name: string, dataURL: string, href?: string | undefined, isText?: boolean) {\r\n        if (window.showSaveFilePicker != undefined) {\r\n            const accept = isText\r\n                           ? { 'text/csv': '.csv' } as FilePickerAcceptType\r\n                           : { 'image/*': '.png' } as FilePickerAcceptType\r\n\r\n            const options = {\r\n                suggestedName: name,\r\n                types: [\r\n                    {\r\n                        accept: accept\r\n                    }\r\n                ],\r\n                excludeAcceptAllOption: true\r\n            } as SaveFilePickerOptions\r\n\r\n            function toBlob(dataURI: string) {\r\n                const byteString = atob(dataURI.split(',')[1]),\r\n                    mimeString = dataURI.split(',')[0]\r\n                        .split(':')[1]\r\n                        .split(';')[0],\r\n                    buffer = new ArrayBuffer(byteString.length),\r\n                    imageArray = new Uint8Array(buffer)\r\n\r\n                for (let i = 0; i < byteString.length; i++)\r\n                    imageArray[i] = byteString.charCodeAt(i)\r\n\r\n                return new Blob([buffer], { type: mimeString })\r\n            }\r\n\r\n            window.showSaveFilePicker(options)\r\n                  .then(fileHandle => {\r\n                      fileHandle.createWritable()\r\n                                .then(writableStream => {\r\n                                    writableStream.write(isText ? dataURL : toBlob(dataURL))\r\n                                                  .then(() => writableStream.close())\r\n                                })\r\n                  })\r\n        } else {\r\n            let download = document.createElement(Tag.A)\r\n            download.href = href ?? dataURL\r\n            download.download = name\r\n            download.click()\r\n        }\r\n    }\r\n}","export abstract class Formatter {\r\n    static number = (value: number | undefined) =>\r\n        value?.toLocaleString(undefined, {\r\n            minimumFractionDigits: 2,\r\n            maximumFractionDigits: 2\r\n        }) ?? ''\r\n\r\n    static date = (value: Date) =>\r\n        value.toLocaleDateString()\r\n}","import { TextStyles } from './helpers/TextStyles'\r\nimport { Theme } from './Theme'\r\nimport { Animations } from './Animations'\r\nimport { Helper } from './Helper'\r\nimport { ButtonOptions } from './types/ButtonOptions'\r\nimport { Canvas } from './helpers/Canvas'\r\nimport { AnimationType } from './static/Enums'\r\nimport * as Constants from './static/constants/Index'\r\nimport { Styles } from './static/constants/Styles'\r\n\r\nexport class Button {\r\n    #canvas: HTMLCanvasElement\r\n\r\n    #options: ButtonOptions\r\n\r\n    #canvasPosition: DOMRect\r\n\r\n    animations: Animations\r\n\r\n    #isInit: boolean\r\n\r\n    #position: DOMRect\r\n\r\n    constructor(canvas: HTMLCanvasElement, options: ButtonOptions) {\r\n        this.#canvas = canvas\r\n        this.#options = options\r\n\r\n        this.animations = new Animations()\r\n\r\n        this.#initAnimations()\r\n\r\n        const width = Helper.stringWidth(this.#options.text) + 12,\r\n            height = 20\r\n\r\n        this.#position = <DOMRect>{\r\n            x: this.#options.x + width > this.#canvas.width\r\n               ? this.#canvas.width - width\r\n               : this.#options.x < 0\r\n                 ? this.#canvas.width + this.#options.x - width\r\n                 : this.#options.x,\r\n            y: this.#options.y + height > this.#canvas.height\r\n               ? this.#canvas.height - height\r\n               : this.#options.y < 0\r\n                 ? this.#canvas.height + this.#options.y - height\r\n                 : this.#options.y,\r\n            width: width,\r\n            height: height\r\n        }\r\n    }\r\n\r\n    render(moveEvent: MouseEvent, clickEvent: MouseEvent | undefined) {\r\n        if (!this.#isInit)\r\n            this.#initAnimations()\r\n\r\n        const ctx = Canvas.getContext(this.#canvas)\r\n\r\n        ctx.beginPath()\r\n\r\n        const translate = (transition: number, event: AnimationType) => {\r\n            this.animations.reload('animation-button', event)\r\n\r\n            ctx.fillStyle = Helper.adjustColor(Theme.canvasBackground, -Math.round(transition * 25))\r\n        }\r\n\r\n        if (this.#isOnButton(moveEvent)) {\r\n            this.#canvas.style.cursor = Styles.Cursor.Pointer\r\n\r\n            if (clickEvent && this.#isOnButton(clickEvent)) {\r\n                this.#options.action()\r\n                clickEvent = undefined\r\n            }\r\n\r\n            this.animations.add('animation-button',\r\n                AnimationType.MouseOver,\r\n                {\r\n                    duration: 300,\r\n                    body: transition => {\r\n                        translate(transition, AnimationType.MouseLeave)\r\n                    }\r\n                })\r\n        } else {\r\n            this.animations.add('animation-button',\r\n                AnimationType.MouseLeave,\r\n                {\r\n                    timer: Constants.Dates.minDate,\r\n                    duration: 300,\r\n                    backward: true,\r\n                    body: transition => {\r\n                        translate(transition, AnimationType.MouseOver)\r\n                    }\r\n                })\r\n        }\r\n\r\n        ctx.roundRect(this.#position.x, this.#position.y, this.#position.width, this.#position.height, 4)\r\n        ctx.fill()\r\n\r\n        TextStyles.regular(ctx)\r\n        ctx.fillText(this.#options.text,\r\n            this.#position.x + this.#position.width / 2,\r\n            this.#position.y + this.#position.height / 2)\r\n\r\n        this.#isInit = true\r\n\r\n        return clickEvent\r\n    }\r\n\r\n    resize() {\r\n        this.#initAnimations()\r\n    }\r\n\r\n    #initAnimations() {\r\n        this.#canvasPosition = this.#canvas.getBoundingClientRect()\r\n\r\n        this.#canvasPosition.x += scrollX\r\n        this.#canvasPosition.y += scrollY\r\n    }\r\n\r\n    #isOnButton(event: MouseEvent): boolean {\r\n        if (!event)\r\n            return false\r\n\r\n        let trueX = event.clientX - this.#canvasPosition.x + scrollX,\r\n            trueY = event.clientY - this.#canvasPosition.y + scrollY\r\n\r\n        return trueX >= this.#position.x && trueX <= this.#position.x + this.#position.width\r\n               && trueY >= this.#position.y && trueY <= this.#position.y + this.#position.height\r\n    }\r\n}","export enum AnimationType {\r\n    MouseOver,\r\n\r\n    MouseLeave,\r\n\r\n    Init,\r\n\r\n    Click,\r\n\r\n    AnotherItemOver,\r\n\r\n    AnotherItemLeave\r\n}\r\n\r\nexport enum Attribute {\r\n    Name = 'name'\r\n}\r\n\r\nexport enum ChartType {\r\n    Plot,\r\n\r\n    Circular,\r\n\r\n    Gauge,\r\n\r\n    TreeMap\r\n}\r\n\r\nexport enum ErrorType {\r\n    NullContext = 'Can\\'t find context',\r\n\r\n    ElementNotExist = 'Element does not exist'\r\n}\r\n\r\nexport enum Events {\r\n    VisibilityChanged = 'visibilitychange',\r\n\r\n    Blur = 'blur',\r\n\r\n    MouseMove = 'mousemove',\r\n\r\n    Click = 'click',\r\n\r\n    Change = 'change',\r\n\r\n    ContextMenu = 'contextmenu'\r\n}\r\n\r\nexport enum LegendPlace {\r\n    Bottom,\r\n\r\n    Left,\r\n\r\n    Top,\r\n\r\n    Right\r\n}\r\n\r\nexport enum LineType {\r\n    Solid,\r\n\r\n    Dash,\r\n\r\n    Dotted\r\n}\r\n\r\nexport enum PlotAxisType {\r\n    Date = 1\r\n}\r\n\r\nexport enum PlotType {\r\n    Line,\r\n\r\n    AttentionLine,\r\n\r\n    Column,\r\n\r\n    Bar,\r\n\r\n    StackingColumn\r\n}\r\n\r\nexport enum Tag {\r\n    Canvas = 'canvas',\r\n\r\n    A = 'a',\r\n\r\n    Div = 'div',\r\n\r\n    Dialog = 'dialog',\r\n\r\n    Table = 'table',\r\n\r\n    Script = 'script'\r\n}\r\n\r\nexport enum RenderState {\r\n    Idle,\r\n\r\n    Init\r\n}\r\n\r\nexport enum Icon {\r\n    ThreeLines = '☰'\r\n}","import { Errors } from './helpers/Errors'\r\nimport { ErrorType, Tag } from './static/Enums'\r\n\r\nexport class Modal {\r\n    modal: HTMLDialogElement | undefined\r\n\r\n    #content: HTMLDivElement | undefined\r\n\r\n    constructor(content?: HTMLElement, size?: DOMRect) {\r\n        this.modal = document.createElement(Tag.Dialog)\r\n\r\n        this.modal.classList.add('o-modal')\r\n\r\n        if (size) {\r\n            this.modal.style.width = `${size.width}px`\r\n            this.modal.style.height = `${size.height}px`\r\n        }\r\n\r\n        this.modal.oncancel = () => this.close()\r\n\r\n        document.body.appendChild(this.modal)\r\n\r\n        this.#setHeader()\r\n\r\n        this.#setContent(content)\r\n    }\r\n\r\n    open() {\r\n        Errors.throwIsUndefined(this.modal, ErrorType.ElementNotExist)\r\n\r\n        this.modal!.showModal()\r\n    }\r\n\r\n    close() {\r\n        Errors.throwIsUndefined(this.modal, ErrorType.ElementNotExist)\r\n\r\n        this.modal!.close()\r\n\r\n        this.modal!.remove()\r\n\r\n        this.modal = undefined\r\n    }\r\n\r\n    #setHeader() {\r\n        Errors.throwIsUndefined(this.modal, ErrorType.ElementNotExist)\r\n\r\n        let closeButton = document.createElement('button')\r\n\r\n        closeButton.classList.add('o-modal-close')\r\n        closeButton.innerHTML = 'x'\r\n\r\n        this.modal!.appendChild(closeButton)\r\n\r\n        closeButton.onclick = () => this.close()\r\n    }\r\n\r\n    #setContent(content: HTMLElement | undefined) {\r\n        if (this.#content == undefined) {\r\n            this.#content = document.createElement(Tag.Div)\r\n\r\n            this.#content.classList.add('o-modal-content')\r\n\r\n            this.modal?.appendChild(this.#content)\r\n        }\r\n\r\n        if (content != undefined)\r\n            this.#content.appendChild(content)\r\n    }\r\n}","import { Value } from './base/Value'\r\nimport { PlotPoint } from './PlotPoint'\r\nimport { LineType, PlotType } from '../static/Enums'\r\n\r\nexport class PlotSeries extends Value {\r\n    values: PlotPoint[]\r\n\r\n    type: PlotType\r\n\r\n    width: number\r\n\r\n    lineType: LineType = LineType.Solid\r\n\r\n    constructor(obj: object) {\r\n        super()\r\n\r\n        Object.assign(this, obj)\r\n    }\r\n\r\n    toggle(transition: number) {\r\n        super.toggle(transition)\r\n    }\r\n\r\n    checkCondition(): boolean {\r\n        super.checkCondition()\r\n\r\n        return true\r\n    }\r\n\r\n    reset() {\r\n        super.reset()\r\n    }\r\n}","import { Value } from './types/base/Value'\r\nimport { Renderable } from './types/base/Renderable'\r\nimport { Helper } from './Helper'\r\nimport { Sector } from './types/Sector'\r\nimport { Point } from './types/Point'\r\nimport { Theme } from './Theme'\r\nimport { Chart } from './Chart'\r\nimport { TextStyles } from './helpers/TextStyles'\r\nimport { Canvas } from './helpers/Canvas'\r\nimport { Button } from './Button'\r\nimport { TextResources } from './static/TextResources'\r\nimport * as Constants from './static/constants/Index'\r\nimport { Styles } from './static/constants/Styles'\r\nimport { AnimationType, Events, LegendPlace, RenderState } from './static/Enums'\r\n\r\nexport class Legend extends Renderable {\r\n    #button: Button\r\n\r\n    #offset: Point\r\n\r\n    #chart: Chart\r\n\r\n    #hoverCount: number\r\n\r\n    isDestroy: boolean = false\r\n\r\n    constructor(chart: Chart) {\r\n        super(chart)\r\n\r\n        this.#chart = chart\r\n\r\n        this.calculateSizes()\r\n\r\n        if (!this.settings.disableInteractions)\r\n            this.#button = new Button(this.canvas,\r\n                {\r\n                    x: -10,\r\n                    y: 12,\r\n                    text: TextResources.reset,\r\n                    action: () => {\r\n                        for (let value of this.settings.data.values)\r\n                            value.reset()\r\n                    }\r\n                })\r\n\r\n        this.#offset = {\r\n            x: Legend.getOffsetToCenter(this.settings.data.values, this.canvas.width),\r\n            y: (this.canvas.height - Legend.getLegendHeight(this.settings.data.values, this.canvas.width)) / 2\r\n        }\r\n    }\r\n\r\n    render() {\r\n        super.render()\r\n\r\n        const ctx = Canvas.getContext(this.canvas)\r\n\r\n        let nextPoint = { x: 20, y: 21 }\r\n\r\n        this.canvas.style.cursor = Styles.Cursor.Default\r\n\r\n        TextStyles.regular(ctx)\r\n        ctx.textAlign = 'start'\r\n        ctx.textBaseline = 'alphabetic'\r\n\r\n        ctx.translate(this.#offset.x, this.#offset.y)\r\n\r\n        this.#hoverCount = 0\r\n\r\n        for (const value of this.settings.data.values.filter(v => !v.hideInLegend))\r\n            nextPoint = this.#draw(value, nextPoint.x, nextPoint.y)\r\n\r\n        ctx.translate(-this.#offset.x, -this.#offset.y)\r\n\r\n        if (!this.isDestroy)\r\n            requestAnimationFrame(this.render.bind(this))\r\n\r\n        this.onClickEvent = this.#button?.render(this.onMouseMoveEvent, this.onClickEvent)\r\n\r\n        this.state = RenderState.Idle\r\n    }\r\n\r\n    #draw(value: Value, x: number, y: number): Point {\r\n        const ctx = Canvas.getContext(this.canvas)\r\n\r\n        const textWidth = Helper.stringWidth(value.label),\r\n            circleRadius = 6\r\n\r\n        if (x + 48 + textWidth >= this.canvas.width - 40 - this.#offset.x) {\r\n            x = 20\r\n            y += 26\r\n        }\r\n\r\n        let rectX = x - circleRadius - circleRadius,\r\n            rectY = y - circleRadius / 2 - circleRadius,\r\n            rectW = circleRadius + circleRadius + textWidth + 18,\r\n            rectH = 20\r\n\r\n        const isHover = (event: MouseEvent | undefined) => {\r\n            if (!event)\r\n                return false\r\n\r\n            const px = event.clientX - this.canvasPosition.x + scrollX - this.#offset.x,\r\n                py = event.clientY - this.canvasPosition.y + scrollY - this.#offset.y\r\n\r\n            return px >= rectX && px <= rectX + rectW\r\n                   && py >= rectY && py <= rectY + rectH\r\n        }\r\n\r\n        const translate = (transition: number, event: AnimationType) => {\r\n            this.animations.reload(value.id, event)\r\n\r\n            ctx.beginPath()\r\n\r\n            ctx.roundRect(rectX, rectY, rectW, rectH, circleRadius)\r\n\r\n            ctx.fillStyle = Helper.adjustColor(Theme.canvasBackground, Math.round(-25 * transition))\r\n            ctx.fill()\r\n        }\r\n\r\n        this.animations.add(value.id,\r\n            AnimationType.Click,\r\n            {\r\n                duration: Constants.Animations.legend,\r\n                continuous: true,\r\n                before: () => {\r\n                    return this.onClickEvent != undefined\r\n                           && (isHover(this.onClickEvent)\r\n                               || (value instanceof Sector\r\n                                   && value.current !== 0\r\n                                   && value.value !== value.current))\r\n                           && value.checkCondition()\r\n                },\r\n                body: transition => {\r\n                    value.toggle(transition)\r\n\r\n                    if (transition == 1)\r\n                        this.onClickEvent = new PointerEvent(Events.Click)\r\n                }\r\n            })\r\n\r\n        if (isHover(this.onMouseMoveEvent)) {\r\n            this.animations.add(value.id,\r\n                AnimationType.MouseOver,\r\n                {\r\n                    duration: Constants.Animations.button,\r\n                    body: transition => {\r\n                        translate(transition, AnimationType.MouseLeave)\r\n                    }\r\n                })\r\n\r\n            if (!value.disabled) {\r\n                this.#hoverCount++\r\n\r\n                this.#chart.highlight(value)\r\n            }\r\n\r\n            this.canvas.style.cursor = Styles.Cursor.Pointer\r\n        } else {\r\n            this.animations.add(value.id,\r\n                AnimationType.MouseLeave,\r\n                {\r\n                    timer: Constants.Dates.minDate,\r\n                    duration: Constants.Animations.button,\r\n                    backward: true,\r\n                    body: transition => {\r\n                        translate(transition, AnimationType.MouseOver)\r\n                    }\r\n                })\r\n\r\n            if (this.#hoverCount == 0)\r\n                this.#chart.highlight()\r\n        }\r\n\r\n        ctx.beginPath()\r\n\r\n        ctx.arc(x - 1, y + 1, 3, 0, 2 * Math.PI)\r\n        ctx.fillStyle = value.disabled ? Helper.grayScale(value.color) : value.color\r\n        ctx.fill()\r\n\r\n        ctx.fillStyle = Theme.text\r\n        if (value.disabled)\r\n            ctx.fillStyle += '7f'\r\n\r\n        ctx.fillText(value.label, x + circleRadius * 1.5 + 1, y + 6)\r\n\r\n        x += 20\r\n\r\n        if (value.disabled) {\r\n            ctx.moveTo(x - 10, y + 2)\r\n            ctx.lineTo(x + textWidth - 10, y + 2)\r\n            ctx.strokeStyle = Theme.text + '7f'\r\n            ctx.stroke()\r\n        }\r\n\r\n        x += textWidth + 22\r\n\r\n        return {\r\n            x: x,\r\n            y: y\r\n        }\r\n    }\r\n\r\n    destroy() {\r\n        this.isDestroy = true\r\n\r\n        this.canvas.remove()\r\n    }\r\n\r\n    refresh() {\r\n        this.state = RenderState.Init\r\n    }\r\n\r\n    resize() {\r\n        this.calculateSizes()\r\n        this.#button?.resize()\r\n        this.initAnimations()\r\n    }\r\n\r\n    calculateSizes() {\r\n        switch (this.settings.legendPlace) {\r\n            case LegendPlace.Bottom:\r\n            default:\r\n                this.canvas.width = this.settings.width\r\n                this.canvas.height = Legend.getLegendHeight(this.settings.data.values, this.canvas.width)\r\n\r\n                this.node.style.flexDirection = Styles.FlexDirection.Column\r\n\r\n                break\r\n\r\n            case LegendPlace.Top:\r\n                this.canvas.width = this.settings.width\r\n                this.canvas.height = Legend.getLegendHeight(this.settings.data.values, this.canvas.width)\r\n\r\n                this.node.style.flexDirection = Styles.FlexDirection.ColumnReverse\r\n\r\n                break\r\n\r\n            case LegendPlace.Left:\r\n                this.canvas.width = 500\r\n                this.canvas.height = this.settings.height\r\n\r\n                this.node.style.flexDirection = Styles.FlexDirection.Row\r\n\r\n                break\r\n\r\n            case LegendPlace.Right:\r\n                this.canvas.width = 500\r\n                this.canvas.height = this.settings.height\r\n\r\n                this.node.style.flexDirection = Styles.FlexDirection.RowReverse\r\n\r\n                break\r\n        }\r\n    }\r\n\r\n    static getOffsetToCenter(values: Value[], width: number): number {\r\n        let maxWidth = 20\r\n\r\n        for (const value of values.filter(v => !v.hideInLegend)) {\r\n            const labelWidth = Helper.stringWidth(value.label)\r\n\r\n            if (maxWidth + labelWidth + 47 >= width - 100)\r\n                break\r\n\r\n            maxWidth += labelWidth + 47\r\n        }\r\n\r\n        return width / 2 - maxWidth / 2\r\n    }\r\n\r\n    static getLegendHeight(values: Value[], width: number): number {\r\n        let count = 1,\r\n            acc = 20,\r\n            offset = Legend.getOffsetToCenter(values, width)\r\n\r\n        for (const value of values.filter(v => !v.hideInLegend)) {\r\n            const labelWidth = Helper.stringWidth(value.label)\r\n\r\n            if (acc + labelWidth + 48 >= width - 32 - offset) {\r\n                acc = 20\r\n                count++\r\n            }\r\n\r\n            acc += labelWidth + 48\r\n        }\r\n\r\n        return 24 + count * 20 + (count - 1) * 6\r\n    }\r\n}","export class Values {\r\n    static readonly titleOffset = 30\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","Number.prototype.isAnyEquals = function (...values) {\r\n    return values.includes(<number>this)\r\n}\r\n\r\nDate.prototype.addDays = function (days: number) {\r\n    let result = new Date(this)\r\n    result.setDate(result.getDate() + days)\r\n    return result\r\n}\r\n\r\nDate.prototype.addMilliseconds = function (milliseconds: number) {\r\n    let result = new Date(this)\r\n    result.setMilliseconds(result.getMilliseconds() + milliseconds)\r\n    return result\r\n}\r\n\r\nMap.prototype.trySet = function (key: any, value: any) {\r\n    if (!this.has(key))\r\n        this.set(key, value)\r\n}","import { Chart } from './Chart'\r\nimport { ChartSettings } from './types/ChartSettings'\r\n\r\nfunction OCharts() {\r\n}\r\n\r\nOCharts.chart = function(context: HTMLElement, settings: ChartSettings) {\r\n    return new Chart(context, settings)\r\n}\r\n\r\n// @ts-ignore\r\nwindow.OCharts = OCharts"],"names":["Animations","constructor","this","Map","add","id","type","value","key","has","set","contains","reload","get","timer","Date","clear","forEach","_value","AnimationType","Init","delete","initializeTransitions","i","t","x","Math","pow","y","transitionCurve","toFixed","getTransition","item","stamp","passed","getTime","transition","duration","before","body","backward","continuous","endsWith","Helper","adjustColor","color","amount","replace","min","max","parseInt","toString","slice","grayScale","Array","join","round","reduce","a","v","padStart","randomColor","floor","random","stringWidth","str","font","widths","from","acc","cur","charCodeAt","guid","S4","substring","toLowerCase","hexToRgb","hex","length","exec","r","g","b","Color","isColorVisible","background","foreground","backgroundAsRgb","foregroundAsRgb","isISOString","test","applyAlpha","opacity","result","componentToHex","c","rgb","bg","Theme","canvasBackground","alpha","text","Errors","error","Error","throwIsUndefined","object","undefined","throw","context","settings","node","enableLegend","Legend","document","addEventListener","Events","VisibilityChanged","resetMouse","window","Blur","Click","event","target","canvas","closeDropdowns","render","ResizeObserver","destroy","observe","disconnect","highlight","reset","enableTooltip","disableInteractions","ChartType","Plot","PlotRenderer","Circular","CircularRenderer","Gauge","GaugeRenderer","TreeMap","TreeRenderer","prepareSettings","initDropdown","initAnimations","resize","refresh","initialize","isDarkThemeFunction","style","display","Styles","Display","Flex","flexDirection","FlexDirection","Column","alignItems","AlignItems","Center","justifyContent","JustifyContent","height","circular","legend","tree","tooltip","button","Sector","Value","obj","super","Object","assign","toggle","disabled","current","checkCondition","TextResources","exportPNG","decomposeToTable","exportCSV","menu","allDataIsHidden","other","incorrectValues","ThousandShort","MillionShort","BillionShort","Show","NoLabel","getContext","willReadFrequently","ErrorType","NullContext","isPixelBusy","pixel","canvasBackgroundInt","data","templateId","getElementById","condition","lines","opacityValue","getBoundingClientRect","scrollX","scrollY","ctx","Canvas","textWidth","map","line","clientX","clientY","width","beginPath","roundRect","baseOpacity","strokeStyle","dropdownBorder","lineWidth","fillStyle","stroke","fill","offset","arc","PI","TextStyles","fillText","padding","updateVisibility","visibility","Visibility","Visible","regex","content","cloneNode","createElement","Tag","Div","innerHTML","position","Position","Absolute","pointerEvents","PointerEvents","None","setAttribute","Attribute","Name","matches","matchAll","html","match","property","replaceAll","appendChild","Hidden","left","top","tooltips","querySelectorAll","Constants","ThemeOptions","colors","backgrounds","lineAxes","lineActives","dropdownBorders","canvasBackgrounds","getRows","headers","values","series","seriesValues","push","xType","PlotAxisType","Formatter","date","name","label","unique","Set","uniqueHeaders","filter","sort","Cursor","Default","Pointer","ColumnReverse","Row","RowReverse","ImageRendering","Pixelated","options","isActive","icon","animations","moveEvent","clickEvent","translate","cursor","MouseOver","MouseLeave","Dates","minDate","regular","iconOffset","navigator","platform","console","log","borderRadius","items","dividers","maxWidth","dropdownOpacity","itemOpacityDec","itemBackground","dropdownItemHoverColor","borderColor","rect","setLineDash","isDivider","moveTo","lineTo","animationKey","isReturn","action","textAlign","textBaseline","close","w","h","trueX","trueY","callback","isDark","function","matchMedia","setTheme","Change","index","currentTheme","lineAxis","lineActive","Number","Renderer","chart","enableOther","contextMenu","_other","Modal","Decomposition","toChart","innerWidth","innerHeight","open","onMouseMoveEvent","MouseEvent","MouseMove","state","RenderState","Idle","renderDropdown","renderContextMenu","find","onContextMenuEvent","dropdown","innerRadius","warn","splice","sum","Dropdown","Icon","ThreeLines","Export","asPng","title","asCsv","toTable","CircularData","anglesSum","flatMap","sector","angle","reverse","TooltipValue","number","isDestroy","requestAnimationFrame","bind","piece","isNaN","isSingle","s","onClickEvent","includes","PointerEvent","direction","cos","sin","lineJoin","lineCap","indexOf","centerOfSector","minSize","rest","scale","swap","point2","save","labelStartPoint","labelMidPoint","dir","endPoint","isBusy","imageDataX","imageData","Uint32Array","getImageData","buffer","quadraticCurveTo","circularLabel","restore","localAccumulator","localAngle","currentAngle","tangentIntersectionAngle","lengthToTangentIntersection","tangentIntersectionPoint","innerPoint2","changeColor","anyHighlight","highlightItems","AnotherItemOver","AnotherItemLeave","closePath","resetTransform","radius","isWithinRadius","point","getMousePosition","inner","outer","atan2","abs","findIndex","o","sumBefore","isAngle","innerTitle","titleOffset","Values","shortSide","longestLabel","large","Renderable","disableInitAnimation","renderTitle","remove","domRect","parentElement","minWidth","minHeight","baseColor","adjustStep","adjustAmount","dispatchEvent","CustomEvent","detail","clone","canvasPosition","isClick","legendPlace","LegendPlace","Top","Bottom","getLegendHeight","Left","Right","PlotSeries","PlotType","Bar","right","bottom","Tooltip","tooltipLines","axisLineHoverColor","yValue","yHeight","columnWidth","seriesToRender","columnsIndex","columnsCount","barsIndex","barsCount","stackingAccumulator","lineType","LineType","Dash","Dotted","Solid","xIndex","yIndex","getTooltipValue","step","Line","unit","pointDuration","now","addMilliseconds","next","prevValue","endPointX","endPointY","mouse","AttentionLine","yMax","minStep","seriesHeight","fillRect","StackingColumn","ceil","it","PlotData","skip","simple","clearRect","drawImage","isContainsBar","xTitle","yTitle","rotate","xYPos","xCounter","trySet","isFinite","count","maxLabelWidth","maxCount","renderStep","axisLabelOffset","yCount","yCounter","yStep","labelY","labelYAsKey","postfix","shortLabels","countOfTens","isBar","createImageBitmap","then","res","putImageData","axisLineColor","isAnyEquals","xValues","p","yValues","isDate","tempDate","addDays","yMin","stackingColumns","yMaxWidth","isRight","imageRendering","append","onmousemove","onclick","oncontextmenu","preventDefault","onmouseleave","maxHeight","tooltipCell","contextMenuData","totalSquare","minX","minY","isVertical","remainWidth","remainHeight","cells","isLast","j","h1","w1","cell","cellInit","cellIndex","getPrev","E","initAnimationDuration","center","gap","TreeData","table","Table","classList","totals","rows","valuesMap","tableValue","allColumns","header","tableHeader","columns","vKey","vValue","totalValue","totalColumns","container","div","script","Script","flexGrow","cloneSettings","JSON","parse","stringify","getPoint","point1","point3","outerRadius","longSide","leftEmpty","rightEmpty","destinationCanvas","destCtx","saveAs","toDataURL","csv","row","cols","encodeURIComponent","dataURL","href","isText","showSaveFilePicker","suggestedName","types","accept","excludeAcceptAllOption","toBlob","dataURI","byteString","atob","split","mimeString","ArrayBuffer","imageArray","Uint8Array","Blob","fileHandle","createWritable","writableStream","write","download","A","click","toLocaleString","minimumFractionDigits","maximumFractionDigits","toLocaleDateString","size","modal","Dialog","oncancel","ElementNotExist","showModal","closeButton","calculateSizes","Button","getOffsetToCenter","nextPoint","hideInLegend","labelWidth","rectX","rectY","circleRadius","rectW","isHover","px","py","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","prototype","days","setDate","getDate","milliseconds","setMilliseconds","getMilliseconds","OCharts","Chart"],"sourceRoot":""}