{"version":3,"file":"ocharts.js","mappings":"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","sources":["webpack://charts/./src/Animations.ts","webpack://charts/./src/Helper.ts","webpack://charts/./src/types/TooltipValue.ts","webpack://charts/./src/helpers/Errors.ts","webpack://charts/./src/Chart.ts","webpack://charts/./src/types/Color.ts","webpack://charts/./src/static/constants/Animations.ts","webpack://charts/./src/types/Sector.ts","webpack://charts/./src/static/TextResources.ts","webpack://charts/./src/helpers/Canvas.ts","webpack://charts/./src/Tooltip.ts","webpack://charts/./src/static/ThemeOptions.ts","webpack://charts/./src/types/DrawPoint.ts","webpack://charts/./src/types/data/PlotData.ts","webpack://charts/./src/static/constants/Styles.ts","webpack://charts/./src/Dropdown.ts","webpack://charts/./src/Theme.ts","webpack://charts/./src/render/CircularRenderer.ts","webpack://charts/./src/types/base/Renderer.ts","webpack://charts/./src/types/data/TreeData.ts","webpack://charts/./src/types/data/CircularData.ts","webpack://charts/./src/types/base/Value.ts","webpack://charts/./src/render/PlotRenderer.ts","webpack://charts/./src/static/constants/Dates.ts","webpack://charts/./src/helpers/TextStyles.ts","webpack://charts/./src/types/base/Renderable.ts","webpack://charts/./src/render/TreeRenderer.ts","webpack://charts/./src/Decomposition.ts","webpack://charts/./src/static/constants/Index.ts","webpack://charts/./src/render/GaugeRenderer.ts","webpack://charts/./src/Export.ts","webpack://charts/./src/helpers/Formatter.ts","webpack://charts/./src/Button.ts","webpack://charts/./src/static/Enums.ts","webpack://charts/./src/Modal.ts","webpack://charts/./src/types/PlotSeries.ts","webpack://charts/./src/Legend.ts","webpack://charts/./src/static/constants/Values.ts","webpack://charts/webpack/bootstrap","webpack://charts/./src/Prototypes.ts","webpack://charts/./src/OCharts.ts"],"sourcesContent":["import { AnimationItem } from 'types/AnimationItem'\nimport { AnimationType } from 'static/Enums'\nimport * as Constants from 'static/constants/Index'\n\nexport class Animations {\n    #queue: Map<string, AnimationItem>\n\n    static transitionCurve: Map<number, number> = new Map()\n\n    constructor() {\n        this.#queue = new Map()\n    }\n\n    handle(id: string, type: AnimationType, value: AnimationItem) {\n        const key = this.#getKey(id, type)\n        if (!this.#queue.has(key))\n            this.#queue.set(key, value)\n\n        this.#process(key)\n    }\n\n    contains(id: string, type: AnimationType): boolean {\n        return this.#queue.has(this.#getKey(id, type))\n    }\n\n    reload(id: string, type: AnimationType) {\n        if (this.contains(id, type)) {\n            let item = <AnimationItem>this.#queue.get(this.#getKey(id, type))\n\n            item.timer = new Date()\n        }\n    }\n\n    clear() {\n        this.#queue.forEach((_value, key) => !this.#is(key, AnimationType.Init) && this.#queue.delete(key))\n    }\n\n    reverse(id: string, type: AnimationType) {\n        if (this.contains(id, type)) {\n            let item = <AnimationItem>this.#queue.get(this.#getKey(id, type)),\n                stamp = new Date(),\n                passed = stamp.getTime() - (item.timer ?? stamp).getTime()\n\n            let reversedPassed = passed > item.duration ? 1 : item.duration - passed\n\n            item.timer = new Date(new Date().getTime() - reversedPassed)\n            item.backward = !item.backward\n        }\n    }\n\n    isBackward(id: string, type: AnimationType) {\n        return (this.#queue.get(this.#getKey(id, type)) as AnimationItem)?.backward ?? false\n    }\n\n    isEnd(id: string, type: AnimationType) {\n        let item = <AnimationItem>this.#queue.get(this.#getKey(id, type)),\n            stamp = new Date(),\n            passed = stamp.getTime() - (item.timer ?? stamp).getTime()\n\n        return passed >= item.duration\n    }\n\n    end(id: string, type: AnimationType) {\n        let item = <AnimationItem>this.#queue.get(this.#getKey(id, type))\n\n        if (item)\n            item.timer = Constants.Dates.minDate\n    }\n\n    #process(key: string) {\n        const item = <AnimationItem>this.#queue.get(key),\n            stamp = new Date(),\n            passed = stamp.getTime() - (item.timer ?? stamp).getTime(),\n            transition = Animations.getTransition(passed > item.duration ? 1 : passed / item.duration),\n            before = item.before ? item.before() : true\n\n        if (!item.timer && before)\n            item.timer = stamp\n\n        if (before)\n            item.body(item.backward ? 1 - transition : transition)\n\n        if (transition == 1 && (!before || item.continuous))\n            this.#queue.delete(key)\n    }\n\n    #getKey(id: string, type: number) {\n        return id + '_' + type\n    }\n\n    #is(key: string, type: number) {\n        return key.endsWith('_' + type)\n    }\n\n    static initializeTransitions() {\n        const valuesCount = 30000,\n            offset = .23,\n            p0 = { x: 0, y: 0 },\n            p1 = { x: 1 - offset, y: offset },\n            p2 = { x: offset, y: 1 - offset },\n            p3 = { x: 1, y: 1 }\n\n        for (let i = 0; i < valuesCount; i++) {\n            const t = (i + 1) / valuesCount\n\n            let x = Math.pow(1 - t, 3) * p0.x\n                    + 3 * Math.pow(1 - t, 2) * p1.x * t\n                    + 3 * (1 - t) * Math.pow(t, 2) * p2.x\n                    + Math.pow(t, 3) * p3.x,\n                y = Math.pow(1 - t, 3) * p0.y\n                    + 3 * Math.pow(1 - t, 2) * p1.y * t\n                    + 3 * (1 - t) * Math.pow(t, 2) * p2.y\n                    + Math.pow(t, 3) * p3.y\n\n            Animations.transitionCurve.set(+x.toFixed(4), y)\n        }\n\n        Animations.transitionCurve.set(0, 0)\n    }\n\n    static getTransition(value: number): number {\n        return Animations.transitionCurve.get(+value.toFixed(4)) ?? 0\n    }\n}","import { Color } from 'types/Color'\nimport { Theme } from 'Theme'\n\nexport function adjustColor(color: string, amount: number) {\n    return '#' + color.replace(/^#/, '').replace(/../g, color => ('0' + Math.min(255, Math.max(0, parseInt(color, 16) + amount)).toString(16)).slice(-2))\n}\n\nexport function grayScale(color: string) {\n    return '#' + Array(4).join(Math.round([.3, .59, .11].reduce((a, v, i) => a + v * parseInt(color[2 * i + 1] + color[2 * i + 2], 16), 0) / 3).toString(16).padStart(2, '0'))\n}\n\nexport function randomColor() {\n    let letters = '0123456789ABCDEF',\n        color = '#'\n    for (let i = 0; i < 6; i++)\n        color += letters[Math.floor(Math.random() * 16)]\n\n    return color\n}\n\nexport function stringWidth(str: any | undefined, font?: number) {\n    if (!str)\n        return 0\n\n    const widths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.559375, 0.2765625, 0.3546875, 0.5546875, 0.5546875, 0.8890625, 0.665625, 0.190625, 0.3328125, 0.3328125, 0.3890625, 0.5828125, 0.2765625, 0.3328125, 0.2765625, 0.3015625, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.2765625, 0.2765625, 0.584375, 0.5828125, 0.584375, 0.5546875, 1.0140625, 0.665625, 0.665625, 0.721875, 0.721875, 0.665625, 0.609375, 0.7765625, 0.721875, 0.2765625, 0.5, 0.665625, 0.5546875, 0.8328125, 0.721875, 0.7765625, 0.665625, 0.7765625, 0.721875, 0.665625, 0.609375, 0.721875, 0.665625, 0.94375, 0.665625, 0.665625, 0.609375, 0.2765625, 0.3546875, 0.2765625, 0.4765625, 0.5546875, 0.3328125, 0.5546875, 0.5546875, 0.5, 0.5546875, 0.5546875, 0.2765625, 0.5546875, 0.5546875, 0.221875, 0.240625, 0.5, 0.221875, 0.8328125, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.3328125, 0.5, 0.2765625, 0.5546875, 0.5, 0.721875, 0.5, 0.5, 0.5, 0.3546875, 0.259375, 0.353125, 0.5890625],\n        avg = 0.5279276315789471\n\n    return Array.from(String(str)).reduce((acc, cur) => acc + (widths[cur.charCodeAt(0)] ?? avg), 0) * (font || 14)\n}\n\nexport function guid() {\n    const S4 = () => (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1)\n    return (S4() + S4() + '-' + S4() + '-4' + S4().slice(0, 3) + '-' + S4() + '-' + S4() + S4() + S4()).toLowerCase()\n}\n\nexport function isColorVisible(background: string, foreground: string) {\n    const backgroundAsRgb = hexToRgb(background),\n        foregroundAsRgb = hexToRgb(foreground),\n        value = .77\n\n    return (backgroundAsRgb.r + backgroundAsRgb.g + backgroundAsRgb.b) / (foregroundAsRgb.r + foregroundAsRgb.g + foregroundAsRgb.b) < value\n}\n\nexport function hexToRgb(hex: string): Color {\n    if (hex.length > 4) {\n        const value = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n        if (value)\n            return {\n                r: parseInt(value[1], 16),\n                g: parseInt(value[2], 16),\n                b: parseInt(value[3], 16)\n            }\n    } else {\n        const value = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i.exec(hex)\n        if (value)\n            return {\n                r: parseInt(value[1] + value[1], 16),\n                g: parseInt(value[2] + value[2], 16),\n                b: parseInt(value[3] + value[3], 16)\n            }\n    }\n\n    return new Color()\n}\n\nexport function isISOString(str: string) {\n    return /\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+/.test(str)\n}\n\nexport function applyAlpha(color: string, opacity: number) {\n    function hexToRgb(hex: string) {\n        let result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n        return result\n               ? {\n                   r: parseInt(result[1], 16),\n                   g: parseInt(result[2], 16),\n                   b: parseInt(result[3], 16)\n               } as Color\n               : {\n                   r: 0,\n                   g: 0,\n                   b: 0\n               } as Color\n    }\n\n    function componentToHex(c: number) {\n        let hex = c.toString(16)\n        return hex.length == 1 ? '0' + hex : hex\n    }\n\n    function rgbToHex(r: number, g: number, b: number) {\n        return '#' + componentToHex(r) + componentToHex(g) + componentToHex(b)\n    }\n\n    const rgb = hexToRgb(color),\n        bg = hexToRgb(Theme.canvasBackground)\n\n    opacity /= 255\n\n    const alpha = 1 - opacity\n\n    return rgbToHex(\n        Math.round((opacity * (rgb.r / 255) + (alpha * (bg.r / 255))) * 255),\n        Math.round((opacity * (rgb.g / 255) + (alpha * (bg.g / 255))) * 255),\n        Math.round((opacity * (rgb.b / 255) + (alpha * (bg.b / 255))) * 255)\n    )\n}","export class TooltipValue {\n    text: string | undefined\n\n    color: string | undefined\n\n    constructor(text?: string, color?: string) {\n        this.text = text\n        this.color = color\n    }\n}","import { ErrorType } from 'static/Enums'\n\nexport abstract class Errors {\n    static throw(error: ErrorType): never {\n        throw new Error(error)\n    }\n\n    static throwIsUndefined(object: any, error: ErrorType) {\n        if (object == undefined)\n            Errors.throw(error)\n    }\n}","import { ChartSettings } from 'types/ChartSettings'\nimport { Renderer } from 'types/base/Renderer'\nimport { Data } from 'types/interfaces/Data'\nimport { Legend } from 'Legend'\nimport { Value } from 'types/base/Value'\nimport { PlotRenderer } from 'render/PlotRenderer'\nimport { GaugeRenderer } from 'render/GaugeRenderer'\nimport { TreeRenderer } from 'render/TreeRenderer'\nimport { Animations } from 'Animations'\nimport { Theme } from 'Theme'\nimport { Styles } from 'static/constants/Styles'\nimport { ChartType, Events } from 'static/Enums'\nimport { CircularRenderer } from 'render/CircularRenderer'\n\nexport class Chart {\n    node: HTMLElement\n\n    settings: ChartSettings\n\n    #renderer: Renderer<Data>\n\n    #legend: Legend | undefined\n\n    #observer: ResizeObserver\n\n    #currentType: ChartType\n\n    constructor(context: HTMLElement, settings: ChartSettings) {\n        this.node = context\n\n        this.applySettings(settings)\n\n        this.#applyStyles()\n\n        document.addEventListener(Events.VisibilityChanged, () => this.#renderer.resetMouse())\n        window.addEventListener(Events.Blur, () => this.#renderer.resetMouse())\n\n        window.addEventListener(Events.Click, event => {\n            if (event.target != this.#renderer.canvas)\n                this.#renderer.closeDropdowns()\n        })\n    }\n\n    render() {\n        this.#renderer.render()\n        this.#legend?.render()\n\n        this.#initializeObserver()\n\n        this.#refresh()\n    }\n\n    destroy() {\n        this.#renderer.destroy()\n        this.#legend?.destroy()\n\n        this.#observer.disconnect()\n    }\n\n    highlight(value?: Value) {\n        this.#renderer.highlight(value)\n    }\n\n    reset() {\n        Theme.reset()\n\n        this.#initialize(this.settings)\n    }\n\n    applySettings(settings: ChartSettings) {\n        this.settings = settings\n\n        this.reset()\n\n        const isNeedRestartRender = this.settings.type != this.#currentType\n\n        this.#prepareSettings()\n\n        if (this.settings.enableLegend && this.#legend != undefined)\n            this.#legend.applySettings(settings)\n\n        if (this.settings.enableLegend && this.#legend == undefined) {\n            this.#legend = new Legend(this)\n\n            this.#legend.render()\n        }\n\n        if (!this.settings.enableLegend && this.#legend != undefined) {\n            this.#legend.destroy()\n\n            this.#legend = undefined\n        }\n\n        if (isNeedRestartRender)\n            this.#renderer.render()\n\n        this.#initializeObserver()\n    }\n\n    #prepareSettings() {\n        this.settings.enableTooltip = !this.settings.disableInteractions && this.settings.enableTooltip\n\n        if (this.#renderer == undefined || this.settings.type != this.#currentType) {\n            this.#renderer?.destroy()\n\n            switch (this.settings.type) {\n                case ChartType.Plot:\n                    this.#renderer = new PlotRenderer(this)\n                    this.#currentType = ChartType.Plot\n                    break\n\n                case ChartType.Circular:\n                    this.#renderer = new CircularRenderer(this)\n                    this.#currentType = ChartType.Circular\n                    break\n\n                case ChartType.Gauge:\n                    this.#renderer = new GaugeRenderer(this)\n                    this.#currentType = ChartType.Gauge\n                    break\n\n                case ChartType.TreeMap:\n                    this.#renderer = new TreeRenderer(this)\n                    this.#currentType = ChartType.TreeMap\n                    break\n            }\n        } else {\n            this.#renderer.applySettings(this.settings)\n        }\n\n        this.#renderer.prepareSettings()\n\n        if (!this.settings.disableInteractions) {\n            this.#renderer.initDropdown()\n            this.#renderer.initAnimations()\n        }\n\n        this.#renderer.resize()\n    }\n\n    #refresh() {\n        this.#renderer.refresh()\n        this.#legend?.refresh()\n    }\n\n    #resize() {\n        this.#renderer.resize()\n        this.#legend?.resize()\n    }\n\n    #initialize(settings: ChartSettings) {\n        Theme.initialize(\n            () => this.#resize(),\n            settings.isDarkThemeFunction\n        )\n        Animations.initializeTransitions()\n    }\n\n    #applyStyles() {\n        this.node.style.display = Styles.Display.Flex\n        this.node.style.flexDirection = Styles.FlexDirection.Column\n        this.node.style.alignItems = Styles.AlignItems.Center\n        this.node.style.justifyContent = Styles.JustifyContent.Center\n        this.node.style.height = '100%'\n    }\n\n    #initializeObserver() {\n        if (this.#observer != undefined)\n            return\n\n        this.#observer = new ResizeObserver(() => {\n            if (this.#renderer.canvas)\n                this.#resize()\n            else\n                this.destroy()\n        })\n        this.#observer.observe(this.node)\n    }\n}","export class Color {\n    r: number\n\n    g: number\n\n    b: number\n}","export class Animations {\n    static circular = 335\n\n    static legend = 500\n\n    static tree = 250\n\n    static tooltip = 120\n\n    static button = 200\n}","import { Value } from 'types/base/Value'\nimport { Point } from 'types/Point'\nimport { DrawPoint } from 'types/DrawPoint'\nimport { AnimationType } from '../static/Enums'\nimport { LineStyles } from './LineStyles'\n\nexport class Sector extends Value {\n    canRenderLabel: boolean\n\n    isMouseInside: boolean\n\n    current: number\n\n    transition: number\n\n    innerRadius: number\n\n    /**\n     * Angle in radians\n     */\n    direction: number\n\n    lineStyles: LineStyles | undefined\n\n    translate: Point\n\n    state: AnimationType\n\n    points: DrawPoint[]\n\n    labelPoints: DrawPoint[]\n\n    constructor(obj: object) {\n        super()\n\n        Object.assign(this, obj)\n\n        this.baseColor = this.color\n        this.canRenderLabel = false\n        this.isMouseInside = false\n    }\n\n    toggle(transition: number) {\n        super.toggle(transition)\n\n        if (this.disabled)\n            this.current = this.value * (1 - transition)\n        else\n            this.current = this.value * transition\n    }\n\n    checkCondition(): boolean {\n        super.checkCondition()\n\n        return (this.current == 0 && !this.disabled) || this.value != 0\n    }\n\n    reset() {\n        super.reset()\n\n        this.current = this.value\n    }\n}","export class TextResources {\n    static exportPNG = 'Save as image...'\n\n    static decomposeToTable = 'Show as table...'\n\n    static reset = 'Reset'\n\n    static exportCSV = 'Save as table...'\n\n    static menu = 'Menu'\n\n    static allDataIsHidden = 'All data is hidden'\n\n    static other = 'Other'\n\n    static thousandShort = 'K'\n\n    static millionShort = 'M'\n\n    static billionShort = 'B'\n\n    static show = 'Show...'\n\n    static noLabel = 'No Label'\n\n    static treeMapIsEmpty = 'Tree Map is empty'\n}","import { Errors } from 'helpers/Errors'\nimport { ErrorType } from 'static/Enums'\nimport { Theme } from 'Theme'\n\nexport abstract class Canvas {\n    static getContext(canvas: HTMLCanvasElement): CanvasRenderingContext2D {\n        return canvas.getContext('2d', { willReadFrequently: true })\n               ?? Errors.throw(ErrorType.NullContext)\n    }\n\n    static isPixelBusy(pixel: number) {\n        return pixel != undefined && pixel - Theme.canvasBackgroundInt != 0\n    }\n}","import { Value } from 'types/base/Value'\nimport { Theme } from 'Theme'\nimport { TextStyles } from 'helpers/TextStyles'\nimport * as Helper from 'Helper'\nimport { ChartSettings } from 'types/ChartSettings'\nimport { TooltipValue } from 'types/TooltipValue'\nimport { Data } from 'types/interfaces/Data'\nimport { Canvas } from 'helpers/Canvas'\nimport * as Constants from 'static/constants/Index'\nimport { Styles } from 'static/constants/Styles'\nimport { HTMLTooltipElement } from 'types/extends/HTMLTooltipElement'\nimport { Attribute, Tag } from 'static/Enums'\n\nexport class Tooltip {\n    canvas: HTMLCanvasElement\n\n    data: Data\n\n    readonly #enabled: boolean\n\n    readonly #isCustom: boolean\n\n    #canvasPosition: DOMRect\n\n    #template: HTMLTemplateElement\n\n    #inProgress: boolean\n\n    #toHide: boolean\n\n    #timer: Date | undefined\n\n    #lines: TooltipValue[]\n\n    constructor(canvas: HTMLCanvasElement, settings: ChartSettings) {\n        this.canvas = canvas\n        this.data = settings.data\n        this.#enabled = settings.enableTooltip\n        this.#isCustom = !!settings.templateId\n\n        if (this.#isCustom)\n            this.#template = <HTMLTemplateElement>document.getElementById(settings.templateId)\n\n        this.refresh()\n    }\n\n    render(condition: boolean, event: MouseEvent, lines: TooltipValue[], value?: Value) {\n        this.#hideAll()\n\n        if (!this.#enabled || !event)\n            return\n\n        if (condition || this.#inProgress || this.#toHide) {\n            if (condition)\n                this.#lines = lines\n\n            if (!this.#timer)\n                this.#timer = new Date()\n\n            if (!this.#toHide)\n                this.#inProgress = true\n            else if (this.#inProgress)\n                this.#timer = new Date()\n\n            if (this.#isCustom)\n                this.#renderCustom(event, value)\n            else\n                this.#renderRegular(event)\n\n            const opacityValue = this.#getOpacityValue()\n\n            if (this.#toHide && opacityValue >= 1) {\n                this.#inProgress = false\n                this.#toHide = false\n            }\n\n            if (this.#toHide && opacityValue <= 0) {\n                this.#inProgress = false\n                this.#toHide = false\n                this.#timer = undefined\n            }\n\n            if (!condition && this.#timer != undefined)\n                this.#toHide = true\n        } else {\n            this.#timer = undefined\n        }\n    }\n\n    #renderRegular(event: MouseEvent) {\n        const ctx = Canvas.getContext(this.canvas)\n\n        const textWidth = Math.max(...this.#lines.map(line => Helper.stringWidth(line.text ?? '') + (line.color ? 8 : 0)))\n\n        const padding = 6,\n            borderRadius = 6\n\n        let x = event.clientX - this.#canvasPosition.x + 10,\n            y = event.clientY - this.#canvasPosition.y + scrollY + 10\n\n        if (x + textWidth + 25 > this.#canvasPosition.width)\n            x = this.#canvasPosition.width - (textWidth + 25)\n\n        if (y + 15 + this.#lines.length * 18 > this.#canvasPosition.height)\n            y = this.#canvasPosition.height - 15 - this.#lines.length * 18\n\n        ctx.beginPath()\n        ctx.roundRect(x, y, textWidth + 24, 16 + 16 * this.#lines.length, borderRadius)\n        let opacity = Math.round(this.#getOpacityValue() * 255).toString(16),\n            baseOpacity = Math.round(this.#getOpacityValue() * 207).toString(16)\n        if (opacity.length == 1)\n            opacity = '0' + opacity\n        if (baseOpacity.length == 1)\n            baseOpacity = '0' + baseOpacity\n\n        ctx.strokeStyle = Theme.dropdownBorder + baseOpacity\n        ctx.lineWidth = 1\n        ctx.fillStyle = Theme.background + baseOpacity\n        ctx.stroke()\n        ctx.fill()\n\n        for (let line of this.#lines) {\n            let offset = 0\n\n            if (line.color) {\n                offset = 12\n\n                ctx.beginPath()\n                ctx.fillStyle = line.color + opacity\n                ctx.arc(x + 16, y + 17, 5, 0, Math.PI * 2)\n                ctx.fill()\n            }\n\n            TextStyles.tooltip(ctx)\n            ctx.fillStyle = Theme.text + opacity\n            ctx.fillText(line.text ?? '', x + offset + padding * 2, y + 21)\n\n            y += 16\n        }\n    }\n\n    #renderCustom(event: MouseEvent, value?: Value) {\n        if (value == undefined)\n            return\n\n        const id = this.#template.id + value.id\n\n        let tooltip = <HTMLTooltipElement>document.getElementById(id)\n\n        const updateVisibility = () => {\n            this.#hideAll()\n\n            tooltip.style.visibility = Styles.Visibility.Visible\n        }\n\n        if (!tooltip) {\n            const regex = /\\${[^}]*}/gm\n\n            let content = <HTMLElement>this.#template.cloneNode(true)\n\n            tooltip = document.createElement(Tag.Div) as HTMLTooltipElement\n\n            tooltip.innerHTML = content.innerHTML\n\n            tooltip.id = id\n            tooltip.style.position = Styles.Position.Absolute\n            tooltip.style.pointerEvents = Styles.PointerEvents.None\n            tooltip.style.visibility = Styles.Visibility.Visible\n\n            tooltip.setAttribute(Attribute.Name, this.#template.id)\n\n            const matches = [...tooltip.innerHTML.matchAll(regex)]\n\n            let html = tooltip.innerHTML\n\n            for (const match of matches) {\n                const property = match[0].replace('${', '')\n                                         .replace('}', '')\n                                         .replaceAll(' ', '')\n\n                html = html.replaceAll(match[0], value.data[property])\n            }\n\n            tooltip.innerHTML = html\n\n            document.body.appendChild(tooltip)\n\n            tooltip.position = tooltip.getBoundingClientRect()\n\n            updateVisibility()\n        }\n\n        if (tooltip.style.visibility == Styles.Visibility.Hidden)\n            updateVisibility()\n\n        if (tooltip.position.height == 0)\n            tooltip.position = tooltip.getBoundingClientRect()\n\n        const offset = 10\n\n        let opacity = '1'\n\n        let x = event.clientX,\n            y = event.clientY + scrollY\n\n        if (x + tooltip.position.width - this.#canvasPosition.x > this.#canvasPosition.width - offset) {\n            x = this.#canvasPosition.width - tooltip.position.width + this.#canvasPosition.x - offset\n            opacity = '.67'\n        }\n\n        if (y + tooltip.position.height - this.#canvasPosition.y > this.#canvasPosition.height - offset) {\n            y = this.#canvasPosition.height - tooltip.position.height + this.#canvasPosition.y - offset\n            opacity = '.67'\n        }\n\n        if (x == 0 && y == 0)\n            opacity = '0'\n\n        tooltip.style.left = x + offset + 'px'\n        tooltip.style.top = y + offset + 'px'\n        tooltip.style.opacity = opacity\n    }\n\n    refresh() {\n        this.#canvasPosition = this.canvas.getBoundingClientRect()\n        this.#canvasPosition.x += scrollX\n        this.#canvasPosition.y += scrollY\n    }\n\n    #hideAll() {\n        if (!this.#isCustom)\n            return\n\n        const tooltips = <NodeListOf<HTMLElement>>document.querySelectorAll(`[name=\"${ this.#template.id }\"]`)\n\n        for (let node of tooltips)\n            node.style.visibility = Styles.Visibility.Hidden\n    }\n\n    #getOpacityValue(): number {\n        if (!this.#timer)\n            return 0\n\n        let opacityValue = this.#toHide\n                           ? 1 - (new Date().getTime() - this.#timer.getTime()) / Constants.Animations.tooltip\n                           : (new Date().getTime() - this.#timer.getTime()) / Constants.Animations.tooltip\n        if (opacityValue > 1)\n            opacityValue = 1\n        if (opacityValue < 0)\n            opacityValue = 0\n\n        return opacityValue\n    }\n}","export class ThemeOptions {\n    static readonly colors = ['#000000', '#ffffff']\n\n    static readonly backgrounds = ['#f7f7f7', '#222222']\n\n    static readonly lines = ['#000000', '#eeeeee']\n\n    static readonly lineAxes = ['#e0e0e0', '#212121']\n\n    static readonly lineActives = ['#898989', '#898989']\n\n    static readonly dropdownBorders = ['#bcbcbc', '#7e7e7e']\n\n    static readonly canvasBackgrounds = ['#ffffff', '#222222']\n}","import { DrawPointType } from 'static/Enums'\n\nexport class DrawPoint {\n    /**\n     * Method invocation arguments, where even indexed is x-axis points and odd is y-axis points\n     */\n    args: any[]\n\n    type: DrawPointType\n\n    readonly base: any[]\n\n    constructor(type: DrawPointType, ...args: any[]) {\n        this.args = args\n        this.type = type\n        this.base = JSON.parse(JSON.stringify(args))\n    }\n}","import { TableValue } from 'types/TableValue'\nimport { PlotSeries } from 'types/PlotSeries'\nimport { TableHeaderValue } from 'types/TableHeaderValue'\nimport { TableData } from 'types/TableData'\nimport { Data } from 'types/interfaces/Data'\nimport { Formatter } from 'helpers/Formatter'\nimport { PlotAxisType } from 'static/Enums'\n\nexport class PlotData implements Data {\n    shortLabels: boolean\n\n    simple: boolean\n\n    yMax: number\n\n    xTitle: string\n\n    yTitle: string\n\n    xType: PlotAxisType\n\n    values: PlotSeries[]\n\n    static getRows(data: PlotData): TableData {\n        let headers: TableHeaderValue[] = []\n\n        let values: TableValue[] = []\n\n        for (const series of data.values) {\n            let seriesValues = new Map<string, any>()\n\n            for (const value of series.values) {\n                seriesValues.set(value.x.toString(), value.y)\n                headers.push({\n                    value: value.x.toString(),\n                    display: data.xType == PlotAxisType.Date\n                             ? Formatter.date(new Date(value.x))\n                             : value.x.toString()\n                })\n            }\n\n            values.push({\n                name: series.label,\n                values: seriesValues\n            })\n        }\n\n        const unique = new Set(),\n            uniqueHeaders = headers.filter(v => !unique.has(v.display) && unique.add(v.display))\n\n        if (data.xType == PlotAxisType.Date)\n            uniqueHeaders.sort((a, b) => new Date(a.value).getTime() - new Date(b.value).getTime())\n\n        return {\n            headers: uniqueHeaders,\n            values: values\n        }\n    }\n}","export namespace Styles {\n    export class Cursor {\n        static Default = 'default'\n\n        static Pointer = 'pointer'\n    }\n\n    export class Display {\n        static Flex = 'flex'\n    }\n\n    export class FlexDirection {\n        static Column = 'column'\n\n        static ColumnReverse = 'column-reverse'\n\n        static Row = 'row'\n\n        static RowReverse = 'row-reverse'\n    }\n\n    export class AlignItems {\n        static Center = 'center'\n    }\n\n    export class Visibility {\n        static Visible = 'visible'\n\n        static Hidden = 'hidden'\n    }\n\n    export class Position {\n        static Absolute = 'absolute'\n    }\n\n    export class PointerEvents {\n        static None = 'none'\n    }\n\n    export class JustifyContent {\n        static Center = 'center'\n    }\n\n    export class ImageRendering {\n        static Pixelated = 'pixelated'\n    }\n}","import { Theme } from 'Theme'\nimport { DropdownOptions } from 'types/DropdownOptions'\nimport { Animations } from 'Animations'\nimport * as Helper from 'Helper'\nimport { TextStyles } from 'helpers/TextStyles'\nimport { Canvas } from 'helpers/Canvas'\nimport { AnimationType } from 'static/Enums'\nimport * as Constants from 'static/constants/Index'\nimport { Styles } from 'static/constants/Styles'\n\nexport class Dropdown {\n    isActive: boolean = false\n\n    #isInit: boolean\n\n    #options: DropdownOptions\n\n    #canvasPosition: DOMRect\n\n    animations: Animations\n\n    #position: DOMRect\n\n    readonly #isOnlyMenu: boolean\n\n    readonly #canvas: HTMLCanvasElement\n\n    constructor(canvas: HTMLCanvasElement, options: DropdownOptions) {\n        this.#canvas = canvas\n        this.#options = options\n\n        if (this.#options.icon)\n            this.#options.text = this.#options.icon\n\n        this.#isOnlyMenu = this.#options.text == undefined\n\n        this.animations = new Animations()\n    }\n\n    render(moveEvent: MouseEvent, clickEvent: MouseEvent | undefined) {\n        if (!this.#isInit)\n            this.#initAnimations()\n\n        if (this.#isOnlyMenu)\n            this.isActive = true\n\n        const ctx = Canvas.getContext(this.#canvas)\n\n        let x = this.#position.x,\n            y = this.#position.y,\n            width = this.#position.width,\n            height = this.#position.height\n\n        ctx.beginPath()\n\n        if (!this.#isOnlyMenu) {\n            const translate = (transition: number, event: AnimationType) => {\n                this.animations.reload('animation-dropdown', event)\n\n                ctx.fillStyle = Helper.adjustColor(Theme.canvasBackground, -Math.round(25 * transition))\n            }\n\n            if (this.#isOnButton(moveEvent, x, y, width, height)) {\n                this.#canvas.style.cursor = Styles.Cursor.Pointer\n\n                if (clickEvent && moveEvent.x == clickEvent.x && moveEvent.y == clickEvent.y) {\n                    this.isActive = !this.isActive\n                    clickEvent = undefined\n                }\n\n                if (!this.isActive)\n                    this.animations.handle('animation-dropdown',\n                        AnimationType.MouseOver,\n                        {\n                            duration: 300,\n                            body: transition => {\n                                translate(transition, AnimationType.MouseLeave)\n                            }\n                        })\n                else\n                    ctx.fillStyle = Helper.adjustColor(Theme.canvasBackground, -25)\n            } else {\n                this.#canvas.style.cursor = Styles.Cursor.Default\n\n                if (!this.isActive)\n                    this.animations.handle('animation-dropdown',\n                        AnimationType.MouseLeave,\n                        {\n                            timer: Constants.Dates.minDate,\n                            duration: 300,\n                            backward: true,\n                            body: transition => {\n                                translate(transition, AnimationType.MouseOver)\n                            }\n                        })\n                else\n                    ctx.fillStyle = Helper.adjustColor(Theme.canvasBackground, -25)\n            }\n\n            ctx.roundRect(x, y, width, height, 4)\n            ctx.fill()\n\n            TextStyles.regular(ctx)\n\n            if (this.#options.icon)\n                ctx.font = '20px sans-serif'\n\n            const iconOffset = this.#options.icon\n                               ? navigator.platform != 'Win32'\n                                 ? 1\n                                 : -1\n                               : 0\n\n            ctx.fillText(\n                this.#options.text ?? '',\n                x + width / 2,\n                y + height / 2 - iconOffset\n            )\n        }\n\n        if (this.isActive) {\n            const padding = 6,\n                borderRadius = 6\n\n            y += height\n\n            const items = this.#options.items.filter(value => value.text),\n                dividers = this.#options.items.filter(value => !value.text)\n\n            let maxWidth = Math.max(...items.map(value => Helper.stringWidth(value.text)))\n                           + padding * 4\n\n            if (x + maxWidth > this.#canvas.width - 4)\n                x -= x + maxWidth - this.#canvas.width + 4\n\n            const dropdownOpacity = 'bb',\n                itemOpacityDec = 127,\n                itemBackground = Theme.dropdownItemHoverColor,\n                borderColor = Theme.dropdownBorder\n\n            ctx.beginPath()\n\n            const rect = {\n                x: x,\n                y: y,\n                width: maxWidth,\n                height: items.length * 26\n                        + dividers.length * 4\n                        + (items.length == 1 ? padding : 0)\n                        + (items.length == 2 && dividers.length == 1 ? padding : 0)\n            }\n\n            ctx.roundRect(rect.x, rect.y, rect.width, rect.height, borderRadius)\n            ctx.fillStyle = Theme.background + dropdownOpacity\n            ctx.setLineDash([])\n            ctx.lineWidth = 1\n            ctx.strokeStyle = borderColor + dropdownOpacity\n            ctx.fill()\n            ctx.stroke()\n\n            ctx.beginPath()\n\n            y += 6\n\n            for (const item of this.#options.items) {\n                ctx.beginPath()\n\n                if (item.isDivider == true) {\n                    y += 2\n\n                    ctx.moveTo(x + padding, y)\n                    ctx.lineTo(x + maxWidth - padding, y)\n\n                    ctx.lineWidth = .5\n                    ctx.stroke()\n\n                    y += 4\n\n                    continue\n                }\n\n                ctx.fillStyle = 'transparent'\n\n                const animationKey = 'animation-dropdown' + item.text\n\n                const translate = (transition: number, event: AnimationType, isReturn?: boolean) => {\n                    this.animations.reload(animationKey, event)\n\n                    if (isReturn && transition == 1)\n                        return\n\n                    let opacity = Math.round(itemOpacityDec * transition).toString(16)\n                    if (opacity.length == 1)\n                        opacity = '0' + opacity\n\n                    ctx.fillStyle = itemBackground + opacity\n                }\n\n                if (this.#isOnButton(moveEvent, x, y, maxWidth, 20)) {\n                    this.animations.handle(animationKey,\n                        AnimationType.MouseOver,\n                        {\n                            duration: 300,\n                            body: transition => {\n                                translate(transition, AnimationType.MouseLeave)\n                            }\n                        })\n\n                    this.#canvas.style.cursor = Styles.Cursor.Pointer\n\n                    if (clickEvent) {\n                        item.action()\n\n                        clickEvent = undefined\n                        this.isActive = false\n                    }\n                } else {\n                    this.animations.handle(animationKey,\n                        AnimationType.MouseLeave,\n                        {\n                            timer: Constants.Dates.minDate,\n                            duration: 300,\n                            backward: true,\n                            body: transition => {\n                                translate(transition, AnimationType.MouseOver, true)\n                            }\n                        })\n                }\n\n                ctx.roundRect(x + padding, y, maxWidth - padding * 2, 20, borderRadius)\n                ctx.fill()\n\n                TextStyles.regular(ctx)\n                ctx.fillStyle = Theme.text\n                ctx.textAlign = 'left'\n                ctx.textBaseline = 'hanging'\n                ctx.fillText(item.text, x + padding * 2, y + 5)\n\n                y += 22\n            }\n        }\n\n        ctx.lineWidth = 1\n\n        if (!this.#isOnlyMenu && clickEvent != undefined && this.isActive) {\n            this.isActive = false\n            clickEvent = undefined\n        }\n\n        this.#isInit = true\n\n        if (this.#isOnlyMenu && clickEvent && moveEvent.x == clickEvent.x && moveEvent.y == clickEvent.y) {\n            this.isActive = !this.isActive\n            clickEvent = undefined\n        }\n\n        return clickEvent\n    }\n\n    #initAnimations() {\n        this.#canvasPosition = this.#canvas.getBoundingClientRect()\n\n        this.#canvasPosition.x += scrollX\n        this.#canvasPosition.y += scrollY\n    }\n\n    #isOnButton(event: MouseEvent, x: number, y: number, w: number, h: number): boolean {\n        if (!event)\n            return false\n\n        let trueX = event.clientX - this.#canvasPosition.x + scrollX,\n            trueY = event.clientY - this.#canvasPosition.y + scrollY\n\n        return trueX >= x && trueX <= x + w\n               && trueY >= y && trueY <= y + h\n    }\n\n    refresh() {\n        this.#isInit = false\n    }\n\n    resize() {\n        this.#initAnimations()\n        this.#calculatePosition()\n    }\n\n    close() {\n        this.isActive = false\n    }\n\n    #calculatePosition() {\n        const width = this.#isOnlyMenu ? 0 : Helper.stringWidth(this.#options.text ?? '') + 12,\n            height = this.#isOnlyMenu ? 0 : 20\n\n        this.#position = {\n            x: this.#options.x + width > this.#canvas.width\n               ? this.#canvas.width - width\n               : this.#options.x < 0\n                 ? this.#canvas.width + this.#options.x - width\n                 : this.#options.x,\n            y: this.#options.y + height > this.#canvas.height\n               ? this.#canvas.height - height\n               : this.#options.y < 0\n                 ? this.#canvas.height + this.#options.y - height\n                 : this.#options.y,\n            width: width,\n            height: height\n        } as DOMRect\n    }\n}","import * as Helper from 'Helper'\nimport { ThemeOptions } from 'static/ThemeOptions'\nimport { Events } from 'static/Enums'\n\nexport class Theme {\n    static currentTheme = 0\n\n    static text: string\n\n    static background: string\n\n    static line: string\n\n    static lineAxis: string\n\n    static lineActive: string\n\n    static dropdownItemHoverColor: string\n\n    static dropdownBorder: string\n\n    static canvasBackground: string\n\n    static canvasBackgroundInt: number\n\n    static function: Function | undefined\n\n    static initialize(callback: Function, isDark?: Function) {\n        if (!Theme.function && isDark)\n            Theme.function = isDark\n\n        if (window.matchMedia\n            && window.matchMedia('(prefers-color-scheme: dark)').matches\n            && (!Theme.function || Theme.function()))\n            Theme.setTheme(1)\n        else\n            Theme.setTheme(0)\n\n        window.matchMedia('(prefers-color-scheme: dark)')\n              .addEventListener(Events.Change, event => {\n                  Theme.setTheme(event.matches && (!Theme.function || Theme.function()) ? 1 : 0)\n                  callback()\n              })\n    }\n\n    static setTheme(index: number) {\n        Theme.currentTheme = index\n\n        Theme.text = ThemeOptions.colors[index]\n        Theme.background = ThemeOptions.backgrounds[index]\n        Theme.line = ThemeOptions.lines[index]\n        Theme.lineAxis = ThemeOptions.lineAxes[index]\n        Theme.lineActive = ThemeOptions.lineActives[index]\n        Theme.dropdownItemHoverColor = Helper.adjustColor(Theme.background, index == 0 ? -50 : 50)\n        Theme.dropdownBorder = ThemeOptions.dropdownBorders[index]\n        Theme.canvasBackground = ThemeOptions.canvasBackgrounds[index]\n        Theme.canvasBackgroundInt = Number(`0xff${ Theme.canvasBackground.slice(1) }`)\n    }\n\n    static reset() {\n        this.function = undefined\n    }\n}","import { Renderer } from 'types/base/Renderer'\nimport { CircularData } from 'types/data/CircularData'\nimport { Sector } from 'types/Sector'\nimport { CircularAngle } from 'types/CircularAngle'\nimport { Point } from 'types/Point'\nimport { DropdownItem } from 'types/DropdownItem'\nimport * as Helper from 'Helper'\nimport { Dropdown } from 'Dropdown'\nimport { Theme } from 'Theme'\nimport { TextStyles } from 'helpers/TextStyles'\nimport { Chart } from 'Chart'\nimport { TooltipValue } from 'types/TooltipValue'\nimport { Decomposition } from 'Decomposition'\nimport { Export } from 'Export'\nimport { TextResources } from 'static/TextResources'\nimport { Modal } from 'Modal'\nimport { Canvas } from 'helpers/Canvas'\nimport { Formatter } from 'helpers/Formatter'\nimport { AnimationType, DrawPointType, Events, Icon, PlotAxisType } from 'static/Enums'\nimport * as Constants from 'static/constants/Index'\nimport { Styles } from 'static/constants/Styles'\nimport { DrawPoint } from 'types/DrawPoint'\n\nexport class CircularRenderer extends Renderer<CircularData> {\n    #canRenderInnerTitle: boolean\n\n    #isDonut: boolean\n\n    #radius: number\n\n    #hoverCount: number\n\n    #currentHover: string | undefined\n\n    #pinned: string[]\n\n    #center: Point\n\n    #startPoint: Point\n\n    #angles: CircularAngle[]\n\n    #other: Sector[]\n\n    #innerTitleStyle: Function\n\n    private readonly startAngle: number\n\n    private isMousePositionChanged: boolean\n\n    private prevPoint: Point\n\n    constructor(chart: Chart) {\n        super(chart)\n\n        this.startAngle = Math.PI / 4\n        this.isMousePositionChanged = false\n        this.prevPoint = {\n            x: 0,\n            y: 0\n        }\n\n        this.onMouseMoveEvent = new MouseEvent(Events.MouseMove)\n    }\n\n    private calculateAngles() {\n        const valuesSum = this.data.values.reduce((acc, v) => acc + v.current, 0)\n\n        let anglesSum = this.startAngle\n        this.#angles = this.data.values.flatMap(sector => {\n                               const angle = sector.current / valuesSum * 2 * Math.PI\n\n                               return {\n                                   id: sector.id,\n                                   value: angle,\n                                   sum: (anglesSum += angle) - angle\n                               }\n                           })\n                           .reverse()\n    }\n\n    private getAngle(sector: Sector) {\n        return this.#angles.find(o => o.id == sector.id)?.value ?? 0\n    }\n\n    private getAccumulator(sector: Sector) {\n        return this.#angles.find(o => o.id == sector.id)?.sum ?? this.startAngle\n    }\n\n    private calculatePoint(sector: Sector): Sector {\n        let accumulator = this.getAccumulator(sector)\n\n        const getPoint = (radius: number, angle: number, center: Point): Point => {\n            return {\n                x: center.x + radius * Math.cos(accumulator + angle),\n                y: center.y + radius * Math.sin(accumulator + angle)\n            }\n        }\n\n        this.#startPoint = getPoint(this.#radius, 0, this.#center)\n\n        const angle = this.getAngle(sector)\n\n        sector.direction = accumulator + angle / 2\n\n        let point2 = getPoint(this.#radius, angle, this.#center)\n\n        let points: DrawPoint[] = []\n\n        if (angle > 0) {\n            if (sector.current > 0) {\n                let labelStartPoint = getPoint(this.#radius + 10, angle / 2, this.#center),\n                    labelMidPoint = getPoint(this.#radius + 20, angle / 2, this.#center)\n\n                const dir = labelStartPoint.x > this.#center.x ? 1 : -1\n\n                let endPoint = {\n                    x: labelMidPoint.x + 10 * dir,\n                    y: labelMidPoint.y\n                }\n\n                sector.labelPoints = [\n                    new DrawPoint(DrawPointType.Move, labelStartPoint.x, labelStartPoint.y),\n                    new DrawPoint(DrawPointType.QuadraticCurve, labelMidPoint.x, labelMidPoint.y, endPoint.x, endPoint.y)\n                ]\n            }\n\n            if (!this.#isDonut)\n                points.push(new DrawPoint(DrawPointType.Move, this.#center.x, this.#center.y))\n\n            points.push(new DrawPoint(DrawPointType.Line, this.#startPoint.x, this.#startPoint.y))\n\n            let localAccumulator = 0,\n                localAngle = angle\n\n            while (localAngle > 0) {\n                let currentAngle = localAngle - Math.PI / 6 > 0\n                                   ? Math.PI / 6\n                                   : localAngle\n\n                point2 = getPoint(this.#radius, localAccumulator + currentAngle, this.#center)\n\n                const tangentIntersectionAngle = Math.PI - currentAngle,\n                    lengthToTangentIntersection = this.#radius / Math.sin(tangentIntersectionAngle / 2),\n                    tangentIntersectionPoint = getPoint(lengthToTangentIntersection, localAccumulator + currentAngle / 2, this.#center)\n\n                points.push(new DrawPoint(DrawPointType.QuadraticCurve, tangentIntersectionPoint.x, tangentIntersectionPoint.y, point2.x, point2.y))\n\n                localAccumulator += currentAngle\n\n                localAngle -= Math.PI / 6\n            }\n\n            if (this.#isDonut || sector.innerRadius != 0) {\n                const innerRadius = this.#radius * (sector.innerRadius / 100)\n\n                const innerPoint2 = {\n                    x: point2.x - (((this.#radius - innerRadius) * (point2.x - this.#center.x)) / this.#radius),\n                    y: point2.y - (((this.#radius - innerRadius) * (point2.y - this.#center.y)) / this.#radius)\n                }\n\n                points.push(new DrawPoint(DrawPointType.Line, innerPoint2.x, innerPoint2.y))\n\n                localAngle = 0\n                localAccumulator = angle\n\n                while (localAngle < angle) {\n                    let currentAngle = localAngle + Math.PI / 6 < angle\n                                       ? Math.PI / 6\n                                       : angle - localAngle\n\n                    point2 = getPoint(innerRadius, localAccumulator - currentAngle, this.#center)\n\n                    const tangentIntersectionAngle = Math.PI - currentAngle,\n                        lengthToTangentIntersection = innerRadius / Math.sin(tangentIntersectionAngle / 2),\n                        tangentIntersectionPoint = getPoint(lengthToTangentIntersection, localAccumulator - currentAngle / 2, this.#center)\n\n                    points.push(new DrawPoint(DrawPointType.QuadraticCurve, tangentIntersectionPoint.x, tangentIntersectionPoint.y, point2.x, point2.y))\n\n                    localAccumulator -= currentAngle\n\n                    localAngle += Math.PI / 6\n                }\n\n                point2 = getPoint(this.#radius, angle, this.#center)\n            }\n\n            accumulator += angle\n        }\n\n        this.#startPoint = point2\n\n        sector.points = points\n\n        return sector\n    }\n\n    private scale(sector: Sector, value: number, transition: number) {\n        const centerOfSector = {\n            x: this.#center.x + this.#radius / 2 * Math.cos(sector.direction),\n            y: this.#center.y + this.#radius / 2 * Math.sin(sector.direction)\n        }\n\n        for (let p of sector.points) {\n            for (let i = 0; i < p.args.length; i += 2) {\n                const x = p.base[i],\n                    y = p.base[i + 1],\n                    length = Math.sqrt(Math.pow(x - centerOfSector.x, 2) + Math.pow(y - centerOfSector.y, 2)),\n                    computed = length * value + length * (1 - value) * transition,\n                    ratio = computed / length\n\n                p.args[i] = ratio * x + (1 - ratio) * centerOfSector.x\n                p.args[i + 1] = ratio * y + (1 - ratio) * centerOfSector.y\n            }\n        }\n\n        for (let p of sector.labelPoints) {\n            for (let i = 0; i < p.args.length; i += 2) {\n                const x = p.base[i],\n                    y = p.base[i + 1],\n                    length = Math.sqrt(Math.pow(x - centerOfSector.x, 2) + Math.pow(y - centerOfSector.y, 2)),\n                    computed = length * value + length * (1 - value) * transition,\n                    ratio = computed / length\n\n                p.args[i] = ratio * x + (1 - ratio) * centerOfSector.x\n                p.args[i + 1] = ratio * y + (1 - ratio) * centerOfSector.y\n            }\n        }\n    }\n\n    private focus(sector: Sector, value: number, transition: number) {\n        sector.color = Helper.applyAlpha(sector.baseColor, 255 - 255 * value * transition)\n        sector.textColor = Helper.applyAlpha(Theme.text, 255 - 255 * value * transition)\n    }\n\n    private translate(sector: Sector, value: number, transition: number) {\n        const offset = {\n            x: (this.#center.x + this.#radius * Math.cos(sector.direction) - this.#center.x) * value,\n            y: (this.#center.y + this.#radius * Math.sin(sector.direction) - this.#center.y) * value\n        }\n\n        sector.translate = {\n            x: offset.x * transition,\n            y: offset.y * transition\n        }\n\n        for (let p of sector.points) {\n            for (let i = 0; i < p.args.length; i += 2) {\n                p.args[i] = p.base[i] + offset.x * transition\n                p.args[i + 1] = p.base[i + 1] + offset.y * transition\n            }\n        }\n\n        for (let p of sector.labelPoints) {\n            for (let i = 0; i < p.args.length; i += 2) {\n                p.args[i] = p.base[i] + offset.x * transition\n                p.args[i + 1] = p.base[i + 1] + offset.y * transition\n            }\n        }\n    }\n\n    private outline(sector: Sector, value: number, transition: number) {\n        sector.lineStyles = transition == 0\n                       ? {\n                lineWidth: 1,\n                lineJoin: 'miter',\n                lineCap: 'butt'\n            }\n                       : {\n                lineWidth: this.getAngle(sector) > Math.PI / 6\n                           ? value * transition\n                           : 1,\n                lineJoin: 'round',\n                lineCap: 'round'\n            }\n    }\n\n    private canRenderLabel(sector: Sector, ctx: CanvasRenderingContext2D) {\n        if (sector.current == 0)\n            return sector.canRenderLabel = false\n\n        if (sector.state == AnimationType.None)\n            return sector.canRenderLabel\n\n        const dir = sector.labelPoints[0].args[0] < sector.labelPoints[1].args[0] ? 1 : -1\n\n        let isBusy = false\n\n        const endPoint = {\n            x: sector.labelPoints[1].args[0],\n            y: sector.labelPoints[1].args[1]\n        }\n\n        const textWidth = Helper.stringWidth(sector.label),\n            imageDataX = dir == 1 ? endPoint.x + 12 : endPoint.x - textWidth - 12 + (sector.translate ? sector.translate.x : 0),\n            imageDataY = endPoint.y - 12 + (sector.translate ? sector.translate.y : 0),\n            imageData = new Uint32Array(ctx.getImageData(imageDataX, imageDataY, textWidth, 28).data.buffer)\n\n        if (imageDataX < 0 || imageDataX + textWidth > this.canvas.width\n            || endPoint.y - 12 < 0 || endPoint.y + 12 > this.canvas.height)\n            isBusy = true\n\n        if (!isBusy)\n            for (let i = 0; i < imageData.length; i++)\n                if (Canvas.isPixelBusy(imageData[i])) {\n                    isBusy = true\n                    break\n                }\n\n        return sector.canRenderLabel = !isBusy\n    }\n\n    private drawLabel(sector: Sector, ctx: CanvasRenderingContext2D) {\n        if (!this.canRenderLabel(sector, ctx))\n            return\n\n        ctx.beginPath()\n\n        ctx.moveTo(\n            sector.labelPoints[0].args[0],\n            sector.labelPoints[0].args[1]\n        )\n\n        ctx.quadraticCurveTo(\n            sector.labelPoints[1].args[0],\n            sector.labelPoints[1].args[1],\n            sector.labelPoints[1].args[2],\n            sector.labelPoints[1].args[3]\n        )\n\n        ctx.strokeStyle = sector.textColor\n\n        if (sector.current != 0 && sector.current != sector.value)\n            ctx.strokeStyle = Helper.applyAlpha(sector.textColor, Math.round(255 * (sector.current / sector.value)))\n\n        ctx.lineWidth = 1\n        ctx.lineJoin = 'miter'\n        ctx.lineCap = 'butt'\n\n        ctx.stroke()\n\n        ctx.fillStyle = sector.textColor\n\n        if (sector.current != 0 && sector.current != sector.value)\n            ctx.fillStyle = Helper.applyAlpha(sector.textColor, Math.round(255 * (sector.current / sector.value)))\n\n        const dir = sector.labelPoints[0].args[0] < sector.labelPoints[1].args[0] ? 1 : -1\n\n        TextStyles.circularLabel(ctx, dir == 1)\n        ctx.fillText(\n            sector.label,\n            sector.labelPoints[1].args[0] + 16 * dir,\n            sector.labelPoints[1].args[1] + 4\n        )\n    }\n\n    private drawSector(sector: Sector, ctx: CanvasRenderingContext2D) {\n        ctx.beginPath()\n\n        if (sector.lineStyles) {\n            ctx.lineWidth = sector.lineStyles.lineWidth\n            ctx.lineJoin = sector.lineStyles.lineJoin\n            ctx.lineCap = sector.lineStyles.lineCap\n        }\n\n        for (const point of sector.points) {\n            switch (point.type) {\n                case DrawPointType.Move:\n                    ctx.moveTo(point.args[0], point.args[1])\n\n                    break\n\n                case DrawPointType.Line:\n                    ctx.lineTo(point.args[0], point.args[1])\n\n                    break\n\n                case DrawPointType.QuadraticCurve:\n                    ctx.quadraticCurveTo(point.args[0], point.args[1], point.args[2], point.args[3])\n\n                    break\n            }\n        }\n\n        ctx.fillStyle = sector.color\n        ctx.strokeStyle = sector.color\n\n        ctx.closePath()\n\n        ctx.fill()\n        ctx.stroke()\n    }\n\n    private animate(sector: Sector) {\n        this.animations.handle(\n            sector.id,\n            AnimationType.Init,\n            {\n                duration: Constants.Animations.circular + (this.data.values.indexOf(sector) + 1) / this.data.values.length * Constants.Animations.circular,\n                continuous: true,\n                before: () => sector.state == AnimationType.Init,\n                body: transition => {\n                    this.scale(sector, .7, transition)\n                    this.focus(sector, 1, 1 - transition)\n\n                    if (transition == 1)\n                        sector.state = AnimationType.None\n                }\n            }\n        )\n\n        this.animations.handle(\n            sector.id,\n            AnimationType.Click,\n            {\n                duration: 0,\n                before: () => sector.state == AnimationType.Click,\n                body: _transition => {\n                    this.translate(sector, .1, 1)\n                    this.outline(sector, 8, 1)\n                }\n            }\n        )\n\n        this.animations.handle(\n            sector.id,\n            AnimationType.MouseOver,\n            {\n                duration: Constants.Animations.circular,\n                before: () => sector.state.isAnyEquals(AnimationType.MouseOver, AnimationType.MouseLeave),\n                body: transition => {\n                    if (sector.color != sector.baseColor)\n                        this.focus(sector, .5, transition)\n                    this.translate(sector, .1, transition)\n                    this.outline(sector, 8, transition)\n\n                    if (sector.state == AnimationType.MouseLeave\n                        && this.data.values.filter(s => s.state == AnimationType.MouseOver).length > 0)\n                        this.animations.end(sector.id, AnimationType.AnotherItemOver)\n                }\n            }\n        )\n\n        this.animations.handle(\n            sector.id,\n            AnimationType.AnotherItemOver,\n            {\n                duration: Constants.Animations.circular,\n                before: () => sector.state.isAnyEquals(AnimationType.AnotherItemOver, AnimationType.AnotherItemLeave),\n                body: transition => {\n                    this.focus(sector, .5, transition)\n                }\n            }\n        )\n    }\n\n    private handle(sector: Sector) {\n        if (sector.disabled)\n            return\n\n        const isInsideSector = this.isInsideSector(this.onMouseMoveEvent, sector, this.#center),\n            isInsideSectorClick = this.onClickEvent ? this.isInsideSector(this.onClickEvent, sector, this.#center) : false\n\n        if (this.onMouseMoveEvent && isInsideSector) {\n            this.#currentHover = sector.id\n            this.#hoverCount++\n        }\n\n        if (this.data.values.filter(s => !s.disabled).length == 1)\n            return\n\n        if (isInsideSectorClick) {\n            sector.state = AnimationType.Click\n\n            if (this.#pinned.includes(sector.id))\n                this.#pinned = this.#pinned.filter(id => id != sector.id)\n            else\n                this.#pinned.push(sector.id)\n\n            this.onClickEvent = undefined\n\n            return\n        } else if (this.#pinned.includes(sector.id)) {\n            return\n        }\n\n        if (isInsideSector) {\n            sector.state = AnimationType.MouseOver\n\n            if (this.animations.isBackward(sector.id, AnimationType.MouseOver))\n                this.animations.reverse(sector.id, AnimationType.MouseOver)\n\n            return\n        }\n\n        if (sector.state == AnimationType.MouseOver\n            && !isInsideSector) {\n            sector.state = AnimationType.MouseLeave\n\n            if (!this.animations.isBackward(sector.id, AnimationType.MouseOver))\n                this.animations.reverse(sector.id, AnimationType.MouseOver)\n\n            return\n        }\n\n        if (sector.state == AnimationType.MouseLeave\n            && this.animations.isEnd(sector.id, AnimationType.MouseOver)) {\n            sector.state = AnimationType.None\n\n            return\n        }\n\n        if (sector.state == AnimationType.MouseLeave)\n            return\n\n        if (this.data.values.filter(s => s.state == AnimationType.MouseOver).length > 0) {\n            sector.state = AnimationType.AnotherItemOver\n\n            if (this.animations.isBackward(sector.id, AnimationType.AnotherItemOver))\n                this.animations.reverse(sector.id, AnimationType.AnotherItemOver)\n\n            return\n        }\n\n        if (this.data.values.filter(s => s.state == AnimationType.MouseLeave).length > 0) {\n            sector.state = AnimationType.AnotherItemLeave\n\n            if (!this.animations.isBackward(sector.id, AnimationType.AnotherItemOver))\n                this.animations.reverse(sector.id, AnimationType.AnotherItemOver)\n\n            return\n        }\n\n        if (sector.state == AnimationType.AnotherItemLeave\n            && this.animations.isEnd(sector.id, AnimationType.AnotherItemOver)) {\n            sector.state = AnimationType.None\n\n            return\n        }\n    }\n\n    render() {\n        super.render()\n\n        const isAnyCollapsing = this.data.values.filter(s => s.value != s.current && s.current != 0)\n                                    .length > 0\n\n        this.isMousePositionChanged = this.prevPoint.x != this.onMouseMoveEvent.clientX\n                                      || this.prevPoint.y != this.onMouseMoveEvent.clientY\n\n        this.prevPoint = {\n            x: this.onMouseMoveEvent.clientX,\n            y: this.onMouseMoveEvent.clientY\n        }\n\n        if (isAnyCollapsing) {\n            this.calculateAngles()\n            for (let sector of this.data.values)\n                sector = this.calculatePoint(sector)\n        }\n\n        if (this.data.values.filter(s => !s.disabled).length == 0) {\n            this.empty()\n\n            return\n        }\n\n        this.#hoverCount = 0\n\n        const ctx = Canvas.getContext(this.canvas)\n\n        for (const sector of this.data.values) {\n            this.animate(sector)\n\n            this.drawSector(sector, ctx)\n            this.drawLabel(sector, ctx)\n\n            if (sector.state != AnimationType.Init)\n                this.handle(sector)\n        }\n\n        super.renderDropdown()\n\n        const currentHover = this.data.values.find(v => v.id == this.#currentHover),\n            isAnyHover = this.#hoverCount > 0\n\n        if (isAnyHover || this.contextMenu)\n            this.renderContextMenu(currentHover?.data ?? {})\n        else\n            this.onContextMenuEvent = undefined\n\n        this.tooltip.render(isAnyHover && !this.dropdown?.isActive,\n            this.onMouseMoveEvent,\n            [\n                new TooltipValue(`${ currentHover?.label }: ${ Formatter.format(currentHover?.current, PlotAxisType.Number, this.settings.valuePostfix) }`)\n            ],\n            currentHover)\n\n        this.innerTitle()\n\n        this.canvas.style.cursor = this.#hoverCount > 0\n                                   ? Styles.Cursor.Pointer\n                                   : Styles.Cursor.Default\n\n        if (!this.isDestroy)\n            requestAnimationFrame(this.render.bind(this))\n    }\n\n    private isInsideSector(event: MouseEvent, sector: Sector, center: Point): boolean {\n        if (!this.isMousePositionChanged)\n            return sector.isMouseInside\n\n        const isAngle = (point: Point) => {\n            let a = Math.atan2(point.y - center.y, point.x - center.x)\n            if (a < 0)\n                a += Math.PI * 2\n            if (a < this.startAngle)\n                a = Math.PI * 2 - Math.abs(this.startAngle - a) + this.startAngle\n\n            let index = this.#angles.findIndex(o => o.id == sector.id),\n                sumBefore = this.#angles[index].sum\n\n            return !(this.dropdown?.isActive ?? false)\n                   && sumBefore <= a\n                   && sumBefore + this.#angles[index].value - a >= 0\n        }\n\n        const isWithinRadius = (v: Point) => {\n            return v.x * v.x + v.y * v.y <= this.#radius * this.#radius\n                   && (!this.#isDonut || v.x * v.x + v.y * v.y\n                       >= this.#radius * (sector.innerRadius / 100) * this.#radius * (sector.innerRadius / 100))\n        }\n\n        const point = this.getMousePosition(event),\n            inner = {\n                x: point.x - center.x,\n                y: point.y - center.y\n            },\n            outer = {\n                x: point.x - center.x - sector.translate?.x,\n                y: point.y - center.y - sector.translate?.y\n            }\n\n        return sector.isMouseInside = isAngle(point) && (isWithinRadius(inner) || isWithinRadius(outer))\n    }\n\n    private empty() {\n        const ctx = Canvas.getContext(this.canvas)\n\n        ctx.beginPath()\n\n        ctx.arc(this.#center.x, this.#center.y, this.#radius, 0, 2 * Math.PI)\n        ctx.strokeStyle = Theme.text\n        ctx.stroke()\n\n        TextStyles.regular(ctx)\n        ctx.fillText(TextResources.allDataIsHidden, this.#center.x, this.#center.y)\n\n        requestAnimationFrame(this.render.bind(this))\n    }\n\n    private innerTitle() {\n        if (this.#canRenderInnerTitle) {\n            const ctx = Canvas.getContext(this.canvas)\n\n            this.#innerTitleStyle(ctx)\n            ctx.fillText(this.data.innerTitle, this.#center.x, this.#center.y)\n        }\n    }\n\n    private calculateSizes() {\n        const titleOffset = this.settings.title\n                            ? Constants.Values.titleOffset\n                            : 0\n\n        const shortSide = this.canvas.width > this.canvas.height - titleOffset * 2\n                          ? this.canvas.height - titleOffset * 2\n                          : this.canvas.width\n\n        this.#center = {\n            x: this.canvas.width / 2,\n            y: titleOffset + this.canvas.height / 2\n        }\n\n        let longestLabel = 0\n\n        for (const value of this.data.values) {\n            const width = Helper.stringWidth(value.label)\n\n            if (width > longestLabel)\n                longestLabel = width\n        }\n\n        this.#radius = shortSide / 2 - (longestLabel + 50)\n\n        if (this.#radius < shortSide / 2 - 50)\n            this.#radius = shortSide / 2 - 50\n\n        if (this.data.innerTitle != undefined && this.data.innerTitle != '') {\n            this.#innerTitleStyle = TextStyles.large\n            this.#canRenderInnerTitle = Helper.stringWidth(this.data.innerTitle, 16)\n                                        < (this.data.innerRadius / 100) * this.#radius * 2\n\n            if (!this.#canRenderInnerTitle) {\n                this.#innerTitleStyle = TextStyles.regular\n                this.#canRenderInnerTitle = Helper.stringWidth(this.data.innerTitle, 14)\n                                            < (this.data.innerRadius / 100) * this.#radius * 2\n            }\n\n            if (!this.#canRenderInnerTitle)\n                console.warn(`Inner title is declared, but can't be rendered`)\n        }\n    }\n\n    refresh() {\n        super.refresh()\n\n        this.dropdown?.refresh()\n    }\n\n    resize() {\n        super.resize()\n\n        this.initAnimations()\n        this.calculateSizes()\n        this.dropdown?.resize()\n\n        for (let sector of this.data.values)\n            sector = this.calculatePoint(sector)\n    }\n\n    prepareSettings() {\n        super.prepareSettings()\n\n        this.calculateSizes()\n\n        this.data.values = this.data.values.map(v => new Sector(v))\n\n        if (this.settings.enableOther) {\n            if (!this.settings.contextMenu)\n                this.settings.contextMenu = [] as DropdownItem[]\n            else\n                this.settings.contextMenu.push({\n                    isDivider: true\n                } as DropdownItem)\n\n            this.settings.contextMenu.push({\n                text: TextResources.show,\n                condition: data => data?._other,\n                action: () => {\n                    new Modal(Decomposition.toChart<Sector>(this.settings, this.#other),\n                        {\n                            width: window.innerWidth * .8,\n                            height: window.innerHeight * .8\n                        } as DOMRect)\n                        .open()\n                }\n            })\n        }\n\n        this.#pinned = []\n\n        this.#isDonut = (this.data.innerRadius ?? 0) != 0\n\n        for (let item of this.data.values) {\n            item.disabled = !item.value\n            item.value ??= 0\n            item.current = item.value\n            item.innerRadius ??= this.data.innerRadius ?? 0\n\n            if (item.value < 0)\n                console.warn(`\"${ item.label }\" has negative value (${ item.value }) and will not be render`)\n        }\n\n        this.data.values = this.data.values.filter(v => v.value >= 0)\n\n        if (this.settings.enableOther && this.data.values.length > 20) {\n            this.#other = this.data.values.splice(20)\n\n            const sum = this.#other.reduce((acc, v) => acc + v.current, 0)\n\n            this.data.values = this.data.values.slice(0, 20)\n\n            this.data.values.push(new Sector({\n                value: sum,\n                current: sum,\n                label: TextResources.other,\n                id: Helper.guid(),\n                color: this.#other[this.#other.length - 1].color,\n                innerRadius: this.data.innerRadius,\n                data: {\n                    _other: true\n                }\n            }))\n        }\n\n        this.calculateAngles()\n\n        for (let sector of this.data.values) {\n            sector = this.calculatePoint(sector)\n\n            sector.state = AnimationType.Init\n        }\n    }\n\n    initDropdown() {\n        super.initDropdown()\n\n        this.dropdown = new Dropdown(this.canvas,\n            {\n                x: -10,\n                y: 10,\n                icon: Icon.ThreeLines,\n                items: [\n                    {\n                        text: TextResources.exportPNG,\n                        action: () => {\n                            Export.asPng(this.canvas, this.settings.title)\n                        }\n                    },\n                    {\n                        text: TextResources.exportCSV,\n                        action: () => {\n                            Export.asCsv(Decomposition.toTable(CircularData.getRows(this.data)), this.settings.title)\n                        }\n                    },\n                    {\n                        isDivider: true\n                    } as DropdownItem,\n                    {\n                        text: TextResources.decomposeToTable,\n                        action: () => {\n                            new Modal(Decomposition.toTable(CircularData.getRows(this.data))).open()\n                        }\n                    }\n                ]\n            })\n    }\n}","import { Data } from 'types/interfaces/Data'\nimport { Renderable } from 'types/base/Renderable'\nimport * as Helper from 'Helper'\nimport { Value } from 'types/base/Value'\nimport { Legend } from 'Legend'\nimport { Dropdown } from 'Dropdown'\nimport { DropdownItem } from 'types/DropdownItem'\nimport { Point } from 'types/Point'\nimport { TextResources } from 'static/TextResources'\nimport { Chart } from 'Chart'\nimport { Canvas } from 'helpers/Canvas'\nimport { TextStyles } from 'helpers/TextStyles'\nimport { LegendPlace, RenderState } from 'static/Enums'\nimport * as Constants from 'static/constants/Index'\nimport { ChartSettings } from '../ChartSettings'\n\nexport class Renderer<T extends Data> extends Renderable {\n    dropdown: Dropdown | undefined\n\n    data: T\n\n    protected isDestroy: boolean = false\n\n    protected highlightItems: string[]\n\n    constructor(chart: Chart) {\n        super(chart)\n\n        this.highlightItems = []\n\n        this.state = this.settings.disableInitAnimation ? RenderState.Idle : RenderState.Init\n    }\n\n    render() {\n        super.render()\n\n        this.renderTitle()\n    }\n\n    destroy() {\n        this.isDestroy = true\n\n        this.canvas.remove()\n    }\n\n    renderDropdown() {\n        this.onClickEvent = this.dropdown?.render(this.onMouseMoveEvent, this.onClickEvent)\n    }\n\n    resize() {\n        this.#calculateSizes()\n        this.tooltip.refresh()\n        this.dropdown?.resize()\n    }\n\n    prepareSettings() {\n        this.data = <T>this.settings.data\n\n        const domRect = this.node.parentElement!.getBoundingClientRect()\n\n        this.settings.minWidth = isNaN(+this.settings.width)\n                                 ? 0\n                                 : +this.settings.width\n        this.settings.minHeight = isNaN(+this.settings.height)\n                                  ? 0\n                                  : +this.settings.height\n\n        this.settings.width = this.settings.minWidth != 0 && domRect.width < this.settings.minWidth\n                              ? this.settings.minWidth\n                              : domRect.width\n\n        this.settings.height = this.settings.minHeight != 0 && domRect.height < this.settings.minHeight\n                               ? this.settings.minHeight\n                               : domRect.height\n\n        this.canvas.width = this.settings.width\n        this.canvas.height = this.settings.height\n\n        for (let item of this.settings.data.values) {\n            item.id = Helper.guid()\n            item.label ??= TextResources.noLabel\n        }\n\n        this.calculateColors()\n\n        for (let item of this.settings.contextMenu ?? [])\n            if (item.id != undefined)\n                item.action = data => this.node.dispatchEvent(new CustomEvent(item.id ?? '', { detail: data }))\n    }\n\n    calculateColors(force: boolean = false) {\n        const baseColor = this.settings.baseColor ?? Helper.randomColor()\n        let adjustStep = Math.round(100 / this.settings.data.values.length),\n            adjustAmount = -50\n\n        if (adjustStep <= 1)\n            adjustStep = 1\n\n        for (let item of this.settings.data.values)\n            if (item.color == undefined || force)\n                item.color = Helper.adjustColor(baseColor, adjustAmount += adjustStep)\n    }\n\n    initDropdown() {\n    }\n\n    renderContextMenu(data: any) {\n        if (this.dropdown?.isActive) {\n            this.onContextMenuEvent = undefined\n\n            return false\n        }\n\n        if (this.onContextMenuEvent != undefined && this.settings.contextMenu?.length != 0) {\n            if (this.contextMenu == undefined && this.settings.contextMenu != undefined) {\n                let clone: DropdownItem[] = []\n\n                for (const item of this.settings.contextMenu)\n                    if (!item.condition || item.condition(data))\n                        clone.push({\n                            id: item.id,\n                            text: item.text,\n                            isDivider: item.isDivider,\n                            action: () => {\n                                item.action(data)\n\n                                this.onContextMenuEvent = undefined\n                                this.contextMenu = undefined\n                            }\n                        })\n\n                this.contextMenu = new Dropdown(this.canvas, {\n                    x: this.onContextMenuEvent.x - this.canvasPosition.x,\n                    y: this.onContextMenuEvent.y - this.canvasPosition.y,\n                    items: clone,\n                    data: data\n                })\n\n                this.contextMenu.resize()\n\n                this.onClickEvent = undefined\n            }\n\n            const isClick = this.onClickEvent != undefined\n\n            this.onClickEvent = this.contextMenu?.render(this.onMouseMoveEvent, this.onClickEvent)\n\n            if (this.onClickEvent == undefined && isClick) {\n                this.contextMenu = undefined\n                this.onContextMenuEvent = undefined\n\n                return true\n            }\n        }\n\n        return false\n    }\n\n    highlight(value?: Value) {\n        if (value)\n            this.highlightItems = [value.id]\n        else\n            this.highlightItems = []\n    }\n\n    closeDropdowns() {\n        this.dropdown?.close()\n        this.onContextMenuEvent = undefined\n    }\n\n    protected renderTitle() {\n        const ctx = Canvas.getContext(this.canvas)\n\n        if (this.settings.title) {\n            TextStyles.title(ctx)\n            ctx.fillText(this.settings.title, this.canvas.width / 2, Constants.Values.titleOffset)\n        }\n    }\n\n    #calculateSizes() {\n        let domRect = this.node.getBoundingClientRect()\n\n        this.settings.width = this.settings.minWidth && domRect.width < this.settings.minWidth\n                              ? this.settings.minWidth\n                              : domRect.width\n        this.settings.height = this.settings.minHeight && domRect.height < this.settings.minHeight\n                               ? this.settings.minHeight\n                               : domRect.height\n\n        this.canvas.width = this.settings.width\n        this.canvas.height = this.settings.height\n\n        if (this.settings.enableLegend) {\n            if (this.settings.legendPlace == undefined\n                || this.settings.legendPlace == LegendPlace.Top\n                || this.settings.legendPlace == LegendPlace.Bottom)\n                this.canvas.height -= Legend.getLegendHeight(this.settings.data.values, this.canvas.width)\n\n            if (this.settings.legendPlace == LegendPlace.Left\n                || this.settings.legendPlace == LegendPlace.Right)\n                this.canvas.width -= 500\n        }\n    }\n\n    protected getMousePosition(event: MouseEvent): Point {\n        return {\n            x: event.clientX - this.canvasPosition.x + scrollX,\n            y: event.clientY - this.canvasPosition.y + scrollY\n        }\n    }\n\n    applySettings(settings: ChartSettings) {\n        this.settings = settings\n    }\n}","import { Value } from 'types/base/Value'\nimport { TableValue } from 'types/TableValue'\nimport { TableData } from 'types/TableData'\nimport { Data } from 'types/interfaces/Data'\n\nexport class TreeData implements Data {\n    values: Value[]\n\n    padding: number\n\n    static getRows(data: TreeData): TableData {\n        const key = 'Value'\n\n        let values: TableValue[] = []\n\n        for (const value of data.values)\n            values.push({\n                name: value.label,\n                values: new Map([[key, value.value]])\n            })\n\n        return {\n            headers: [\n                {\n                    value: key,\n                    display: key\n                }\n            ],\n            values: values\n        }\n    }\n}","import { TableValue } from 'types/TableValue'\nimport { Sector } from 'types/Sector'\nimport { TableData } from 'types/TableData'\nimport { Data } from 'types/interfaces/Data'\n\nexport class CircularData implements Data {\n    values: Sector[]\n\n    innerRadius: number\n\n    innerTitle: string\n\n    static getRows(data: CircularData): TableData {\n        const key = 'Value'\n\n        let values: TableValue[] = []\n\n        for (const value of data.values)\n            values.push({\n                name: value.label,\n                values: new Map([[key, value.value]])\n            })\n\n        return {\n            headers: [\n                {\n                    value: key,\n                    display: key\n                }\n            ],\n            values: values\n        }\n    }\n}","export class Value {\n    id: string\n\n    baseColor: string\n\n    color: string\n\n    textColor: string\n\n    label: string\n\n    disabled: boolean\n\n    hideInLegend: boolean\n\n    data: { [key: string]: string }\n\n    value: number\n\n    toggle(transition: number) {\n        if (transition == 0)\n            this.disabled = !this.disabled\n    }\n\n    checkCondition(): boolean {\n        return false\n    }\n\n    reset() {\n        this.disabled = false\n    }\n}","import { PlotData } from 'types/data/PlotData'\nimport { Renderer } from 'types/base/Renderer'\nimport * as Helper from 'Helper'\nimport { DropdownItem } from 'types/DropdownItem'\nimport { PlotAxis } from 'types/PlotAxis'\nimport { Paddings } from 'types/Paddings'\nimport { Dropdown } from 'Dropdown'\nimport { HoverItem } from 'types/HoverItem'\nimport { PlotSeries } from 'types/PlotSeries'\nimport { Tooltip } from 'Tooltip'\nimport { Theme } from 'Theme'\nimport { Chart } from 'Chart'\nimport { TextStyles } from 'helpers/TextStyles'\nimport { TooltipValue } from 'types/TooltipValue'\nimport { Export } from 'Export'\nimport { Decomposition } from 'Decomposition'\nimport { Modal } from 'Modal'\nimport { TextResources } from 'static/TextResources'\nimport { Formatter } from 'helpers/Formatter'\nimport { Canvas } from 'helpers/Canvas'\nimport { AnimationType, Icon, LineType, PlotAxisType, PlotType, RenderState } from 'static/Enums'\nimport * as Constants from 'static/constants/Index'\n\nexport class PlotRenderer extends Renderer<PlotData> {\n    #x: PlotAxis\n\n    #y: PlotAxis\n\n    #paddings: Paddings\n\n    #tooltipX: number\n\n    #tooltipY: number\n\n    #labelsX: Map<number, string>\n\n    #labelsY: Map<number, string>\n\n    #allValuesX: any[]\n\n    #allValuesY: any[]\n\n    #base: ImageBitmap | undefined\n\n    #backLines: ImageData | undefined\n\n    #yAxisStep: number\n\n    #plot: DOMRect\n\n    #hoverX: HoverItem | undefined\n\n    constructor(chart: Chart) {\n        super(chart)\n    }\n\n    render() {\n        super.render()\n\n        let tooltipLines = [\n            new TooltipValue(this.#labelsX.get(Math.round(this.#tooltipX))\n                             ?? this.#labelsY.get(Math.round(this.#tooltipY)))\n        ]\n\n        const ctx = Canvas.getContext(this.canvas)\n\n        TextStyles.regular(ctx)\n        ctx.lineJoin = 'round'\n\n        const axisLineHoverColor = Theme.lineActive\n\n        this.#renderBackLines()\n        this.#renderBase(true)\n\n        let x = 0,\n            y = 0,\n            yValue = 0,\n            yHeight = 0,\n            columnWidth = 0\n\n        const seriesToRender = this.data.values.filter(s => !s.disabled)\n\n        let columnsIndex = 0,\n            columnsCount = seriesToRender.filter(s => s.type == PlotType.Column).length\n\n        let barsIndex = 0,\n            barsCount = seriesToRender.filter(s => s.type == PlotType.Bar).length\n\n        let stackingAccumulator = []\n        for (let i = 0; i < this.#allValuesY.length; i++)\n            stackingAccumulator.push(0)\n\n        for (const series of seriesToRender) {\n            ctx.beginPath()\n\n            ctx.strokeStyle = series.color\n            ctx.fillStyle = series.color\n            ctx.lineWidth = series.width\n            ctx.lineCap = 'round'\n\n            const anyHighlight = this.highlightItems.length != 0\n\n            if (!this.animations.contains(series.id, AnimationType.Init)) {\n                const changeColor = (transition: number, event: AnimationType) => {\n                    this.animations.reload(series.id, event)\n\n                    if (transition == 0)\n                        return\n\n                    let opacity = Math.round(255 - 127 * transition).toString(16)\n                    if (opacity.length < 2)\n                        opacity = 0 + opacity\n\n                    ctx.fillStyle = series.color + opacity\n                    ctx.strokeStyle = series.color + opacity\n                }\n\n                if (anyHighlight && !this.highlightItems.includes(series.id)) {\n                    this.animations.handle(\n                        series.id,\n                        AnimationType.AnotherItemOver,\n                        {\n                            duration: Constants.Animations.circular,\n                            body: transition => {\n                                changeColor(transition, AnimationType.AnotherItemLeave)\n                            }\n                        }\n                    )\n                } else if (!anyHighlight) {\n                    this.animations.handle(\n                        series.id,\n                        AnimationType.AnotherItemLeave,\n                        {\n                            timer: Constants.Dates.minDate,\n                            duration: Constants.Animations.circular,\n                            backward: true,\n                            body: transition => {\n                                changeColor(transition, AnimationType.AnotherItemOver)\n                            }\n                        }\n                    )\n                }\n            }\n\n            switch (series.lineType) {\n                case LineType.Dash:\n                    ctx.setLineDash([series.width * 3, series.width * 2])\n\n                    break\n\n                case LineType.Dotted:\n                    ctx.setLineDash([series.width, series.width])\n\n                    break\n\n                case LineType.Solid:\n                default:\n                    break\n            }\n\n            for (const value of series.values) {\n                let index = series.values.indexOf(value),\n                    xIndex = this.#allValuesX.indexOf(this.data.xType == PlotAxisType.Date ? value.x?.toString() : value.x),\n                    yIndex = this.#allValuesY.indexOf(value.y)\n\n                const getTooltipValue = () => {\n                    return {\n                        x: Formatter.format(value.x, this.data.xType),\n                        y: Formatter.format(value.y, this.data.xType, this.settings.valuePostfix)\n                    }\n                }\n\n                x = this.#paddings.left\n                if (series.type != PlotType.Bar)\n                    x += xIndex * this.#x.step\n                if (series.type == PlotType.Line)\n                    x -= this.#x.step / 2 - this.#x.step\n\n                switch (series.type) {\n                    case PlotType.Line:\n                        y = this.#paddings.top + this.#plot.height - <number>value.y / this.#y.unit * this.#y.step\n                            - Math.abs(this.#y.min / this.#y.unit * this.#y.step)\n\n                        const pointDuration = 1500 / series.values.length * 1.2\n\n                        if (this.state == RenderState.Init || this.animations.contains(value.id, AnimationType.Init)) {\n                            this.animations.handle(value.id,\n                                AnimationType.Init,\n                                {\n                                    timer: new Date(Date.now()).addMilliseconds(pointDuration * (index - 1)),\n                                    duration: pointDuration,\n                                    continuous: true,\n                                    body: transition => {\n                                        if (index == 0)\n                                            return\n\n                                        x = this.#paddings.left + xIndex * this.#x.step - this.#x.step / 2\n                                        y = this.#paddings.top + this.#plot.height - <number>value.y / this.#y.unit * this.#y.step\n                                            - Math.abs(this.#y.min / this.#y.unit * this.#y.step)\n\n                                        const next = series.values[index - 1]\n\n                                        let prevValue = {\n                                            x: this.#paddings.left + xIndex * this.#x.step - this.#x.step / 2,\n                                            y: this.#paddings.top + this.#plot.height - <number>next.y / this.#y.unit * this.#y.step\n                                               - Math.abs(this.#y.min / this.#y.unit * this.#y.step)\n                                        }\n\n                                        const endPointX = prevValue.x + (this.#x.step + (x - prevValue.x)) * transition,\n                                            endPointY = prevValue.y + (y - prevValue.y) * transition\n\n                                        if (prevValue.x != endPointX && prevValue.y != endPointY) {\n                                            ctx.moveTo(prevValue.x, prevValue.y)\n                                            ctx.lineTo(endPointX, endPointY)\n                                        }\n                                    }\n                                })\n                        } else {\n                            ctx.lineTo(x, y)\n\n                            if (this.#isOnX(x)) {\n                                const mouse = this.getMousePosition(this.onMouseMoveEvent)\n\n                                if (Math.abs(mouse.y - y) < 5) {\n                                    this.#hoverX = {\n                                        x: x,\n                                        y: y,\n                                        index: index,\n                                        data: value.data,\n                                        series: series\n                                    }\n\n                                    tooltipLines.push(new TooltipValue(`${ series.label }: ${ getTooltipValue().y }`, series.color))\n                                    this.#tooltipX = x - this.#x.step / 2\n                                }\n                            }\n                        }\n\n                        break\n\n                    case PlotType.AttentionLine:\n                        yValue = this.canvas.height - this.#paddings.bottom - <number>value.y / this.#y.unit * this.#y.step\n\n                        ctx.moveTo(this.#paddings.left, yValue)\n\n                        if (this.state == RenderState.Init || this.animations.contains(value.id, AnimationType.Init))\n                            this.animations.handle(value.id,\n                                AnimationType.Init,\n                                {\n                                    duration: 1500,\n                                    continuous: true,\n                                    body: transition => {\n                                        ctx.lineTo(this.#paddings.left + (this.canvas.width - this.#paddings.left - this.#paddings.right) * transition,\n                                            this.canvas.height - this.#paddings.bottom - <number>value.y / this.#y.unit * this.#y.step)\n                                    }\n                                })\n                        else\n                            ctx.lineTo(this.canvas.width - this.#paddings.right, yValue)\n\n                        break\n\n                    case PlotType.Column:\n                        yValue = <number>value.y > this.data.yMax ? this.data.yMax : <number>value.y\n\n                        y = this.#plot.height * yValue / this.#y.max\n                        if (y < this.#y.minStep)\n                            y = this.#y.minStep\n\n                        columnWidth = this.#x.step * (series.width ? series.width / 100 : .5) / columnsCount\n\n                        ctx.beginPath()\n\n                        if (this.state == RenderState.Init || this.animations.contains(value.id + columnsIndex, AnimationType.Init)) {\n                            this.animations.handle(value.id + columnsIndex,\n                                AnimationType.Init,\n                                {\n                                    duration: 800,\n                                    continuous: true,\n                                    body: transition => {\n                                        yValue = <number>value.y > this.data.yMax ? this.data.yMax : <number>value.y\n\n                                        x = this.#paddings.left + xIndex * this.#x.step\n                                        y = this.#plot.height * yValue / this.#y.max * transition\n\n                                        if (y < this.#y.minStep)\n                                            y = this.#y.minStep * transition\n\n                                        columnsIndex = this.data.values.filter(s => s.type == PlotType.Column)\n                                                           .indexOf(series)\n\n                                        ctx.roundRect(x + columnsIndex * columnWidth + (this.#x.step - columnsCount * columnWidth) / 2,\n                                            this.canvas.height - this.#paddings.bottom - y,\n                                            columnWidth,\n                                            y,\n                                            [6, 6, 0, 0])\n                                        ctx.fill()\n                                    }\n                                })\n                        } else {\n                            if (this.#isInArea(x + columnsIndex * columnWidth + (this.#x.step - columnsCount * columnWidth) / 2,\n                                    this.canvas.height - this.#paddings.bottom - y,\n                                    columnWidth,\n                                    y)\n                                && (this.contextMenu?.isActive == undefined\n                                    || this.contextMenu?.isActive == false)) {\n                                this.#hoverX = {\n                                    x: x,\n                                    y: y,\n                                    index: index,\n                                    data: value.data,\n                                    series: series\n                                }\n\n                                tooltipLines.push(new TooltipValue(`${ series.label }: ${ getTooltipValue().y }`, series.color))\n                                this.#tooltipX = x\n                            }\n\n                            ctx.roundRect(x + columnsIndex * columnWidth + (this.#x.step - columnsCount * columnWidth) / 2,\n                                this.canvas.height - this.#paddings.bottom - y,\n                                columnWidth,\n                                y,\n                                [6, 6, 0, 0])\n                            ctx.fill()\n                        }\n\n                        break\n\n                    case PlotType.Bar:\n                        y = this.#paddings.top + yIndex * this.#y.step + this.#y.step / 2\n                            + (100 - series.width) * this.#y.step / 100 / 2\n\n                        const seriesHeight = (series.width * this.#y.step / 100) / barsCount\n\n                        if (this.state == RenderState.Init || this.animations.contains(value.id + barsIndex, AnimationType.Init)) {\n                            this.animations.handle(value.id + barsIndex,\n                                AnimationType.Init,\n                                {\n                                    duration: 800,\n                                    continuous: true,\n                                    body: transition => {\n                                        y = this.#paddings.top + yIndex * this.#y.step + this.#y.step / 2\n                                            + (100 - series.width) * this.#y.step / 100 / 2\n\n                                        barsIndex = this.data.values.filter(s => s.type == PlotType.Bar)\n                                                        .indexOf(series)\n\n                                        ctx.fillRect(x,\n                                            y - this.#y.step / 2 + barsIndex * seriesHeight,\n                                            <number>value.x / this.#x.unit * this.#x.step * transition,\n                                            seriesHeight)\n                                    }\n                                })\n                        } else {\n                            if (!anyHighlight) {\n                                if (this.#isInArea(x,\n                                    y - this.#y.step / 2 + barsIndex * seriesHeight,\n                                    <number>value.x / this.#x.unit * this.#x.step,\n                                    seriesHeight)) {\n                                    this.#hoverX = {\n                                        x: x,\n                                        y: y,\n                                        index: index,\n                                        data: value.data,\n                                        series: series\n                                    }\n\n                                    ctx.fillStyle += '88'\n\n                                    tooltipLines.push(new TooltipValue(`${ series.label }: ${ getTooltipValue().x }`, series.color))\n                                    this.#tooltipY = y - this.#y.step / 2\n                                } else {\n                                    ctx.fillStyle = series.color\n                                }\n                            }\n\n                            ctx.fillRect(x,\n                                y - this.#y.step / 2 + barsIndex * seriesHeight,\n                                <number>value.x / this.#x.unit * this.#x.step,\n                                seriesHeight)\n                        }\n\n                        break\n\n                    case PlotType.StackingColumn:\n                        y = this.canvas.height - this.#paddings.bottom - <number>value.y / this.#y.unit * this.#y.step\n\n                        columnWidth = this.#x.step * (series.width ? series.width / 100 : .5)\n\n                        if (this.state == RenderState.Init || this.animations.contains(value.id + index, AnimationType.Init)) {\n                            this.animations.handle(value.id + index,\n                                AnimationType.Init,\n                                {\n                                    duration: 800,\n                                    continuous: true,\n                                    body: transition => {\n                                        columnsIndex = this.data.values.filter(s => s.type == PlotType.StackingColumn\n                                                                                    && s.values.filter(v => this.data.xType == PlotAxisType.Date\n                                                                                                            ? (v.x as Date).getTime() == (value.x as Date).getTime()\n                                                                                                            : v.x == value.x)\n                                                                                        .length > 0)\n                                                           .indexOf(series)\n\n                                        x = this.#paddings.left + xIndex * this.#x.step\n                                        y = this.canvas.height - this.#paddings.bottom - <number>value.y / this.#y.unit * this.#y.step\n\n                                        if (columnsIndex == 0)\n                                            stackingAccumulator[xIndex] = 0\n\n                                        let offset = stackingAccumulator[xIndex] != undefined\n                                                     ? stackingAccumulator[xIndex]\n                                                     : 0\n\n                                        yValue = this.canvas.height - this.#paddings.bottom + offset\n                                        yHeight = (y - this.canvas.height + this.#paddings.bottom) * transition\n\n                                        if (yValue > this.#paddings.top) {\n                                            if (yValue + yHeight < this.#paddings.top)\n                                                yHeight -= yValue + yHeight - this.#paddings.top\n\n                                            ctx.fillRect(x + (this.#x.step - columnWidth) / 2,\n                                                yValue,\n                                                columnWidth,\n                                                yHeight)\n                                        }\n\n                                        stackingAccumulator[xIndex] += (y - this.canvas.height + this.#paddings.bottom) * transition\n                                    }\n                                })\n                        } else {\n                            if (columnsIndex == 0)\n                                stackingAccumulator[xIndex] = 0\n\n                            let offset = stackingAccumulator[xIndex] != undefined\n                                         ? stackingAccumulator[xIndex]\n                                         : 0\n\n                            yValue = this.canvas.height - this.#paddings.bottom + offset\n                            yHeight = y - this.canvas.height + this.#paddings.bottom\n\n                            if (yValue > this.#paddings.top) {\n                                if (yValue + yHeight < this.#paddings.top)\n                                    yHeight -= yValue + yHeight - this.#paddings.top\n\n                                if (this.#isInArea(x + (this.#x.step - columnWidth) / 2,\n                                    yValue + yHeight,\n                                    columnWidth,\n                                    Math.abs(yHeight))) {\n                                    this.#hoverX = {\n                                        x: x,\n                                        y: y,\n                                        index: xIndex,\n                                        data: value.data,\n                                        series: series\n                                    }\n\n                                    tooltipLines.push(new TooltipValue(`${ series.label }: ${ getTooltipValue().y }`, series.color))\n                                    this.#tooltipX = x\n                                }\n\n                                ctx.fillRect(x + (this.#x.step - columnWidth) / 2,\n                                    yValue,\n                                    columnWidth,\n                                    yHeight)\n                            }\n\n                            stackingAccumulator[xIndex] += (y - this.canvas.height + this.#paddings.bottom)\n                        }\n\n                        break\n                }\n            }\n\n            ctx.setLineDash([])\n\n            switch (series.type) {\n                case PlotType.Line:\n                    ctx.stroke()\n\n                    if (this.#hoverX && this.#hoverX.series == series) {\n                        ctx.beginPath()\n                        ctx.lineWidth = 1\n                        ctx.strokeStyle = axisLineHoverColor\n                        ctx.moveTo(this.#paddings.left, this.#hoverX.y)\n                        ctx.lineTo(this.canvas.width - this.#paddings.right, this.#hoverX.y)\n                        ctx.stroke()\n\n                        let radius = Math.round(series.width * 1.1)\n                        if (radius < 5)\n                            radius = 5\n\n                        ctx.beginPath()\n                        ctx.arc(this.#hoverX.x, this.#hoverX.y, radius, 0, 2 * Math.PI)\n                        ctx.fill()\n                        ctx.lineWidth = Math.ceil(radius / 2)\n                        ctx.strokeStyle = Helper.adjustColor(series.color, 50)\n                        ctx.stroke()\n                    }\n\n                    break\n\n                case PlotType.AttentionLine:\n                    ctx.stroke()\n\n                    TextStyles.regular(ctx)\n                    ctx.fillText(series.label,\n                        this.#paddings.left + (this.canvas.width - this.#paddings.left - this.#paddings.right) / 2,\n                        this.canvas.height - this.#paddings.bottom - <number>series.values[0].y / this.#y.unit * this.#y.step + 16)\n\n                    break\n\n                case PlotType.Column:\n                case PlotType.StackingColumn:\n                    if (this.#hoverX)\n                        this.highlight(this.#hoverX.series)\n\n                    columnsIndex++\n\n                    break\n\n                case PlotType.Bar:\n                    if (this.#hoverX) {\n                        ctx.lineWidth = 1\n                        ctx.strokeStyle = axisLineHoverColor\n                        ctx.moveTo(this.#paddings.left,\n                            this.#tooltipY + this.#y.step / 2)\n                        ctx.lineTo(this.canvas.width - this.#paddings.right,\n                            this.#tooltipY + this.#y.step / 2)\n                        ctx.stroke()\n                    }\n\n                    barsIndex++\n\n                    break\n            }\n        }\n\n        this.#renderBase()\n\n        this.renderTitle()\n\n        this.tooltip.render(tooltipLines.length > 1 && !this.dropdown?.isActive,\n            this.onMouseMoveEvent,\n            tooltipLines,\n            this.#hoverX\n            ? this.#hoverX.series!.values[this.#hoverX.index]\n            : undefined)\n\n        if (!this.isDestroy)\n            requestAnimationFrame(this.render.bind(this))\n\n        this.state = RenderState.Idle\n\n        super.renderDropdown()\n\n        if (this.onContextMenuEvent && !this.#hoverX)\n            this.onContextMenuEvent = undefined\n\n        if (this.#hoverX == undefined)\n            this.highlight()\n\n        if (this.#hoverX\n            && (this.renderContextMenu(this.#hoverX.data)\n                || !this.onContextMenuEvent))\n            this.#hoverX = undefined\n    }\n\n    refresh() {\n        super.refresh()\n    }\n\n    resize() {\n        super.resize()\n\n        this.#base = undefined\n\n        this.#calculateSizes()\n    }\n\n    #isOnX(x: number): boolean {\n        if (!this.onMouseMoveEvent)\n            return false\n\n        const mouse = this.getMousePosition(this.onMouseMoveEvent)\n\n        return !(this.dropdown?.isActive ?? false)\n               && x - this.#x.step / 2 <= mouse.x && mouse.x < x + this.#x.step / 2\n               && this.#paddings.top <= mouse.y && mouse.y <= this.canvas.height - this.#paddings.bottom\n               && this.#paddings.left < mouse.x\n    }\n\n    #isInArea(x: number, y: number, w: number, h: number): boolean {\n        if (!this.onMouseMoveEvent)\n            return false\n\n        const mouse = this.getMousePosition(this.onMouseMoveEvent)\n\n        return !(this.dropdown?.isActive ?? false)\n               && mouse.x >= x && mouse.x <= x + w\n               && mouse.y >= y && mouse.y <= y + h\n    }\n\n    #renderBase(skip: boolean = false) {\n        if (this.#base && skip)\n            return\n\n        if (this.data.simple)\n            return\n\n        const ctx = Canvas.getContext(this.canvas)\n\n        if (skip)\n            ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\n\n        if (this.#base) {\n            ctx.drawImage(this.#base, 0, 0)\n            return\n        }\n\n        if (!skip)\n            return\n\n        const axisLabelOffset = 12\n\n        ctx.fillStyle = Theme.canvasBackground\n\n        ctx.fillRect(0, 0, this.#paddings.left, this.canvas.height)\n        ctx.fillRect(0, 0, this.canvas.width, this.#paddings.top)\n        ctx.fillRect(this.canvas.width - this.#paddings.right, 0, this.canvas.width, this.canvas.height)\n        ctx.fillRect(0, this.canvas.height - this.#paddings.bottom, this.canvas.width, this.canvas.height)\n\n        const isContainsBar = this.data.values.filter(s => s.type == PlotType.Bar).length > 0\n\n        ctx.setLineDash([])\n\n        if (this.data.xTitle || this.data.yTitle) {\n            ctx.textAlign = 'center'\n            ctx.textBaseline = 'bottom'\n            ctx.fillStyle = Theme.text\n\n            if (this.data.xTitle)\n                ctx.fillText(this.data.xTitle,\n                    this.#paddings.left + (this.canvas.width - this.#paddings.left - this.#paddings.right) / 2,\n                    this.canvas.height - 4)\n\n            if (this.data.yTitle) {\n                ctx.rotate(-Math.PI / 2)\n\n                ctx.textBaseline = 'top'\n\n                ctx.fillText(this.data.yTitle,\n                    -(this.#paddings.top + (this.canvas.height - this.#paddings.top - this.#paddings.bottom) / 2),\n                    8)\n\n                ctx.resetTransform()\n            }\n        }\n\n        ctx.textAlign = 'center'\n        ctx.textBaseline = 'top'\n\n        const step = this.#x.step,\n            xYPos = this.canvas.height - this.#paddings.bottom\n\n        let xCounter = 0,\n            acc = this.#paddings.left + step / 2\n\n        for (let i = 0; i < this.#allValuesX.length + 1; i++)\n            this.#labelsX.trySet(\n                Math.round(this.#paddings.left + i * this.#x.step),\n                Formatter.format(this.#allValuesX[i], this.data.xType)\n            )\n\n        const maxLabelWidth = Math.max(\n            ...[...this.#labelsX.values()].map(label => Math.ceil(Helper.stringWidth(label)))\n        ) + 10\n        const maxCount = Math.floor(\n            (this.canvas.width - this.#paddings.left - this.#paddings.right) / maxLabelWidth\n        )\n        const renderStep = Math.ceil(1 / (maxCount / this.#allValuesX.length))\n\n        while (acc < this.canvas.width - this.#paddings.right) {\n            if (xCounter % renderStep == 0) {\n                ctx.fillStyle = Theme.text + 'b7'\n\n                ctx.fillText(\n                    (this.#labelsX.get(Math.round(acc - this.#x.step / 2)) ?? '')\n                        + (!isContainsBar ? '' : this.settings.valuePostfix),\n                    acc,\n                    xYPos + axisLabelOffset / 2\n                )\n            }\n\n            acc += step\n            xCounter++\n        }\n\n        ctx.textAlign = 'right'\n        ctx.textBaseline = 'middle'\n\n        const yCount = this.#y.count > 10 ? 10 : this.#y.count\n\n        let yCounter = isContainsBar ? 1 : 0,\n            yStep = this.#allValuesY.length / yCount\n\n        for (let i = isContainsBar ? 1 : 0; i < this.#allValuesY.length + 1; i++) {\n            const labelY = this.canvas.height - yCounter * yStep * this.#y.step - this.#paddings.bottom,\n                labelYAsKey = Math.round(this.canvas.height - i * this.#y.step - this.#paddings.bottom)\n\n            if (!this.#labelsY.get(labelYAsKey))\n                this.#labelsY.set(labelYAsKey,\n                    Formatter.format(\n                        this.#y.min + (i + (isContainsBar ? -1 : 0)) * (this.#y.max - this.#y.min) / this.#y.count,\n                        PlotAxisType.Number,\n                        this.settings.valuePostfix\n                    ))\n\n            if (i >= yCounter * yStep) {\n                const label = {\n                    x: this.#paddings.left,\n                    y: labelY,\n                    label: this.#yAxisStep >= 1\n                           ? Math.round((this.#y.min + (yCounter * yStep + (isContainsBar ? -1 : 0)) * (this.#y.max - this.#y.min) / this.#y.count) / this.#yAxisStep) * this.#yAxisStep\n                           : Math.round(this.#y.min + (yCounter * yStep + (isContainsBar ? -1 : 0)) * (this.#y.max - this.#y.min) / this.#y.count / this.#yAxisStep) * this.#yAxisStep\n                }\n\n                if (label.label == -0)\n                    label.label = 0\n\n                let postfix = ''\n\n                if (this.data.shortLabels) {\n                    const countOfTens = Math.floor(label.label.toString().length / 4)\n\n                    if (countOfTens > 0) {\n                        label.label /= Math.pow(1000, countOfTens)\n\n                        postfix = [\n                            TextResources.thousandShort,\n                            TextResources.millionShort,\n                            TextResources.billionShort\n                        ][countOfTens - 1]\n                    }\n                }\n\n                ctx.fillText(\n                    Formatter.number(label.label)\n                        + postfix\n                        + (isContainsBar ? '' : this.settings.valuePostfix ?? ''),\n                    label.x - axisLabelOffset,\n                    label.y + (isContainsBar ? this.#y.step / 2 : 0)\n                )\n\n                yCounter++\n            }\n        }\n\n        ctx.beginPath()\n\n        ctx.strokeStyle = Theme.line\n        ctx.lineWidth = 1\n\n        const offset = .5,\n            isBar = this.data.values.filter(v => v.type == PlotType.Bar).length > 0\n\n        ctx.moveTo(this.#paddings.left - (isBar ? offset : 0),\n            this.canvas.height - this.#paddings.bottom + (isBar ? -offset : offset))\n\n        if (isBar)\n            ctx.lineTo(this.#paddings.left - offset, this.#paddings.top)\n        else\n            ctx.lineTo(this.canvas.width - this.#paddings.right, this.canvas.height - this.#paddings.bottom + offset)\n\n        ctx.stroke()\n\n        if (this.canvas.width > 0 && this.canvas.height > 0)\n            createImageBitmap(ctx.getImageData(0, 0, this.canvas.width, this.canvas.height))\n                .then(res => this.#base = res)\n    }\n\n    #renderBackLines() {\n        if (this.data.simple)\n            return\n\n        const ctx = Canvas.getContext(this.canvas)\n\n        if (this.#backLines) {\n            ctx.putImageData(this.#backLines, 0, 0)\n            return\n        }\n\n        ctx.fillStyle = Theme.canvasBackground\n        ctx.fillRect(0, 0, this.canvas.width, this.canvas.height)\n\n        const axisLineColor = Theme.lineAxis\n\n        const isContainsBar = this.data.values.filter(s => s.type == PlotType.Bar).length > 0\n\n        if (isContainsBar) {\n            const step = this.#x.step,\n                xYPos = this.canvas.height - this.#paddings.bottom\n\n            let xCounter = 0,\n                acc = this.#paddings.left + step / 2\n\n            for (let i = 0; i < this.#allValuesX.length + 1; i++)\n                this.#labelsX.trySet(\n                    Math.round(this.#paddings.left + i * this.#x.step),\n                    Formatter.format(this.#allValuesX[i - 1], this.data.xType)\n                )\n\n            const maxLabelWidth = Math.max(\n                ...[...this.#labelsX.values()].map(label => Math.ceil(Helper.stringWidth(label)))\n            ) + 10\n            const maxCount = Math.floor(\n                (this.canvas.width - this.#paddings.left - this.#paddings.right) / maxLabelWidth\n            )\n            const renderStep = Math.ceil(1 / (maxCount / this.#allValuesX.length))\n\n            while (acc < this.canvas.width - this.#paddings.right) {\n                if (xCounter % renderStep == 0) {\n                    ctx.beginPath()\n\n                    ctx.moveTo(acc, xYPos)\n                    ctx.lineTo(acc, this.#paddings.top)\n\n                    ctx.lineWidth = 1\n                    ctx.strokeStyle = axisLineColor\n                    ctx.setLineDash([6, 6])\n                    ctx.stroke()\n                }\n\n                acc += step\n                xCounter++\n            }\n        }\n\n        ctx.textAlign = 'right'\n        ctx.textBaseline = 'middle'\n\n        const yCount = this.#y.count > 10 ? 10 : this.#y.count\n\n        let yCounter = isContainsBar ? 1 : 0,\n            yStep = this.#allValuesY.length / yCount\n\n        for (let i = isContainsBar ? 1 : 0; i < this.#allValuesY.length + 1; i++) {\n            const labelY = this.canvas.height - yCounter * yStep * this.#y.step - this.#paddings.bottom\n\n            if (i >= yCounter * yStep) {\n                const label = {\n                    x: this.#paddings.left,\n                    y: labelY\n                }\n\n                if (this.data.values.filter(s => s.type.isAnyEquals(PlotType.Column, PlotType.StackingColumn, PlotType.Line)).length > 0) {\n                    ctx.beginPath()\n\n                    ctx.moveTo(label.x, label.y)\n                    ctx.lineTo(this.canvas.width - this.#paddings.right, label.y)\n\n                    ctx.lineWidth = 1\n                    ctx.strokeStyle = axisLineColor\n                    ctx.setLineDash([6, 6])\n                    ctx.stroke()\n                }\n\n                yCounter++\n            }\n        }\n\n        if (this.canvas.width > 0 && this.canvas.height > 0)\n            this.#backLines = ctx.getImageData(0, 0, this.canvas.width, this.canvas.height)\n    }\n\n    #calculateSizes() {\n        let xValues = this.data.values.flatMap(s => s.values.map(p => p.x)),\n            yValues = this.data.values.flatMap(s => s.values.map(p => p.y))\n\n        const isDate = this.data.xType == PlotAxisType.Date\n\n        if (isDate) {\n            let tempDate = new Date(Math.min(...(<number[]>xValues)))\n\n            while (tempDate.getTime() < Math.max(...(<number[]>xValues))) {\n                if (!xValues.includes(tempDate.getTime()))\n                    xValues.push(new Date(tempDate.getTime()))\n\n                tempDate = tempDate.addDays(1)\n            }\n\n            xValues.sort((a, b) => a < b ? -1 : 1)\n        }\n\n        yValues.sort((a, b) => b > a ? -1 : 1)\n\n        this.#allValuesX = [...new Set(xValues.filter(x => x != undefined).map(x => isDate ? x.toString() : x))]\n        this.#allValuesY = [...new Set(yValues.filter(y => y != undefined))]\n\n        this.#x = {\n            min: Math.min(...(<number[]>xValues)),\n            max: Math.max(...(<number[]>xValues)),\n            unit: (Math.abs(Math.min(...(<number[]>xValues))) + Math.abs(Math.max(...(<number[]>xValues)))) / (this.#allValuesX.length - 1),\n            step: (this.canvas.width - this.#paddings.left - this.#paddings.right) / this.#allValuesX.length,\n            minStep: 0,\n            count: this.#allValuesX.length\n        }\n\n        let yMin = Math.min(...(<number[]>yValues))\n        if (yMin > 0)\n            yMin = 0\n\n        this.#y = {\n            min: yMin,\n            max: this.data.yMax ?? Math.max(...(<number[]>yValues)),\n            unit: (Math.abs(yMin) + Math.abs(this.data.yMax ?? Math.max(...(<number[]>yValues)))) / (this.#allValuesY.length - 1),\n            step: (this.canvas.height - this.#paddings.top - this.#paddings.bottom) / this.#allValuesY.length,\n            minStep: 0,\n            count: this.#allValuesY.length\n        }\n\n        let stackingColumns = this.data.values.filter(s => s.type == PlotType.StackingColumn)\n\n        let max\n\n        if (stackingColumns.length > 0) {\n            let values = stackingColumns.map(s => s.values.flatMap(v => +v.y))\n\n            max = this.#y.max\n\n            for (let i = 0; i < values[0].length; i++) {\n                let sum = 0\n\n                for (const v of values)\n                    sum += v[i]\n\n                if (sum > max)\n                    max = sum\n            }\n\n            this.#y.max = max > this.data.yMax ? this.data.yMax : max\n            this.#y.unit = (Math.abs(this.#y.min) + Math.abs(this.#y.max)) / (this.#allValuesY.length - 1)\n        }\n\n        const yMaxWidth = Helper.stringWidth(Formatter.number(this.#y.max))\n        if (yMaxWidth > this.#paddings.left - 40 && !this.data.simple) {\n            this.#paddings.left += yMaxWidth - this.#paddings.left + 40\n            this.#x.step = (this.canvas.width - this.#paddings.left - this.#paddings.right) / this.#allValuesX.length\n        }\n\n        this.#yAxisStep = Math.abs(this.#y.min) + Math.abs(this.#y.max)\n\n        if (.5 <= this.#yAxisStep && this.#yAxisStep < 1)\n            this.#yAxisStep = .05\n        else if (1 <= this.#yAxisStep && this.#yAxisStep < 10)\n            this.#yAxisStep = .1\n        else if (10 <= this.#yAxisStep && this.#yAxisStep < 100)\n            this.#yAxisStep = 2\n        else if (100 <= this.#yAxisStep && this.#yAxisStep < 1000)\n            this.#yAxisStep = 20\n        else if (1000 <= this.#yAxisStep && this.#yAxisStep < 10000)\n            this.#yAxisStep = 50\n        else if (10000 <= this.#yAxisStep && this.#yAxisStep < 100000)\n            this.#yAxisStep = 1000\n        else if (100000 <= this.#yAxisStep && this.#yAxisStep < 1000000)\n            this.#yAxisStep = 10000\n        else if (1000000 <= this.#yAxisStep && this.#yAxisStep < 10000000)\n            this.#yAxisStep = 50000\n        else\n            this.#yAxisStep = 1\n\n        if (this.#yAxisStep != 1) {\n            max = yValues.length > 10\n                  ? (this.#y.max / 10 + this.#yAxisStep - (this.#y.max / 10) % this.#yAxisStep) * 10\n                  : Math.ceil(this.#y.max / this.#yAxisStep) * this.#yAxisStep\n\n            this.#y.max = max > this.data.yMax ? this.data.yMax : max\n            this.#y.unit = (Math.abs(this.#y.min) + Math.abs(this.#y.max)) / this.#allValuesY.length\n        }\n\n        this.#plot = {\n            width: this.canvas.width - this.#paddings.left - this.#paddings.right,\n            height: this.canvas.height - this.#paddings.top - this.#paddings.bottom\n        } as DOMRect\n\n        this.#x.minStep = this.#plot.width * 0.002\n        this.#y.minStep = this.#plot.height * 0.002\n    }\n\n    prepareSettings() {\n        super.prepareSettings()\n\n        this.#base = undefined\n        this.#backLines = undefined\n\n        this.data.values = this.data.values.map(v => new PlotSeries(v))\n\n        if (this.data.values.filter(v => v.type == PlotType.Bar).length > 0) {\n            for (let series of this.data.values) {\n                for (let item of series.values) {\n                    const x = item.x\n                    item['x'] = item.y\n                    item['y'] = x\n                }\n\n                series.values.sort((a, b) => b.x > a.x ? 1 : -1)\n            }\n        }\n\n        for (let item of this.data.values) {\n            item.disabled = !item.values\n            item.type ??= PlotType.Line\n\n            for (let it of item.values) {\n                it.id = Helper.guid()\n\n                if (this.data.xType == PlotAxisType.Date) {\n                    if (Helper.isISOString(it.x as string))\n                        it.x = new Date(it.x)\n                    else\n                        console.warn(`${ it.x } is not a date in ISO format.`)\n                }\n            }\n        }\n\n        this.#paddings = {\n            top: 30,\n            right: 40,\n            bottom: 50,\n            left: 80\n        }\n\n        if (this.data.simple)\n            this.#paddings = {\n                top: 10,\n                right: 10,\n                bottom: 10,\n                left: 10\n            }\n\n        if (this.settings.title)\n            this.#paddings.top += Constants.Values.titleOffset\n\n        this.tooltip = new Tooltip(this.canvas, this.settings)\n\n        this.#labelsX = new Map()\n        this.#labelsY = new Map()\n    }\n\n    initDropdown() {\n        super.initDropdown()\n\n        if (!this.data.simple)\n            this.dropdown = new Dropdown(this.canvas,\n                {\n                    x: -10,\n                    y: 10,\n                    icon: Icon.ThreeLines,\n                    items: [\n                        {\n                            text: TextResources.exportPNG,\n                            action: () => {\n                                Export.asPng(this.canvas, this.settings.title)\n                            }\n                        },\n                        {\n                            text: TextResources.exportCSV,\n                            action: () => {\n                                Export.asCsv(Decomposition.toTable(PlotData.getRows(this.data)), this.settings.title)\n                            }\n                        },\n                        {\n                            isDivider: true\n                        } as DropdownItem,\n                        {\n                            text: TextResources.decomposeToTable,\n                            action: () => {\n                                new Modal(Decomposition.toTable(PlotData.getRows(this.data))).open()\n                            }\n                        }\n                    ]\n                })\n        else\n            this.dropdown = undefined\n    }\n}","export class Dates {\n    static minDate = new Date(2000, 1, 1)\n}","import { Theme } from 'Theme'\n\nexport abstract class TextStyles {\n    static title(context: CanvasRenderingContext2D) {\n        context.fillStyle = Theme.text\n        context.textAlign = 'center'\n        context.textBaseline = 'middle'\n        context.font = '20px sans-serif'\n    }\n\n    static regular(context: CanvasRenderingContext2D) {\n        context.fillStyle = Theme.text\n        context.textAlign = 'center'\n        context.textBaseline = 'middle'\n        context.font = '14px sans-serif'\n    }\n\n    static large(context: CanvasRenderingContext2D) {\n        context.fillStyle = Theme.text\n        context.textAlign = 'center'\n        context.textBaseline = 'middle'\n        context.font = '16px sans-serif'\n    }\n\n    static tooltip(context: CanvasRenderingContext2D) {\n        context.font = '14px sans-serif'\n        context.textAlign = 'start'\n        context.textBaseline = 'alphabetic'\n    }\n\n    static circularLabel(context: CanvasRenderingContext2D, isRight: boolean) {\n        context.textAlign = isRight ? 'start' : 'end'\n        context.textBaseline = 'alphabetic'\n        context.font = '14px sans-serif'\n    }\n}","import { ChartSettings } from 'types/ChartSettings'\nimport { Animations } from 'Animations'\nimport { Tooltip } from 'Tooltip'\nimport { Dropdown } from 'Dropdown'\nimport { Chart } from 'Chart'\nimport { Canvas } from 'helpers/Canvas'\nimport { Events, RenderState, Tag } from 'static/Enums'\nimport { Styles } from 'static/constants/Styles'\nimport { Theme } from 'Theme'\n\nexport class Renderable {\n    node: HTMLElement\n\n    canvas: HTMLCanvasElement\n\n    settings: ChartSettings\n\n    animations: Animations\n\n    tooltip: Tooltip\n\n    protected state: RenderState = RenderState.Init\n\n    protected canvasPosition: DOMRect\n\n    protected onMouseMoveEvent: MouseEvent\n\n    protected onClickEvent: MouseEvent | undefined\n\n    protected onContextMenuEvent: MouseEvent | undefined\n\n    protected contextMenu: Dropdown | undefined\n\n    constructor(chart: Chart) {\n        this.node = chart.node\n        this.settings = chart.settings\n        this.animations = new Animations()\n\n        this.canvas = document.createElement(Tag.Canvas)\n\n        this.canvas.style.imageRendering = Styles.ImageRendering.Pixelated\n\n        this.node.append(this.canvas)\n\n        this.initAnimations()\n    }\n\n    render() {\n        const ctx = Canvas.getContext(this.canvas)\n\n        ctx.fillStyle = Theme.canvasBackground\n        ctx.fillRect(0, 0, this.canvas.width, this.canvas.height)\n    }\n\n    refresh() {\n        this.tooltip.refresh()\n        this.state = this.settings.disableInitAnimation ? RenderState.Idle : RenderState.Init\n    }\n\n    resetMouse() {\n        this.onMouseMoveEvent = new MouseEvent(Events.MouseMove)\n        this.onClickEvent = new MouseEvent(Events.Click)\n        this.onContextMenuEvent = undefined\n    }\n\n    initAnimations() {\n        this.tooltip = new Tooltip(this.canvas, this.settings)\n\n        this.canvasPosition = this.canvas.getBoundingClientRect()\n\n        this.canvasPosition.x += scrollX\n        this.canvasPosition.y += scrollY\n\n        if (this.state == RenderState.Init && !this.settings.disableInteractions) {\n            this.canvas.onmousemove = event => this.onMouseMoveEvent = event\n            this.canvas.onclick = event => this.onClickEvent = event\n            this.canvas.oncontextmenu = event => {\n                event.preventDefault()\n                this.contextMenu = undefined\n                if (this.onContextMenuEvent)\n                    this.onContextMenuEvent = undefined\n                else\n                    this.onContextMenuEvent = event\n            }\n            this.canvas.onmouseleave = () => this.onMouseMoveEvent = new MouseEvent(Events.MouseMove)\n        }\n    }\n\n    destroy() {\n        this.canvas.remove()\n    }\n}","import { TreeData } from 'types/data/TreeData'\nimport { Renderer } from 'types/base/Renderer'\nimport { Sector } from 'types/Sector'\nimport * as Helper from 'Helper'\nimport { DropdownItem } from 'types/DropdownItem'\nimport { Dropdown } from 'Dropdown'\nimport { Chart } from 'Chart'\nimport { TextStyles } from 'helpers/TextStyles'\nimport { TooltipValue } from 'types/TooltipValue'\nimport { Export } from 'Export'\nimport { Decomposition } from 'Decomposition'\nimport { Modal } from 'Modal'\nimport { TextResources } from 'static/TextResources'\nimport { Canvas } from 'helpers/Canvas'\nimport { TreeCell } from 'types/TreeCell'\nimport { Formatter } from 'helpers/Formatter'\nimport { AnimationType, Icon, PlotAxisType, RenderState } from 'static/Enums'\nimport * as Constants from 'static/constants/Index'\n\nexport class TreeRenderer extends Renderer<TreeData> {\n    constructor(chart: Chart) {\n        super(chart)\n\n        this.settings.enableLegend = false\n    }\n\n    render() {\n        super.render()\n\n        if (this.data.values.filter(v => v.value > 0).length == 0) {\n            this.#drawEmpty()\n            requestAnimationFrame(this.render.bind(this))\n            return\n        }\n\n        const titleOffset = this.settings.title ? Constants.Values.titleOffset : 0\n\n        const maxWidth = this.canvas.width - this.data.padding * 2,\n            maxHeight = this.canvas.height - this.data.padding * 2 - titleOffset\n\n        let sum = this.data.values.reduce((acc, cur) => acc + cur.value, 0),\n            totalSquare = maxWidth * maxHeight\n\n        let x = this.data.padding,\n            y = this.data.padding + titleOffset\n\n        let minX = this.data.padding,\n            minY = this.data.padding + titleOffset\n\n        let tooltipCell: TreeCell | undefined = undefined\n        let contextMenuData = undefined\n\n        const ctx = Canvas.getContext(this.canvas)\n\n        let isVertical = true\n        for (let i = 0; i < this.data.values.length; i++) {\n            const item = this.data.values[i]\n\n            const remainWidth = maxWidth - (x - this.data.padding),\n                remainHeight = maxHeight - (y - this.data.padding - titleOffset)\n\n            let cells: TreeCell[] = [\n                {\n                    color: item.color,\n                    label: item.label,\n                    s: item.value / sum * totalSquare,\n                    value: item.value,\n                    id: item.id,\n                    x: x,\n                    y: y\n                } as TreeCell\n            ]\n\n            if (i + 1 <= this.data.values.length - 1) {\n                const next = this.data.values[i + 1]\n\n                cells.push({\n                    color: next.color,\n                    label: next.label,\n                    s: next.value / sum * totalSquare,\n                    value: next.value,\n                    id: next.id,\n                    x: x,\n                    y: y\n                } as TreeCell)\n\n                i++\n            }\n\n            const isSingle = cells.length == 1,\n                isLast = i == this.data.values.length - 1\n\n            if (isVertical) {\n                for (let j = 1; j <= remainWidth + i * i; j++) {\n                    const w = remainWidth - j,\n                        h1 = cells[0].s / w,\n                        h2 = isSingle ? 0 : cells[1].s / w\n\n                    if (h1 + h2 >= remainHeight) {\n                        cells[0].w = Math.floor(w)\n                        cells[0].h = Math.floor(h1)\n\n                        if (!isSingle) {\n                            cells[1].w = Math.floor(w)\n                            cells[1].h = remainHeight - cells[0].h\n\n                            cells[1].y += cells[0].h\n                        }\n\n                        break\n                    }\n                }\n            } else {\n                for (let j = 1; j <= remainHeight + i * i; j++) {\n                    const h = remainHeight - j,\n                        w1 = cells[0].s / h,\n                        w2 = isSingle ? 0 : cells[1].s / h\n\n                    if (w1 + w2 >= remainWidth) {\n                        cells[0].h = Math.floor(h)\n                        cells[0].w = Math.floor(w1)\n\n                        if (!isSingle) {\n                            cells[1].h = Math.floor(h)\n                            cells[1].w = remainWidth - cells[0].w\n\n                            cells[1].x += cells[0].w\n                        }\n\n                        break\n                    }\n                }\n            }\n\n            for (const cell of cells) {\n                if (isLast) {\n                    if (isVertical) {\n                        cell.w = remainWidth\n                        if (isSingle)\n                            cell.h = remainHeight\n                    } else {\n                        cell.h = remainHeight\n                        if (isSingle)\n                            cell.w = remainWidth\n                    }\n                }\n\n                ctx.beginPath()\n\n                ctx.fillStyle = cell.color\n\n                const cellInit = this.state != RenderState.Init\n                                 && !this.animations.contains(cell.id, AnimationType.Init)\n\n                const cellIndex = i + cells.indexOf(cell) + (isLast && isSingle ? 1 : 0),\n                    duration = 260\n\n                const getPrev = () => {\n                    let acc = 0\n                    for (let i = 0; i < cellIndex; i++)\n                        acc += duration - duration * (i / this.data.values.length) / Math.E\n\n                    return acc\n                }\n\n                const initAnimationDuration = duration - duration * cellIndex / (this.data.values.length + 1)\n\n                if (!cellInit) {\n                    this.animations.handle(cell.id,\n                        AnimationType.Init,\n                        {\n                            duration: getPrev(),\n                            continuous: true,\n                            body: transition => {\n                                if (transition * getPrev() - getPrev() + initAnimationDuration < 0)\n                                    return ctx.fillStyle += '00'\n\n                                transition = (transition * getPrev() - getPrev() + initAnimationDuration) / initAnimationDuration\n\n                                const center = {\n                                    x: cell.x + cell.w / 2,\n                                    y: cell.y + cell.h / 2\n                                }\n\n                                const minSize = .7,\n                                    rest = 1 - minSize\n\n                                ctx.translate(center.x - center.x * (minSize + transition * rest),\n                                    center.y - center.y * (minSize + transition * rest))\n                                ctx.scale((minSize + transition * rest), (minSize + transition * rest))\n\n                                let opacity = Math.round(255 * transition).toString(16)\n\n                                if (opacity.length < 2)\n                                    opacity = 0 + opacity\n\n                                ctx.fillStyle = cell.color + opacity\n                            }\n                        })\n                } else {\n                    const translate = (transition: number, event: AnimationType) => {\n                        const center = {\n                            x: cell.x + cell.w / 2,\n                            y: cell.y + cell.h / 2\n                        }\n\n                        const margin = 12,\n                            minSize = cell.w > cell.h\n                                      ? 1 - margin / cell.w\n                                      : 1 - margin / cell.h,\n                            rest = 1 - minSize\n\n                        ctx.translate(center.x - center.x * (minSize + transition * rest),\n                            center.y - center.y * (minSize + transition * rest))\n                        ctx.scale(minSize + transition * rest, minSize + transition * rest)\n\n                        this.animations.reload(cell.id, event)\n                    }\n\n                    if (this.#isInCell(cell)\n                        && !tooltipCell) {\n                        tooltipCell = cell\n                        contextMenuData = cell.data\n\n                        this.animations.handle(cell.id,\n                            AnimationType.MouseOver,\n                            {\n                                duration: Constants.Animations.tree,\n                                backward: true,\n                                body: transition => {\n                                    translate(transition, AnimationType.MouseLeave)\n                                }\n                            })\n                    } else {\n                        this.animations.handle(cell.id,\n                            AnimationType.MouseLeave,\n                            {\n                                timer: Constants.Dates.minDate,\n                                duration: Constants.Animations.tree,\n                                body: transition => {\n                                    translate(transition, AnimationType.MouseOver)\n                                }\n                            })\n                    }\n                }\n\n                const gap = 4\n\n                ctx.roundRect(x + gap, y + gap, cell.w - gap, cell.h - gap, gap * 2)\n                ctx.fill()\n\n                if (cell.label\n                    && Helper.stringWidth(cell.label) < cell.w - gap\n                    && cell.h - gap > 16\n                    && !this.animations.contains(cell.id, AnimationType.Init)) {\n                    ctx.beginPath()\n                    TextStyles.large(ctx)\n                    ctx.fillStyle = !Helper.isColorVisible(cell.color, '#ffffff')\n                                    ? '#000000'\n                                    : '#ffffff'\n                    ctx.fillText(cell.label,\n                        x + 2 + cell.w / 2,\n                        y + 2 + cell.h / 2)\n                }\n\n                ctx.resetTransform()\n\n                if (isVertical)\n                    y += cell.h\n                else\n                    x += cell.w\n\n                totalSquare -= cell.w * cell.h\n                sum -= cell.value\n            }\n\n            if (isVertical) {\n                x += cells[0].w\n                y = minY\n            } else {\n                y += cells[0].h\n                x = minX\n            }\n\n            minX = x\n            minY = y\n\n            isVertical = !isVertical\n        }\n\n        this.tooltip.render(!!tooltipCell && !this.dropdown?.isActive,\n            this.onMouseMoveEvent,\n            [\n                new TooltipValue(`${ tooltipCell?.label }: ${ Formatter.format(tooltipCell?.value, PlotAxisType.Number, this.settings.valuePostfix) }`)\n            ],\n            this.data.values.find(v => v.id == tooltipCell?.id))\n\n        if (!this.isDestroy)\n            requestAnimationFrame(this.render.bind(this))\n\n        this.state = RenderState.Idle\n\n        super.renderDropdown()\n\n        if (tooltipCell || this.contextMenu)\n            this.renderContextMenu(contextMenuData)\n        else\n            this.onContextMenuEvent = undefined\n    }\n\n    #isInCell(cell: TreeCell) {\n        if (!this.onMouseMoveEvent || !cell)\n            return false\n\n        const mouse = this.getMousePosition(this.onMouseMoveEvent)\n\n        return !(this.dropdown?.isActive ?? false)\n               && cell.x <= mouse.x && mouse.x <= cell.x + cell.w\n               && cell.y <= mouse.y && mouse.y <= cell.y + cell.h\n    }\n\n    #drawEmpty() {\n        const ctx = Canvas.getContext(this.canvas)\n\n        TextStyles.regular(ctx)\n        ctx.fillText(TextResources.treeMapIsEmpty,\n            this.canvas.width / 2,\n            this.canvas.height / 2)\n    }\n\n    refresh() {\n        super.refresh()\n    }\n\n    resize() {\n        super.resize()\n\n        this.initAnimations()\n        this.animations.clear()\n    }\n\n    prepareSettings() {\n        super.prepareSettings()\n\n        this.data.values = this.data.values.map(v => new Sector(v))\n\n        this.data.values = this.data.values.filter(v => v.value > 0)\n\n        this.data.values.sort((a, b) => (b.value ?? 0) - (a.value ?? 0))\n\n        this.calculateColors(true)\n\n        for (let item of this.data.values) {\n            item.disabled = !item.value\n            item.value ??= 0\n        }\n    }\n\n    initDropdown() {\n        super.initDropdown()\n\n        this.dropdown = new Dropdown(this.canvas,\n            {\n                x: -10,\n                y: 10,\n                icon: Icon.ThreeLines,\n                items: [\n                    {\n                        text: TextResources.exportCSV,\n                        action: () => {\n                            Export.asCsv(Decomposition.toTable(TreeData.getRows(this.data)), this.settings.title)\n                        }\n                    },\n                    {\n                        isDivider: true\n                    } as DropdownItem,\n                    {\n                        text: TextResources.decomposeToTable,\n                        action: () => {\n                            new Modal(Decomposition.toTable(TreeData.getRows(this.data))).open()\n                        }\n                    }\n                ]\n            })\n    }\n}","import { TableData } from 'types/TableData'\nimport * as Helper from 'Helper'\nimport { Value } from 'types/base/Value'\nimport { ChartSettings } from 'types/ChartSettings'\nimport { Formatter } from 'helpers/Formatter'\nimport { Styles } from 'static/constants/Styles'\nimport { Tag } from 'static/Enums'\n\nexport class Decomposition {\n    static toTable(values: TableData) {\n        let table = document.createElement(Tag.Table)\n\n        table.classList.add('o-table')\n\n        let totals = new Map<string, number>()\n        let rows = '',\n            headers = '',\n            index = 0\n\n        let valuesMap = new Map<string, Map<string, any>>()\n\n        for (const tableValue of values.values) {\n            let allColumns = new Map<string, any>()\n\n            for (const header of values.headers)\n                allColumns.set(header.value, 0)\n\n            for (const [key, value] of tableValue.values)\n                allColumns.set(key, value)\n\n            let indexSpaces = ''\n            for (let i = 0; i < index; i++)\n                indexSpaces += ' '\n\n            valuesMap.set(tableValue.name + indexSpaces, allColumns)\n\n            index++\n        }\n\n        for (const tableHeader of values.headers)\n            headers += `\n                <th>\n                    ${ tableHeader.display }\n                </th>\n            `\n\n        for (const [key, value] of valuesMap) {\n            let columns = ''\n\n            for (const [vKey, vValue] of value) {\n                columns += `\n                    <td>\n                        ${ vValue == undefined ? '' : Formatter.number(vValue) }\n                    </td>\n                `\n\n                if (totals.has(vKey)) {\n                    let totalValue = +(totals.get(vKey) ?? 0)\n                    totals.set(vKey, totalValue + +vValue)\n                } else {\n                    totals.set(vKey, vValue)\n                }\n            }\n\n            rows += `\n                <tr>\n                    <td class=\"o-table-label\">\n                        ${ key.trim() }\n                    </td>\n                    \n                    ${ columns } \n                </tr>\n            `\n        }\n\n        let totalColumns = ''\n\n        for (const [, value] of totals)\n            totalColumns += `\n                <td>\n                    ${ value == undefined ? '' : Formatter.number(value) }\n                </td>\n            `\n\n        table.innerHTML = `\n            <thead>\n                <tr>\n                    <th></th>\n                \n                    ${ headers }\n                </tr>\n            </thead>\n        \n            <tbody>\n                ${ rows }\n            </tbody>\n            \n            <tfoot>\n                <tr>\n                    <td></td>\n                \n                    ${ totalColumns }\n                </tr>\n            </tfoot>\n        `\n\n        return table\n    }\n\n    static toChart<T extends Value>(settings: ChartSettings, values: T[]) {\n        let container = document.createElement(Tag.Div),\n            div = document.createElement(Tag.Div),\n            script = document.createElement(Tag.Script),\n            id = Helper.guid()\n\n        container.style.display = Styles.Display.Flex\n        container.style.height = '100%'\n\n        div.id = id\n        div.style.flexGrow = '1'\n\n        let cloneSettings = JSON.parse(JSON.stringify(settings)) as ChartSettings\n\n        if (cloneSettings.title)\n            cloneSettings.title = cloneSettings.title + ' (Other)'\n        cloneSettings.data.values = values\n        cloneSettings.minWidth = undefined\n        cloneSettings.minHeight = undefined\n\n        script.innerHTML = `\n            new OCharts.chart(document.getElementById('${ id }'), ${ JSON.stringify(cloneSettings) })\n                .render()\n        `\n\n        container.append(div, script)\n\n        return container\n    }\n}","export { Animations } from './Animations'\nexport { Dates } from './Dates'\nexport { Values } from './Values'","import { Renderer } from 'types/base/Renderer'\nimport { GaugeData } from 'types/data/GaugeData'\nimport * as Helper from 'Helper'\nimport { Sector } from 'types/Sector'\nimport { Dropdown } from 'Dropdown'\nimport { Point } from 'types/Point'\nimport { Chart } from 'Chart'\nimport { Theme } from 'Theme'\nimport { TextStyles } from 'helpers/TextStyles'\nimport { TooltipValue } from 'types/TooltipValue'\nimport { Export } from 'Export'\nimport { Formatter } from 'helpers/Formatter'\nimport { Canvas } from 'helpers/Canvas'\nimport { TextResources } from 'static/TextResources'\nimport { AnimationType, Icon, PlotAxisType, RenderState } from 'static/Enums'\n\nexport class GaugeRenderer extends Renderer<GaugeData> {\n    #radius: number\n\n    #center: Point\n\n    constructor(chart: Chart) {\n        super(chart)\n\n        this.settings.enableLegend = false\n    }\n\n    render() {\n        super.render()\n\n        this.#draw()\n\n        const value = this.data.values[0]\n        this.tooltip.render(this.#isInsideSector(this.onMouseMoveEvent, value) && !this.dropdown?.isActive,\n            this.onMouseMoveEvent,\n            [\n                new TooltipValue(`${ value?.label }: ${ Formatter.format(value?.current, PlotAxisType.Number, this.settings.valuePostfix) }`)\n            ],\n            value)\n\n        if (!this.isDestroy)\n            requestAnimationFrame(this.render.bind(this))\n\n        this.state = RenderState.Idle\n\n        super.renderDropdown()\n    }\n\n    #draw() {\n        const ctx = Canvas.getContext(this.canvas)\n\n        const value = this.data.values[0] ?? { id: Helper.guid() }\n\n        if (this.state == RenderState.Init || this.animations.contains(value.id, AnimationType.Init))\n            this.animations.handle(value.id,\n                AnimationType.Init,\n                {\n                    duration: 450,\n                    continuous: true,\n                    body: transition => {\n                        value.current = value.value * transition\n                    }\n                })\n\n        ctx.beginPath()\n\n        ctx.strokeStyle = value.color\n        ctx.lineCap = 'round'\n        ctx.lineWidth = 40\n\n        const piece = value.current / this.data.max,\n            angle = (isNaN(piece) ? 1 : piece) * Math.PI\n\n        if (value.value) {\n            ctx.arc(this.#center.x, this.#center.y, this.#radius, Math.PI, angle - Math.PI)\n            ctx.stroke()\n        }\n\n        ctx.beginPath()\n\n        ctx.lineWidth = 1\n        ctx.lineCap = 'square'\n\n        let localAccumulator = 0,\n            localAngle = Math.PI\n\n        while (localAngle >= 0) {\n            let currentAngle = localAngle - Math.PI / 10 > 0\n                               ? Math.PI / 10\n                               : localAngle\n\n            const getPoint = (offset: number) => {\n                return {\n                    x: this.#center.x + (this.#radius + offset) * Math.cos(Math.PI + localAccumulator),\n                    y: this.#center.y + (this.#radius + offset) * Math.sin(Math.PI + localAccumulator)\n                }\n            }\n\n            let point1 = getPoint(50),\n                point2 = getPoint(90),\n                point3 = getPoint(115)\n\n            const opacity = Math.PI - localAngle > angle ? '66' : 'ff'\n\n            ctx.moveTo(point1.x, point1.y)\n            ctx.lineTo(point2.x, point2.y)\n            ctx.strokeStyle = Theme.text + opacity\n            ctx.stroke()\n\n            TextStyles.regular(ctx)\n            ctx.fillStyle = Theme.text + opacity\n            ctx.fillText(Formatter.number(this.data.max - localAngle / Math.PI * this.data.max), point3.x, point3.y)\n\n            localAccumulator += currentAngle\n\n            localAngle -= Math.PI / 10\n        }\n    }\n\n    #isInsideSector(event: MouseEvent, value: Sector): boolean {\n        if (!event)\n            return false\n\n        const isAngle = (point: Point) => {\n            let a = Math.atan2(point.y - this.#center.y, point.x - this.#center.x)\n            if (a < 0)\n                a += Math.PI * 2\n\n            const piece = value.current / this.data.max,\n                angle = (isNaN(piece) ? 1 : piece) * Math.PI\n\n            return a > Math.PI && Math.PI + angle >= a\n        }\n\n        const isWithinRadius = (v: Point) => {\n            const outerRadius = this.#radius + 20,\n                innerRadius = this.#radius - 20\n\n            return v.x * v.x + v.y * v.y <= outerRadius * outerRadius\n                   && v.x * v.x + v.y * v.y >= innerRadius * innerRadius\n        }\n\n        const point = this.getMousePosition(event),\n            inner = {\n                x: point.x - this.#center.x,\n                y: point.y - this.#center.y\n            }\n\n        return !(this.dropdown?.isActive ?? false)\n               && isAngle(point)\n               && isWithinRadius(inner)\n    }\n\n    #calculateSizes() {\n        const longSide = this.canvas.width < this.canvas.height\n                         ? this.canvas.height - 250\n                         : this.canvas.width\n\n        this.#radius = longSide / 3\n\n        this.#center = {\n            x: this.canvas.width / 2,\n            y: this.canvas.height - this.#radius / 5\n        }\n    }\n\n    refresh() {\n        super.refresh()\n    }\n\n    resize() {\n        super.resize()\n\n        this.initAnimations()\n        this.#calculateSizes()\n    }\n\n    prepareSettings() {\n        super.prepareSettings()\n\n        for (let item of this.data.values) {\n            item.disabled = !item.value\n            item.value ??= 0\n        }\n\n        if (this.data.values.length > 0 && this.data.values[0].value > this.data.max)\n            this.data.values[0].value = this.data.max\n    }\n\n    initDropdown() {\n        super.initDropdown()\n\n        this.dropdown = new Dropdown(this.canvas,\n            {\n                x: -10,\n                y: 10,\n                icon: Icon.ThreeLines,\n                items: [\n                    {\n                        text: TextResources.exportPNG,\n                        action: () => {\n                            Export.asPng(this.canvas, this.settings.title)\n                        }\n                    }\n                ]\n            })\n    }\n}","import { Theme } from 'Theme'\nimport * as Helper from 'Helper'\nimport { Canvas } from 'helpers/Canvas'\nimport { Icon, Tag } from 'static/Enums'\n\nexport class Export {\n    static asPng(canvas: HTMLCanvasElement, title: string) {\n        requestAnimationFrame(() => {\n            const ctx = Canvas.getContext(canvas)\n\n            let width = Helper.stringWidth(Icon.ThreeLines) + 20,\n                height = 64\n\n            ctx.fillStyle = Theme.canvasBackground\n            ctx.fillRect(canvas.width - width, 0, width, height)\n\n            let leftEmpty = 0,\n                rightEmpty = 0\n\n            const imageData = new Uint32Array(ctx.getImageData(0, 0, canvas.width, canvas.height).data.buffer)\n\n            let isBusy = false\n\n            for (let i = 0; i < canvas.width; i++) {\n                for (let j = 0; j < canvas.height; j++) {\n                    if (Canvas.isPixelBusy(imageData[i + j * canvas.width])) {\n                        isBusy = true\n                        break\n                    }\n                }\n\n                if (isBusy)\n                    break\n\n                leftEmpty++\n            }\n\n            isBusy = false\n\n            for (let i = canvas.width; i >= 0; i--) {\n                for (let j = 0; j < canvas.height; j++) {\n                    if (Canvas.isPixelBusy(imageData[i + j * canvas.width])) {\n                        isBusy = true\n                        break\n                    }\n                }\n\n                if (isBusy)\n                    break\n\n                rightEmpty++\n            }\n\n            if (leftEmpty > 4)\n                leftEmpty -= 4\n            if (rightEmpty > 4)\n                rightEmpty -= 4\n\n            if (leftEmpty > rightEmpty)\n                leftEmpty = rightEmpty\n            if (rightEmpty > leftEmpty)\n                rightEmpty = leftEmpty\n\n            let destinationCanvas = document.createElement(Tag.Canvas)\n            destinationCanvas.width = canvas.width - leftEmpty - rightEmpty\n            destinationCanvas.height = canvas.height\n\n            const destCtx = Canvas.getContext(destinationCanvas)\n\n            destCtx.fillStyle = Theme.background\n            destCtx.fillRect(0, 0, canvas.width, canvas.height)\n\n            destCtx.drawImage(canvas, -leftEmpty, 0)\n\n            Export.saveAs((title ?? 'chart') + '.png',\n                destinationCanvas.toDataURL('image/png'))\n        })\n    }\n\n    static asCsv(table: HTMLTableElement, title: string) {\n        let rows = table.querySelectorAll('tr'),\n            csv = []\n\n        for (let i = 0; i < rows.length; i++) {\n            let row = [],\n                cols = rows[i].querySelectorAll('td, th')\n\n            for (let j = 0; j < cols.length; j++) {\n                let data = cols[j].innerHTML\n                                  .replace(/(\\r\\n|\\n|\\r)/gm, '')\n                                  .replace(/(\\s\\s)/gm, ' ')\n\n                data = data.replace(/\"/g, '\"\"')\n                row.push('\"' + data + '\"')\n            }\n\n            csv.push(row.join(','))\n        }\n\n        Export.saveAs((title ?? 'table') + '.csv',\n            csv.join('\\n'),\n            'data:text/csv;charset=utf-8,' + encodeURIComponent(csv.join('\\n')),\n            true)\n    }\n\n    static saveAs(name: string, dataURL: string, href?: string | undefined, isText?: boolean) {\n        if (window.showSaveFilePicker != undefined) {\n            const accept = isText\n                           ? { 'text/csv': '.csv' } as FilePickerAcceptType\n                           : { 'image/*': '.png' } as FilePickerAcceptType\n\n            const options = {\n                suggestedName: name,\n                types: [\n                    {\n                        accept: accept\n                    }\n                ],\n                excludeAcceptAllOption: true\n            } as SaveFilePickerOptions\n\n            function toBlob(dataURI: string) {\n                const byteString = atob(dataURI.split(',')[1]),\n                    mimeString = dataURI.split(',')[0]\n                        .split(':')[1]\n                        .split(';')[0],\n                    buffer = new ArrayBuffer(byteString.length),\n                    imageArray = new Uint8Array(buffer)\n\n                for (let i = 0; i < byteString.length; i++)\n                    imageArray[i] = byteString.charCodeAt(i)\n\n                return new Blob([buffer], { type: mimeString })\n            }\n\n            window.showSaveFilePicker(options)\n                  .then(fileHandle => {\n                      fileHandle.createWritable()\n                                .then(writableStream => {\n                                    writableStream.write(isText ? dataURL : toBlob(dataURL))\n                                                  .then(() => writableStream.close())\n                                })\n                  })\n        } else {\n            let download = document.createElement(Tag.A)\n            download.href = href ?? dataURL\n            download.download = name\n            download.click()\n        }\n    }\n}","import { PlotAxisType } from 'static/Enums'\n\nexport abstract class Formatter {\n    static number = (value: number | undefined) =>\n        value?.toLocaleString(undefined, {\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2\n        }) ?? ''\n\n    static date = (value: Date | undefined) =>\n        value?.toLocaleDateString() ?? ''\n\n    static text = (value: string | undefined) =>\n        value ?? ''\n\n    static format(value: any | undefined, type: PlotAxisType, postfix?: string | undefined) {\n        let result = ''\n\n        switch (type) {\n            case PlotAxisType.Number:\n                result = Formatter.number(value)\n                break\n\n            case PlotAxisType.Date:\n                result = Formatter.date(new Date(value))\n                break\n\n            case PlotAxisType.Text:\n                result = Formatter.text(value)\n                break\n        }\n\n        return result + (postfix ?? '')\n    }\n\n}","import { TextStyles } from 'helpers/TextStyles'\nimport { Theme } from 'Theme'\nimport { Animations } from 'Animations'\nimport * as Helper from 'Helper'\nimport { ButtonOptions } from 'types/ButtonOptions'\nimport { Canvas } from 'helpers/Canvas'\nimport { AnimationType } from 'static/Enums'\nimport * as Constants from 'static/constants/Index'\nimport { Styles } from 'static/constants/Styles'\n\nexport class Button {\n    #canvas: HTMLCanvasElement\n\n    #options: ButtonOptions\n\n    #canvasPosition: DOMRect\n\n    animations: Animations\n\n    #isInit: boolean\n\n    #position: DOMRect\n\n    constructor(canvas: HTMLCanvasElement, options: ButtonOptions) {\n        this.#canvas = canvas\n        this.#options = options\n\n        this.animations = new Animations()\n\n        this.#initAnimations()\n    }\n\n    render(moveEvent: MouseEvent, clickEvent: MouseEvent | undefined) {\n        if (!this.#isInit)\n            this.#initAnimations()\n\n        const ctx = Canvas.getContext(this.#canvas)\n\n        ctx.beginPath()\n\n        const translate = (transition: number, event: AnimationType) => {\n            this.animations.reload('animation-button', event)\n\n            ctx.fillStyle = Helper.adjustColor(Theme.canvasBackground, -Math.round(transition * 25))\n        }\n\n        if (this.#isOnButton(moveEvent)) {\n            this.#canvas.style.cursor = Styles.Cursor.Pointer\n\n            if (clickEvent && this.#isOnButton(clickEvent)) {\n                this.#options.action()\n                clickEvent = undefined\n            }\n\n            this.animations.handle('animation-button',\n                AnimationType.MouseOver,\n                {\n                    duration: 300,\n                    body: transition => {\n                        translate(transition, AnimationType.MouseLeave)\n                    }\n                })\n        } else {\n            this.animations.handle('animation-button',\n                AnimationType.MouseLeave,\n                {\n                    timer: Constants.Dates.minDate,\n                    duration: 300,\n                    backward: true,\n                    body: transition => {\n                        translate(transition, AnimationType.MouseOver)\n                    }\n                })\n        }\n\n        ctx.roundRect(this.#position.x, this.#position.y, this.#position.width, this.#position.height, 4)\n        ctx.fill()\n\n        TextStyles.regular(ctx)\n        ctx.fillText(this.#options.text,\n            this.#position.x + this.#position.width / 2,\n            this.#position.y + this.#position.height / 2)\n\n        this.#isInit = true\n\n        return clickEvent\n    }\n\n    resize() {\n        this.#initAnimations()\n    }\n\n    #initAnimations() {\n        this.#canvasPosition = this.#canvas.getBoundingClientRect()\n\n        this.#canvasPosition.x += scrollX\n        this.#canvasPosition.y += scrollY\n\n        const width = Helper.stringWidth(this.#options.text) + 12,\n            height = 20\n\n        this.#position = <DOMRect>{\n            x: this.#options.x + width > this.#canvas.width\n               ? this.#canvas.width - width\n               : this.#options.x < 0\n                 ? this.#canvas.width + this.#options.x - width\n                 : this.#options.x,\n            y: this.#options.y + height > this.#canvas.height\n               ? this.#canvas.height - height\n               : this.#options.y < 0\n                 ? this.#canvas.height + this.#options.y - height\n                 : this.#options.y,\n            width: width,\n            height: height\n        }\n    }\n\n    #isOnButton(event: MouseEvent): boolean {\n        if (!event)\n            return false\n\n        let trueX = event.clientX - this.#canvasPosition.x + scrollX,\n            trueY = event.clientY - this.#canvasPosition.y + scrollY\n\n        return trueX >= this.#position.x && trueX <= this.#position.x + this.#position.width\n               && trueY >= this.#position.y && trueY <= this.#position.y + this.#position.height\n    }\n}","export enum AnimationType {\n    None,\n\n    MouseOver,\n\n    MouseLeave,\n\n    Init,\n\n    Click,\n\n    AnotherItemOver,\n\n    AnotherItemLeave\n}\n\nexport enum Attribute {\n    Name = 'name'\n}\n\nexport enum ChartType {\n    Plot,\n\n    Circular,\n\n    Gauge,\n\n    TreeMap\n}\n\nexport enum ErrorType {\n    NullContext = 'Can\\'t find context',\n\n    ElementNotExist = 'Element does not exist'\n}\n\nexport enum Events {\n    VisibilityChanged = 'visibilitychange',\n\n    Blur = 'blur',\n\n    MouseMove = 'mousemove',\n\n    Click = 'click',\n\n    Change = 'change',\n\n    ContextMenu = 'contextmenu'\n}\n\nexport enum LegendPlace {\n    Bottom,\n\n    Left,\n\n    Top,\n\n    Right\n}\n\nexport enum LineType {\n    Solid,\n\n    Dash,\n\n    Dotted\n}\n\nexport enum PlotAxisType {\n    Number,\n\n    Date,\n\n    Text\n}\n\nexport enum PlotType {\n    Line,\n\n    AttentionLine,\n\n    Column,\n\n    Bar,\n\n    StackingColumn\n}\n\nexport enum Tag {\n    Canvas = 'canvas',\n\n    A = 'a',\n\n    Div = 'div',\n\n    Dialog = 'dialog',\n\n    Table = 'table',\n\n    Script = 'script'\n}\n\nexport enum RenderState {\n    Idle,\n\n    Init\n}\n\nexport enum Icon {\n    ThreeLines = '☰'\n}\n\nexport enum DrawPointType {\n    Move,\n\n    Line,\n\n    QuadraticCurve\n}","import { Errors } from 'helpers/Errors'\nimport { ErrorType, Tag } from 'static/Enums'\n\nexport class Modal {\n    modal: HTMLDialogElement | undefined\n\n    #content: HTMLDivElement | undefined\n\n    constructor(content?: HTMLElement, size?: DOMRect) {\n        this.modal = document.createElement(Tag.Dialog)\n\n        this.modal.classList.add('o-modal')\n\n        if (size) {\n            this.modal.style.width = `${size.width}px`\n            this.modal.style.height = `${size.height}px`\n        }\n\n        this.modal.oncancel = () => this.close()\n\n        document.body.appendChild(this.modal)\n\n        this.#setHeader()\n\n        this.#setContent(content)\n    }\n\n    open() {\n        Errors.throwIsUndefined(this.modal, ErrorType.ElementNotExist)\n\n        this.modal!.showModal()\n    }\n\n    close() {\n        Errors.throwIsUndefined(this.modal, ErrorType.ElementNotExist)\n\n        this.modal!.close()\n\n        this.modal!.remove()\n\n        this.modal = undefined\n    }\n\n    #setHeader() {\n        Errors.throwIsUndefined(this.modal, ErrorType.ElementNotExist)\n\n        let closeButton = document.createElement('button')\n\n        closeButton.classList.add('o-modal-close')\n        closeButton.innerHTML = 'x'\n\n        this.modal!.appendChild(closeButton)\n\n        closeButton.onclick = () => this.close()\n    }\n\n    #setContent(content: HTMLElement | undefined) {\n        if (this.#content == undefined) {\n            this.#content = document.createElement(Tag.Div)\n\n            this.#content.classList.add('o-modal-content')\n\n            this.modal?.appendChild(this.#content)\n        }\n\n        if (content != undefined)\n            this.#content.appendChild(content)\n    }\n}","import { Value } from 'types/base/Value'\nimport { PlotPoint } from 'types/PlotPoint'\nimport { LineType, PlotType } from 'static/Enums'\n\nexport class PlotSeries extends Value {\n    values: PlotPoint[]\n\n    type: PlotType\n\n    width: number\n\n    lineType: LineType = LineType.Solid\n\n    constructor(obj: object) {\n        super()\n\n        Object.assign(this, obj)\n    }\n\n    toggle(transition: number) {\n        super.toggle(transition)\n    }\n\n    checkCondition(): boolean {\n        super.checkCondition()\n\n        return true\n    }\n\n    reset() {\n        super.reset()\n    }\n}","import { Value } from 'types/base/Value'\nimport { Renderable } from 'types/base/Renderable'\nimport * as Helper from 'Helper'\nimport { Sector } from 'types/Sector'\nimport { Point } from 'types/Point'\nimport { Theme } from 'Theme'\nimport { Chart } from 'Chart'\nimport { TextStyles } from 'helpers/TextStyles'\nimport { Canvas } from 'helpers/Canvas'\nimport { Button } from 'Button'\nimport { TextResources } from 'static/TextResources'\nimport * as Constants from 'static/constants/Index'\nimport { Styles } from 'static/constants/Styles'\nimport { AnimationType, Events, LegendPlace, RenderState } from 'static/Enums'\nimport { ChartSettings } from './types/ChartSettings'\n\nexport class Legend extends Renderable {\n    #button: Button\n\n    #offset: Point\n\n    #chart: Chart\n\n    #hoverCount: number\n\n    isDestroy: boolean = false\n\n    constructor(chart: Chart) {\n        super(chart)\n\n        this.#chart = chart\n\n        this.prepareSettings()\n    }\n\n    render() {\n        super.render()\n\n        const ctx = Canvas.getContext(this.canvas)\n\n        let nextPoint = { x: 20, y: 21 }\n\n        this.canvas.style.cursor = Styles.Cursor.Default\n\n        TextStyles.regular(ctx)\n        ctx.textAlign = 'start'\n        ctx.textBaseline = 'alphabetic'\n\n        ctx.translate(this.#offset.x, this.#offset.y)\n\n        this.#hoverCount = 0\n\n        for (const value of this.settings.data.values.filter(v => !v.hideInLegend))\n            nextPoint = this.#draw(value, nextPoint.x, nextPoint.y)\n\n        ctx.translate(-this.#offset.x, -this.#offset.y)\n\n        if (!this.isDestroy)\n            requestAnimationFrame(this.render.bind(this))\n\n        this.onClickEvent = this.#button?.render(this.onMouseMoveEvent, this.onClickEvent)\n\n        this.state = RenderState.Idle\n    }\n\n    #draw(value: Value, x: number, y: number): Point {\n        const ctx = Canvas.getContext(this.canvas)\n\n        const textWidth = Helper.stringWidth(value.label),\n            circleRadius = 6\n\n        if (x + 48 + textWidth >= this.canvas.width - 40 - this.#offset.x) {\n            x = 20\n            y += 26\n        }\n\n        let rectX = x - circleRadius - circleRadius,\n            rectY = y - circleRadius / 2 - circleRadius,\n            rectW = circleRadius + circleRadius + textWidth + 18,\n            rectH = 20\n\n        const isHover = (event: MouseEvent | undefined) => {\n            if (!event)\n                return false\n\n            const px = event.clientX - this.canvasPosition.x + scrollX - this.#offset.x,\n                py = event.clientY - this.canvasPosition.y + scrollY - this.#offset.y\n\n            return px >= rectX && px <= rectX + rectW\n                   && py >= rectY && py <= rectY + rectH\n        }\n\n        const translate = (transition: number, event: AnimationType) => {\n            this.animations.reload(value.id, event)\n\n            ctx.beginPath()\n\n            ctx.roundRect(rectX, rectY, rectW, rectH, circleRadius)\n\n            ctx.fillStyle = Helper.adjustColor(Theme.canvasBackground, Math.round(-25 * transition))\n            ctx.fill()\n        }\n\n        this.animations.handle(value.id,\n            AnimationType.Click,\n            {\n                duration: Constants.Animations.legend,\n                continuous: true,\n                before: () => {\n                    return this.onClickEvent != undefined\n                           && (isHover(this.onClickEvent)\n                               || (value instanceof Sector\n                                   && value.current !== 0\n                                   && value.value !== value.current))\n                           && value.checkCondition()\n                },\n                body: transition => {\n                    value.toggle(transition)\n\n                    if (transition == 1)\n                        this.onClickEvent = new PointerEvent(Events.Click)\n                }\n            })\n\n        if (isHover(this.onMouseMoveEvent)) {\n            this.animations.handle(value.id,\n                AnimationType.MouseOver,\n                {\n                    duration: Constants.Animations.button,\n                    body: transition => {\n                        translate(transition, AnimationType.MouseLeave)\n                    }\n                })\n\n            if (!value.disabled) {\n                this.#hoverCount++\n\n                this.#chart.highlight(value)\n            }\n\n            this.canvas.style.cursor = Styles.Cursor.Pointer\n        } else {\n            this.animations.handle(value.id,\n                AnimationType.MouseLeave,\n                {\n                    timer: Constants.Dates.minDate,\n                    duration: Constants.Animations.button,\n                    backward: true,\n                    body: transition => {\n                        translate(transition, AnimationType.MouseOver)\n                    }\n                })\n        }\n\n        ctx.beginPath()\n\n        ctx.arc(x - 1, y + 1, 3, 0, 2 * Math.PI)\n        ctx.fillStyle = value.disabled ? Helper.grayScale(value.color) : value.color\n        ctx.fill()\n\n        ctx.fillStyle = Theme.text\n        if (value.disabled)\n            ctx.fillStyle += '7f'\n\n        ctx.fillText(value.label, x + circleRadius * 1.5 + 1, y + 6)\n\n        x += 20\n\n        if (value.disabled) {\n            ctx.moveTo(x - 10, y + 2)\n            ctx.lineTo(x + textWidth - 10, y + 2)\n            ctx.strokeStyle = Theme.text + '7f'\n            ctx.stroke()\n        }\n\n        x += textWidth + 22\n\n        return {\n            x: x,\n            y: y\n        }\n    }\n\n    destroy() {\n        this.isDestroy = true\n\n        this.canvas.remove()\n    }\n\n    refresh() {\n        this.state = RenderState.Init\n    }\n\n    resize() {\n        this.calculateSizes()\n        this.#button?.resize()\n        this.initAnimations()\n    }\n\n    calculateSizes() {\n        switch (this.settings.legendPlace) {\n            case LegendPlace.Bottom:\n            default:\n                this.canvas.width = this.settings.width\n                this.canvas.height = Legend.getLegendHeight(this.settings.data.values, this.canvas.width)\n\n                this.node.style.flexDirection = Styles.FlexDirection.Column\n\n                break\n\n            case LegendPlace.Top:\n                this.canvas.width = this.settings.width\n                this.canvas.height = Legend.getLegendHeight(this.settings.data.values, this.canvas.width)\n\n                this.node.style.flexDirection = Styles.FlexDirection.ColumnReverse\n\n                break\n\n            case LegendPlace.Left:\n                this.canvas.width = 500\n                this.canvas.height = this.settings.height\n\n                this.node.style.flexDirection = Styles.FlexDirection.Row\n\n                break\n\n            case LegendPlace.Right:\n                this.canvas.width = 500\n                this.canvas.height = this.settings.height\n\n                this.node.style.flexDirection = Styles.FlexDirection.RowReverse\n\n                break\n        }\n\n        this.#offset = {\n            x: Legend.getOffsetToCenter(this.settings.data.values, this.canvas.width),\n            y: (this.canvas.height - Legend.getLegendHeight(this.settings.data.values, this.canvas.width)) / 2\n        }\n    }\n\n    applySettings(settings: ChartSettings) {\n        this.settings = settings\n\n        this.prepareSettings()\n    }\n\n    prepareSettings() {\n        this.resize()\n\n        if (!this.settings.disableInteractions)\n            this.#button = new Button(this.canvas,\n                {\n                    x: -10,\n                    y: 12,\n                    text: TextResources.reset,\n                    action: () => {\n                        for (let value of this.settings.data.values)\n                            value.reset()\n                    }\n                })\n    }\n\n    static getOffsetToCenter(values: Value[], width: number): number {\n        let maxWidth = 20\n\n        for (const value of values.filter(v => !v.hideInLegend)) {\n            const labelWidth = Helper.stringWidth(value.label)\n\n            if (maxWidth + labelWidth + 47 >= width - 100)\n                break\n\n            maxWidth += labelWidth + 47\n        }\n\n        return width / 2 - maxWidth / 2\n    }\n\n    static getLegendHeight(values: Value[], width: number): number {\n        let count = 1,\n            acc = 20,\n            offset = Legend.getOffsetToCenter(values, width)\n\n        for (const value of values.filter(v => !v.hideInLegend)) {\n            const labelWidth = Helper.stringWidth(value.label)\n\n            if (acc + labelWidth + 48 >= width - 32 - offset) {\n                acc = 20\n                count++\n            }\n\n            acc += labelWidth + 48\n        }\n\n        return 24 + count * 20 + (count - 1) * 6\n    }\n}","export class Values {\n    static readonly titleOffset = 30\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","Number.prototype.isAnyEquals = function (...values) {\n    return values.includes(<number>this)\n}\n\nDate.prototype.addDays = function (days: number) {\n    let result = new Date(this)\n    result.setDate(result.getDate() + days)\n    return result\n}\n\nDate.prototype.addMilliseconds = function (milliseconds: number) {\n    let result = new Date(this)\n    result.setMilliseconds(result.getMilliseconds() + milliseconds)\n    return result\n}\n\nMap.prototype.trySet = function (key: any, value: any) {\n    if (!this.has(key))\n        this.set(key, value)\n}","import { Chart } from 'Chart'\nimport { ChartSettings } from 'types/ChartSettings'\n\nfunction OCharts() {\n}\n\nOCharts.chart = function(context: HTMLElement, settings: ChartSettings) {\n    return new Chart(context, settings)\n}\n\n// @ts-ignore\nwindow.OCharts = OCharts"],"names":["Animations","constructor","this","Map","handle","id","type","value","key","has","set","contains","reload","get","timer","Date","clear","forEach","_value","AnimationType","Init","delete","reverse","item","stamp","passed","getTime","reversedPassed","duration","backward","isBackward","isEnd","end","Constants","Dates","minDate","initializeTransitions","i","t","x","Math","pow","y","transitionCurve","toFixed","getTransition","transition","before","body","continuous","endsWith","color","amount","replace","min","max","parseInt","toString","slice","Array","join","round","reduce","a","v","padStart","floor","random","str","font","widths","from","String","acc","cur","charCodeAt","S4","substring","toLowerCase","background","foreground","backgroundAsRgb","hexToRgb","foregroundAsRgb","r","g","b","test","opacity","hex","result","exec","componentToHex","c","length","rgb","bg","Theme","canvasBackground","alpha","Color","text","Errors","error","Error","throwIsUndefined","object","undefined","throw","context","settings","node","applySettings","document","addEventListener","Events","VisibilityChanged","resetMouse","window","Blur","Click","event","target","canvas","closeDropdowns","render","destroy","disconnect","highlight","reset","isNeedRestartRender","enableLegend","Legend","enableTooltip","disableInteractions","ChartType","Plot","PlotRenderer","Circular","CircularRenderer","Gauge","GaugeRenderer","TreeMap","TreeRenderer","prepareSettings","initDropdown","initAnimations","resize","refresh","initialize","isDarkThemeFunction","style","display","Styles","Display","Flex","flexDirection","FlexDirection","Column","alignItems","AlignItems","Center","justifyContent","JustifyContent","height","ResizeObserver","observe","circular","legend","tree","tooltip","button","Sector","Value","obj","super","Object","assign","baseColor","canRenderLabel","isMouseInside","toggle","disabled","current","checkCondition","TextResources","exportPNG","decomposeToTable","exportCSV","menu","allDataIsHidden","other","thousandShort","millionShort","billionShort","show","noLabel","treeMapIsEmpty","getContext","willReadFrequently","ErrorType","NullContext","isPixelBusy","pixel","canvasBackgroundInt","data","templateId","getElementById","condition","lines","opacityValue","getBoundingClientRect","scrollX","scrollY","ctx","Canvas","textWidth","map","line","Helper","stringWidth","clientX","clientY","width","beginPath","roundRect","baseOpacity","strokeStyle","dropdownBorder","lineWidth","fillStyle","stroke","fill","offset","arc","PI","TextStyles","fillText","padding","updateVisibility","visibility","Visibility","Visible","regex","content","cloneNode","createElement","Tag","Div","innerHTML","position","Position","Absolute","pointerEvents","PointerEvents","None","setAttribute","Attribute","Name","matches","matchAll","html","match","property","replaceAll","appendChild","Hidden","left","top","tooltips","querySelectorAll","ThemeOptions","colors","backgrounds","lineAxes","lineActives","dropdownBorders","canvasBackgrounds","args","base","JSON","parse","stringify","getRows","headers","values","series","seriesValues","push","xType","PlotAxisType","Formatter","date","name","label","unique","Set","uniqueHeaders","filter","add","sort","Cursor","Default","Pointer","ColumnReverse","Row","RowReverse","ImageRendering","Pixelated","options","isActive","icon","animations","moveEvent","clickEvent","translate","adjustColor","cursor","MouseOver","MouseLeave","regular","iconOffset","navigator","platform","borderRadius","items","dividers","maxWidth","dropdownOpacity","itemOpacityDec","itemBackground","dropdownItemHoverColor","borderColor","rect","setLineDash","isDivider","moveTo","lineTo","animationKey","isReturn","action","textAlign","textBaseline","close","w","h","trueX","trueY","callback","isDark","function","matchMedia","setTheme","Change","index","currentTheme","lineAxis","lineActive","Number","Renderer","chart","startAngle","isMousePositionChanged","prevPoint","onMouseMoveEvent","MouseEvent","MouseMove","calculateAngles","valuesSum","anglesSum","flatMap","sector","angle","sum","getAngle","find","o","getAccumulator","calculatePoint","accumulator","getPoint","radius","center","cos","sin","direction","point2","points","labelStartPoint","labelMidPoint","dir","endPoint","labelPoints","DrawPoint","DrawPointType","Move","QuadraticCurve","Line","localAccumulator","localAngle","currentAngle","tangentIntersectionAngle","tangentIntersectionPoint","innerRadius","innerPoint2","scale","centerOfSector","p","sqrt","ratio","focus","applyAlpha","textColor","outline","lineStyles","lineJoin","lineCap","state","isBusy","imageDataX","imageDataY","imageData","Uint32Array","getImageData","buffer","drawLabel","quadraticCurveTo","circularLabel","drawSector","point","closePath","animate","indexOf","_transition","isAnyEquals","s","AnotherItemOver","AnotherItemLeave","isInsideSector","isInsideSectorClick","onClickEvent","includes","isAnyCollapsing","empty","renderDropdown","currentHover","isAnyHover","contextMenu","renderContextMenu","onContextMenuEvent","dropdown","TooltipValue","format","valuePostfix","innerTitle","isDestroy","requestAnimationFrame","bind","isWithinRadius","getMousePosition","inner","outer","atan2","abs","findIndex","sumBefore","isAngle","calculateSizes","titleOffset","title","Values","shortSide","longestLabel","large","console","warn","enableOther","_other","Modal","Decomposition","toChart","innerWidth","innerHeight","open","splice","guid","Dropdown","Icon","ThreeLines","Export","asPng","asCsv","toTable","CircularData","Renderable","highlightItems","disableInitAnimation","RenderState","Idle","renderTitle","remove","domRect","parentElement","minWidth","isNaN","minHeight","calculateColors","dispatchEvent","CustomEvent","detail","force","randomColor","adjustStep","adjustAmount","clone","canvasPosition","isClick","legendPlace","LegendPlace","Top","Bottom","getLegendHeight","Left","Right","tooltipLines","axisLineHoverColor","yValue","yHeight","columnWidth","seriesToRender","columnsIndex","columnsCount","PlotType","barsIndex","barsCount","Bar","stackingAccumulator","anyHighlight","changeColor","lineType","LineType","Dash","Dotted","Solid","xIndex","yIndex","getTooltipValue","step","unit","pointDuration","now","addMilliseconds","next","prevValue","endPointX","endPointY","mouse","AttentionLine","bottom","right","yMax","minStep","seriesHeight","fillRect","StackingColumn","ceil","PlotSeries","it","isISOString","simple","Tooltip","PlotData","skip","clearRect","drawImage","isContainsBar","xTitle","yTitle","rotate","resetTransform","xYPos","xCounter","trySet","maxLabelWidth","maxCount","renderStep","axisLabelOffset","yCount","count","yCounter","yStep","labelY","labelYAsKey","postfix","shortLabels","countOfTens","number","isBar","createImageBitmap","then","res","putImageData","axisLineColor","xValues","yValues","isDate","tempDate","addDays","yMin","stackingColumns","yMaxWidth","isRight","imageRendering","append","onmousemove","onclick","oncontextmenu","preventDefault","onmouseleave","maxHeight","tooltipCell","contextMenuData","totalSquare","minX","minY","isVertical","remainWidth","remainHeight","cells","isSingle","isLast","j","h1","w1","cell","cellInit","cellIndex","getPrev","E","initAnimationDuration","minSize","rest","gap","isColorVisible","TreeData","table","Table","classList","totals","rows","valuesMap","tableValue","allColumns","header","indexSpaces","tableHeader","columns","vKey","vValue","totalValue","trim","totalColumns","container","div","script","Script","flexGrow","cloneSettings","piece","point1","point3","outerRadius","longSide","leftEmpty","rightEmpty","destinationCanvas","destCtx","saveAs","toDataURL","csv","row","cols","encodeURIComponent","dataURL","href","isText","showSaveFilePicker","suggestedName","types","accept","excludeAcceptAllOption","toBlob","dataURI","byteString","atob","split","mimeString","ArrayBuffer","imageArray","Uint8Array","Blob","fileHandle","createWritable","writableStream","write","download","A","click","Text","toLocaleString","minimumFractionDigits","maximumFractionDigits","toLocaleDateString","size","modal","Dialog","oncancel","ElementNotExist","showModal","closeButton","nextPoint","hideInLegend","getOffsetToCenter","Button","labelWidth","rectX","rectY","circleRadius","rectW","isHover","px","py","PointerEvent","grayScale","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","prototype","days","setDate","getDate","milliseconds","setMilliseconds","getMilliseconds","OCharts","Chart"],"sourceRoot":""}